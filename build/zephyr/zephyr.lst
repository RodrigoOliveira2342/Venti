
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20004400 	.word	0x20004400
   4:	00004d55 	.word	0x00004d55
   8:	00011397 	.word	0x00011397
   c:	00004d0d 	.word	0x00004d0d
  10:	00004d0d 	.word	0x00004d0d
  14:	00004d0d 	.word	0x00004d0d
  18:	00004d0d 	.word	0x00004d0d
	...
  2c:	00004451 	.word	0x00004451
  30:	00004d0d 	.word	0x00004d0d
  34:	00000000 	.word	0x00000000
  38:	000043f9 	.word	0x000043f9
  3c:	000124f1 	.word	0x000124f1

00000040 <_irq_vector_table>:
  40:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  50:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  60:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  70:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  80:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  90:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  a0:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  b0:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  c0:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  d0:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  e0:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..
  f0:	0000453d 0000453d 0000453d 0000453d     =E..=E..=E..=E..

Disassembly of section text:

00000100 <__aeabi_frsub>:
     100:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__addsf3>
     106:	bf00      	nop

00000108 <__aeabi_fsub>:
     108:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000010c <__addsf3>:
     10c:	0042      	lsls	r2, r0, #1
     10e:	bf1f      	itttt	ne
     110:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     114:	ea92 0f03 	teqne	r2, r3
     118:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     11c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     120:	d06a      	beq.n	1f8 <CONFIG_IDLE_STACK_SIZE+0xb8>
     122:	ea4f 6212 	mov.w	r2, r2, lsr #24
     126:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     12a:	bfc1      	itttt	gt
     12c:	18d2      	addgt	r2, r2, r3
     12e:	4041      	eorgt	r1, r0
     130:	4048      	eorgt	r0, r1
     132:	4041      	eorgt	r1, r0
     134:	bfb8      	it	lt
     136:	425b      	neglt	r3, r3
     138:	2b19      	cmp	r3, #25
     13a:	bf88      	it	hi
     13c:	4770      	bxhi	lr
     13e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     142:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     14a:	bf18      	it	ne
     14c:	4240      	negne	r0, r0
     14e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     152:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     156:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     15a:	bf18      	it	ne
     15c:	4249      	negne	r1, r1
     15e:	ea92 0f03 	teq	r2, r3
     162:	d03f      	beq.n	1e4 <CONFIG_IDLE_STACK_SIZE+0xa4>
     164:	f1a2 0201 	sub.w	r2, r2, #1
     168:	fa41 fc03 	asr.w	ip, r1, r3
     16c:	eb10 000c 	adds.w	r0, r0, ip
     170:	f1c3 0320 	rsb	r3, r3, #32
     174:	fa01 f103 	lsl.w	r1, r1, r3
     178:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     17c:	d502      	bpl.n	184 <CONFIG_IDLE_STACK_SIZE+0x44>
     17e:	4249      	negs	r1, r1
     180:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     184:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     188:	d313      	bcc.n	1b2 <CONFIG_IDLE_STACK_SIZE+0x72>
     18a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     18e:	d306      	bcc.n	19e <CONFIG_IDLE_STACK_SIZE+0x5e>
     190:	0840      	lsrs	r0, r0, #1
     192:	ea4f 0131 	mov.w	r1, r1, rrx
     196:	f102 0201 	add.w	r2, r2, #1
     19a:	2afe      	cmp	r2, #254	; 0xfe
     19c:	d251      	bcs.n	242 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x42>
     19e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     1a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     1a6:	bf08      	it	eq
     1a8:	f020 0001 	biceq.w	r0, r0, #1
     1ac:	ea40 0003 	orr.w	r0, r0, r3
     1b0:	4770      	bx	lr
     1b2:	0049      	lsls	r1, r1, #1
     1b4:	eb40 0000 	adc.w	r0, r0, r0
     1b8:	3a01      	subs	r2, #1
     1ba:	bf28      	it	cs
     1bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     1c0:	d2ed      	bcs.n	19e <CONFIG_IDLE_STACK_SIZE+0x5e>
     1c2:	fab0 fc80 	clz	ip, r0
     1c6:	f1ac 0c08 	sub.w	ip, ip, #8
     1ca:	ebb2 020c 	subs.w	r2, r2, ip
     1ce:	fa00 f00c 	lsl.w	r0, r0, ip
     1d2:	bfaa      	itet	ge
     1d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     1d8:	4252      	neglt	r2, r2
     1da:	4318      	orrge	r0, r3
     1dc:	bfbc      	itt	lt
     1de:	40d0      	lsrlt	r0, r2
     1e0:	4318      	orrlt	r0, r3
     1e2:	4770      	bx	lr
     1e4:	f092 0f00 	teq	r2, #0
     1e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1ec:	bf06      	itte	eq
     1ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1f2:	3201      	addeq	r2, #1
     1f4:	3b01      	subne	r3, #1
     1f6:	e7b5      	b.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
     1f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     1fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     200:	bf18      	it	ne
     202:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     206:	d021      	beq.n	24c <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x4c>
     208:	ea92 0f03 	teq	r2, r3
     20c:	d004      	beq.n	218 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x18>
     20e:	f092 0f00 	teq	r2, #0
     212:	bf08      	it	eq
     214:	4608      	moveq	r0, r1
     216:	4770      	bx	lr
     218:	ea90 0f01 	teq	r0, r1
     21c:	bf1c      	itt	ne
     21e:	2000      	movne	r0, #0
     220:	4770      	bxne	lr
     222:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     226:	d104      	bne.n	232 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x32>
     228:	0040      	lsls	r0, r0, #1
     22a:	bf28      	it	cs
     22c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     230:	4770      	bx	lr
     232:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     236:	bf3c      	itt	cc
     238:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     23c:	4770      	bxcc	lr
     23e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     242:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     24a:	4770      	bx	lr
     24c:	ea7f 6222 	mvns.w	r2, r2, asr #24
     250:	bf16      	itet	ne
     252:	4608      	movne	r0, r1
     254:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     258:	4601      	movne	r1, r0
     25a:	0242      	lsls	r2, r0, #9
     25c:	bf06      	itte	eq
     25e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     262:	ea90 0f01 	teqeq	r0, r1
     266:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     26a:	4770      	bx	lr

0000026c <__aeabi_ui2f>:
     26c:	f04f 0300 	mov.w	r3, #0
     270:	e004      	b.n	27c <__aeabi_i2f+0x8>
     272:	bf00      	nop

00000274 <__aeabi_i2f>:
     274:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     278:	bf48      	it	mi
     27a:	4240      	negmi	r0, r0
     27c:	ea5f 0c00 	movs.w	ip, r0
     280:	bf08      	it	eq
     282:	4770      	bxeq	lr
     284:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     288:	4601      	mov	r1, r0
     28a:	f04f 0000 	mov.w	r0, #0
     28e:	e01c      	b.n	2ca <__data_size+0x1>

00000290 <__aeabi_ul2f>:
     290:	ea50 0201 	orrs.w	r2, r0, r1
     294:	bf08      	it	eq
     296:	4770      	bxeq	lr
     298:	f04f 0300 	mov.w	r3, #0
     29c:	e00a      	b.n	2b4 <__aeabi_l2f+0x14>
     29e:	bf00      	nop

000002a0 <__aeabi_l2f>:
     2a0:	ea50 0201 	orrs.w	r2, r0, r1
     2a4:	bf08      	it	eq
     2a6:	4770      	bxeq	lr
     2a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     2ac:	d502      	bpl.n	2b4 <__aeabi_l2f+0x14>
     2ae:	4240      	negs	r0, r0
     2b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2b4:	ea5f 0c01 	movs.w	ip, r1
     2b8:	bf02      	ittt	eq
     2ba:	4684      	moveq	ip, r0
     2bc:	4601      	moveq	r1, r0
     2be:	2000      	moveq	r0, #0
     2c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2c4:	bf08      	it	eq
     2c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2ce:	fabc f28c 	clz	r2, ip
     2d2:	3a08      	subs	r2, #8
     2d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2d8:	db10      	blt.n	2fc <__data_size+0x33>
     2da:	fa01 fc02 	lsl.w	ip, r1, r2
     2de:	4463      	add	r3, ip
     2e0:	fa00 fc02 	lsl.w	ip, r0, r2
     2e4:	f1c2 0220 	rsb	r2, r2, #32
     2e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2ec:	fa20 f202 	lsr.w	r2, r0, r2
     2f0:	eb43 0002 	adc.w	r0, r3, r2
     2f4:	bf08      	it	eq
     2f6:	f020 0001 	biceq.w	r0, r0, #1
     2fa:	4770      	bx	lr
     2fc:	f102 0220 	add.w	r2, r2, #32
     300:	fa01 fc02 	lsl.w	ip, r1, r2
     304:	f1c2 0220 	rsb	r2, r2, #32
     308:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     30c:	fa21 f202 	lsr.w	r2, r1, r2
     310:	eb43 0002 	adc.w	r0, r3, r2
     314:	bf08      	it	eq
     316:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     31a:	4770      	bx	lr

0000031c <__aeabi_f2iz>:
     31c:	ea4f 0240 	mov.w	r2, r0, lsl #1
     320:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     324:	d30f      	bcc.n	346 <__aeabi_f2iz+0x2a>
     326:	f04f 039e 	mov.w	r3, #158	; 0x9e
     32a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     32e:	d90d      	bls.n	34c <__aeabi_f2iz+0x30>
     330:	ea4f 2300 	mov.w	r3, r0, lsl #8
     334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     338:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     33c:	fa23 f002 	lsr.w	r0, r3, r2
     340:	bf18      	it	ne
     342:	4240      	negne	r0, r0
     344:	4770      	bx	lr
     346:	f04f 0000 	mov.w	r0, #0
     34a:	4770      	bx	lr
     34c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     350:	d101      	bne.n	356 <__aeabi_f2iz+0x3a>
     352:	0242      	lsls	r2, r0, #9
     354:	d105      	bne.n	362 <__aeabi_f2iz+0x46>
     356:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     35a:	bf08      	it	eq
     35c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     360:	4770      	bx	lr
     362:	f04f 0000 	mov.w	r0, #0
     366:	4770      	bx	lr

00000368 <__aeabi_uldivmod>:
     368:	b953      	cbnz	r3, 380 <__aeabi_uldivmod+0x18>
     36a:	b94a      	cbnz	r2, 380 <__aeabi_uldivmod+0x18>
     36c:	2900      	cmp	r1, #0
     36e:	bf08      	it	eq
     370:	2800      	cmpeq	r0, #0
     372:	bf1c      	itt	ne
     374:	f04f 31ff 	movne.w	r1, #4294967295
     378:	f04f 30ff 	movne.w	r0, #4294967295
     37c:	f000 b980 	b.w	680 <__aeabi_idiv0>
     380:	f1ad 0c08 	sub.w	ip, sp, #8
     384:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     388:	f000 f81a 	bl	3c0 <__udivmoddi4>
     38c:	f8dd e004 	ldr.w	lr, [sp, #4]
     390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     394:	b004      	add	sp, #16
     396:	4770      	bx	lr

00000398 <__popcountsi2>:
     398:	0843      	lsrs	r3, r0, #1
     39a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     39e:	1ac0      	subs	r0, r0, r3
     3a0:	0883      	lsrs	r3, r0, #2
     3a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     3a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     3aa:	4418      	add	r0, r3
     3ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     3b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     3b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     3b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     3bc:	0e00      	lsrs	r0, r0, #24
     3be:	4770      	bx	lr

000003c0 <__udivmoddi4>:
     3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     3c4:	9e08      	ldr	r6, [sp, #32]
     3c6:	460d      	mov	r5, r1
     3c8:	4604      	mov	r4, r0
     3ca:	468e      	mov	lr, r1
     3cc:	2b00      	cmp	r3, #0
     3ce:	f040 8082 	bne.w	4d6 <CONFIG_FLASH_SIZE+0xd6>
     3d2:	428a      	cmp	r2, r1
     3d4:	4617      	mov	r7, r2
     3d6:	d946      	bls.n	466 <CONFIG_FLASH_SIZE+0x66>
     3d8:	fab2 f282 	clz	r2, r2
     3dc:	b14a      	cbz	r2, 3f2 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xa>
     3de:	f1c2 0120 	rsb	r1, r2, #32
     3e2:	fa05 f302 	lsl.w	r3, r5, r2
     3e6:	fa20 f101 	lsr.w	r1, r0, r1
     3ea:	4097      	lsls	r7, r2
     3ec:	ea41 0e03 	orr.w	lr, r1, r3
     3f0:	4094      	lsls	r4, r2
     3f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
     3f6:	0c23      	lsrs	r3, r4, #16
     3f8:	fbbe fcf8 	udiv	ip, lr, r8
     3fc:	b2b9      	uxth	r1, r7
     3fe:	fb08 ee1c 	mls	lr, r8, ip, lr
     402:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     406:	fb0c f001 	mul.w	r0, ip, r1
     40a:	4298      	cmp	r0, r3
     40c:	d90a      	bls.n	424 <CONFIG_FLASH_SIZE+0x24>
     40e:	18fb      	adds	r3, r7, r3
     410:	f10c 35ff 	add.w	r5, ip, #4294967295
     414:	f080 8116 	bcs.w	644 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15c>
     418:	4298      	cmp	r0, r3
     41a:	f240 8113 	bls.w	644 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x15c>
     41e:	f1ac 0c02 	sub.w	ip, ip, #2
     422:	443b      	add	r3, r7
     424:	1a1b      	subs	r3, r3, r0
     426:	b2a4      	uxth	r4, r4
     428:	fbb3 f0f8 	udiv	r0, r3, r8
     42c:	fb08 3310 	mls	r3, r8, r0, r3
     430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     434:	fb00 f101 	mul.w	r1, r0, r1
     438:	42a1      	cmp	r1, r4
     43a:	d909      	bls.n	450 <CONFIG_FLASH_SIZE+0x50>
     43c:	193c      	adds	r4, r7, r4
     43e:	f100 33ff 	add.w	r3, r0, #4294967295
     442:	f080 8101 	bcs.w	648 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x160>
     446:	42a1      	cmp	r1, r4
     448:	f240 80fe 	bls.w	648 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x160>
     44c:	3802      	subs	r0, #2
     44e:	443c      	add	r4, r7
     450:	1a64      	subs	r4, r4, r1
     452:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     456:	2100      	movs	r1, #0
     458:	b11e      	cbz	r6, 462 <CONFIG_FLASH_SIZE+0x62>
     45a:	40d4      	lsrs	r4, r2
     45c:	2300      	movs	r3, #0
     45e:	e9c6 4300 	strd	r4, r3, [r6]
     462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     466:	b902      	cbnz	r2, 46a <CONFIG_FLASH_SIZE+0x6a>
     468:	deff      	udf	#255	; 0xff
     46a:	fab2 f282 	clz	r2, r2
     46e:	2a00      	cmp	r2, #0
     470:	d14f      	bne.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     472:	1bcb      	subs	r3, r1, r7
     474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     478:	fa1f f887 	uxth.w	r8, r7
     47c:	2101      	movs	r1, #1
     47e:	fbb3 fcfe 	udiv	ip, r3, lr
     482:	0c25      	lsrs	r5, r4, #16
     484:	fb0e 331c 	mls	r3, lr, ip, r3
     488:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48c:	fb08 f30c 	mul.w	r3, r8, ip
     490:	42ab      	cmp	r3, r5
     492:	d907      	bls.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     494:	197d      	adds	r5, r7, r5
     496:	f10c 30ff 	add.w	r0, ip, #4294967295
     49a:	d202      	bcs.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     49c:	42ab      	cmp	r3, r5
     49e:	f200 80e7 	bhi.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     4a2:	4684      	mov	ip, r0
     4a4:	1aed      	subs	r5, r5, r3
     4a6:	b2a3      	uxth	r3, r4
     4a8:	fbb5 f0fe 	udiv	r0, r5, lr
     4ac:	fb0e 5510 	mls	r5, lr, r0, r5
     4b0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     4b4:	fb08 f800 	mul.w	r8, r8, r0
     4b8:	45a0      	cmp	r8, r4
     4ba:	d907      	bls.n	4cc <CONFIG_FLASH_SIZE+0xcc>
     4bc:	193c      	adds	r4, r7, r4
     4be:	f100 33ff 	add.w	r3, r0, #4294967295
     4c2:	d202      	bcs.n	4ca <CONFIG_FLASH_SIZE+0xca>
     4c4:	45a0      	cmp	r8, r4
     4c6:	f200 80d7 	bhi.w	678 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x190>
     4ca:	4618      	mov	r0, r3
     4cc:	eba4 0408 	sub.w	r4, r4, r8
     4d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     4d4:	e7c0      	b.n	458 <CONFIG_FLASH_SIZE+0x58>
     4d6:	428b      	cmp	r3, r1
     4d8:	d908      	bls.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     4da:	2e00      	cmp	r6, #0
     4dc:	f000 80af 	beq.w	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     4e0:	2100      	movs	r1, #0
     4e2:	e9c6 0500 	strd	r0, r5, [r6]
     4e6:	4608      	mov	r0, r1
     4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4ec:	fab3 f183 	clz	r1, r3
     4f0:	2900      	cmp	r1, #0
     4f2:	d14b      	bne.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
     4f4:	42ab      	cmp	r3, r5
     4f6:	d302      	bcc.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
     4f8:	4282      	cmp	r2, r0
     4fa:	f200 80b7 	bhi.w	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     4fe:	1a84      	subs	r4, r0, r2
     500:	eb65 0303 	sbc.w	r3, r5, r3
     504:	2001      	movs	r0, #1
     506:	469e      	mov	lr, r3
     508:	2e00      	cmp	r6, #0
     50a:	d0aa      	beq.n	462 <CONFIG_FLASH_SIZE+0x62>
     50c:	e9c6 4e00 	strd	r4, lr, [r6]
     510:	e7a7      	b.n	462 <CONFIG_FLASH_SIZE+0x62>
     512:	f1c2 0c20 	rsb	ip, r2, #32
     516:	fa01 f302 	lsl.w	r3, r1, r2
     51a:	4097      	lsls	r7, r2
     51c:	fa20 f00c 	lsr.w	r0, r0, ip
     520:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     524:	fa21 fc0c 	lsr.w	ip, r1, ip
     528:	4318      	orrs	r0, r3
     52a:	fbbc f1fe 	udiv	r1, ip, lr
     52e:	0c05      	lsrs	r5, r0, #16
     530:	fb0e cc11 	mls	ip, lr, r1, ip
     534:	fa1f f887 	uxth.w	r8, r7
     538:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     53c:	fb01 f308 	mul.w	r3, r1, r8
     540:	42ab      	cmp	r3, r5
     542:	fa04 f402 	lsl.w	r4, r4, r2
     546:	d909      	bls.n	55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
     548:	197d      	adds	r5, r7, r5
     54a:	f101 3cff 	add.w	ip, r1, #4294967295
     54e:	f080 808b 	bcs.w	668 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x180>
     552:	42ab      	cmp	r3, r5
     554:	f240 8088 	bls.w	668 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x180>
     558:	3902      	subs	r1, #2
     55a:	443d      	add	r5, r7
     55c:	1aeb      	subs	r3, r5, r3
     55e:	b285      	uxth	r5, r0
     560:	fbb3 f0fe 	udiv	r0, r3, lr
     564:	fb0e 3310 	mls	r3, lr, r0, r3
     568:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     56c:	fb00 f308 	mul.w	r3, r0, r8
     570:	42ab      	cmp	r3, r5
     572:	d907      	bls.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     574:	197d      	adds	r5, r7, r5
     576:	f100 3cff 	add.w	ip, r0, #4294967295
     57a:	d271      	bcs.n	660 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x178>
     57c:	42ab      	cmp	r3, r5
     57e:	d96f      	bls.n	660 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x178>
     580:	3802      	subs	r0, #2
     582:	443d      	add	r5, r7
     584:	1aeb      	subs	r3, r5, r3
     586:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     58a:	e778      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     58c:	f1c1 0c20 	rsb	ip, r1, #32
     590:	408b      	lsls	r3, r1
     592:	fa22 f70c 	lsr.w	r7, r2, ip
     596:	431f      	orrs	r7, r3
     598:	fa20 f40c 	lsr.w	r4, r0, ip
     59c:	fa05 f301 	lsl.w	r3, r5, r1
     5a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     5a4:	fa25 f50c 	lsr.w	r5, r5, ip
     5a8:	431c      	orrs	r4, r3
     5aa:	0c23      	lsrs	r3, r4, #16
     5ac:	fbb5 f9fe 	udiv	r9, r5, lr
     5b0:	fa1f f887 	uxth.w	r8, r7
     5b4:	fb0e 5519 	mls	r5, lr, r9, r5
     5b8:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     5bc:	fb09 fa08 	mul.w	sl, r9, r8
     5c0:	45aa      	cmp	sl, r5
     5c2:	fa02 f201 	lsl.w	r2, r2, r1
     5c6:	fa00 f301 	lsl.w	r3, r0, r1
     5ca:	d908      	bls.n	5de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf6>
     5cc:	197d      	adds	r5, r7, r5
     5ce:	f109 30ff 	add.w	r0, r9, #4294967295
     5d2:	d247      	bcs.n	664 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x17c>
     5d4:	45aa      	cmp	sl, r5
     5d6:	d945      	bls.n	664 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x17c>
     5d8:	f1a9 0902 	sub.w	r9, r9, #2
     5dc:	443d      	add	r5, r7
     5de:	eba5 050a 	sub.w	r5, r5, sl
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb5 f0fe 	udiv	r0, r5, lr
     5e8:	fb0e 5510 	mls	r5, lr, r0, r5
     5ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     5f0:	fb00 f808 	mul.w	r8, r0, r8
     5f4:	45a0      	cmp	r8, r4
     5f6:	d907      	bls.n	608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>
     5f8:	193c      	adds	r4, r7, r4
     5fa:	f100 35ff 	add.w	r5, r0, #4294967295
     5fe:	d22d      	bcs.n	65c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x174>
     600:	45a0      	cmp	r8, r4
     602:	d92b      	bls.n	65c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x174>
     604:	3802      	subs	r0, #2
     606:	443c      	add	r4, r7
     608:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     60c:	eba4 0408 	sub.w	r4, r4, r8
     610:	fba0 8902 	umull	r8, r9, r0, r2
     614:	454c      	cmp	r4, r9
     616:	46c6      	mov	lr, r8
     618:	464d      	mov	r5, r9
     61a:	d319      	bcc.n	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
     61c:	d016      	beq.n	64c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x164>
     61e:	b15e      	cbz	r6, 638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>
     620:	ebb3 020e 	subs.w	r2, r3, lr
     624:	eb64 0405 	sbc.w	r4, r4, r5
     628:	fa04 fc0c 	lsl.w	ip, r4, ip
     62c:	40ca      	lsrs	r2, r1
     62e:	ea4c 0202 	orr.w	r2, ip, r2
     632:	40cc      	lsrs	r4, r1
     634:	e9c6 2400 	strd	r2, r4, [r6]
     638:	2100      	movs	r1, #0
     63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     63e:	4631      	mov	r1, r6
     640:	4630      	mov	r0, r6
     642:	e70e      	b.n	462 <CONFIG_FLASH_SIZE+0x62>
     644:	46ac      	mov	ip, r5
     646:	e6ed      	b.n	424 <CONFIG_FLASH_SIZE+0x24>
     648:	4618      	mov	r0, r3
     64a:	e701      	b.n	450 <CONFIG_FLASH_SIZE+0x50>
     64c:	4543      	cmp	r3, r8
     64e:	d2e6      	bcs.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     650:	ebb8 0e02 	subs.w	lr, r8, r2
     654:	eb69 0507 	sbc.w	r5, r9, r7
     658:	3801      	subs	r0, #1
     65a:	e7e0      	b.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     65c:	4628      	mov	r0, r5
     65e:	e7d3      	b.n	608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>
     660:	4660      	mov	r0, ip
     662:	e78f      	b.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     664:	4681      	mov	r9, r0
     666:	e7ba      	b.n	5de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf6>
     668:	4661      	mov	r1, ip
     66a:	e777      	b.n	55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
     66c:	4608      	mov	r0, r1
     66e:	e74b      	b.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     670:	f1ac 0c02 	sub.w	ip, ip, #2
     674:	443d      	add	r5, r7
     676:	e715      	b.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     678:	3802      	subs	r0, #2
     67a:	443c      	add	r4, r7
     67c:	e726      	b.n	4cc <CONFIG_FLASH_SIZE+0xcc>
     67e:	bf00      	nop

00000680 <__aeabi_idiv0>:
     680:	4770      	bx	lr
     682:	bf00      	nop

00000684 <main>:
#include <zephyr.h>
#include  "protocol-usb.h"
#include  "tablesFS.h"

void main(void)
{
     684:	b500      	push	{lr}
     686:	b083      	sub	sp, #12
	configureUSB();
     688:	f000 f824 	bl	6d4 <configureUSB>
	configureLFS();
     68c:	f000 f9f2 	bl	a74 <configureLFS>

	uint32_t lFSC =  cFSTEST2();
     690:	f000 fae2 	bl	c58 <cFSTEST2>
     694:	9001      	str	r0, [sp, #4]
	uint8_t lFSCV[4];
	
	memcpy(lFSCV,&lFSC,4); 
     696:	2204      	movs	r2, #4
     698:	eb0d 0102 	add.w	r1, sp, r2
     69c:	4668      	mov	r0, sp
     69e:	f010 ff5d 	bl	1155c <memcpy>
	SendMsg(lFSCV,4);
     6a2:	2104      	movs	r1, #4
     6a4:	4668      	mov	r0, sp
     6a6:	f000 f877 	bl	798 <SendMsg>
     6aa:	e006      	b.n	6ba <main+0x36>
	
	while(1){
		if(uart_irq_rx_ready(uart_dev)){
			ReadMsg();
     6ac:	f000 f984 	bl	9b8 <ReadMsg>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     6b0:	f640 40cd 	movw	r0, #3277	; 0xccd
     6b4:	2100      	movs	r1, #0
     6b6:	f00e fb8f 	bl	edd8 <z_impl_k_sleep>
		if(uart_irq_rx_ready(uart_dev)){
     6ba:	4b05      	ldr	r3, [pc, #20]	; (6d0 <main+0x4c>)
     6bc:	6818      	ldr	r0, [r3, #0]
 * @retval -ENOTSUP if API is not enabled.
 */
static inline int uart_irq_rx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     6be:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_ready == NULL) {
     6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     6c2:	2b00      	cmp	r3, #0
     6c4:	d0f2      	beq.n	6ac <main+0x28>
		return -ENOSYS;
	}
	return api->irq_rx_ready(dev);
     6c6:	4798      	blx	r3
     6c8:	2800      	cmp	r0, #0
     6ca:	d0f1      	beq.n	6b0 <main+0x2c>
     6cc:	e7ee      	b.n	6ac <main+0x28>
     6ce:	bf00      	nop
     6d0:	20000e5c 	.word	0x20000e5c

000006d4 <configureUSB>:
		}
    }
}


void configureUSB(){
     6d4:	b510      	push	{r4, lr}
     6d6:	b082      	sub	sp, #8
    const struct device *dev;
	dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
	uart_dev = dev;
     6d8:	482a      	ldr	r0, [pc, #168]	; (784 <configureUSB+0xb0>)
     6da:	4b2b      	ldr	r3, [pc, #172]	; (788 <configureUSB+0xb4>)
     6dc:	6018      	str	r0, [r3, #0]
	uint32_t baudrate, dtr = 0U;
     6de:	2300      	movs	r3, #0
     6e0:	9300      	str	r3, [sp, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     6e2:	f013 f9a5 	bl	13a30 <z_device_ready>
     6e6:	b118      	cbz	r0, 6f0 <configureUSB+0x1c>
	int ret;

	if (!device_is_ready(dev)) {
		return;
	}
	ret = usb_enable(NULL);
     6e8:	2000      	movs	r0, #0
     6ea:	f002 fcbb 	bl	3064 <usb_enable>
	if (ret != 0) {
     6ee:	b108      	cbz	r0, 6f4 <configureUSB+0x20>
	ret = uart_line_ctrl_get(dev, UART_LINE_CTRL_BAUD_RATE, &baudrate);
	// uart_irq_callback_set(dev, interrupt_handler); // MOD
	/* Enable rx interrupts */
	uart_irq_rx_enable(dev);
	uart_irq_tx_enable(dev); // MOD
}
     6f0:	b002      	add	sp, #8
     6f2:	bd10      	pop	{r4, pc}
				 uint32_t size,
				 void *data)
{
	__ASSERT(size < RING_BUFFER_MAX_SIZE, RING_BUFFER_SIZE_ASSERT_MSG);

	memset(buf, 0, sizeof(struct ring_buf));
     6f4:	4c25      	ldr	r4, [pc, #148]	; (78c <configureUSB+0xb8>)
     6f6:	221c      	movs	r2, #28
     6f8:	2100      	movs	r1, #0
     6fa:	4620      	mov	r0, r4
     6fc:	f010 ff52 	bl	115a4 <memset>
	buf->size = size;
     700:	f44f 6380 	mov.w	r3, #1024	; 0x400
     704:	6123      	str	r3, [r4, #16]
	buf->buf.buf32 = (uint32_t *)data;
     706:	4b22      	ldr	r3, [pc, #136]	; (790 <configureUSB+0xbc>)
     708:	6163      	str	r3, [r4, #20]
	if (is_power_of_two(size)) {
		buf->mask = size - 1U;
     70a:	f240 33ff 	movw	r3, #1023	; 0x3ff
     70e:	61a3      	str	r3, [r4, #24]

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     710:	4b1c      	ldr	r3, [pc, #112]	; (784 <configureUSB+0xb0>)
     712:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     716:	b11b      	cbz	r3, 720 <configureUSB+0x4c>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     718:	466a      	mov	r2, sp
     71a:	2104      	movs	r1, #4
     71c:	4819      	ldr	r0, [pc, #100]	; (784 <configureUSB+0xb0>)
     71e:	4798      	blx	r3
		if (dtr) {
     720:	9b00      	ldr	r3, [sp, #0]
     722:	b92b      	cbnz	r3, 730 <configureUSB+0x5c>
     724:	f640 40cd 	movw	r0, #3277	; 0xccd
     728:	2100      	movs	r1, #0
     72a:	f00e fb55 	bl	edd8 <z_impl_k_sleep>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
     72e:	e7ef      	b.n	710 <configureUSB+0x3c>
	const struct uart_driver_api *api =
     730:	4b14      	ldr	r3, [pc, #80]	; (784 <configureUSB+0xb0>)
     732:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
     734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     736:	b11b      	cbz	r3, 740 <configureUSB+0x6c>
	return api->line_ctrl_set(dev, ctrl, val);
     738:	2201      	movs	r2, #1
     73a:	2108      	movs	r1, #8
     73c:	4811      	ldr	r0, [pc, #68]	; (784 <configureUSB+0xb0>)
     73e:	4798      	blx	r3
	const struct uart_driver_api *api =
     740:	4b10      	ldr	r3, [pc, #64]	; (784 <configureUSB+0xb0>)
     742:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
     744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     746:	b11b      	cbz	r3, 750 <configureUSB+0x7c>
	return api->line_ctrl_set(dev, ctrl, val);
     748:	2201      	movs	r2, #1
     74a:	2110      	movs	r1, #16
     74c:	480d      	ldr	r0, [pc, #52]	; (784 <configureUSB+0xb0>)
     74e:	4798      	blx	r3
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
     750:	4810      	ldr	r0, [pc, #64]	; (794 <configureUSB+0xc0>)
     752:	f013 fdaa 	bl	142aa <z_impl_k_busy_wait>
	const struct uart_driver_api *api =
     756:	4b0b      	ldr	r3, [pc, #44]	; (784 <configureUSB+0xb0>)
     758:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_get == NULL) {
     75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     75c:	b11b      	cbz	r3, 766 <configureUSB+0x92>
	return api->line_ctrl_get(dev, ctrl, val);
     75e:	aa01      	add	r2, sp, #4
     760:	2101      	movs	r1, #1
     762:	4808      	ldr	r0, [pc, #32]	; (784 <configureUSB+0xb0>)
     764:	4798      	blx	r3
	const struct uart_driver_api *api =
     766:	4b07      	ldr	r3, [pc, #28]	; (784 <configureUSB+0xb0>)
     768:	689b      	ldr	r3, [r3, #8]
	if (api->irq_rx_enable != NULL) {
     76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     76c:	b10b      	cbz	r3, 772 <configureUSB+0x9e>
		api->irq_rx_enable(dev);
     76e:	4805      	ldr	r0, [pc, #20]	; (784 <configureUSB+0xb0>)
     770:	4798      	blx	r3
	const struct uart_driver_api *api =
     772:	4b04      	ldr	r3, [pc, #16]	; (784 <configureUSB+0xb0>)
     774:	689b      	ldr	r3, [r3, #8]
	if (api->irq_tx_enable != NULL) {
     776:	69db      	ldr	r3, [r3, #28]
     778:	2b00      	cmp	r3, #0
     77a:	d0b9      	beq.n	6f0 <configureUSB+0x1c>
		api->irq_tx_enable(dev);
     77c:	4801      	ldr	r0, [pc, #4]	; (784 <configureUSB+0xb0>)
     77e:	4798      	blx	r3
     780:	e7b6      	b.n	6f0 <configureUSB+0x1c>
     782:	bf00      	nop
     784:	00014460 	.word	0x00014460
     788:	20000e5c 	.word	0x20000e5c
     78c:	20000e40 	.word	0x20000e40
     790:	20000a40 	.word	0x20000a40
     794:	000f4240 	.word	0x000f4240

00000798 <SendMsg>:
 *
 * @param msg1, recebe o ponteiro dos dados que serão enviados
 *
 * @param len, recebe o tamanho dos dados em bytes.
 */
void SendMsg(char*msg1,int len){
     798:	b510      	push	{r4, lr}
     79a:	b0a0      	sub	sp, #128	; 0x80
     79c:	460c      	mov	r4, r1
	  char msg3[128];
	  EncapsulationMsgs(msg1,msg3,len);
     79e:	460a      	mov	r2, r1
     7a0:	4669      	mov	r1, sp
     7a2:	f00f f80b 	bl	f7bc <EncapsulationMsgs>
	  uart_fifo_fill(uart_dev, msg3, len + 4);
     7a6:	4b05      	ldr	r3, [pc, #20]	; (7bc <SendMsg+0x24>)
     7a8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     7aa:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_fill == NULL) {
     7ac:	695b      	ldr	r3, [r3, #20]
     7ae:	b113      	cbz	r3, 7b6 <SendMsg+0x1e>
     7b0:	1d22      	adds	r2, r4, #4
	return api->fifo_fill(dev, tx_data, size);
     7b2:	4669      	mov	r1, sp
     7b4:	4798      	blx	r3
}
     7b6:	b020      	add	sp, #128	; 0x80
     7b8:	bd10      	pop	{r4, pc}
     7ba:	bf00      	nop
     7bc:	20000e5c 	.word	0x20000e5c

000007c0 <CMD1>:
		lenBufferACK = 0;
	}
}

//testes
void CMD1(char *data){
     7c0:	b500      	push	{lr}
     7c2:	b083      	sub	sp, #12
	char MSG[] = {0x40,data[1],data[2]};
     7c4:	2340      	movs	r3, #64	; 0x40
     7c6:	f88d 3004 	strb.w	r3, [sp, #4]
     7ca:	7843      	ldrb	r3, [r0, #1]
     7cc:	f88d 3005 	strb.w	r3, [sp, #5]
     7d0:	7883      	ldrb	r3, [r0, #2]
     7d2:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     7d6:	2103      	movs	r1, #3
     7d8:	a801      	add	r0, sp, #4
     7da:	f7ff ffdd 	bl	798 <SendMsg>
    lenBufferACK = sizeof(MSG);
     7de:	2203      	movs	r2, #3
     7e0:	4b04      	ldr	r3, [pc, #16]	; (7f4 <CMD1+0x34>)
     7e2:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     7e4:	a901      	add	r1, sp, #4
     7e6:	4804      	ldr	r0, [pc, #16]	; (7f8 <CMD1+0x38>)
     7e8:	f010 feb8 	bl	1155c <memcpy>
}
     7ec:	b003      	add	sp, #12
     7ee:	f85d fb04 	ldr.w	pc, [sp], #4
     7f2:	bf00      	nop
     7f4:	20002ed4 	.word	0x20002ed4
     7f8:	200009c0 	.word	0x200009c0

000007fc <CMD2>:

void CMD2(char *data){
     7fc:	b500      	push	{lr}
     7fe:	b083      	sub	sp, #12
	char MSG[] = {0x50,data[1],data[2]};
     800:	2350      	movs	r3, #80	; 0x50
     802:	f88d 3004 	strb.w	r3, [sp, #4]
     806:	7843      	ldrb	r3, [r0, #1]
     808:	f88d 3005 	strb.w	r3, [sp, #5]
     80c:	7883      	ldrb	r3, [r0, #2]
     80e:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     812:	2103      	movs	r1, #3
     814:	a801      	add	r0, sp, #4
     816:	f7ff ffbf 	bl	798 <SendMsg>
    lenBufferACK = sizeof(MSG);
     81a:	2203      	movs	r2, #3
     81c:	4b04      	ldr	r3, [pc, #16]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     81e:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     820:	a901      	add	r1, sp, #4
     822:	4804      	ldr	r0, [pc, #16]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     824:	f010 fe9a 	bl	1155c <memcpy>
}
     828:	b003      	add	sp, #12
     82a:	f85d fb04 	ldr.w	pc, [sp], #4
     82e:	bf00      	nop
     830:	20002ed4 	.word	0x20002ed4
     834:	200009c0 	.word	0x200009c0

00000838 <CMD3>:

void CMD3(char *data){
     838:	b500      	push	{lr}
     83a:	b083      	sub	sp, #12
	char MSG[] = {0x60,data[1],data[2]};
     83c:	2360      	movs	r3, #96	; 0x60
     83e:	f88d 3004 	strb.w	r3, [sp, #4]
     842:	7843      	ldrb	r3, [r0, #1]
     844:	f88d 3005 	strb.w	r3, [sp, #5]
     848:	7883      	ldrb	r3, [r0, #2]
     84a:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     84e:	2103      	movs	r1, #3
     850:	a801      	add	r0, sp, #4
     852:	f7ff ffa1 	bl	798 <SendMsg>
    lenBufferACK = sizeof(MSG);
     856:	2203      	movs	r2, #3
     858:	4b04      	ldr	r3, [pc, #16]	; (86c <CMD3+0x34>)
     85a:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     85c:	a901      	add	r1, sp, #4
     85e:	4804      	ldr	r0, [pc, #16]	; (870 <CMD3+0x38>)
     860:	f010 fe7c 	bl	1155c <memcpy>
}
     864:	b003      	add	sp, #12
     866:	f85d fb04 	ldr.w	pc, [sp], #4
     86a:	bf00      	nop
     86c:	20002ed4 	.word	0x20002ed4
     870:	200009c0 	.word	0x200009c0

00000874 <CMD4>:

// Zerar os transdutores
void CMD4(char *data){
     874:	b500      	push	{lr}
     876:	b083      	sub	sp, #12
	char MSG[] = {0x65,data[1],data[2]};
     878:	2365      	movs	r3, #101	; 0x65
     87a:	f88d 3004 	strb.w	r3, [sp, #4]
     87e:	7843      	ldrb	r3, [r0, #1]
     880:	f88d 3005 	strb.w	r3, [sp, #5]
     884:	7883      	ldrb	r3, [r0, #2]
     886:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     88a:	2103      	movs	r1, #3
     88c:	a801      	add	r0, sp, #4
     88e:	f7ff ff83 	bl	798 <SendMsg>
    lenBufferACK = sizeof(MSG);
     892:	2203      	movs	r2, #3
     894:	4b04      	ldr	r3, [pc, #16]	; (8a8 <CMD4+0x34>)
     896:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     898:	a901      	add	r1, sp, #4
     89a:	4804      	ldr	r0, [pc, #16]	; (8ac <CMD4+0x38>)
     89c:	f010 fe5e 	bl	1155c <memcpy>

}
     8a0:	b003      	add	sp, #12
     8a2:	f85d fb04 	ldr.w	pc, [sp], #4
     8a6:	bf00      	nop
     8a8:	20002ed4 	.word	0x20002ed4
     8ac:	200009c0 	.word	0x200009c0

000008b0 <CMD5>:


void CMD5(char *data){
     8b0:	b500      	push	{lr}
     8b2:	b083      	sub	sp, #12
	char MSG[] = {0x70,data[1],data[2]};
     8b4:	2370      	movs	r3, #112	; 0x70
     8b6:	f88d 3004 	strb.w	r3, [sp, #4]
     8ba:	7843      	ldrb	r3, [r0, #1]
     8bc:	f88d 3005 	strb.w	r3, [sp, #5]
     8c0:	7883      	ldrb	r3, [r0, #2]
     8c2:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     8c6:	2103      	movs	r1, #3
     8c8:	a801      	add	r0, sp, #4
     8ca:	f7ff ff65 	bl	798 <SendMsg>
    lenBufferACK = sizeof(MSG);
     8ce:	2203      	movs	r2, #3
     8d0:	4b04      	ldr	r3, [pc, #16]	; (8e4 <CMD5+0x34>)
     8d2:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     8d4:	a901      	add	r1, sp, #4
     8d6:	4804      	ldr	r0, [pc, #16]	; (8e8 <CMD5+0x38>)
     8d8:	f010 fe40 	bl	1155c <memcpy>
}
     8dc:	b003      	add	sp, #12
     8de:	f85d fb04 	ldr.w	pc, [sp], #4
     8e2:	bf00      	nop
     8e4:	20002ed4 	.word	0x20002ed4
     8e8:	200009c0 	.word	0x200009c0

000008ec <CMD6>:

void CMD6(char *data){
     8ec:	b500      	push	{lr}
     8ee:	b083      	sub	sp, #12
	char MSG[] = {0x80,data[1],data[2]};
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	f88d 3004 	strb.w	r3, [sp, #4]
     8f6:	7843      	ldrb	r3, [r0, #1]
     8f8:	f88d 3005 	strb.w	r3, [sp, #5]
     8fc:	7883      	ldrb	r3, [r0, #2]
     8fe:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     902:	2103      	movs	r1, #3
     904:	a801      	add	r0, sp, #4
     906:	f7ff ff47 	bl	798 <SendMsg>
    lenBufferACK = sizeof(MSG);
     90a:	2203      	movs	r2, #3
     90c:	4b04      	ldr	r3, [pc, #16]	; (920 <CMD6+0x34>)
     90e:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     910:	a901      	add	r1, sp, #4
     912:	4804      	ldr	r0, [pc, #16]	; (924 <CMD6+0x38>)
     914:	f010 fe22 	bl	1155c <memcpy>
     918:	b003      	add	sp, #12
     91a:	f85d fb04 	ldr.w	pc, [sp], #4
     91e:	bf00      	nop
     920:	20002ed4 	.word	0x20002ed4
     924:	200009c0 	.word	0x200009c0

00000928 <ProceduresMsg>:
void ProceduresMsg(char *data) {
     928:	b510      	push	{r4, lr}
     92a:	b082      	sub	sp, #8
	char NAKMSG[] = { 0x15, data[1], data[1] };
     92c:	2315      	movs	r3, #21
     92e:	f88d 3004 	strb.w	r3, [sp, #4]
     932:	7843      	ldrb	r3, [r0, #1]
     934:	f88d 3005 	strb.w	r3, [sp, #5]
     938:	461a      	mov	r2, r3
     93a:	f88d 3006 	strb.w	r3, [sp, #6]
	switch (data[0]) {
     93e:	7803      	ldrb	r3, [r0, #0]
     940:	2b20      	cmp	r3, #32
     942:	d022      	beq.n	98a <ProceduresMsg+0x62>
     944:	d80a      	bhi.n	95c <ProceduresMsg+0x34>
     946:	2b06      	cmp	r3, #6
     948:	d021      	beq.n	98e <ProceduresMsg+0x66>
     94a:	2b15      	cmp	r3, #21
     94c:	d124      	bne.n	998 <ProceduresMsg+0x70>
		if (lenBufferACK != 0)
     94e:	4b16      	ldr	r3, [pc, #88]	; (9a8 <ProceduresMsg+0x80>)
     950:	781b      	ldrb	r3, [r3, #0]
     952:	b1fb      	cbz	r3, 994 <ProceduresMsg+0x6c>
			ProceduresMsg(bufferACK);
     954:	4815      	ldr	r0, [pc, #84]	; (9ac <ProceduresMsg+0x84>)
     956:	f7ff ffe7 	bl	928 <ProceduresMsg>
     95a:	e01b      	b.n	994 <ProceduresMsg+0x6c>
	switch (data[0]) {
     95c:	2b40      	cmp	r3, #64	; 0x40
     95e:	d11b      	bne.n	998 <ProceduresMsg+0x70>
		if (lenBufferACK != 0)
     960:	4b11      	ldr	r3, [pc, #68]	; (9a8 <ProceduresMsg+0x80>)
     962:	7819      	ldrb	r1, [r3, #0]
     964:	b1b1      	cbz	r1, 994 <ProceduresMsg+0x6c>
			SendMsg(bufferACK,lenBufferACK);
     966:	4811      	ldr	r0, [pc, #68]	; (9ac <ProceduresMsg+0x84>)
     968:	f7ff ff16 	bl	798 <SendMsg>
     96c:	e012      	b.n	994 <ProceduresMsg+0x6c>
		for (uint8_t f = 0; f < 5; f++) {
     96e:	3301      	adds	r3, #1
     970:	b2db      	uxtb	r3, r3
     972:	2b04      	cmp	r3, #4
     974:	d80e      	bhi.n	994 <ProceduresMsg+0x6c>
			if (data[1] == idCMD[f]) {
     976:	461c      	mov	r4, r3
     978:	490d      	ldr	r1, [pc, #52]	; (9b0 <ProceduresMsg+0x88>)
     97a:	5cc9      	ldrb	r1, [r1, r3]
     97c:	428a      	cmp	r2, r1
     97e:	d1f6      	bne.n	96e <ProceduresMsg+0x46>
				FUNC[f](data);
     980:	4b0c      	ldr	r3, [pc, #48]	; (9b4 <ProceduresMsg+0x8c>)
     982:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     986:	4798      	blx	r3
				break;
     988:	e004      	b.n	994 <ProceduresMsg+0x6c>
	switch (data[0]) {
     98a:	2300      	movs	r3, #0
     98c:	e7f1      	b.n	972 <ProceduresMsg+0x4a>
		lenBufferACK = 0;
     98e:	4b06      	ldr	r3, [pc, #24]	; (9a8 <ProceduresMsg+0x80>)
     990:	2200      	movs	r2, #0
     992:	701a      	strb	r2, [r3, #0]
}
     994:	b002      	add	sp, #8
     996:	bd10      	pop	{r4, pc}
		SendMsg(NAKMSG, 3);
     998:	2103      	movs	r1, #3
     99a:	a801      	add	r0, sp, #4
     99c:	f7ff fefc 	bl	798 <SendMsg>
		lenBufferACK = 0;
     9a0:	4b01      	ldr	r3, [pc, #4]	; (9a8 <ProceduresMsg+0x80>)
     9a2:	2200      	movs	r2, #0
     9a4:	701a      	strb	r2, [r3, #0]
}
     9a6:	e7f5      	b.n	994 <ProceduresMsg+0x6c>
     9a8:	20002ed4 	.word	0x20002ed4
     9ac:	200009c0 	.word	0x200009c0
     9b0:	000147d0 	.word	0x000147d0
     9b4:	000147b8 	.word	0x000147b8

000009b8 <ReadMsg>:
void ReadMsg(){
     9b8:	b530      	push	{r4, r5, lr}
     9ba:	b097      	sub	sp, #92	; 0x5c
	size_t len = MIN(ring_buf_space_get(&ringbuf),
     9bc:	482a      	ldr	r0, [pc, #168]	; (a68 <ReadMsg+0xb0>)
     9be:	f00f fd66 	bl	1048e <ring_buf_space_get>
     9c2:	283f      	cmp	r0, #63	; 0x3f
     9c4:	d90e      	bls.n	9e4 <ReadMsg+0x2c>
     9c6:	2240      	movs	r2, #64	; 0x40
	rb_len = uart_fifo_read(uart_dev, buffer, len);
     9c8:	4b28      	ldr	r3, [pc, #160]	; (a6c <ReadMsg+0xb4>)
     9ca:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     9cc:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
     9ce:	699b      	ldr	r3, [r3, #24]
     9d0:	b16b      	cbz	r3, 9ee <ReadMsg+0x36>
	return api->fifo_read(dev, rx_data, size);
     9d2:	a906      	add	r1, sp, #24
     9d4:	4798      	blx	r3
     9d6:	4604      	mov	r4, r0
	if(buffer[0]== 0x7E && buffer[rb_len-1] == 0xFF && rb_len >6){
     9d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
     9dc:	2b7e      	cmp	r3, #126	; 0x7e
     9de:	d009      	beq.n	9f4 <ReadMsg+0x3c>
}
     9e0:	b017      	add	sp, #92	; 0x5c
     9e2:	bd30      	pop	{r4, r5, pc}
	size_t len = MIN(ring_buf_space_get(&ringbuf),
     9e4:	4820      	ldr	r0, [pc, #128]	; (a68 <ReadMsg+0xb0>)
     9e6:	f00f fd52 	bl	1048e <ring_buf_space_get>
     9ea:	4602      	mov	r2, r0
     9ec:	e7ec      	b.n	9c8 <ReadMsg+0x10>
		return -ENOSYS;
     9ee:	f06f 0457 	mvn.w	r4, #87	; 0x57
     9f2:	e7f1      	b.n	9d8 <ReadMsg+0x20>
	if(buffer[0]== 0x7E && buffer[rb_len-1] == 0xFF && rb_len >6){
     9f4:	1e63      	subs	r3, r4, #1
     9f6:	aa16      	add	r2, sp, #88	; 0x58
     9f8:	4413      	add	r3, r2
     9fa:	f813 3c40 	ldrb.w	r3, [r3, #-64]
     9fe:	2bff      	cmp	r3, #255	; 0xff
     a00:	d1ee      	bne.n	9e0 <ReadMsg+0x28>
     a02:	2c06      	cmp	r4, #6
     a04:	ddec      	ble.n	9e0 <ReadMsg+0x28>
		memcpy(commandAPayload,&buffer[1],rb_len -4);
     a06:	1f25      	subs	r5, r4, #4
     a08:	462a      	mov	r2, r5
     a0a:	f10d 0119 	add.w	r1, sp, #25
     a0e:	a802      	add	r0, sp, #8
     a10:	f010 fda4 	bl	1155c <memcpy>
		memcpy(crc,&buffer[rb_len-3],2);
     a14:	1ee1      	subs	r1, r4, #3
     a16:	2202      	movs	r2, #2
     a18:	ab06      	add	r3, sp, #24
     a1a:	4419      	add	r1, r3
     a1c:	a801      	add	r0, sp, #4
     a1e:	f010 fd9d 	bl	1155c <memcpy>
		if( crc16calc(commandAPayload,rb_len -4 ) == (crc[0]<<8 | crc[1])){
     a22:	4629      	mov	r1, r5
     a24:	a802      	add	r0, sp, #8
     a26:	f00e feab 	bl	f780 <crc16calc>
     a2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
     a2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
     a32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     a36:	4298      	cmp	r0, r3
     a38:	d011      	beq.n	a5e <ReadMsg+0xa6>
			char NAKMSG[] = {NACK,commandAPayload[1],0x0A};
     a3a:	2315      	movs	r3, #21
     a3c:	f88d 3000 	strb.w	r3, [sp]
     a40:	f89d 3009 	ldrb.w	r3, [sp, #9]
     a44:	f88d 3001 	strb.w	r3, [sp, #1]
     a48:	230a      	movs	r3, #10
     a4a:	f88d 3002 	strb.w	r3, [sp, #2]
			SendMsg(NAKMSG,3);
     a4e:	2103      	movs	r1, #3
     a50:	4668      	mov	r0, sp
     a52:	f7ff fea1 	bl	798 <SendMsg>
			lenBufferACK = 0;
     a56:	4b06      	ldr	r3, [pc, #24]	; (a70 <ReadMsg+0xb8>)
     a58:	2200      	movs	r2, #0
     a5a:	701a      	strb	r2, [r3, #0]
}
     a5c:	e7c0      	b.n	9e0 <ReadMsg+0x28>
			ProceduresMsg(commandAPayload);
     a5e:	a802      	add	r0, sp, #8
     a60:	f7ff ff62 	bl	928 <ProceduresMsg>
     a64:	e7bc      	b.n	9e0 <ReadMsg+0x28>
     a66:	bf00      	nop
     a68:	20000e40 	.word	0x20000e40
     a6c:	20000e5c 	.word	0x20000e5c
     a70:	20002ed4 	.word	0x20002ed4

00000a74 <configureLFS>:
float tabela_SPD[43]={0}; 
float tabela_FIO2[2]={0};
float offset_LPS[1] = {0};

void configureLFS(void)
{
     a74:	b570      	push	{r4, r5, r6, lr}
     a76:	b086      	sub	sp, #24
		&FS_FSTAB_ENTRY(PARTITION_NODE)
#else
		&lfs_storage_mnt
#endif
		;
	unsigned int id = (uintptr_t)mp->storage_dev;
     a78:	4c1c      	ldr	r4, [pc, #112]	; (aec <configureLFS+0x78>)
     a7a:	6965      	ldr	r5, [r4, #20]

	struct fs_statvfs sbuf;
	const struct flash_area *pfa;
	int rc;

	snprintf(fnameLPS, sizeof(fnameLPS), "%s/boot_count", mp->mnt_point);
     a7c:	68e3      	ldr	r3, [r4, #12]
     a7e:	4a1c      	ldr	r2, [pc, #112]	; (af0 <configureLFS+0x7c>)
     a80:	21ff      	movs	r1, #255	; 0xff
     a82:	481c      	ldr	r0, [pc, #112]	; (af4 <configureLFS+0x80>)
     a84:	f004 faec 	bl	5060 <snprintf>
	snprintf(fnameHSC, sizeof(fnameHSC), "%s/boot_count2", mp->mnt_point);
     a88:	68e3      	ldr	r3, [r4, #12]
     a8a:	4a1b      	ldr	r2, [pc, #108]	; (af8 <configureLFS+0x84>)
     a8c:	21ff      	movs	r1, #255	; 0xff
     a8e:	481b      	ldr	r0, [pc, #108]	; (afc <configureLFS+0x88>)
     a90:	f004 fae6 	bl	5060 <snprintf>

	rc = flash_area_open(id, &pfa);
     a94:	a901      	add	r1, sp, #4
     a96:	b2e8      	uxtb	r0, r5
     a98:	f003 fa34 	bl	3f04 <flash_area_open>
	if (rc < 0)return;
     a9c:	2800      	cmp	r0, #0
     a9e:	db22      	blt.n	ae6 <configureLFS+0x72>
	/* Optional wipe flash contents */
	if (IS_ENABLED(CONFIG_APP_WIPE_STORAGE)) {
		rc = flash_area_erase(pfa, 0, pfa->fa_size);
	}

	flash_area_close(pfa);
     aa0:	9801      	ldr	r0, [sp, #4]
     aa2:	f010 fbd3 	bl	1124c <flash_area_close>

	/* Do not mount if auto-mount has been enabled */
#if !DT_NODE_EXISTS(PARTITION_NODE) ||						\
	!(FSTAB_ENTRY_DT_MOUNT_FLAGS(PARTITION_NODE) & FS_MOUNT_FLAG_AUTOMOUNT)
	rc = fs_mount(mp);
     aa6:	4620      	mov	r0, r4
     aa8:	f004 fd96 	bl	55d8 <fs_mount>
	if (rc < 0) {
     aac:	2800      	cmp	r0, #0
     aae:	db1a      	blt.n	ae6 <configureLFS+0x72>
	// printk("%s mount: %d\n", mp->mnt_point, rc);
#else
	// printk("%s automounted\n", mp->mnt_point);
#endif

	rc = fs_statvfs(mp->mnt_point, &sbuf);
     ab0:	a902      	add	r1, sp, #8
     ab2:	68e0      	ldr	r0, [r4, #12]
     ab4:	f004 fd30 	bl	5518 <fs_statvfs>
	fREF = mp;
     ab8:	4b11      	ldr	r3, [pc, #68]	; (b00 <configureLFS+0x8c>)
     aba:	601c      	str	r4, [r3, #0]
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
     abc:	4b11      	ldr	r3, [pc, #68]	; (b04 <configureLFS+0x90>)
     abe:	2400      	movs	r4, #0
     ac0:	601c      	str	r4, [r3, #0]
     ac2:	605c      	str	r4, [r3, #4]
     ac4:	609c      	str	r4, [r3, #8]

	fs_file_t_init(&fLPS);

	flagfiles[0] = fs_stat(fnameLPS, &dirent);
     ac6:	4e10      	ldr	r6, [pc, #64]	; (b08 <configureLFS+0x94>)
     ac8:	4631      	mov	r1, r6
     aca:	480a      	ldr	r0, [pc, #40]	; (af4 <configureLFS+0x80>)
     acc:	f004 fcbc 	bl	5448 <fs_stat>
     ad0:	4d0e      	ldr	r5, [pc, #56]	; (b0c <configureLFS+0x98>)
     ad2:	6028      	str	r0, [r5, #0]
     ad4:	4b0e      	ldr	r3, [pc, #56]	; (b10 <configureLFS+0x9c>)
     ad6:	601c      	str	r4, [r3, #0]
     ad8:	605c      	str	r4, [r3, #4]
     ada:	609c      	str	r4, [r3, #8]

	fs_file_t_init(&fHSC);

	flagfiles[1] = fs_stat(fnameHSC, &dirent);
     adc:	4631      	mov	r1, r6
     ade:	4807      	ldr	r0, [pc, #28]	; (afc <configureLFS+0x88>)
     ae0:	f004 fcb2 	bl	5448 <fs_stat>
     ae4:	6068      	str	r0, [r5, #4]

}
     ae6:	b006      	add	sp, #24
     ae8:	bd70      	pop	{r4, r5, r6, pc}
     aea:	bf00      	nop
     aec:	20000000 	.word	0x20000000
     af0:	000147d8 	.word	0x000147d8
     af4:	200011ac 	.word	0x200011ac
     af8:	000147e8 	.word	0x000147e8
     afc:	200010ac 	.word	0x200010ac
     b00:	20000f8c 	.word	0x20000f8c
     b04:	20000f80 	.word	0x20000f80
     b08:	20000e60 	.word	0x20000e60
     b0c:	20000f9c 	.word	0x20000f9c
     b10:	20000f74 	.word	0x20000f74

00000b14 <savedata>:

void savedata(int tipo){
     b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *fname;
	int len = 0;
	float *data;
	int rc;
	
	switch(tipo){
     b16:	2803      	cmp	r0, #3
     b18:	d82d      	bhi.n	b76 <savedata+0x62>
     b1a:	e8df f000 	tbb	[pc, r0]
     b1e:	1602      	.short	0x1602
     b20:	110c      	.short	0x110c
			fname = fnameHSC;
			len = 43;
			data = tabela_HSC;
			break;
		case 2:
			file = &fSDP;
     b22:	4f15      	ldr	r7, [pc, #84]	; (b78 <savedata+0x64>)
     b24:	2601      	movs	r6, #1
     b26:	4915      	ldr	r1, [pc, #84]	; (b7c <savedata+0x68>)
     b28:	4d15      	ldr	r5, [pc, #84]	; (b80 <savedata+0x6c>)
			data = tabela_FIO2;
			break;
		default:
			return;
	}
	rc = fs_open(file, fname, FS_O_CREATE | FS_O_RDWR);
     b2a:	2213      	movs	r2, #19
     b2c:	4628      	mov	r0, r5
     b2e:	f004 fb63 	bl	51f8 <fs_open>
	for(int i=0;i<len;i++){
     b32:	2400      	movs	r4, #0
     b34:	e015      	b.n	b62 <savedata+0x4e>
			data = tabela_SPD;
     b36:	4f13      	ldr	r7, [pc, #76]	; (b84 <savedata+0x70>)
			len = 43;
     b38:	262b      	movs	r6, #43	; 0x2b
			fname = fnameSDP;
     b3a:	4913      	ldr	r1, [pc, #76]	; (b88 <savedata+0x74>)
			file = &fSDP;
     b3c:	4d13      	ldr	r5, [pc, #76]	; (b8c <savedata+0x78>)
			break;
     b3e:	e7f4      	b.n	b2a <savedata+0x16>
			data = tabela_FIO2;
     b40:	4f13      	ldr	r7, [pc, #76]	; (b90 <savedata+0x7c>)
			len = 2;
     b42:	2602      	movs	r6, #2
			fname = fnameFIO2;
     b44:	4913      	ldr	r1, [pc, #76]	; (b94 <savedata+0x80>)
			file = &fFIO2;
     b46:	4d14      	ldr	r5, [pc, #80]	; (b98 <savedata+0x84>)
			break;
     b48:	e7ef      	b.n	b2a <savedata+0x16>
			data = tabela_HSC;
     b4a:	4f14      	ldr	r7, [pc, #80]	; (b9c <savedata+0x88>)
			len = 43;
     b4c:	262b      	movs	r6, #43	; 0x2b
			fname = fnameHSC;
     b4e:	4914      	ldr	r1, [pc, #80]	; (ba0 <savedata+0x8c>)
			file = &fHSC;
     b50:	4d14      	ldr	r5, [pc, #80]	; (ba4 <savedata+0x90>)
     b52:	e7ea      	b.n	b2a <savedata+0x16>
			rc = fs_write(file, &data[i], sizeof(float));
     b54:	2204      	movs	r2, #4
     b56:	eb07 0184 	add.w	r1, r7, r4, lsl #2
     b5a:	4628      	mov	r0, r5
     b5c:	f004 fc20 	bl	53a0 <fs_write>
	for(int i=0;i<len;i++){
     b60:	3401      	adds	r4, #1
     b62:	42a6      	cmp	r6, r4
     b64:	dcf6      	bgt.n	b54 <savedata+0x40>
		}
	rc = fs_seek(file, 0, FS_SEEK_SET);
     b66:	2200      	movs	r2, #0
     b68:	4611      	mov	r1, r2
     b6a:	4628      	mov	r0, r5
     b6c:	f004 fc42 	bl	53f4 <fs_seek>
	rc = fs_close(file);
     b70:	4628      	mov	r0, r5
     b72:	f004 fbbf 	bl	52f4 <fs_close>


}	
     b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b78:	200013ac 	.word	0x200013ac
     b7c:	200011ac 	.word	0x200011ac
     b80:	20000f80 	.word	0x20000f80
     b84:	20001504 	.word	0x20001504
     b88:	200012ac 	.word	0x200012ac
     b8c:	20000f90 	.word	0x20000f90
     b90:	20001450 	.word	0x20001450
     b94:	20000fac 	.word	0x20000fac
     b98:	20000f68 	.word	0x20000f68
     b9c:	20001458 	.word	0x20001458
     ba0:	200010ac 	.word	0x200010ac
     ba4:	20000f74 	.word	0x20000f74

00000ba8 <readdata>:

void readdata(int tipo){
     ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct fs_file_t *file;
	char *fname;
	int len = 0;
	float *data;
	int rc;
	switch(tipo){
     baa:	2803      	cmp	r0, #3
     bac:	d831      	bhi.n	c12 <readdata+0x6a>
     bae:	e8df f000 	tbb	[pc, r0]
     bb2:	1802      	.short	0x1802
     bb4:	130e      	.short	0x130e
			fname = fnameHSC;
			len = 43;
			data = tabela_HSC;
			break;
		case 2:
			file = &fSDP;
     bb6:	4f1c      	ldr	r7, [pc, #112]	; (c28 <readdata+0x80>)
     bb8:	2601      	movs	r6, #1
     bba:	491c      	ldr	r1, [pc, #112]	; (c2c <readdata+0x84>)
     bbc:	4d1c      	ldr	r5, [pc, #112]	; (c30 <readdata+0x88>)
			break;
		default:
			return;
	}

	rc = fs_open(file, fname, FS_O_CREATE | FS_O_RDWR);
     bbe:	2213      	movs	r2, #19
     bc0:	4628      	mov	r0, r5
     bc2:	f004 fb19 	bl	51f8 <fs_open>

	if (rc >= 0) {
     bc6:	2800      	cmp	r0, #0
     bc8:	db10      	blt.n	bec <readdata+0x44>
		for(int i=0;i<len;i++){
     bca:	2400      	movs	r4, #0
     bcc:	e017      	b.n	bfe <readdata+0x56>
			data = tabela_SPD;
     bce:	4f19      	ldr	r7, [pc, #100]	; (c34 <readdata+0x8c>)
			len = 43;
     bd0:	262b      	movs	r6, #43	; 0x2b
			fname = fnameSDP;
     bd2:	4919      	ldr	r1, [pc, #100]	; (c38 <readdata+0x90>)
			file = &fSDP;
     bd4:	4d19      	ldr	r5, [pc, #100]	; (c3c <readdata+0x94>)
			break;
     bd6:	e7f2      	b.n	bbe <readdata+0x16>
			data = tabela_FIO2;
     bd8:	4f19      	ldr	r7, [pc, #100]	; (c40 <readdata+0x98>)
			len = 2;
     bda:	2602      	movs	r6, #2
			fname = fnameFIO2;
     bdc:	4919      	ldr	r1, [pc, #100]	; (c44 <readdata+0x9c>)
			file = &fFIO2;
     bde:	4d1a      	ldr	r5, [pc, #104]	; (c48 <readdata+0xa0>)
			break;
     be0:	e7ed      	b.n	bbe <readdata+0x16>
			data = tabela_HSC;
     be2:	4f1a      	ldr	r7, [pc, #104]	; (c4c <readdata+0xa4>)
			len = 43;
     be4:	262b      	movs	r6, #43	; 0x2b
			fname = fnameHSC;
     be6:	491a      	ldr	r1, [pc, #104]	; (c50 <readdata+0xa8>)
			file = &fHSC;
     be8:	4d1a      	ldr	r5, [pc, #104]	; (c54 <readdata+0xac>)
     bea:	e7e8      	b.n	bbe <readdata+0x16>
			rc = fs_read(file, &data[i], sizeof(float));
		}
	}else{
		for(int i=0;i<len;i++){
     bec:	2400      	movs	r4, #0
     bee:	e018      	b.n	c22 <readdata+0x7a>
			rc = fs_read(file, &data[i], sizeof(float));
     bf0:	2204      	movs	r2, #4
     bf2:	eb07 0184 	add.w	r1, r7, r4, lsl #2
     bf6:	4628      	mov	r0, r5
     bf8:	f004 fba8 	bl	534c <fs_read>
		for(int i=0;i<len;i++){
     bfc:	3401      	adds	r4, #1
     bfe:	42a6      	cmp	r6, r4
     c00:	dcf6      	bgt.n	bf0 <readdata+0x48>
			rc = fs_write(file, &data[i], sizeof(float));
		}
	}
	
	rc = fs_seek(file, 0, FS_SEEK_SET);
     c02:	2200      	movs	r2, #0
     c04:	4611      	mov	r1, r2
     c06:	4628      	mov	r0, r5
     c08:	f004 fbf4 	bl	53f4 <fs_seek>
	rc = fs_close(file);
     c0c:	4628      	mov	r0, r5
     c0e:	f004 fb71 	bl	52f4 <fs_close>

}
     c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			rc = fs_write(file, &data[i], sizeof(float));
     c14:	2204      	movs	r2, #4
     c16:	eb07 0184 	add.w	r1, r7, r4, lsl #2
     c1a:	4628      	mov	r0, r5
     c1c:	f004 fbc0 	bl	53a0 <fs_write>
		for(int i=0;i<len;i++){
     c20:	3401      	adds	r4, #1
     c22:	42a6      	cmp	r6, r4
     c24:	dcf6      	bgt.n	c14 <readdata+0x6c>
     c26:	e7ec      	b.n	c02 <readdata+0x5a>
     c28:	200013ac 	.word	0x200013ac
     c2c:	200011ac 	.word	0x200011ac
     c30:	20000f80 	.word	0x20000f80
     c34:	20001504 	.word	0x20001504
     c38:	200012ac 	.word	0x200012ac
     c3c:	20000f90 	.word	0x20000f90
     c40:	20001450 	.word	0x20001450
     c44:	20000fac 	.word	0x20000fac
     c48:	20000f68 	.word	0x20000f68
     c4c:	20001458 	.word	0x20001458
     c50:	200010ac 	.word	0x200010ac
     c54:	20000f74 	.word	0x20000f74

00000c58 <cFSTEST2>:
	return  boot_count2;

}


uint32_t cFSTEST2(){
     c58:	b510      	push	{r4, lr}
		readdata(0);
     c5a:	2000      	movs	r0, #0
     c5c:	f7ff ffa4 	bl	ba8 <readdata>
		offset_LPS[0]++;
     c60:	4c0d      	ldr	r4, [pc, #52]	; (c98 <cFSTEST2+0x40>)
     c62:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
     c66:	6820      	ldr	r0, [r4, #0]
     c68:	f7ff fa50 	bl	10c <__addsf3>
     c6c:	6020      	str	r0, [r4, #0]
		savedata(0);
     c6e:	2000      	movs	r0, #0
     c70:	f7ff ff50 	bl	b14 <savedata>

		readdata(1);
     c74:	2001      	movs	r0, #1
     c76:	f7ff ff97 	bl	ba8 <readdata>
		tabela_HSC[1]+=1.5;
     c7a:	4c08      	ldr	r4, [pc, #32]	; (c9c <cFSTEST2+0x44>)
     c7c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
     c80:	6860      	ldr	r0, [r4, #4]
     c82:	f7ff fa43 	bl	10c <__addsf3>
     c86:	6060      	str	r0, [r4, #4]
		savedata(1);
     c88:	2001      	movs	r0, #1
     c8a:	f7ff ff43 	bl	b14 <savedata>
		return  (int)(tabela_HSC[1]*1);
     c8e:	6860      	ldr	r0, [r4, #4]
     c90:	f7ff fb44 	bl	31c <__aeabi_f2iz>
}
     c94:	bd10      	pop	{r4, pc}
     c96:	bf00      	nop
     c98:	200013ac 	.word	0x200013ac
     c9c:	20001458 	.word	0x20001458

00000ca0 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     ca0:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     ca2:	680b      	ldr	r3, [r1, #0]
     ca4:	3301      	adds	r3, #1
     ca6:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     ca8:	4b01      	ldr	r3, [pc, #4]	; (cb0 <char_out+0x10>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	4798      	blx	r3
}
     cae:	bd08      	pop	{r3, pc}
     cb0:	20000124 	.word	0x20000124

00000cb4 <__printk_hook_install>:
	_char_out = fn;
     cb4:	4b01      	ldr	r3, [pc, #4]	; (cbc <__printk_hook_install+0x8>)
     cb6:	6018      	str	r0, [r3, #0]
}
     cb8:	4770      	bx	lr
     cba:	bf00      	nop
     cbc:	20000124 	.word	0x20000124

00000cc0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     cc0:	b500      	push	{lr}
     cc2:	b083      	sub	sp, #12
     cc4:	4602      	mov	r2, r0
     cc6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     cc8:	2100      	movs	r1, #0
     cca:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     ccc:	a901      	add	r1, sp, #4
     cce:	4803      	ldr	r0, [pc, #12]	; (cdc <vprintk+0x1c>)
     cd0:	f000 f8c8 	bl	e64 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     cd4:	b003      	add	sp, #12
     cd6:	f85d fb04 	ldr.w	pc, [sp], #4
     cda:	bf00      	nop
     cdc:	00000ca1 	.word	0x00000ca1

00000ce0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     ce0:	b510      	push	{r4, lr}
     ce2:	b084      	sub	sp, #16
     ce4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     ce6:	9001      	str	r0, [sp, #4]
     ce8:	9102      	str	r1, [sp, #8]
     cea:	2100      	movs	r1, #0
     cec:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     cee:	a901      	add	r1, sp, #4
     cf0:	4805      	ldr	r0, [pc, #20]	; (d08 <vsnprintk+0x28>)
     cf2:	f000 f8b7 	bl	e64 <cbvprintf>

	if (ctx.count < ctx.max) {
     cf6:	9b03      	ldr	r3, [sp, #12]
     cf8:	9a02      	ldr	r2, [sp, #8]
     cfa:	4293      	cmp	r3, r2
     cfc:	da01      	bge.n	d02 <vsnprintk+0x22>
		str[ctx.count] = '\0';
     cfe:	2200      	movs	r2, #0
     d00:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     d02:	9803      	ldr	r0, [sp, #12]
     d04:	b004      	add	sp, #16
     d06:	bd10      	pop	{r4, pc}
     d08:	0000f839 	.word	0x0000f839

00000d0c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     d10:	b083      	sub	sp, #12
     d12:	4604      	mov	r4, r0
     d14:	4608      	mov	r0, r1
     d16:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d18:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     d1a:	f013 0f08 	tst.w	r3, #8
     d1e:	d105      	bne.n	d2c <process_event+0x20>
     d20:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     d24:	2300      	movs	r3, #0
     d26:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     d28:	9301      	str	r3, [sp, #4]
}
     d2a:	e069      	b.n	e00 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     d2c:	2901      	cmp	r1, #1
     d2e:	d009      	beq.n	d44 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     d30:	f043 0320 	orr.w	r3, r3, #32
     d34:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d36:	f385 8811 	msr	BASEPRI, r5
     d3a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     d3e:	b003      	add	sp, #12
     d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d44:	f043 0310 	orr.w	r3, r3, #16
     d48:	8323      	strh	r3, [r4, #24]
     d4a:	e7f4      	b.n	d36 <process_event+0x2a>
			evt = process_recheck(mgr);
     d4c:	4620      	mov	r0, r4
     d4e:	f00e fdce 	bl	f8ee <process_recheck>
     d52:	e057      	b.n	e04 <process_event+0xf8>
			res = mgr->last_res;
     d54:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     d58:	464a      	mov	r2, r9
     d5a:	4669      	mov	r1, sp
     d5c:	4620      	mov	r0, r4
     d5e:	f00e fddf 	bl	f920 <process_complete>
		onoff_transition_fn transit = NULL;
     d62:	2700      	movs	r7, #0
     d64:	e05a      	b.n	e1c <process_event+0x110>
			transit = mgr->transitions->start;
     d66:	6923      	ldr	r3, [r4, #16]
     d68:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     d6a:	2106      	movs	r1, #6
     d6c:	4620      	mov	r0, r4
     d6e:	f00e fd97 	bl	f8a0 <set_state>
		res = 0;
     d72:	f04f 0900 	mov.w	r9, #0
     d76:	e051      	b.n	e1c <process_event+0x110>
			transit = mgr->transitions->stop;
     d78:	6923      	ldr	r3, [r4, #16]
     d7a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     d7c:	2104      	movs	r1, #4
     d7e:	4620      	mov	r0, r4
     d80:	f00e fd8e 	bl	f8a0 <set_state>
		res = 0;
     d84:	f04f 0900 	mov.w	r9, #0
     d88:	e048      	b.n	e1c <process_event+0x110>
			transit = mgr->transitions->reset;
     d8a:	6923      	ldr	r3, [r4, #16]
     d8c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     d8e:	2105      	movs	r1, #5
     d90:	4620      	mov	r0, r4
     d92:	f00e fd85 	bl	f8a0 <set_state>
		res = 0;
     d96:	f04f 0900 	mov.w	r9, #0
     d9a:	e03f      	b.n	e1c <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     d9c:	2200      	movs	r2, #0
     d9e:	e046      	b.n	e2e <process_event+0x122>
     da0:	2200      	movs	r2, #0
     da2:	e044      	b.n	e2e <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     da4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     da8:	8323      	strh	r3, [r4, #24]
     daa:	f385 8811 	msr	BASEPRI, r5
     dae:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     db2:	2900      	cmp	r1, #0
     db4:	d144      	bne.n	e40 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     db6:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     db8:	b12b      	cbz	r3, dc6 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     dba:	464b      	mov	r3, r9
     dbc:	4642      	mov	r2, r8
     dbe:	4669      	mov	r1, sp
     dc0:	4620      	mov	r0, r4
     dc2:	f00e fe23 	bl	fa0c <notify_all>
			if (transit != NULL) {
     dc6:	b117      	cbz	r7, dce <process_event+0xc2>
				transit(mgr, transition_complete);
     dc8:	4925      	ldr	r1, [pc, #148]	; (e60 <process_event+0x154>)
     dca:	4620      	mov	r0, r4
     dcc:	47b8      	blx	r7
	__asm__ volatile(
     dce:	f04f 0320 	mov.w	r3, #32
     dd2:	f3ef 8511 	mrs	r5, BASEPRI
     dd6:	f383 8812 	msr	BASEPRI_MAX, r3
     dda:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     dde:	8b23      	ldrh	r3, [r4, #24]
     de0:	f023 0308 	bic.w	r3, r3, #8
     de4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     de6:	8b23      	ldrh	r3, [r4, #24]
     de8:	f013 0f10 	tst.w	r3, #16
     dec:	d02e      	beq.n	e4c <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     dee:	f023 0310 	bic.w	r3, r3, #16
     df2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     df4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     df6:	8b26      	ldrh	r6, [r4, #24]
     df8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     dfc:	2800      	cmp	r0, #0
     dfe:	d09a      	beq.n	d36 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     e00:	2802      	cmp	r0, #2
     e02:	d0a3      	beq.n	d4c <process_event+0x40>
		if (evt == EVT_NOP) {
     e04:	2800      	cmp	r0, #0
     e06:	d096      	beq.n	d36 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     e08:	2801      	cmp	r0, #1
     e0a:	d0a3      	beq.n	d54 <process_event+0x48>
		} else if (evt == EVT_START) {
     e0c:	2803      	cmp	r0, #3
     e0e:	d0aa      	beq.n	d66 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     e10:	2804      	cmp	r0, #4
     e12:	d0b1      	beq.n	d78 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     e14:	2805      	cmp	r0, #5
     e16:	d0b8      	beq.n	d8a <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     e18:	2700      	movs	r7, #0
		res = 0;
     e1a:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e1c:	8b23      	ldrh	r3, [r4, #24]
     e1e:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     e22:	45b0      	cmp	r8, r6
     e24:	d0ba      	beq.n	d9c <process_event+0x90>
     e26:	68a2      	ldr	r2, [r4, #8]
     e28:	2a00      	cmp	r2, #0
     e2a:	d0b9      	beq.n	da0 <process_event+0x94>
     e2c:	2201      	movs	r2, #1
		if (do_monitors
     e2e:	4611      	mov	r1, r2
     e30:	2a00      	cmp	r2, #0
     e32:	d1b7      	bne.n	da4 <process_event+0x98>
     e34:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     e36:	2a00      	cmp	r2, #0
     e38:	d1b4      	bne.n	da4 <process_event+0x98>
		    || (transit != NULL)) {
     e3a:	2f00      	cmp	r7, #0
     e3c:	d1b2      	bne.n	da4 <process_event+0x98>
     e3e:	e7d2      	b.n	de6 <process_event+0xda>
				notify_monitors(mgr, state, res);
     e40:	464a      	mov	r2, r9
     e42:	4641      	mov	r1, r8
     e44:	4620      	mov	r0, r4
     e46:	f00e fd33 	bl	f8b0 <notify_monitors>
     e4a:	e7b4      	b.n	db6 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     e4c:	f013 0f20 	tst.w	r3, #32
     e50:	d004      	beq.n	e5c <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     e52:	f023 0320 	bic.w	r3, r3, #32
     e56:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     e58:	2002      	movs	r0, #2
     e5a:	e7cc      	b.n	df6 <process_event+0xea>
		evt = EVT_NOP;
     e5c:	2000      	movs	r0, #0
     e5e:	e7ca      	b.n	df6 <process_event+0xea>
     e60:	0000fa3b 	.word	0x0000fa3b

00000e64 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e68:	b093      	sub	sp, #76	; 0x4c
     e6a:	4606      	mov	r6, r0
     e6c:	460d      	mov	r5, r1
     e6e:	4692      	mov	sl, r2
     e70:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     e72:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     e74:	f89a 0000 	ldrb.w	r0, [sl]
     e78:	2800      	cmp	r0, #0
     e7a:	f000 84d6 	beq.w	182a <CONFIG_FPROTECT_BLOCK_SIZE+0x82a>
		if (*fp != '%') {
     e7e:	2825      	cmp	r0, #37	; 0x25
     e80:	d008      	beq.n	e94 <cbvprintf+0x30>
			OUTC(*fp++);
     e82:	f10a 0a01 	add.w	sl, sl, #1
     e86:	4629      	mov	r1, r5
     e88:	47b0      	blx	r6
     e8a:	2800      	cmp	r0, #0
     e8c:	f2c0 84ce 	blt.w	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
     e90:	3401      	adds	r4, #1
			continue;
     e92:	e7ef      	b.n	e74 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     e94:	2300      	movs	r3, #0
     e96:	9306      	str	r3, [sp, #24]
     e98:	9307      	str	r3, [sp, #28]
     e9a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     e9c:	9308      	str	r3, [sp, #32]
     e9e:	9309      	str	r3, [sp, #36]	; 0x24
     ea0:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     ea2:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     ea6:	f89a 3001 	ldrb.w	r3, [sl, #1]
     eaa:	2b25      	cmp	r3, #37	; 0x25
     eac:	d001      	beq.n	eb2 <cbvprintf+0x4e>
	bool loop = true;
     eae:	2701      	movs	r7, #1
     eb0:	e02c      	b.n	f0c <cbvprintf+0xa8>
		conv->specifier = *sp++;
     eb2:	f10a 0802 	add.w	r8, sl, #2
     eb6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     eba:	e1a8      	b.n	120e <CONFIG_FPROTECT_BLOCK_SIZE+0x20e>
			conv->flag_dash = true;
     ebc:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ec0:	f043 0304 	orr.w	r3, r3, #4
     ec4:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     ec8:	b1ff      	cbz	r7, f0a <cbvprintf+0xa6>
			++sp;
     eca:	f108 0801 	add.w	r8, r8, #1
     ece:	e01c      	b.n	f0a <cbvprintf+0xa6>
			conv->flag_plus = true;
     ed0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ed4:	f043 0308 	orr.w	r3, r3, #8
     ed8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     edc:	e7f4      	b.n	ec8 <cbvprintf+0x64>
			conv->flag_space = true;
     ede:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ee2:	f043 0310 	orr.w	r3, r3, #16
     ee6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     eea:	e7ed      	b.n	ec8 <cbvprintf+0x64>
			conv->flag_hash = true;
     eec:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ef0:	f043 0320 	orr.w	r3, r3, #32
     ef4:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     ef8:	e7e6      	b.n	ec8 <cbvprintf+0x64>
			conv->flag_zero = true;
     efa:	f89d 3020 	ldrb.w	r3, [sp, #32]
     efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f02:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     f06:	e7df      	b.n	ec8 <cbvprintf+0x64>
		switch (*sp) {
     f08:	2700      	movs	r7, #0
	} while (loop);
     f0a:	b34f      	cbz	r7, f60 <cbvprintf+0xfc>
		switch (*sp) {
     f0c:	f898 3000 	ldrb.w	r3, [r8]
     f10:	3b20      	subs	r3, #32
     f12:	2b10      	cmp	r3, #16
     f14:	d8f8      	bhi.n	f08 <cbvprintf+0xa4>
     f16:	a201      	add	r2, pc, #4	; (adr r2, f1c <cbvprintf+0xb8>)
     f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f1c:	00000edf 	.word	0x00000edf
     f20:	00000f09 	.word	0x00000f09
     f24:	00000f09 	.word	0x00000f09
     f28:	00000eed 	.word	0x00000eed
     f2c:	00000f09 	.word	0x00000f09
     f30:	00000f09 	.word	0x00000f09
     f34:	00000f09 	.word	0x00000f09
     f38:	00000f09 	.word	0x00000f09
     f3c:	00000f09 	.word	0x00000f09
     f40:	00000f09 	.word	0x00000f09
     f44:	00000f09 	.word	0x00000f09
     f48:	00000ed1 	.word	0x00000ed1
     f4c:	00000f09 	.word	0x00000f09
     f50:	00000ebd 	.word	0x00000ebd
     f54:	00000f09 	.word	0x00000f09
     f58:	00000f09 	.word	0x00000f09
     f5c:	00000efb 	.word	0x00000efb
	if (conv->flag_zero && conv->flag_dash) {
     f60:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f64:	f003 0344 	and.w	r3, r3, #68	; 0x44
     f68:	2b44      	cmp	r3, #68	; 0x44
     f6a:	d06d      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
	sp = extract_width(conv, sp);
     f6c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     f70:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     f78:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     f7c:	f898 3000 	ldrb.w	r3, [r8]
     f80:	2b2a      	cmp	r3, #42	; 0x2a
     f82:	d068      	beq.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
	size_t width = extract_decimal(&sp);
     f84:	a805      	add	r0, sp, #20
     f86:	f00f f9b5 	bl	102f4 <extract_decimal>
	if (sp != wp) {
     f8a:	9b05      	ldr	r3, [sp, #20]
     f8c:	4598      	cmp	r8, r3
     f8e:	d012      	beq.n	fb6 <cbvprintf+0x152>
		conv->width_present = true;
     f90:	f89d 3020 	ldrb.w	r3, [sp, #32]
     f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     f98:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     f9c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     f9e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     fa2:	2800      	cmp	r0, #0
     fa4:	db60      	blt.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     fa6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     fa8:	4313      	orrs	r3, r2
     faa:	f89d 2020 	ldrb.w	r2, [sp, #32]
     fae:	f363 0241 	bfi	r2, r3, #1, #1
     fb2:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     fb6:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     fb8:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     fba:	781b      	ldrb	r3, [r3, #0]
     fbc:	2b2e      	cmp	r3, #46	; 0x2e
     fbe:	bf14      	ite	ne
     fc0:	2300      	movne	r3, #0
     fc2:	2301      	moveq	r3, #1
     fc4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     fc8:	f363 0241 	bfi	r2, r3, #1, #1
     fcc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     fd0:	2b00      	cmp	r3, #0
     fd2:	d04b      	beq.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
	++sp;
     fd4:	9b05      	ldr	r3, [sp, #20]
     fd6:	1c5a      	adds	r2, r3, #1
     fd8:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     fda:	785b      	ldrb	r3, [r3, #1]
     fdc:	2b2a      	cmp	r3, #42	; 0x2a
     fde:	d048      	beq.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
	size_t prec = extract_decimal(&sp);
     fe0:	a805      	add	r0, sp, #20
     fe2:	f00f f987 	bl	102f4 <extract_decimal>
	conv->prec_value = prec;
     fe6:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     fe8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     fec:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     ff0:	2800      	cmp	r0, #0
     ff2:	db47      	blt.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
     ff4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     ff6:	4313      	orrs	r3, r2
     ff8:	f89d 2020 	ldrb.w	r2, [sp, #32]
     ffc:	f363 0241 	bfi	r2, r3, #1, #1
    1000:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    1004:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    1008:	f898 3000 	ldrb.w	r3, [r8]
    100c:	3b4c      	subs	r3, #76	; 0x4c
    100e:	2b2e      	cmp	r3, #46	; 0x2e
    1010:	f200 80dc 	bhi.w	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
    1014:	e8df f003 	tbb	[pc, r3]
    1018:	dadadaca 	.word	0xdadadaca
    101c:	dadadada 	.word	0xdadadada
    1020:	dadadada 	.word	0xdadadada
    1024:	dadadada 	.word	0xdadadada
    1028:	dadadada 	.word	0xdadadada
    102c:	dadadada 	.word	0xdadadada
    1030:	dadadada 	.word	0xdadadada
    1034:	da6ada38 	.word	0xda6ada38
    1038:	dadada51 	.word	0xdadada51
    103c:	dadadada 	.word	0xdadadada
    1040:	dadadac0 	.word	0xdadadac0
    1044:	dada      	.short	0xdada
    1046:	b6          	.byte	0xb6
    1047:	00          	.byte	0x00
		conv->flag_zero = false;
    1048:	f89d 3020 	ldrb.w	r3, [sp, #32]
    104c:	f36f 1386 	bfc	r3, #6, #1
    1050:	f88d 3020 	strb.w	r3, [sp, #32]
    1054:	e78a      	b.n	f6c <cbvprintf+0x108>
		conv->width_star = true;
    1056:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    105a:	f043 0301 	orr.w	r3, r3, #1
    105e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    1062:	4643      	mov	r3, r8
    1064:	3301      	adds	r3, #1
    1066:	e7a7      	b.n	fb8 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    1068:	2201      	movs	r2, #1
    106a:	e79d      	b.n	fa8 <cbvprintf+0x144>
		return sp;
    106c:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1070:	e7ca      	b.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
		conv->prec_star = true;
    1072:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1076:	f043 0304 	orr.w	r3, r3, #4
    107a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    107e:	f102 0801 	add.w	r8, r2, #1
    1082:	e7c1      	b.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
			      || (prec != (size_t)conv->prec_value));
    1084:	2201      	movs	r2, #1
    1086:	e7b6      	b.n	ff6 <cbvprintf+0x192>
		if (*++sp == 'h') {
    1088:	f108 0201 	add.w	r2, r8, #1
    108c:	f898 3001 	ldrb.w	r3, [r8, #1]
    1090:	2b68      	cmp	r3, #104	; 0x68
    1092:	d008      	beq.n	10a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
			conv->length_mod = LENGTH_H;
    1094:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1098:	2102      	movs	r1, #2
    109a:	f361 03c6 	bfi	r3, r1, #3, #4
    109e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    10a2:	4690      	mov	r8, r2
    10a4:	e02b      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
			conv->length_mod = LENGTH_HH;
    10a6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    10aa:	2201      	movs	r2, #1
    10ac:	f362 03c6 	bfi	r3, r2, #3, #4
    10b0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    10b4:	f108 0802 	add.w	r8, r8, #2
    10b8:	e021      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		if (*++sp == 'l') {
    10ba:	f108 0201 	add.w	r2, r8, #1
    10be:	f898 3001 	ldrb.w	r3, [r8, #1]
    10c2:	2b6c      	cmp	r3, #108	; 0x6c
    10c4:	d008      	beq.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
			conv->length_mod = LENGTH_L;
    10c6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    10ca:	2103      	movs	r1, #3
    10cc:	f361 03c6 	bfi	r3, r1, #3, #4
    10d0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    10d4:	4690      	mov	r8, r2
    10d6:	e012      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
			conv->length_mod = LENGTH_LL;
    10d8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    10dc:	2204      	movs	r2, #4
    10de:	f362 03c6 	bfi	r3, r2, #3, #4
    10e2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    10e6:	f108 0802 	add.w	r8, r8, #2
    10ea:	e008      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		conv->length_mod = LENGTH_J;
    10ec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    10f0:	2205      	movs	r2, #5
    10f2:	f362 03c6 	bfi	r3, r2, #3, #4
    10f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    10fa:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    10fe:	f818 3b01 	ldrb.w	r3, [r8], #1
    1102:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    1106:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    110a:	2a37      	cmp	r2, #55	; 0x37
    110c:	f200 8150 	bhi.w	13b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b0>
    1110:	e8df f012 	tbh	[pc, r2, lsl #1]
    1114:	014e0126 	.word	0x014e0126
    1118:	014e014e 	.word	0x014e014e
    111c:	01260126 	.word	0x01260126
    1120:	014e0126 	.word	0x014e0126
    1124:	014e014e 	.word	0x014e014e
    1128:	014e014e 	.word	0x014e014e
    112c:	014e014e 	.word	0x014e014e
    1130:	014e014e 	.word	0x014e014e
    1134:	014e014e 	.word	0x014e014e
    1138:	014e014e 	.word	0x014e014e
    113c:	014e014e 	.word	0x014e014e
    1140:	0113014e 	.word	0x0113014e
    1144:	014e014e 	.word	0x014e014e
    1148:	014e014e 	.word	0x014e014e
    114c:	014e014e 	.word	0x014e014e
    1150:	014e014e 	.word	0x014e014e
    1154:	014e0126 	.word	0x014e0126
    1158:	00630113 	.word	0x00630113
    115c:	01260126 	.word	0x01260126
    1160:	014e0126 	.word	0x014e0126
    1164:	014e0063 	.word	0x014e0063
    1168:	014e014e 	.word	0x014e014e
    116c:	012f014e 	.word	0x012f014e
    1170:	013f0113 	.word	0x013f0113
    1174:	014e014e 	.word	0x014e014e
    1178:	014e013f 	.word	0x014e013f
    117c:	014e0113 	.word	0x014e0113
    1180:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    1184:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1188:	2206      	movs	r2, #6
    118a:	f362 03c6 	bfi	r3, r2, #3, #4
    118e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    1192:	f108 0801 	add.w	r8, r8, #1
		break;
    1196:	e7b2      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		conv->length_mod = LENGTH_T;
    1198:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    119c:	2207      	movs	r2, #7
    119e:	f362 03c6 	bfi	r3, r2, #3, #4
    11a2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    11a6:	f108 0801 	add.w	r8, r8, #1
		break;
    11aa:	e7a8      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		conv->length_mod = LENGTH_UPPER_L;
    11ac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    11b0:	2208      	movs	r2, #8
    11b2:	f362 03c6 	bfi	r3, r2, #3, #4
    11b6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    11ba:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    11be:	f89d 3020 	ldrb.w	r3, [sp, #32]
    11c2:	f043 0302 	orr.w	r3, r3, #2
    11c6:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    11ca:	e798      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		conv->length_mod = LENGTH_NONE;
    11cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    11d0:	f36f 03c6 	bfc	r3, #3, #4
    11d4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    11d8:	e791      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		conv->specifier_cat = SPECIFIER_SINT;
    11da:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    11de:	2101      	movs	r1, #1
    11e0:	f361 0202 	bfi	r2, r1, #0, #3
    11e4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    11e8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    11ec:	f002 0278 	and.w	r2, r2, #120	; 0x78
    11f0:	2a40      	cmp	r2, #64	; 0x40
    11f2:	f000 80aa 	beq.w	134a <CONFIG_FPROTECT_BLOCK_SIZE+0x34a>
		if (conv->specifier == 'c') {
    11f6:	2b63      	cmp	r3, #99	; 0x63
    11f8:	f000 80ae 	beq.w	1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
	conv->unsupported |= unsupported;
    11fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1200:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1204:	4317      	orrs	r7, r2
    1206:	f367 0341 	bfi	r3, r7, #1, #1
    120a:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    120e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1212:	f013 0f01 	tst.w	r3, #1
    1216:	f000 80da 	beq.w	13ce <CONFIG_FPROTECT_BLOCK_SIZE+0x3ce>
			width = va_arg(ap, int);
    121a:	9b03      	ldr	r3, [sp, #12]
    121c:	1d1a      	adds	r2, r3, #4
    121e:	9203      	str	r2, [sp, #12]
    1220:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1222:	2f00      	cmp	r7, #0
    1224:	f2c0 80cb 	blt.w	13be <CONFIG_FPROTECT_BLOCK_SIZE+0x3be>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1228:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    122c:	f013 0f04 	tst.w	r3, #4
    1230:	f000 80df 	beq.w	13f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f2>
			int arg = va_arg(ap, int);
    1234:	9b03      	ldr	r3, [sp, #12]
    1236:	1d1a      	adds	r2, r3, #4
    1238:	9203      	str	r2, [sp, #12]
    123a:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    123e:	f1bb 0f00 	cmp.w	fp, #0
    1242:	f2c0 80cd 	blt.w	13e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e0>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1246:	2300      	movs	r3, #0
    1248:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    124a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    124c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1250:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1254:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    1258:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    125c:	2b01      	cmp	r3, #1
    125e:	f000 80d1 	beq.w	1404 <CONFIG_FPROTECT_BLOCK_SIZE+0x404>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1262:	2b02      	cmp	r3, #2
    1264:	f000 8116 	beq.w	1494 <CONFIG_FPROTECT_BLOCK_SIZE+0x494>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1268:	2b04      	cmp	r3, #4
    126a:	f000 8167 	beq.w	153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    126e:	2b03      	cmp	r3, #3
    1270:	f000 817e 	beq.w	1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1274:	f89d 9020 	ldrb.w	r9, [sp, #32]
    1278:	f019 0303 	ands.w	r3, r9, #3
    127c:	9302      	str	r3, [sp, #8]
    127e:	f040 817d 	bne.w	157c <CONFIG_FPROTECT_BLOCK_SIZE+0x57c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1282:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    1286:	3b25      	subs	r3, #37	; 0x25
    1288:	2b53      	cmp	r3, #83	; 0x53
    128a:	f200 8233 	bhi.w	16f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f4>
    128e:	e8df f013 	tbh	[pc, r3, lsl #1]
    1292:	0181      	.short	0x0181
    1294:	02310231 	.word	0x02310231
    1298:	02310231 	.word	0x02310231
    129c:	02310231 	.word	0x02310231
    12a0:	02310231 	.word	0x02310231
    12a4:	02310231 	.word	0x02310231
    12a8:	02310231 	.word	0x02310231
    12ac:	02310231 	.word	0x02310231
    12b0:	02310231 	.word	0x02310231
    12b4:	02310231 	.word	0x02310231
    12b8:	02310231 	.word	0x02310231
    12bc:	02310231 	.word	0x02310231
    12c0:	02310231 	.word	0x02310231
    12c4:	02310231 	.word	0x02310231
    12c8:	02310231 	.word	0x02310231
    12cc:	02310231 	.word	0x02310231
    12d0:	02310231 	.word	0x02310231
    12d4:	02310231 	.word	0x02310231
    12d8:	02310231 	.word	0x02310231
    12dc:	02310231 	.word	0x02310231
    12e0:	02310231 	.word	0x02310231
    12e4:	02310231 	.word	0x02310231
    12e8:	02310231 	.word	0x02310231
    12ec:	02310231 	.word	0x02310231
    12f0:	02310231 	.word	0x02310231
    12f4:	02310231 	.word	0x02310231
    12f8:	023101c7 	.word	0x023101c7
    12fc:	02310231 	.word	0x02310231
    1300:	02310231 	.word	0x02310231
    1304:	02310231 	.word	0x02310231
    1308:	02310231 	.word	0x02310231
    130c:	01a10231 	.word	0x01a10231
    1310:	023101ab 	.word	0x023101ab
    1314:	02310231 	.word	0x02310231
    1318:	01ab0231 	.word	0x01ab0231
    131c:	02310231 	.word	0x02310231
    1320:	02310231 	.word	0x02310231
    1324:	01c70208 	.word	0x01c70208
    1328:	023101ea 	.word	0x023101ea
    132c:	018f0231 	.word	0x018f0231
    1330:	01c70231 	.word	0x01c70231
    1334:	02310231 	.word	0x02310231
    1338:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    133a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    133e:	2102      	movs	r1, #2
    1340:	f361 0202 	bfi	r2, r1, #0, #3
    1344:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    1348:	e74e      	b.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
			conv->invalid = true;
    134a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    134e:	f041 0101 	orr.w	r1, r1, #1
    1352:	f88d 1020 	strb.w	r1, [sp, #32]
    1356:	e74e      	b.n	11f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1358:	1e17      	subs	r7, r2, #0
    135a:	bf18      	it	ne
    135c:	2701      	movne	r7, #1
    135e:	e74d      	b.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
		conv->specifier_cat = SPECIFIER_FP;
    1360:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1364:	2204      	movs	r2, #4
    1366:	f362 0302 	bfi	r3, r2, #0, #3
    136a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    136e:	2701      	movs	r7, #1
			break;
    1370:	e744      	b.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
		conv->specifier_cat = SPECIFIER_PTR;
    1372:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1376:	2203      	movs	r2, #3
    1378:	f362 0302 	bfi	r3, r2, #0, #3
    137c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    1380:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1384:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1388:	2b40      	cmp	r3, #64	; 0x40
    138a:	f47f af37 	bne.w	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
			unsupported = true;
    138e:	2701      	movs	r7, #1
    1390:	e734      	b.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
		conv->specifier_cat = SPECIFIER_PTR;
    1392:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1396:	2203      	movs	r2, #3
    1398:	f362 0302 	bfi	r3, r2, #0, #3
    139c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    13a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    13a4:	f013 0f78 	tst.w	r3, #120	; 0x78
    13a8:	f43f af28 	beq.w	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
			unsupported = true;
    13ac:	2701      	movs	r7, #1
    13ae:	e725      	b.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
		conv->invalid = true;
    13b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    13b4:	f043 0301 	orr.w	r3, r3, #1
    13b8:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    13bc:	e71e      	b.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
				conv->flag_dash = true;
    13be:	f89d 3020 	ldrb.w	r3, [sp, #32]
    13c2:	f043 0304 	orr.w	r3, r3, #4
    13c6:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    13ca:	427f      	negs	r7, r7
    13cc:	e72c      	b.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
		} else if (conv->width_present) {
    13ce:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    13d2:	2b00      	cmp	r3, #0
    13d4:	db02      	blt.n	13dc <CONFIG_FPROTECT_BLOCK_SIZE+0x3dc>
		int width = -1;
    13d6:	f04f 37ff 	mov.w	r7, #4294967295
    13da:	e725      	b.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
			width = conv->width_value;
    13dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    13de:	e723      	b.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
				conv->prec_present = false;
    13e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    13e4:	f36f 0341 	bfc	r3, #1, #1
    13e8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    13ec:	f04f 3bff 	mov.w	fp, #4294967295
    13f0:	e729      	b.n	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
		} else if (conv->prec_present) {
    13f2:	f013 0f02 	tst.w	r3, #2
    13f6:	d002      	beq.n	13fe <CONFIG_FPROTECT_BLOCK_SIZE+0x3fe>
			precision = conv->prec_value;
    13f8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    13fc:	e723      	b.n	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
		int precision = -1;
    13fe:	f04f 3bff 	mov.w	fp, #4294967295
    1402:	e720      	b.n	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
			switch (length_mod) {
    1404:	1ecb      	subs	r3, r1, #3
    1406:	2b04      	cmp	r3, #4
    1408:	d804      	bhi.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
    140a:	e8df f003 	tbb	[pc, r3]
    140e:	1d0b      	.short	0x1d0b
    1410:	3529      	.short	0x3529
    1412:	35          	.byte	0x35
    1413:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1414:	9b03      	ldr	r3, [sp, #12]
    1416:	1d1a      	adds	r2, r3, #4
    1418:	9203      	str	r2, [sp, #12]
    141a:	681a      	ldr	r2, [r3, #0]
    141c:	17d3      	asrs	r3, r2, #31
    141e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1422:	e006      	b.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
					value->sint = va_arg(ap, long);
    1424:	9b03      	ldr	r3, [sp, #12]
    1426:	1d1a      	adds	r2, r3, #4
    1428:	9203      	str	r2, [sp, #12]
    142a:	681a      	ldr	r2, [r3, #0]
    142c:	17d3      	asrs	r3, r2, #31
    142e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    1432:	2901      	cmp	r1, #1
    1434:	d028      	beq.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
			} else if (length_mod == LENGTH_H) {
    1436:	2902      	cmp	r1, #2
    1438:	f47f af1c 	bne.w	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
				value->sint = (short)value->sint;
    143c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    1440:	17d3      	asrs	r3, r2, #31
    1442:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1446:	e715      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
					(sint_value_type)va_arg(ap, long long);
    1448:	9b03      	ldr	r3, [sp, #12]
    144a:	3307      	adds	r3, #7
    144c:	f023 0307 	bic.w	r3, r3, #7
    1450:	f103 0208 	add.w	r2, r3, #8
    1454:	9203      	str	r2, [sp, #12]
    1456:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    145a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    145e:	e7e8      	b.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    1460:	9b03      	ldr	r3, [sp, #12]
    1462:	3307      	adds	r3, #7
    1464:	f023 0307 	bic.w	r3, r3, #7
    1468:	f103 0208 	add.w	r2, r3, #8
    146c:	9203      	str	r2, [sp, #12]
    146e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1472:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1476:	e7dc      	b.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1478:	9b03      	ldr	r3, [sp, #12]
    147a:	1d1a      	adds	r2, r3, #4
    147c:	9203      	str	r2, [sp, #12]
    147e:	681a      	ldr	r2, [r3, #0]
    1480:	17d3      	asrs	r3, r2, #31
				value->sint =
    1482:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1486:	e7d4      	b.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
				value->sint = (char)value->sint;
    1488:	f89d 3018 	ldrb.w	r3, [sp, #24]
    148c:	9306      	str	r3, [sp, #24]
    148e:	2300      	movs	r3, #0
    1490:	9307      	str	r3, [sp, #28]
    1492:	e6ef      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
			switch (length_mod) {
    1494:	1ecb      	subs	r3, r1, #3
    1496:	2b04      	cmp	r3, #4
    1498:	d804      	bhi.n	14a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a4>
    149a:	e8df f003 	tbb	[pc, r3]
    149e:	1f0b      	.short	0x1f0b
    14a0:	4135      	.short	0x4135
    14a2:	41          	.byte	0x41
    14a3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    14a4:	9b03      	ldr	r3, [sp, #12]
    14a6:	1d1a      	adds	r2, r3, #4
    14a8:	9203      	str	r2, [sp, #12]
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	9306      	str	r3, [sp, #24]
    14ae:	2300      	movs	r3, #0
    14b0:	9307      	str	r3, [sp, #28]
				break;
    14b2:	e01e      	b.n	14f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f2>
				    && (conv->specifier == 'c')) {
    14b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    14b8:	2b63      	cmp	r3, #99	; 0x63
    14ba:	d007      	beq.n	14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>
					value->uint = va_arg(ap, unsigned long);
    14bc:	9b03      	ldr	r3, [sp, #12]
    14be:	1d1a      	adds	r2, r3, #4
    14c0:	9203      	str	r2, [sp, #12]
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	9306      	str	r3, [sp, #24]
    14c6:	2300      	movs	r3, #0
    14c8:	9307      	str	r3, [sp, #28]
    14ca:	e012      	b.n	14f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f2>
					value->uint = (wchar_t)va_arg(ap,
    14cc:	9b03      	ldr	r3, [sp, #12]
    14ce:	1d1a      	adds	r2, r3, #4
    14d0:	9203      	str	r2, [sp, #12]
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	9306      	str	r3, [sp, #24]
    14d6:	2300      	movs	r3, #0
    14d8:	9307      	str	r3, [sp, #28]
    14da:	e00a      	b.n	14f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f2>
					(uint_value_type)va_arg(ap,
    14dc:	9b03      	ldr	r3, [sp, #12]
    14de:	3307      	adds	r3, #7
    14e0:	f023 0307 	bic.w	r3, r3, #7
    14e4:	f103 0208 	add.w	r2, r3, #8
    14e8:	9203      	str	r2, [sp, #12]
    14ea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    14ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    14f2:	2901      	cmp	r1, #1
    14f4:	d01c      	beq.n	1530 <CONFIG_FPROTECT_BLOCK_SIZE+0x530>
			} else if (length_mod == LENGTH_H) {
    14f6:	2902      	cmp	r1, #2
    14f8:	f47f aebc 	bne.w	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
				value->uint = (unsigned short)value->uint;
    14fc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1500:	9306      	str	r3, [sp, #24]
    1502:	2300      	movs	r3, #0
    1504:	9307      	str	r3, [sp, #28]
    1506:	e6b5      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
					(uint_value_type)va_arg(ap,
    1508:	9b03      	ldr	r3, [sp, #12]
    150a:	3307      	adds	r3, #7
    150c:	f023 0307 	bic.w	r3, r3, #7
    1510:	f103 0208 	add.w	r2, r3, #8
    1514:	9203      	str	r2, [sp, #12]
    1516:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    151a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    151e:	e7e8      	b.n	14f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f2>
					(uint_value_type)va_arg(ap, size_t);
    1520:	9b03      	ldr	r3, [sp, #12]
    1522:	1d1a      	adds	r2, r3, #4
    1524:	9203      	str	r2, [sp, #12]
    1526:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1528:	9306      	str	r3, [sp, #24]
    152a:	2300      	movs	r3, #0
    152c:	9307      	str	r3, [sp, #28]
				break;
    152e:	e7e0      	b.n	14f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f2>
				value->uint = (unsigned char)value->uint;
    1530:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1534:	9306      	str	r3, [sp, #24]
    1536:	2300      	movs	r3, #0
    1538:	9307      	str	r3, [sp, #28]
    153a:	e69b      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
			if (length_mod == LENGTH_UPPER_L) {
    153c:	2908      	cmp	r1, #8
    153e:	d00b      	beq.n	1558 <CONFIG_FPROTECT_BLOCK_SIZE+0x558>
				value->dbl = va_arg(ap, double);
    1540:	9b03      	ldr	r3, [sp, #12]
    1542:	3307      	adds	r3, #7
    1544:	f023 0307 	bic.w	r3, r3, #7
    1548:	f103 0208 	add.w	r2, r3, #8
    154c:	9203      	str	r2, [sp, #12]
    154e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1552:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1556:	e68d      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
				value->ldbl = va_arg(ap, long double);
    1558:	9b03      	ldr	r3, [sp, #12]
    155a:	3307      	adds	r3, #7
    155c:	f023 0307 	bic.w	r3, r3, #7
    1560:	f103 0208 	add.w	r2, r3, #8
    1564:	9203      	str	r2, [sp, #12]
    1566:	e9d3 2300 	ldrd	r2, r3, [r3]
    156a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    156e:	e681      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
			value->ptr = va_arg(ap, void *);
    1570:	9b03      	ldr	r3, [sp, #12]
    1572:	1d1a      	adds	r2, r3, #4
    1574:	9203      	str	r2, [sp, #12]
    1576:	681b      	ldr	r3, [r3, #0]
    1578:	9306      	str	r3, [sp, #24]
    157a:	e67b      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
			OUTS(sp, fp);
    157c:	4643      	mov	r3, r8
    157e:	4652      	mov	r2, sl
    1580:	4629      	mov	r1, r5
    1582:	4630      	mov	r0, r6
    1584:	f00e ff33 	bl	103ee <outs>
    1588:	2800      	cmp	r0, #0
    158a:	f2c0 814f 	blt.w	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    158e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1590:	46c2      	mov	sl, r8
			continue;
    1592:	e46f      	b.n	e74 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1594:	4629      	mov	r1, r5
    1596:	2025      	movs	r0, #37	; 0x25
    1598:	47b0      	blx	r6
    159a:	2800      	cmp	r0, #0
    159c:	f2c0 8146 	blt.w	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    15a0:	3401      	adds	r4, #1
		char sign = 0;
    15a2:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    15a6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    15aa:	f04f 0a00 	mov.w	sl, #0
			break;
    15ae:	e0a7      	b.n	1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
		case 's': {
			bps = (const char *)value->ptr;
    15b0:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    15b4:	f1bb 0f00 	cmp.w	fp, #0
    15b8:	db08      	blt.n	15cc <CONFIG_FPROTECT_BLOCK_SIZE+0x5cc>
				len = strnlen(bps, precision);
    15ba:	4659      	mov	r1, fp
    15bc:	4650      	mov	r0, sl
    15be:	f00f ff87 	bl	114d0 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    15c2:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    15c6:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    15ca:	e099      	b.n	1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
				len = strlen(bps);
    15cc:	4650      	mov	r0, sl
    15ce:	f00f ff77 	bl	114c0 <strlen>
    15d2:	e7f6      	b.n	15c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c2>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    15d4:	9b06      	ldr	r3, [sp, #24]
    15d6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    15da:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    15de:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    15e2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    15e6:	e08b      	b.n	1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    15e8:	f019 0f08 	tst.w	r9, #8
    15ec:	d105      	bne.n	15fa <CONFIG_FPROTECT_BLOCK_SIZE+0x5fa>
				sign = '+';
			} else if (conv->flag_space) {
    15ee:	f019 0910 	ands.w	r9, r9, #16
    15f2:	d004      	beq.n	15fe <CONFIG_FPROTECT_BLOCK_SIZE+0x5fe>
				sign = ' ';
    15f4:	f04f 0920 	mov.w	r9, #32
    15f8:	e001      	b.n	15fe <CONFIG_FPROTECT_BLOCK_SIZE+0x5fe>
				sign = '+';
    15fa:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    15fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    1602:	2a00      	cmp	r2, #0
    1604:	f173 0100 	sbcs.w	r1, r3, #0
    1608:	db02      	blt.n	1610 <CONFIG_FPROTECT_BLOCK_SIZE+0x610>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    160a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    160e:	e009      	b.n	1624 <CONFIG_FPROTECT_BLOCK_SIZE+0x624>
				value->uint = (uint_value_type)-sint;
    1610:	4252      	negs	r2, r2
    1612:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1616:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    161a:	f04f 092d 	mov.w	r9, #45	; 0x2d
    161e:	e001      	b.n	1624 <CONFIG_FPROTECT_BLOCK_SIZE+0x624>
		switch (conv->specifier) {
    1620:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1624:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1628:	9300      	str	r3, [sp, #0]
    162a:	ab0c      	add	r3, sp, #48	; 0x30
    162c:	aa08      	add	r2, sp, #32
    162e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1632:	f00e fe72 	bl	1031a <encode_uint>
    1636:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1638:	f1bb 0f00 	cmp.w	fp, #0
    163c:	f2c0 8090 	blt.w	1760 <CONFIG_FPROTECT_BLOCK_SIZE+0x760>
				size_t len = bpe - bps;
    1640:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    1644:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1648:	f89d 2020 	ldrb.w	r2, [sp, #32]
    164c:	f36f 1286 	bfc	r2, #6, #1
    1650:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1654:	459b      	cmp	fp, r3
    1656:	f240 8086 	bls.w	1766 <CONFIG_FPROTECT_BLOCK_SIZE+0x766>
					conv->pad0_value = precision - (int)len;
    165a:	ebab 0303 	sub.w	r3, fp, r3
    165e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    1660:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1664:	e04c      	b.n	1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1666:	9806      	ldr	r0, [sp, #24]
    1668:	b930      	cbnz	r0, 1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
		char sign = 0;
    166a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    166e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 1834 <CONFIG_FPROTECT_BLOCK_SIZE+0x834>
			bps = "(nil)";
    1672:	f1ab 0a05 	sub.w	sl, fp, #5
    1676:	e043      	b.n	1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1678:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    167c:	9300      	str	r3, [sp, #0]
    167e:	ab0c      	add	r3, sp, #48	; 0x30
    1680:	aa08      	add	r2, sp, #32
    1682:	2100      	movs	r1, #0
    1684:	f00e fe49 	bl	1031a <encode_uint>
    1688:	4682      	mov	sl, r0
				conv->altform_0c = true;
    168a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    168e:	f043 0310 	orr.w	r3, r3, #16
    1692:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    1696:	2378      	movs	r3, #120	; 0x78
    1698:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    169c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    16a0:	e7ca      	b.n	1638 <CONFIG_FPROTECT_BLOCK_SIZE+0x638>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    16a2:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    16a4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    16a8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    16ac:	2b07      	cmp	r3, #7
    16ae:	d806      	bhi.n	16be <CONFIG_FPROTECT_BLOCK_SIZE+0x6be>
    16b0:	e8df f003 	tbb	[pc, r3]
    16b4:	100e0c04 	.word	0x100e0c04
    16b8:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    16bc:	6014      	str	r4, [r2, #0]
		char sign = 0;
    16be:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    16c2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    16c6:	f04f 0a00 	mov.w	sl, #0
}
    16ca:	e019      	b.n	1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
		*(signed char *)dp = (signed char)count;
    16cc:	7014      	strb	r4, [r2, #0]
		break;
    16ce:	e7f6      	b.n	16be <CONFIG_FPROTECT_BLOCK_SIZE+0x6be>
		*(short *)dp = (short)count;
    16d0:	8014      	strh	r4, [r2, #0]
		break;
    16d2:	e7f4      	b.n	16be <CONFIG_FPROTECT_BLOCK_SIZE+0x6be>
		*(long *)dp = (long)count;
    16d4:	6014      	str	r4, [r2, #0]
		break;
    16d6:	e7f2      	b.n	16be <CONFIG_FPROTECT_BLOCK_SIZE+0x6be>
		*(long long *)dp = (long long)count;
    16d8:	4620      	mov	r0, r4
    16da:	17e1      	asrs	r1, r4, #31
    16dc:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    16e0:	e7ed      	b.n	16be <CONFIG_FPROTECT_BLOCK_SIZE+0x6be>
		*(intmax_t *)dp = (intmax_t)count;
    16e2:	4620      	mov	r0, r4
    16e4:	17e1      	asrs	r1, r4, #31
    16e6:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    16ea:	e7e8      	b.n	16be <CONFIG_FPROTECT_BLOCK_SIZE+0x6be>
		*(size_t *)dp = (size_t)count;
    16ec:	6014      	str	r4, [r2, #0]
		break;
    16ee:	e7e6      	b.n	16be <CONFIG_FPROTECT_BLOCK_SIZE+0x6be>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    16f0:	6014      	str	r4, [r2, #0]
		break;
    16f2:	e7e4      	b.n	16be <CONFIG_FPROTECT_BLOCK_SIZE+0x6be>
		switch (conv->specifier) {
    16f4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    16f8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    16fc:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1700:	f1ba 0f00 	cmp.w	sl, #0
    1704:	f000 808e 	beq.w	1824 <CONFIG_FPROTECT_BLOCK_SIZE+0x824>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1708:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    170c:	f1b9 0f00 	cmp.w	r9, #0
    1710:	d000      	beq.n	1714 <CONFIG_FPROTECT_BLOCK_SIZE+0x714>
			nj_len += 1U;
    1712:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    1714:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    1718:	f011 0f10 	tst.w	r1, #16
    171c:	d026      	beq.n	176c <CONFIG_FPROTECT_BLOCK_SIZE+0x76c>
			nj_len += 2U;
    171e:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1720:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1722:	4413      	add	r3, r2
		if (conv->pad_fp) {
    1724:	f011 0f40 	tst.w	r1, #64	; 0x40
    1728:	d001      	beq.n	172e <CONFIG_FPROTECT_BLOCK_SIZE+0x72e>
			nj_len += conv->pad0_pre_exp;
    172a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    172c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    172e:	2f00      	cmp	r7, #0
    1730:	dd32      	ble.n	1798 <CONFIG_FPROTECT_BLOCK_SIZE+0x798>
			width -= (int)nj_len;
    1732:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1734:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1738:	f013 0f04 	tst.w	r3, #4
    173c:	d12c      	bne.n	1798 <CONFIG_FPROTECT_BLOCK_SIZE+0x798>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    173e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1742:	d018      	beq.n	1776 <CONFIG_FPROTECT_BLOCK_SIZE+0x776>
					if (sign != 0) {
    1744:	f1b9 0f00 	cmp.w	r9, #0
    1748:	d018      	beq.n	177c <CONFIG_FPROTECT_BLOCK_SIZE+0x77c>
						OUTC(sign);
    174a:	4629      	mov	r1, r5
    174c:	4648      	mov	r0, r9
    174e:	47b0      	blx	r6
    1750:	2800      	cmp	r0, #0
    1752:	db6b      	blt.n	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    1754:	3401      	adds	r4, #1
						sign = 0;
    1756:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    175a:	2330      	movs	r3, #48	; 0x30
    175c:	9302      	str	r3, [sp, #8]
    175e:	e00f      	b.n	1780 <CONFIG_FPROTECT_BLOCK_SIZE+0x780>
		const char *bpe = buf + sizeof(buf);
    1760:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1764:	e7cc      	b.n	1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
    1766:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    176a:	e7c9      	b.n	1700 <CONFIG_FPROTECT_BLOCK_SIZE+0x700>
		} else if (conv->altform_0) {
    176c:	f011 0f08 	tst.w	r1, #8
    1770:	d0d6      	beq.n	1720 <CONFIG_FPROTECT_BLOCK_SIZE+0x720>
			nj_len += 1U;
    1772:	3201      	adds	r2, #1
    1774:	e7d4      	b.n	1720 <CONFIG_FPROTECT_BLOCK_SIZE+0x720>
				char pad = ' ';
    1776:	2320      	movs	r3, #32
    1778:	9302      	str	r3, [sp, #8]
    177a:	e001      	b.n	1780 <CONFIG_FPROTECT_BLOCK_SIZE+0x780>
					pad = '0';
    177c:	2330      	movs	r3, #48	; 0x30
    177e:	9302      	str	r3, [sp, #8]
    1780:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1782:	1e5f      	subs	r7, r3, #1
    1784:	2b00      	cmp	r3, #0
    1786:	dd07      	ble.n	1798 <CONFIG_FPROTECT_BLOCK_SIZE+0x798>
					OUTC(pad);
    1788:	4629      	mov	r1, r5
    178a:	9802      	ldr	r0, [sp, #8]
    178c:	47b0      	blx	r6
    178e:	2800      	cmp	r0, #0
    1790:	db4c      	blt.n	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    1792:	3401      	adds	r4, #1
				while (width-- > 0) {
    1794:	463b      	mov	r3, r7
    1796:	e7f4      	b.n	1782 <CONFIG_FPROTECT_BLOCK_SIZE+0x782>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1798:	f1b9 0f00 	cmp.w	r9, #0
    179c:	d005      	beq.n	17aa <CONFIG_FPROTECT_BLOCK_SIZE+0x7aa>
			OUTC(sign);
    179e:	4629      	mov	r1, r5
    17a0:	4648      	mov	r0, r9
    17a2:	47b0      	blx	r6
    17a4:	2800      	cmp	r0, #0
    17a6:	db41      	blt.n	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    17a8:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    17aa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    17ae:	f3c3 1200 	ubfx	r2, r3, #4, #1
    17b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    17b6:	4313      	orrs	r3, r2
    17b8:	d005      	beq.n	17c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7c6>
				OUTC('0');
    17ba:	4629      	mov	r1, r5
    17bc:	2030      	movs	r0, #48	; 0x30
    17be:	47b0      	blx	r6
    17c0:	2800      	cmp	r0, #0
    17c2:	db33      	blt.n	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    17c4:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    17c6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    17ca:	f013 0f10 	tst.w	r3, #16
    17ce:	d006      	beq.n	17de <CONFIG_FPROTECT_BLOCK_SIZE+0x7de>
				OUTC(conv->specifier);
    17d0:	4629      	mov	r1, r5
    17d2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    17d6:	47b0      	blx	r6
    17d8:	2800      	cmp	r0, #0
    17da:	db27      	blt.n	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    17dc:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    17de:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    17e0:	f103 39ff 	add.w	r9, r3, #4294967295
    17e4:	2b00      	cmp	r3, #0
    17e6:	dd07      	ble.n	17f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f8>
				OUTC('0');
    17e8:	4629      	mov	r1, r5
    17ea:	2030      	movs	r0, #48	; 0x30
    17ec:	47b0      	blx	r6
    17ee:	2800      	cmp	r0, #0
    17f0:	db1c      	blt.n	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    17f2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    17f4:	464b      	mov	r3, r9
    17f6:	e7f3      	b.n	17e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x7e0>
			}

			OUTS(bps, bpe);
    17f8:	465b      	mov	r3, fp
    17fa:	4652      	mov	r2, sl
    17fc:	4629      	mov	r1, r5
    17fe:	4630      	mov	r0, r6
    1800:	f00e fdf5 	bl	103ee <outs>
    1804:	2800      	cmp	r0, #0
    1806:	db11      	blt.n	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    1808:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    180a:	2f00      	cmp	r7, #0
    180c:	dd07      	ble.n	181e <CONFIG_FPROTECT_BLOCK_SIZE+0x81e>
			OUTC(' ');
    180e:	4629      	mov	r1, r5
    1810:	2020      	movs	r0, #32
    1812:	47b0      	blx	r6
    1814:	2800      	cmp	r0, #0
    1816:	db09      	blt.n	182c <CONFIG_FPROTECT_BLOCK_SIZE+0x82c>
    1818:	3401      	adds	r4, #1
			--width;
    181a:	3f01      	subs	r7, #1
    181c:	e7f5      	b.n	180a <CONFIG_FPROTECT_BLOCK_SIZE+0x80a>
		fp = extract_conversion(conv, sp);
    181e:	46c2      	mov	sl, r8
    1820:	f7ff bb28 	b.w	e74 <cbvprintf+0x10>
    1824:	46c2      	mov	sl, r8
    1826:	f7ff bb25 	b.w	e74 <cbvprintf+0x10>
		}
	}

	return count;
    182a:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    182c:	b013      	add	sp, #76	; 0x4c
    182e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1832:	bf00      	nop
    1834:	00014805 	.word	0x00014805

00001838 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1838:	4b05      	ldr	r3, [pc, #20]	; (1850 <is_rodata+0x18>)
    183a:	4298      	cmp	r0, r3
    183c:	d304      	bcc.n	1848 <is_rodata+0x10>
    183e:	4b05      	ldr	r3, [pc, #20]	; (1854 <is_rodata+0x1c>)
    1840:	4298      	cmp	r0, r3
    1842:	d303      	bcc.n	184c <is_rodata+0x14>
    1844:	2000      	movs	r0, #0
    1846:	4770      	bx	lr
    1848:	2000      	movs	r0, #0
    184a:	4770      	bx	lr
    184c:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    184e:	4770      	bx	lr
    1850:	000143b8 	.word	0x000143b8
    1854:	00015f80 	.word	0x00015f80

00001858 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    1858:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    185a:	4b06      	ldr	r3, [pc, #24]	; (1874 <thread_set+0x1c>)
    185c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    185e:	b118      	cbz	r0, 1868 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1860:	4b05      	ldr	r3, [pc, #20]	; (1878 <thread_set+0x20>)
    1862:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    1864:	2b09      	cmp	r3, #9
    1866:	dc00      	bgt.n	186a <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    1868:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    186a:	4804      	ldr	r0, [pc, #16]	; (187c <thread_set+0x24>)
    186c:	f00c fd76 	bl	e35c <z_impl_k_sem_give>
}
    1870:	e7fa      	b.n	1868 <thread_set+0x10>
    1872:	bf00      	nop
    1874:	200015e0 	.word	0x200015e0
    1878:	200015b0 	.word	0x200015b0
    187c:	200003dc 	.word	0x200003dc

00001880 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    1880:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    1882:	4802      	ldr	r0, [pc, #8]	; (188c <log_process_thread_timer_expiry_fn+0xc>)
    1884:	f00c fd6a 	bl	e35c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    1888:	bd08      	pop	{r3, pc}
    188a:	bf00      	nop
    188c:	200003dc 	.word	0x200003dc

00001890 <next_pending>:
{
    1890:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    1892:	4803      	ldr	r0, [pc, #12]	; (18a0 <next_pending+0x10>)
    1894:	f00e fed8 	bl	10648 <log_list_head_peek>
}
    1898:	3800      	subs	r0, #0
    189a:	bf18      	it	ne
    189c:	2001      	movne	r0, #1
    189e:	bd08      	pop	{r3, pc}
    18a0:	200015bc 	.word	0x200015bc

000018a4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    18a4:	b530      	push	{r4, r5, lr}
    18a6:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    18a8:	2200      	movs	r2, #0
    18aa:	490f      	ldr	r1, [pc, #60]	; (18e8 <enable_logger+0x44>)
    18ac:	480f      	ldr	r0, [pc, #60]	; (18ec <enable_logger+0x48>)
    18ae:	f012 fd32 	bl	14316 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    18b2:	4d0f      	ldr	r5, [pc, #60]	; (18f0 <enable_logger+0x4c>)
    18b4:	2200      	movs	r2, #0
    18b6:	2300      	movs	r3, #0
    18b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    18bc:	2400      	movs	r4, #0
    18be:	9404      	str	r4, [sp, #16]
    18c0:	230e      	movs	r3, #14
    18c2:	9303      	str	r3, [sp, #12]
    18c4:	9402      	str	r4, [sp, #8]
    18c6:	9401      	str	r4, [sp, #4]
    18c8:	9400      	str	r4, [sp, #0]
    18ca:	4b0a      	ldr	r3, [pc, #40]	; (18f4 <enable_logger+0x50>)
    18cc:	f44f 7240 	mov.w	r2, #768	; 0x300
    18d0:	4909      	ldr	r1, [pc, #36]	; (18f8 <enable_logger+0x54>)
    18d2:	4628      	mov	r0, r5
    18d4:	f012 f9b7 	bl	13c46 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    18d8:	4908      	ldr	r1, [pc, #32]	; (18fc <enable_logger+0x58>)
    18da:	4628      	mov	r0, r5
    18dc:	f00c fb50 	bl	df80 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    18e0:	4620      	mov	r0, r4
    18e2:	b009      	add	sp, #36	; 0x24
    18e4:	bd30      	pop	{r4, r5, pc}
    18e6:	bf00      	nop
    18e8:	00001881 	.word	0x00001881
    18ec:	200004e0 	.word	0x200004e0
    18f0:	20000518 	.word	0x20000518
    18f4:	00001f91 	.word	0x00001f91
    18f8:	200030a0 	.word	0x200030a0
    18fc:	00014808 	.word	0x00014808

00001900 <log_core_init>:
{
    1900:	b508      	push	{r3, lr}
	panic_mode = false;
    1902:	2300      	movs	r3, #0
    1904:	4a0b      	ldr	r2, [pc, #44]	; (1934 <log_core_init+0x34>)
    1906:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1908:	4a0b      	ldr	r2, [pc, #44]	; (1938 <log_core_init+0x38>)
    190a:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    190c:	4b0b      	ldr	r3, [pc, #44]	; (193c <log_core_init+0x3c>)
    190e:	4a0c      	ldr	r2, [pc, #48]	; (1940 <log_core_init+0x40>)
    1910:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1912:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1916:	f000 fdbb 	bl	2490 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    191a:	f000 fb9f 	bl	205c <log_msg_pool_init>
		log_list_init(&list);
    191e:	4809      	ldr	r0, [pc, #36]	; (1944 <log_core_init+0x44>)
    1920:	f00e fe84 	bl	1062c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1924:	2304      	movs	r3, #4
    1926:	2228      	movs	r2, #40	; 0x28
    1928:	4907      	ldr	r1, [pc, #28]	; (1948 <log_core_init+0x48>)
    192a:	4808      	ldr	r0, [pc, #32]	; (194c <log_core_init+0x4c>)
    192c:	f012 f928 	bl	13b80 <k_mem_slab_init>
}
    1930:	bd08      	pop	{r3, pc}
    1932:	bf00      	nop
    1934:	20002ed6 	.word	0x20002ed6
    1938:	200015b4 	.word	0x200015b4
    193c:	20000128 	.word	0x20000128
    1940:	00010661 	.word	0x00010661
    1944:	200015bc 	.word	0x200015bc
    1948:	20005720 	.word	0x20005720
    194c:	200015c4 	.word	0x200015c4

00001950 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1950:	4b18      	ldr	r3, [pc, #96]	; (19b4 <log_init+0x64>)
    1952:	f3bf 8f5b 	dmb	ish
    1956:	e853 2f00 	ldrex	r2, [r3]
    195a:	1c51      	adds	r1, r2, #1
    195c:	e843 1000 	strex	r0, r1, [r3]
    1960:	2800      	cmp	r0, #0
    1962:	d1f8      	bne.n	1956 <log_init+0x6>
    1964:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1968:	bb1a      	cbnz	r2, 19b2 <log_init+0x62>
{
    196a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    196c:	2400      	movs	r4, #0
    196e:	e009      	b.n	1984 <log_init+0x34>
					   backend->cb->ctx,
    1970:	4b11      	ldr	r3, [pc, #68]	; (19b8 <log_init+0x68>)
    1972:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    1976:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1978:	2204      	movs	r2, #4
    197a:	6819      	ldr	r1, [r3, #0]
    197c:	4628      	mov	r0, r5
    197e:	f000 fb4b 	bl	2018 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1982:	3401      	adds	r4, #1
    1984:	4b0d      	ldr	r3, [pc, #52]	; (19bc <log_init+0x6c>)
    1986:	4a0c      	ldr	r2, [pc, #48]	; (19b8 <log_init+0x68>)
    1988:	1a9b      	subs	r3, r3, r2
    198a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    198e:	da0f      	bge.n	19b0 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    1990:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    1992:	4d09      	ldr	r5, [pc, #36]	; (19b8 <log_init+0x68>)
    1994:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1998:	7b2b      	ldrb	r3, [r5, #12]
    199a:	2b00      	cmp	r3, #0
    199c:	d0f1      	beq.n	1982 <log_init+0x32>
			if (backend->api->init != NULL) {
    199e:	0123      	lsls	r3, r4, #4
    19a0:	4a05      	ldr	r2, [pc, #20]	; (19b8 <log_init+0x68>)
    19a2:	58d3      	ldr	r3, [r2, r3]
    19a4:	699b      	ldr	r3, [r3, #24]
    19a6:	2b00      	cmp	r3, #0
    19a8:	d0e2      	beq.n	1970 <log_init+0x20>
				backend->api->init(backend);
    19aa:	4628      	mov	r0, r5
    19ac:	4798      	blx	r3
    19ae:	e7df      	b.n	1970 <log_init+0x20>
}
    19b0:	bd70      	pop	{r4, r5, r6, pc}
    19b2:	4770      	bx	lr
    19b4:	200015b8 	.word	0x200015b8
    19b8:	00014700 	.word	0x00014700
    19bc:	00014720 	.word	0x00014720

000019c0 <get_msg>:
{
    19c0:	b510      	push	{r4, lr}
    19c2:	f04f 0320 	mov.w	r3, #32
    19c6:	f3ef 8411 	mrs	r4, BASEPRI
    19ca:	f383 8812 	msr	BASEPRI_MAX, r3
    19ce:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    19d2:	4804      	ldr	r0, [pc, #16]	; (19e4 <get_msg+0x24>)
    19d4:	f00e fe3a 	bl	1064c <log_list_head_get>
	__asm__ volatile(
    19d8:	f384 8811 	msr	BASEPRI, r4
    19dc:	f3bf 8f6f 	isb	sy
}
    19e0:	bd10      	pop	{r4, pc}
    19e2:	bf00      	nop
    19e4:	200015bc 	.word	0x200015bc

000019e8 <z_log_notify_backend_enabled>:
{
    19e8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    19ea:	4b05      	ldr	r3, [pc, #20]	; (1a00 <z_log_notify_backend_enabled+0x18>)
    19ec:	781b      	ldrb	r3, [r3, #0]
    19ee:	b11b      	cbz	r3, 19f8 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    19f0:	4b03      	ldr	r3, [pc, #12]	; (1a00 <z_log_notify_backend_enabled+0x18>)
    19f2:	2201      	movs	r2, #1
    19f4:	701a      	strb	r2, [r3, #0]
}
    19f6:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    19f8:	4802      	ldr	r0, [pc, #8]	; (1a04 <z_log_notify_backend_enabled+0x1c>)
    19fa:	f00c fcaf 	bl	e35c <z_impl_k_sem_give>
}
    19fe:	e7f7      	b.n	19f0 <z_log_notify_backend_enabled+0x8>
    1a00:	20002ed5 	.word	0x20002ed5
    1a04:	200003dc 	.word	0x200003dc

00001a08 <z_log_dropped>:
    1a08:	4b0c      	ldr	r3, [pc, #48]	; (1a3c <z_log_dropped+0x34>)
    1a0a:	f3bf 8f5b 	dmb	ish
    1a0e:	e853 2f00 	ldrex	r2, [r3]
    1a12:	3201      	adds	r2, #1
    1a14:	e843 2100 	strex	r1, r2, [r3]
    1a18:	2900      	cmp	r1, #0
    1a1a:	d1f8      	bne.n	1a0e <z_log_dropped+0x6>
    1a1c:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1a20:	4b07      	ldr	r3, [pc, #28]	; (1a40 <z_log_dropped+0x38>)
    1a22:	f3bf 8f5b 	dmb	ish
    1a26:	e853 2f00 	ldrex	r2, [r3]
    1a2a:	3a01      	subs	r2, #1
    1a2c:	e843 2100 	strex	r1, r2, [r3]
    1a30:	2900      	cmp	r1, #0
    1a32:	d1f8      	bne.n	1a26 <z_log_dropped+0x1e>
    1a34:	f3bf 8f5b 	dmb	ish
}
    1a38:	4770      	bx	lr
    1a3a:	bf00      	nop
    1a3c:	200015b4 	.word	0x200015b4
    1a40:	200015b0 	.word	0x200015b0

00001a44 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1a44:	4b06      	ldr	r3, [pc, #24]	; (1a60 <z_log_dropped_read_and_clear+0x1c>)
}
    1a46:	2000      	movs	r0, #0
    1a48:	4602      	mov	r2, r0
    1a4a:	f3bf 8f5b 	dmb	ish
    1a4e:	e853 0f00 	ldrex	r0, [r3]
    1a52:	e843 2100 	strex	r1, r2, [r3]
    1a56:	2900      	cmp	r1, #0
    1a58:	d1f9      	bne.n	1a4e <z_log_dropped_read_and_clear+0xa>
    1a5a:	f3bf 8f5b 	dmb	ish
    1a5e:	4770      	bx	lr
    1a60:	200015b4 	.word	0x200015b4

00001a64 <dropped_notify>:
{
    1a64:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1a66:	f7ff ffed 	bl	1a44 <z_log_dropped_read_and_clear>
    1a6a:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    1a6c:	2400      	movs	r4, #0
    1a6e:	e000      	b.n	1a72 <dropped_notify+0xe>
    1a70:	3401      	adds	r4, #1
    1a72:	4b0b      	ldr	r3, [pc, #44]	; (1aa0 <dropped_notify+0x3c>)
    1a74:	4a0b      	ldr	r2, [pc, #44]	; (1aa4 <dropped_notify+0x40>)
    1a76:	1a9b      	subs	r3, r3, r2
    1a78:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1a7c:	da0f      	bge.n	1a9e <dropped_notify+0x3a>
    1a7e:	4809      	ldr	r0, [pc, #36]	; (1aa4 <dropped_notify+0x40>)
    1a80:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1a84:	6843      	ldr	r3, [r0, #4]
    1a86:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d0f1      	beq.n	1a70 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    1a8c:	0123      	lsls	r3, r4, #4
    1a8e:	4a05      	ldr	r2, [pc, #20]	; (1aa4 <dropped_notify+0x40>)
    1a90:	58d3      	ldr	r3, [r2, r3]
    1a92:	691b      	ldr	r3, [r3, #16]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d0eb      	beq.n	1a70 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1a98:	4629      	mov	r1, r5
    1a9a:	4798      	blx	r3
    1a9c:	e7e8      	b.n	1a70 <dropped_notify+0xc>
}
    1a9e:	bd38      	pop	{r3, r4, r5, pc}
    1aa0:	00014720 	.word	0x00014720
    1aa4:	00014700 	.word	0x00014700

00001aa8 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    1aa8:	4b03      	ldr	r3, [pc, #12]	; (1ab8 <z_log_dropped_pending+0x10>)
    1aaa:	6818      	ldr	r0, [r3, #0]
}
    1aac:	2800      	cmp	r0, #0
    1aae:	bfd4      	ite	le
    1ab0:	2000      	movle	r0, #0
    1ab2:	2001      	movgt	r0, #1
    1ab4:	4770      	bx	lr
    1ab6:	bf00      	nop
    1ab8:	200015b4 	.word	0x200015b4

00001abc <z_log_strdup>:
{
    1abc:	b510      	push	{r4, lr}
    1abe:	b082      	sub	sp, #8
    1ac0:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    1ac2:	f7ff feb9 	bl	1838 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    1ac6:	bb10      	cbnz	r0, 1b0e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    1ac8:	2200      	movs	r2, #0
    1aca:	2300      	movs	r3, #0
    1acc:	a901      	add	r1, sp, #4
    1ace:	4811      	ldr	r0, [pc, #68]	; (1b14 <z_log_strdup+0x58>)
    1ad0:	f00c fa00 	bl	ded4 <k_mem_slab_alloc>
	if (err != 0) {
    1ad4:	b108      	cbz	r0, 1ada <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    1ad6:	4c10      	ldr	r4, [pc, #64]	; (1b18 <z_log_strdup+0x5c>)
    1ad8:	e019      	b.n	1b0e <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    1ada:	9b01      	ldr	r3, [sp, #4]
    1adc:	2201      	movs	r2, #1
    1ade:	f3bf 8f5b 	dmb	ish
    1ae2:	e853 1f00 	ldrex	r1, [r3]
    1ae6:	e843 2000 	strex	r0, r2, [r3]
    1aea:	2800      	cmp	r0, #0
    1aec:	d1f9      	bne.n	1ae2 <z_log_strdup+0x26>
    1aee:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    1af2:	221f      	movs	r2, #31
    1af4:	4621      	mov	r1, r4
    1af6:	9801      	ldr	r0, [sp, #4]
    1af8:	3004      	adds	r0, #4
    1afa:	f00f fcbb 	bl	11474 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1afe:	9c01      	ldr	r4, [sp, #4]
    1b00:	237e      	movs	r3, #126	; 0x7e
    1b02:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1b06:	2300      	movs	r3, #0
    1b08:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    1b0c:	3404      	adds	r4, #4
}
    1b0e:	4620      	mov	r0, r4
    1b10:	b002      	add	sp, #8
    1b12:	bd10      	pop	{r4, pc}
    1b14:	200015c4 	.word	0x200015c4
    1b18:	00014810 	.word	0x00014810

00001b1c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    1b1c:	b138      	cbz	r0, 1b2e <log_is_strdup+0x12>
    1b1e:	4a07      	ldr	r2, [pc, #28]	; (1b3c <log_is_strdup+0x20>)
    1b20:	4290      	cmp	r0, r2
    1b22:	d306      	bcc.n	1b32 <log_is_strdup+0x16>
    1b24:	32a0      	adds	r2, #160	; 0xa0
    1b26:	4290      	cmp	r0, r2
    1b28:	d305      	bcc.n	1b36 <log_is_strdup+0x1a>
    1b2a:	2000      	movs	r0, #0
    1b2c:	4770      	bx	lr
    1b2e:	2000      	movs	r0, #0
    1b30:	4770      	bx	lr
    1b32:	2000      	movs	r0, #0
    1b34:	4770      	bx	lr
    1b36:	2001      	movs	r0, #1
}
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop
    1b3c:	20005720 	.word	0x20005720

00001b40 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1b40:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    1b42:	f013 0f01 	tst.w	r3, #1
    1b46:	d000      	beq.n	1b4a <detect_missed_strdup+0xa>
    1b48:	4770      	bx	lr
{
    1b4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b4e:	b083      	sub	sp, #12
    1b50:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    1b52:	f00e fe66 	bl	10822 <log_msg_str_get>
    1b56:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    1b58:	4630      	mov	r0, r6
    1b5a:	f00e fe4d 	bl	107f8 <log_msg_nargs_get>
    1b5e:	4601      	mov	r1, r0
    1b60:	4638      	mov	r0, r7
    1b62:	f00e fd81 	bl	10668 <z_log_get_s_mask>
    1b66:	4605      	mov	r5, r0
	while (mask) {
    1b68:	e004      	b.n	1b74 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    1b6a:	2301      	movs	r3, #1
    1b6c:	fa03 f404 	lsl.w	r4, r3, r4
    1b70:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    1b74:	b36d      	cbz	r5, 1bd2 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    1b76:	fab5 f485 	clz	r4, r5
    1b7a:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    1b7e:	4621      	mov	r1, r4
    1b80:	4630      	mov	r0, r6
    1b82:	f00e fe3c 	bl	107fe <log_msg_arg_get>
    1b86:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    1b88:	f7ff fe56 	bl	1838 <is_rodata>
    1b8c:	2800      	cmp	r0, #0
    1b8e:	d1ec      	bne.n	1b6a <detect_missed_strdup+0x2a>
    1b90:	4648      	mov	r0, r9
    1b92:	f7ff ffc3 	bl	1b1c <log_is_strdup>
    1b96:	2800      	cmp	r0, #0
    1b98:	d1e7      	bne.n	1b6a <detect_missed_strdup+0x2a>
    1b9a:	4b0f      	ldr	r3, [pc, #60]	; (1bd8 <detect_missed_strdup+0x98>)
    1b9c:	4599      	cmp	r9, r3
    1b9e:	d0e4      	beq.n	1b6a <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    1ba0:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    1ba2:	f3c1 1189 	ubfx	r1, r1, #6, #10
    1ba6:	f000 fa27 	bl	1ff8 <log_source_name_get>
    1baa:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    1bac:	4b0b      	ldr	r3, [pc, #44]	; (1bdc <detect_missed_strdup+0x9c>)
    1bae:	490c      	ldr	r1, [pc, #48]	; (1be0 <detect_missed_strdup+0xa0>)
    1bb0:	1a5b      	subs	r3, r3, r1
    1bb2:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    1bb4:	2101      	movs	r1, #1
    1bb6:	f361 0802 	bfi	r8, r1, #0, #3
    1bba:	f36f 08c5 	bfc	r8, #3, #3
    1bbe:	f363 188f 	bfi	r8, r3, #6, #10
    1bc2:	f8ad 8000 	strh.w	r8, [sp]
    1bc6:	463b      	mov	r3, r7
    1bc8:	4621      	mov	r1, r4
    1bca:	4806      	ldr	r0, [pc, #24]	; (1be4 <detect_missed_strdup+0xa4>)
    1bcc:	f000 f8b2 	bl	1d34 <log_3>
    1bd0:	e7cb      	b.n	1b6a <detect_missed_strdup+0x2a>
}
    1bd2:	b003      	add	sp, #12
    1bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1bd8:	00014810 	.word	0x00014810
    1bdc:	000146a8 	.word	0x000146a8
    1be0:	00014688 	.word	0x00014688
    1be4:	0001482c 	.word	0x0001482c

00001be8 <msg_process>:
{
    1be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bea:	4606      	mov	r6, r0
	if (!bypass) {
    1bec:	bb19      	cbnz	r1, 1c36 <msg_process+0x4e>
		    !panic_mode) {
    1bee:	4b14      	ldr	r3, [pc, #80]	; (1c40 <msg_process+0x58>)
    1bf0:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    1bf2:	b10b      	cbz	r3, 1bf8 <msg_process+0x10>
{
    1bf4:	2400      	movs	r4, #0
    1bf6:	e003      	b.n	1c00 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    1bf8:	f7ff ffa2 	bl	1b40 <detect_missed_strdup>
    1bfc:	e7fa      	b.n	1bf4 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    1bfe:	3401      	adds	r4, #1
    1c00:	4b10      	ldr	r3, [pc, #64]	; (1c44 <msg_process+0x5c>)
    1c02:	4a11      	ldr	r2, [pc, #68]	; (1c48 <msg_process+0x60>)
    1c04:	1a9b      	subs	r3, r3, r2
    1c06:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1c0a:	da14      	bge.n	1c36 <msg_process+0x4e>
	return &__log_backends_start[idx];
    1c0c:	4d0e      	ldr	r5, [pc, #56]	; (1c48 <msg_process+0x60>)
    1c0e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    1c12:	686b      	ldr	r3, [r5, #4]
    1c14:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    1c16:	2b00      	cmp	r3, #0
    1c18:	d0f1      	beq.n	1bfe <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    1c1a:	4631      	mov	r1, r6
    1c1c:	4628      	mov	r0, r5
    1c1e:	f00e fd1d 	bl	1065c <msg_filter_check>
			if (log_backend_is_active(backend) &&
    1c22:	2800      	cmp	r0, #0
    1c24:	d0eb      	beq.n	1bfe <msg_process+0x16>
	backend->api->put(backend, msg);
    1c26:	0127      	lsls	r7, r4, #4
    1c28:	4b07      	ldr	r3, [pc, #28]	; (1c48 <msg_process+0x60>)
    1c2a:	59db      	ldr	r3, [r3, r7]
    1c2c:	685b      	ldr	r3, [r3, #4]
    1c2e:	4631      	mov	r1, r6
    1c30:	4628      	mov	r0, r5
    1c32:	4798      	blx	r3
}
    1c34:	e7e3      	b.n	1bfe <msg_process+0x16>
			log_msg_put(msg.msg);
    1c36:	4630      	mov	r0, r6
    1c38:	f00e fdf5 	bl	10826 <log_msg_put>
}
    1c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c3e:	bf00      	nop
    1c40:	20002ed6 	.word	0x20002ed6
    1c44:	00014720 	.word	0x00014720
    1c48:	00014700 	.word	0x00014700

00001c4c <z_impl_log_process>:
{
    1c4c:	b510      	push	{r4, lr}
    1c4e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1c50:	4b10      	ldr	r3, [pc, #64]	; (1c94 <z_impl_log_process+0x48>)
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	b903      	cbnz	r3, 1c58 <z_impl_log_process+0xc>
    1c56:	b1c8      	cbz	r0, 1c8c <z_impl_log_process+0x40>
	msg = get_msg();
    1c58:	f7ff feb2 	bl	19c0 <get_msg>
	if (msg.msg) {
    1c5c:	4602      	mov	r2, r0
    1c5e:	b178      	cbz	r0, 1c80 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1c60:	4b0d      	ldr	r3, [pc, #52]	; (1c98 <z_impl_log_process+0x4c>)
    1c62:	f3bf 8f5b 	dmb	ish
    1c66:	e853 1f00 	ldrex	r1, [r3]
    1c6a:	3901      	subs	r1, #1
    1c6c:	e843 1000 	strex	r0, r1, [r3]
    1c70:	2800      	cmp	r0, #0
    1c72:	d1f8      	bne.n	1c66 <z_impl_log_process+0x1a>
    1c74:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    1c78:	4621      	mov	r1, r4
    1c7a:	4610      	mov	r0, r2
    1c7c:	f7ff ffb4 	bl	1be8 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    1c80:	b914      	cbnz	r4, 1c88 <z_impl_log_process+0x3c>
    1c82:	f7ff ff11 	bl	1aa8 <z_log_dropped_pending>
    1c86:	b910      	cbnz	r0, 1c8e <z_impl_log_process+0x42>
	return next_pending();
    1c88:	f7ff fe02 	bl	1890 <next_pending>
}
    1c8c:	bd10      	pop	{r4, pc}
		dropped_notify();
    1c8e:	f7ff fee9 	bl	1a64 <dropped_notify>
    1c92:	e7f9      	b.n	1c88 <z_impl_log_process+0x3c>
    1c94:	20002ed5 	.word	0x20002ed5
    1c98:	200015b0 	.word	0x200015b0

00001c9c <z_log_msg_post_finalize>:
{
    1c9c:	b510      	push	{r4, lr}
    1c9e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1ca0:	4b1f      	ldr	r3, [pc, #124]	; (1d20 <z_log_msg_post_finalize+0x84>)
    1ca2:	f3bf 8f5b 	dmb	ish
    1ca6:	e853 2f00 	ldrex	r2, [r3]
    1caa:	3201      	adds	r2, #1
    1cac:	e843 2100 	strex	r1, r2, [r3]
    1cb0:	2900      	cmp	r1, #0
    1cb2:	d1f8      	bne.n	1ca6 <z_log_msg_post_finalize+0xa>
    1cb4:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1cb8:	4b1a      	ldr	r3, [pc, #104]	; (1d24 <z_log_msg_post_finalize+0x88>)
    1cba:	781b      	ldrb	r3, [r3, #0]
    1cbc:	b963      	cbnz	r3, 1cd8 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    1cbe:	4b1a      	ldr	r3, [pc, #104]	; (1d28 <z_log_msg_post_finalize+0x8c>)
    1cc0:	681b      	ldr	r3, [r3, #0]
    1cc2:	b11b      	cbz	r3, 1ccc <z_log_msg_post_finalize+0x30>
    1cc4:	4a16      	ldr	r2, [pc, #88]	; (1d20 <z_log_msg_post_finalize+0x84>)
    1cc6:	6812      	ldr	r2, [r2, #0]
    1cc8:	2a01      	cmp	r2, #1
    1cca:	d015      	beq.n	1cf8 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1ccc:	4a14      	ldr	r2, [pc, #80]	; (1d20 <z_log_msg_post_finalize+0x84>)
    1cce:	6812      	ldr	r2, [r2, #0]
    1cd0:	2a0a      	cmp	r2, #10
    1cd2:	d01c      	beq.n	1d0e <z_log_msg_post_finalize+0x72>
}
    1cd4:	b002      	add	sp, #8
    1cd6:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    1cd8:	f04f 0320 	mov.w	r3, #32
    1cdc:	f3ef 8411 	mrs	r4, BASEPRI
    1ce0:	f383 8812 	msr	BASEPRI_MAX, r3
    1ce4:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1ce8:	2000      	movs	r0, #0
    1cea:	f7ff ffaf 	bl	1c4c <z_impl_log_process>
	__asm__ volatile(
    1cee:	f384 8811 	msr	BASEPRI, r4
    1cf2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1cf6:	e7ed      	b.n	1cd4 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
    1cf8:	2200      	movs	r2, #0
    1cfa:	2300      	movs	r3, #0
    1cfc:	e9cd 2300 	strd	r2, r3, [sp]
    1d00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1d04:	2300      	movs	r3, #0
    1d06:	4809      	ldr	r0, [pc, #36]	; (1d2c <z_log_msg_post_finalize+0x90>)
    1d08:	f00d faac 	bl	f264 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    1d0c:	e7e2      	b.n	1cd4 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d0e0      	beq.n	1cd4 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
    1d12:	4806      	ldr	r0, [pc, #24]	; (1d2c <z_log_msg_post_finalize+0x90>)
    1d14:	f012 fb0b 	bl	1432e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1d18:	4805      	ldr	r0, [pc, #20]	; (1d30 <z_log_msg_post_finalize+0x94>)
    1d1a:	f00c fb1f 	bl	e35c <z_impl_k_sem_give>
}
    1d1e:	e7d9      	b.n	1cd4 <z_log_msg_post_finalize+0x38>
    1d20:	200015b0 	.word	0x200015b0
    1d24:	20002ed6 	.word	0x20002ed6
    1d28:	200015e0 	.word	0x200015e0
    1d2c:	200004e0 	.word	0x200004e0
    1d30:	200003dc 	.word	0x200003dc

00001d34 <log_3>:
{
    1d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d38:	4680      	mov	r8, r0
    1d3a:	460f      	mov	r7, r1
    1d3c:	4616      	mov	r6, r2
    1d3e:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1d40:	f000 f9b0 	bl	20a4 <log_msg_chunk_alloc>

	if (msg != NULL) {
    1d44:	4604      	mov	r4, r0
    1d46:	b140      	cbz	r0, 1d5a <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    1d48:	2301      	movs	r3, #1
    1d4a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1d4c:	2200      	movs	r2, #0
    1d4e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1d50:	f04f 0300 	mov.w	r3, #0
    1d54:	f362 0300 	bfi	r3, r2, #0, #1
    1d58:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    1d5a:	b14c      	cbz	r4, 1d70 <log_3+0x3c>
		msg->str = str;
    1d5c:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    1d60:	7a63      	ldrb	r3, [r4, #9]
    1d62:	2203      	movs	r2, #3
    1d64:	f362 1307 	bfi	r3, r2, #4, #4
    1d68:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1d6a:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1d6c:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    1d6e:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    1d70:	b1c4      	cbz	r4, 1da4 <log_3+0x70>
	msg->hdr.ids = src_level;
    1d72:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1d76:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1d78:	4b0b      	ldr	r3, [pc, #44]	; (1da8 <log_3+0x74>)
    1d7a:	681b      	ldr	r3, [r3, #0]
    1d7c:	4798      	blx	r3
    1d7e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1d80:	f04f 0320 	mov.w	r3, #32
    1d84:	f3ef 8511 	mrs	r5, BASEPRI
    1d88:	f383 8812 	msr	BASEPRI_MAX, r3
    1d8c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1d90:	4621      	mov	r1, r4
    1d92:	4806      	ldr	r0, [pc, #24]	; (1dac <log_3+0x78>)
    1d94:	f00e fc4e 	bl	10634 <log_list_add_tail>
	__asm__ volatile(
    1d98:	f385 8811 	msr	BASEPRI, r5
    1d9c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1da0:	f7ff ff7c 	bl	1c9c <z_log_msg_post_finalize>
}
    1da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1da8:	20000128 	.word	0x20000128
    1dac:	200015bc 	.word	0x200015bc

00001db0 <log_1>:
{
    1db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1db2:	4606      	mov	r6, r0
    1db4:	460d      	mov	r5, r1
    1db6:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1db8:	f000 f974 	bl	20a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1dbc:	4604      	mov	r4, r0
    1dbe:	b140      	cbz	r0, 1dd2 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    1dc0:	2301      	movs	r3, #1
    1dc2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1dc4:	2100      	movs	r1, #0
    1dc6:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1dc8:	f04f 0300 	mov.w	r3, #0
    1dcc:	f361 0300 	bfi	r3, r1, #0, #1
    1dd0:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1dd2:	b134      	cbz	r4, 1de2 <log_1+0x32>
		msg->str = str;
    1dd4:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    1dd6:	7a63      	ldrb	r3, [r4, #9]
    1dd8:	2201      	movs	r2, #1
    1dda:	f362 1307 	bfi	r3, r2, #4, #4
    1dde:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1de0:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    1de2:	b1b4      	cbz	r4, 1e12 <log_1+0x62>
	msg->hdr.ids = src_level;
    1de4:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1de6:	4b0b      	ldr	r3, [pc, #44]	; (1e14 <log_1+0x64>)
    1de8:	681b      	ldr	r3, [r3, #0]
    1dea:	4798      	blx	r3
    1dec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1dee:	f04f 0320 	mov.w	r3, #32
    1df2:	f3ef 8511 	mrs	r5, BASEPRI
    1df6:	f383 8812 	msr	BASEPRI_MAX, r3
    1dfa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1dfe:	4621      	mov	r1, r4
    1e00:	4805      	ldr	r0, [pc, #20]	; (1e18 <log_1+0x68>)
    1e02:	f00e fc17 	bl	10634 <log_list_add_tail>
	__asm__ volatile(
    1e06:	f385 8811 	msr	BASEPRI, r5
    1e0a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1e0e:	f7ff ff45 	bl	1c9c <z_log_msg_post_finalize>
}
    1e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e14:	20000128 	.word	0x20000128
    1e18:	200015bc 	.word	0x200015bc

00001e1c <log_2>:
{
    1e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e20:	4607      	mov	r7, r0
    1e22:	460e      	mov	r6, r1
    1e24:	4615      	mov	r5, r2
    1e26:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1e28:	f000 f93c 	bl	20a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1e2c:	4604      	mov	r4, r0
    1e2e:	b140      	cbz	r0, 1e42 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    1e30:	2301      	movs	r3, #1
    1e32:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1e34:	2200      	movs	r2, #0
    1e36:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1e38:	f04f 0300 	mov.w	r3, #0
    1e3c:	f362 0300 	bfi	r3, r2, #0, #1
    1e40:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1e42:	b13c      	cbz	r4, 1e54 <log_2+0x38>
		msg->str = str;
    1e44:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    1e46:	7a63      	ldrb	r3, [r4, #9]
    1e48:	2202      	movs	r2, #2
    1e4a:	f362 1307 	bfi	r3, r2, #4, #4
    1e4e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1e50:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1e52:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    1e54:	b1bc      	cbz	r4, 1e86 <log_2+0x6a>
	msg->hdr.ids = src_level;
    1e56:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1e5a:	4b0c      	ldr	r3, [pc, #48]	; (1e8c <log_2+0x70>)
    1e5c:	681b      	ldr	r3, [r3, #0]
    1e5e:	4798      	blx	r3
    1e60:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1e62:	f04f 0320 	mov.w	r3, #32
    1e66:	f3ef 8511 	mrs	r5, BASEPRI
    1e6a:	f383 8812 	msr	BASEPRI_MAX, r3
    1e6e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1e72:	4621      	mov	r1, r4
    1e74:	4806      	ldr	r0, [pc, #24]	; (1e90 <log_2+0x74>)
    1e76:	f00e fbdd 	bl	10634 <log_list_add_tail>
	__asm__ volatile(
    1e7a:	f385 8811 	msr	BASEPRI, r5
    1e7e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1e82:	f7ff ff0b 	bl	1c9c <z_log_msg_post_finalize>
}
    1e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e8a:	bf00      	nop
    1e8c:	20000128 	.word	0x20000128
    1e90:	200015bc 	.word	0x200015bc

00001e94 <log_n>:
{
    1e94:	b538      	push	{r3, r4, r5, lr}
    1e96:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    1e98:	f00e fd09 	bl	108ae <log_msg_create_n>
		if (msg == NULL) {
    1e9c:	b1b8      	cbz	r0, 1ece <log_n+0x3a>
    1e9e:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    1ea0:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    1ea2:	4b0b      	ldr	r3, [pc, #44]	; (1ed0 <log_n+0x3c>)
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	4798      	blx	r3
    1ea8:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
    1eaa:	f04f 0320 	mov.w	r3, #32
    1eae:	f3ef 8411 	mrs	r4, BASEPRI
    1eb2:	f383 8812 	msr	BASEPRI_MAX, r3
    1eb6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1eba:	4629      	mov	r1, r5
    1ebc:	4805      	ldr	r0, [pc, #20]	; (1ed4 <log_n+0x40>)
    1ebe:	f00e fbb9 	bl	10634 <log_list_add_tail>
	__asm__ volatile(
    1ec2:	f384 8811 	msr	BASEPRI, r4
    1ec6:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1eca:	f7ff fee7 	bl	1c9c <z_log_msg_post_finalize>
}
    1ece:	bd38      	pop	{r3, r4, r5, pc}
    1ed0:	20000128 	.word	0x20000128
    1ed4:	200015bc 	.word	0x200015bc

00001ed8 <log_0>:
{
    1ed8:	b570      	push	{r4, r5, r6, lr}
    1eda:	4605      	mov	r5, r0
    1edc:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1ede:	f000 f8e1 	bl	20a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1ee2:	4604      	mov	r4, r0
    1ee4:	b140      	cbz	r0, 1ef8 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    1ee6:	2301      	movs	r3, #1
    1ee8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1eea:	2200      	movs	r2, #0
    1eec:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1eee:	f04f 0300 	mov.w	r3, #0
    1ef2:	f362 0300 	bfi	r3, r2, #0, #1
    1ef6:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1ef8:	b104      	cbz	r4, 1efc <log_0+0x24>
		msg->str = str;
    1efa:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    1efc:	b1b4      	cbz	r4, 1f2c <log_0+0x54>
	msg->hdr.ids = src_level;
    1efe:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1f00:	4b0b      	ldr	r3, [pc, #44]	; (1f30 <log_0+0x58>)
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	4798      	blx	r3
    1f06:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1f08:	f04f 0320 	mov.w	r3, #32
    1f0c:	f3ef 8511 	mrs	r5, BASEPRI
    1f10:	f383 8812 	msr	BASEPRI_MAX, r3
    1f14:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1f18:	4621      	mov	r1, r4
    1f1a:	4806      	ldr	r0, [pc, #24]	; (1f34 <log_0+0x5c>)
    1f1c:	f00e fb8a 	bl	10634 <log_list_add_tail>
	__asm__ volatile(
    1f20:	f385 8811 	msr	BASEPRI, r5
    1f24:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1f28:	f7ff feb8 	bl	1c9c <z_log_msg_post_finalize>
}
    1f2c:	bd70      	pop	{r4, r5, r6, pc}
    1f2e:	bf00      	nop
    1f30:	20000128 	.word	0x20000128
    1f34:	200015bc 	.word	0x200015bc

00001f38 <z_impl_log_panic>:
	if (panic_mode) {
    1f38:	4b12      	ldr	r3, [pc, #72]	; (1f84 <z_impl_log_panic+0x4c>)
    1f3a:	781b      	ldrb	r3, [r3, #0]
    1f3c:	b103      	cbz	r3, 1f40 <z_impl_log_panic+0x8>
    1f3e:	4770      	bx	lr
{
    1f40:	b510      	push	{r4, lr}
	log_init();
    1f42:	f7ff fd05 	bl	1950 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1f46:	2400      	movs	r4, #0
    1f48:	e000      	b.n	1f4c <z_impl_log_panic+0x14>
    1f4a:	3401      	adds	r4, #1
    1f4c:	4b0e      	ldr	r3, [pc, #56]	; (1f88 <z_impl_log_panic+0x50>)
    1f4e:	4a0f      	ldr	r2, [pc, #60]	; (1f8c <z_impl_log_panic+0x54>)
    1f50:	1a9b      	subs	r3, r3, r2
    1f52:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1f56:	da0c      	bge.n	1f72 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    1f58:	480c      	ldr	r0, [pc, #48]	; (1f8c <z_impl_log_panic+0x54>)
    1f5a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1f5e:	6843      	ldr	r3, [r0, #4]
    1f60:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1f62:	2b00      	cmp	r3, #0
    1f64:	d0f1      	beq.n	1f4a <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1f66:	0123      	lsls	r3, r4, #4
    1f68:	4a08      	ldr	r2, [pc, #32]	; (1f8c <z_impl_log_panic+0x54>)
    1f6a:	58d3      	ldr	r3, [r2, r3]
    1f6c:	695b      	ldr	r3, [r3, #20]
    1f6e:	4798      	blx	r3
}
    1f70:	e7eb      	b.n	1f4a <z_impl_log_panic+0x12>
    1f72:	2000      	movs	r0, #0
    1f74:	f7ff fe6a 	bl	1c4c <z_impl_log_process>
		while (log_process(false) == true) {
    1f78:	2800      	cmp	r0, #0
    1f7a:	d1fa      	bne.n	1f72 <z_impl_log_panic+0x3a>
	panic_mode = true;
    1f7c:	4b01      	ldr	r3, [pc, #4]	; (1f84 <z_impl_log_panic+0x4c>)
    1f7e:	2201      	movs	r2, #1
    1f80:	701a      	strb	r2, [r3, #0]
}
    1f82:	bd10      	pop	{r4, pc}
    1f84:	20002ed6 	.word	0x20002ed6
    1f88:	00014720 	.word	0x00014720
    1f8c:	00014700 	.word	0x00014700

00001f90 <log_process_thread_func>:
{
    1f90:	b508      	push	{r3, lr}
	log_init();
    1f92:	f7ff fcdd 	bl	1950 <log_init>
	return z_impl_z_current_get();
    1f96:	f00c ff4b 	bl	ee30 <z_impl_z_current_get>
	thread_set(k_current_get());
    1f9a:	f7ff fc5d 	bl	1858 <thread_set>
    1f9e:	e006      	b.n	1fae <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    1fa0:	f04f 32ff 	mov.w	r2, #4294967295
    1fa4:	f04f 33ff 	mov.w	r3, #4294967295
    1fa8:	4804      	ldr	r0, [pc, #16]	; (1fbc <log_process_thread_func+0x2c>)
    1faa:	f00c f9fb 	bl	e3a4 <z_impl_k_sem_take>
    1fae:	2000      	movs	r0, #0
    1fb0:	f7ff fe4c 	bl	1c4c <z_impl_log_process>
		if (log_process(false) == false) {
    1fb4:	2800      	cmp	r0, #0
    1fb6:	d1fa      	bne.n	1fae <log_process_thread_func+0x1e>
    1fb8:	e7f2      	b.n	1fa0 <log_process_thread_func+0x10>
    1fba:	bf00      	nop
    1fbc:	200003dc 	.word	0x200003dc

00001fc0 <log_free>:
{
    1fc0:	b500      	push	{lr}
    1fc2:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1fc4:	3804      	subs	r0, #4
    1fc6:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1fc8:	f3bf 8f5b 	dmb	ish
    1fcc:	e850 3f00 	ldrex	r3, [r0]
    1fd0:	1e5a      	subs	r2, r3, #1
    1fd2:	e840 2100 	strex	r1, r2, [r0]
    1fd6:	2900      	cmp	r1, #0
    1fd8:	d1f8      	bne.n	1fcc <log_free+0xc>
    1fda:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    1fde:	2b01      	cmp	r3, #1
    1fe0:	d002      	beq.n	1fe8 <log_free+0x28>
}
    1fe2:	b003      	add	sp, #12
    1fe4:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1fe8:	a901      	add	r1, sp, #4
    1fea:	4802      	ldr	r0, [pc, #8]	; (1ff4 <log_free+0x34>)
    1fec:	f011 fdd6 	bl	13b9c <k_mem_slab_free>
}
    1ff0:	e7f7      	b.n	1fe2 <log_free+0x22>
    1ff2:	bf00      	nop
    1ff4:	200015c4 	.word	0x200015c4

00001ff8 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1ff8:	4b05      	ldr	r3, [pc, #20]	; (2010 <log_source_name_get+0x18>)
    1ffa:	4a06      	ldr	r2, [pc, #24]	; (2014 <log_source_name_get+0x1c>)
    1ffc:	1a9b      	subs	r3, r3, r2
    1ffe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    2002:	d202      	bcs.n	200a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    2004:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    2008:	4770      	bx	lr
    200a:	2000      	movs	r0, #0
}
    200c:	4770      	bx	lr
    200e:	bf00      	nop
    2010:	00014700 	.word	0x00014700
    2014:	00014688 	.word	0x00014688

00002018 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2018:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    201a:	4b07      	ldr	r3, [pc, #28]	; (2038 <log_backend_enable+0x20>)
    201c:	1ac3      	subs	r3, r0, r3
    201e:	111b      	asrs	r3, r3, #4
    2020:	3301      	adds	r3, #1
	backend->cb->id = id;
    2022:	6842      	ldr	r2, [r0, #4]
    2024:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    2026:	6843      	ldr	r3, [r0, #4]
    2028:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    202a:	6843      	ldr	r3, [r0, #4]
    202c:	2201      	movs	r2, #1
    202e:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    2030:	f7ff fcda 	bl	19e8 <z_log_notify_backend_enabled>
}
    2034:	bd08      	pop	{r3, pc}
    2036:	bf00      	nop
    2038:	00014700 	.word	0x00014700

0000203c <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    203c:	b510      	push	{r4, lr}
    203e:	b082      	sub	sp, #8
    2040:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    2042:	9b01      	ldr	r3, [sp, #4]
    2044:	b133      	cbz	r3, 2054 <cont_free+0x18>
		next = cont->next;
    2046:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2048:	a901      	add	r1, sp, #4
    204a:	4803      	ldr	r0, [pc, #12]	; (2058 <cont_free+0x1c>)
    204c:	f011 fda6 	bl	13b9c <k_mem_slab_free>
		cont = next;
    2050:	9401      	str	r4, [sp, #4]
    2052:	e7f6      	b.n	2042 <cont_free+0x6>
	}
}
    2054:	b002      	add	sp, #8
    2056:	bd10      	pop	{r4, pc}
    2058:	200015e4 	.word	0x200015e4

0000205c <log_msg_pool_init>:
{
    205c:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    205e:	2320      	movs	r3, #32
    2060:	461a      	mov	r2, r3
    2062:	4902      	ldr	r1, [pc, #8]	; (206c <log_msg_pool_init+0x10>)
    2064:	4802      	ldr	r0, [pc, #8]	; (2070 <log_msg_pool_init+0x14>)
    2066:	f011 fd8b 	bl	13b80 <k_mem_slab_init>
}
    206a:	bd08      	pop	{r3, pc}
    206c:	200057c0 	.word	0x200057c0
    2070:	200015e4 	.word	0x200015e4

00002074 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2074:	b510      	push	{r4, lr}
    2076:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    2078:	2300      	movs	r3, #0
    207a:	9301      	str	r3, [sp, #4]
    207c:	2001      	movs	r0, #1
    207e:	f7ff fde5 	bl	1c4c <z_impl_log_process>
    2082:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    2084:	f7ff fcc0 	bl	1a08 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2088:	2200      	movs	r2, #0
    208a:	2300      	movs	r3, #0
    208c:	a901      	add	r1, sp, #4
    208e:	4804      	ldr	r0, [pc, #16]	; (20a0 <log_msg_no_space_handle+0x2c>)
    2090:	f00b ff20 	bl	ded4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2094:	b108      	cbz	r0, 209a <log_msg_no_space_handle+0x26>
    2096:	2c00      	cmp	r4, #0
    2098:	d1f0      	bne.n	207c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    209a:	9801      	ldr	r0, [sp, #4]
    209c:	b002      	add	sp, #8
    209e:	bd10      	pop	{r4, pc}
    20a0:	200015e4 	.word	0x200015e4

000020a4 <log_msg_chunk_alloc>:
{
    20a4:	b500      	push	{lr}
    20a6:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    20a8:	2300      	movs	r3, #0
    20aa:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    20ac:	f00e fafd 	bl	106aa <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    20b0:	b150      	cbz	r0, 20c8 <log_msg_chunk_alloc+0x24>
    20b2:	2200      	movs	r2, #0
    20b4:	2300      	movs	r3, #0
    20b6:	a901      	add	r1, sp, #4
    20b8:	4807      	ldr	r0, [pc, #28]	; (20d8 <log_msg_chunk_alloc+0x34>)
    20ba:	f00b ff0b 	bl	ded4 <k_mem_slab_alloc>
	if (err != 0) {
    20be:	b930      	cbnz	r0, 20ce <log_msg_chunk_alloc+0x2a>
}
    20c0:	9801      	ldr	r0, [sp, #4]
    20c2:	b003      	add	sp, #12
    20c4:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    20c8:	2200      	movs	r2, #0
    20ca:	2300      	movs	r3, #0
    20cc:	e7f3      	b.n	20b6 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    20ce:	f7ff ffd1 	bl	2074 <log_msg_no_space_handle>
    20d2:	9001      	str	r0, [sp, #4]
    20d4:	e7f4      	b.n	20c0 <log_msg_chunk_alloc+0x1c>
    20d6:	bf00      	nop
    20d8:	200015e4 	.word	0x200015e4

000020dc <msg_free>:
{
    20dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20de:	b083      	sub	sp, #12
    20e0:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    20e2:	4604      	mov	r4, r0
    20e4:	f00e fb88 	bl	107f8 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    20e8:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    20ea:	f013 0f01 	tst.w	r3, #1
    20ee:	d101      	bne.n	20f4 <msg_free+0x18>
    20f0:	4606      	mov	r6, r0
    20f2:	bb50      	cbnz	r0, 214a <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    20f4:	9b01      	ldr	r3, [sp, #4]
    20f6:	7a1a      	ldrb	r2, [r3, #8]
    20f8:	f012 0f02 	tst.w	r2, #2
    20fc:	d128      	bne.n	2150 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    20fe:	a901      	add	r1, sp, #4
    2100:	4815      	ldr	r0, [pc, #84]	; (2158 <msg_free+0x7c>)
    2102:	f011 fd4b 	bl	13b9c <k_mem_slab_free>
}
    2106:	b003      	add	sp, #12
    2108:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    210a:	9801      	ldr	r0, [sp, #4]
    210c:	f00e fb89 	bl	10822 <log_msg_str_get>
    2110:	4631      	mov	r1, r6
    2112:	f00e faa9 	bl	10668 <z_log_get_s_mask>
					if (smask == 0U) {
    2116:	4607      	mov	r7, r0
    2118:	b988      	cbnz	r0, 213e <msg_free+0x62>
    211a:	e7eb      	b.n	20f4 <msg_free+0x18>
					log_free(buf);
    211c:	4628      	mov	r0, r5
    211e:	f7ff ff4f 	bl	1fc0 <log_free>
		for (i = 0U; i < nargs; i++) {
    2122:	3401      	adds	r4, #1
    2124:	42b4      	cmp	r4, r6
    2126:	d2e5      	bcs.n	20f4 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    2128:	4621      	mov	r1, r4
    212a:	9801      	ldr	r0, [sp, #4]
    212c:	f00e fb67 	bl	107fe <log_msg_arg_get>
    2130:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    2132:	f7ff fcf3 	bl	1b1c <log_is_strdup>
    2136:	2800      	cmp	r0, #0
    2138:	d0f3      	beq.n	2122 <msg_free+0x46>
				if (smask == 0U) {
    213a:	2f00      	cmp	r7, #0
    213c:	d0e5      	beq.n	210a <msg_free+0x2e>
				if (smask & BIT(i)) {
    213e:	fa27 f304 	lsr.w	r3, r7, r4
    2142:	f013 0f01 	tst.w	r3, #1
    2146:	d0ec      	beq.n	2122 <msg_free+0x46>
    2148:	e7e8      	b.n	211c <msg_free+0x40>
		uint32_t smask = 0U;
    214a:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    214c:	463c      	mov	r4, r7
    214e:	e7e9      	b.n	2124 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    2150:	6958      	ldr	r0, [r3, #20]
    2152:	f7ff ff73 	bl	203c <cont_free>
    2156:	e7d2      	b.n	20fe <msg_free+0x22>
    2158:	200015e4 	.word	0x200015e4

0000215c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    215c:	b40e      	push	{r1, r2, r3}
    215e:	b500      	push	{lr}
    2160:	b082      	sub	sp, #8
    2162:	4601      	mov	r1, r0
    2164:	ab03      	add	r3, sp, #12
    2166:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    216a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    216c:	4803      	ldr	r0, [pc, #12]	; (217c <print_formatted+0x20>)
    216e:	f7fe fe79 	bl	e64 <cbvprintf>
	va_end(args);

	return length;
}
    2172:	b002      	add	sp, #8
    2174:	f85d eb04 	ldr.w	lr, [sp], #4
    2178:	b003      	add	sp, #12
    217a:	4770      	bx	lr
    217c:	00010c4f 	.word	0x00010c4f

00002180 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    2180:	b5f0      	push	{r4, r5, r6, r7, lr}
    2182:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    2184:	f011 0f44 	tst.w	r1, #68	; 0x44
    2188:	d005      	beq.n	2196 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    218a:	4b1a      	ldr	r3, [pc, #104]	; (21f4 <timestamp_print+0x74>)
    218c:	681c      	ldr	r4, [r3, #0]
    218e:	b934      	cbnz	r4, 219e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    2190:	2000      	movs	r0, #0
	}

	return length;
}
    2192:	b005      	add	sp, #20
    2194:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    2196:	4918      	ldr	r1, [pc, #96]	; (21f8 <timestamp_print+0x78>)
    2198:	f7ff ffe0 	bl	215c <print_formatted>
    219c:	e7f9      	b.n	2192 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    219e:	4b17      	ldr	r3, [pc, #92]	; (21fc <timestamp_print+0x7c>)
    21a0:	6819      	ldr	r1, [r3, #0]
    21a2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    21a6:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    21aa:	4a15      	ldr	r2, [pc, #84]	; (2200 <timestamp_print+0x80>)
    21ac:	fba2 3205 	umull	r3, r2, r2, r5
    21b0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    21b2:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    21b6:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    21ba:	4b12      	ldr	r3, [pc, #72]	; (2204 <timestamp_print+0x84>)
    21bc:	fba3 7306 	umull	r7, r3, r3, r6
    21c0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    21c2:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    21c6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    21ca:	fb05 f101 	mul.w	r1, r5, r1
    21ce:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    21d2:	fb07 1114 	mls	r1, r7, r4, r1
    21d6:	fb05 f101 	mul.w	r1, r5, r1
    21da:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    21de:	9402      	str	r4, [sp, #8]
    21e0:	9701      	str	r7, [sp, #4]
    21e2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    21e6:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    21ea:	9100      	str	r1, [sp, #0]
    21ec:	4906      	ldr	r1, [pc, #24]	; (2208 <timestamp_print+0x88>)
    21ee:	f7ff ffb5 	bl	215c <print_formatted>
    21f2:	e7ce      	b.n	2192 <timestamp_print+0x12>
    21f4:	20001600 	.word	0x20001600
    21f8:	00014870 	.word	0x00014870
    21fc:	20001604 	.word	0x20001604
    2200:	91a2b3c5 	.word	0x91a2b3c5
    2204:	88888889 	.word	0x88888889
    2208:	0001487c 	.word	0x0001487c

0000220c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    220c:	b161      	cbz	r1, 2228 <color_print+0x1c>
{
    220e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2210:	b12a      	cbz	r2, 221e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    2212:	4a06      	ldr	r2, [pc, #24]	; (222c <color_print+0x20>)
    2214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2218:	b912      	cbnz	r2, 2220 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    221a:	4a05      	ldr	r2, [pc, #20]	; (2230 <color_print+0x24>)
    221c:	e000      	b.n	2220 <color_print+0x14>
    221e:	4a04      	ldr	r2, [pc, #16]	; (2230 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    2220:	4904      	ldr	r1, [pc, #16]	; (2234 <color_print+0x28>)
    2222:	f7ff ff9b 	bl	215c <print_formatted>
	}
}
    2226:	bd08      	pop	{r3, pc}
    2228:	4770      	bx	lr
    222a:	bf00      	nop
    222c:	000148ec 	.word	0x000148ec
    2230:	00014898 	.word	0x00014898
    2234:	00015604 	.word	0x00015604

00002238 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2238:	f011 0f10 	tst.w	r1, #16
    223c:	d10b      	bne.n	2256 <newline_print+0x1e>
{
    223e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2240:	f011 0f20 	tst.w	r1, #32
    2244:	d003      	beq.n	224e <newline_print+0x16>
		print_formatted(ctx, "\n");
    2246:	4904      	ldr	r1, [pc, #16]	; (2258 <newline_print+0x20>)
    2248:	f7ff ff88 	bl	215c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    224c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    224e:	4903      	ldr	r1, [pc, #12]	; (225c <newline_print+0x24>)
    2250:	f7ff ff84 	bl	215c <print_formatted>
    2254:	e7fa      	b.n	224c <newline_print+0x14>
    2256:	4770      	bx	lr
    2258:	00015368 	.word	0x00015368
    225c:	00015f5c 	.word	0x00015f5c

00002260 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2264:	4605      	mov	r5, r0
    2266:	460f      	mov	r7, r1
    2268:	4616      	mov	r6, r2
    226a:	4698      	mov	r8, r3
	newline_print(output, flags);
    226c:	9906      	ldr	r1, [sp, #24]
    226e:	f7ff ffe3 	bl	2238 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    2272:	2400      	movs	r4, #0
    2274:	4544      	cmp	r4, r8
    2276:	da05      	bge.n	2284 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    2278:	4923      	ldr	r1, [pc, #140]	; (2308 <hexdump_line_print+0xa8>)
    227a:	4628      	mov	r0, r5
    227c:	f7ff ff6e 	bl	215c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2280:	3401      	adds	r4, #1
    2282:	e7f7      	b.n	2274 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2284:	2400      	movs	r4, #0
    2286:	e009      	b.n	229c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2288:	491f      	ldr	r1, [pc, #124]	; (2308 <hexdump_line_print+0xa8>)
    228a:	4628      	mov	r0, r5
    228c:	f7ff ff66 	bl	215c <print_formatted>
    2290:	e00b      	b.n	22aa <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2292:	491e      	ldr	r1, [pc, #120]	; (230c <hexdump_line_print+0xac>)
    2294:	4628      	mov	r0, r5
    2296:	f7ff ff61 	bl	215c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    229a:	3401      	adds	r4, #1
    229c:	2c0f      	cmp	r4, #15
    229e:	dc0c      	bgt.n	22ba <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    22a0:	2c00      	cmp	r4, #0
    22a2:	dd02      	ble.n	22aa <hexdump_line_print+0x4a>
    22a4:	f014 0f07 	tst.w	r4, #7
    22a8:	d0ee      	beq.n	2288 <hexdump_line_print+0x28>
		if (i < length) {
    22aa:	42b4      	cmp	r4, r6
    22ac:	d2f1      	bcs.n	2292 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    22ae:	5d3a      	ldrb	r2, [r7, r4]
    22b0:	4917      	ldr	r1, [pc, #92]	; (2310 <hexdump_line_print+0xb0>)
    22b2:	4628      	mov	r0, r5
    22b4:	f7ff ff52 	bl	215c <print_formatted>
    22b8:	e7ef      	b.n	229a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    22ba:	4916      	ldr	r1, [pc, #88]	; (2314 <hexdump_line_print+0xb4>)
    22bc:	4628      	mov	r0, r5
    22be:	f7ff ff4d 	bl	215c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    22c2:	2400      	movs	r4, #0
    22c4:	e009      	b.n	22da <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    22c6:	4910      	ldr	r1, [pc, #64]	; (2308 <hexdump_line_print+0xa8>)
    22c8:	4628      	mov	r0, r5
    22ca:	f7ff ff47 	bl	215c <print_formatted>
    22ce:	e00b      	b.n	22e8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    22d0:	4911      	ldr	r1, [pc, #68]	; (2318 <hexdump_line_print+0xb8>)
    22d2:	4628      	mov	r0, r5
    22d4:	f7ff ff42 	bl	215c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    22d8:	3401      	adds	r4, #1
    22da:	2c0f      	cmp	r4, #15
    22dc:	dc12      	bgt.n	2304 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    22de:	2c00      	cmp	r4, #0
    22e0:	dd02      	ble.n	22e8 <hexdump_line_print+0x88>
    22e2:	f014 0f07 	tst.w	r4, #7
    22e6:	d0ee      	beq.n	22c6 <hexdump_line_print+0x66>
		if (i < length) {
    22e8:	42b4      	cmp	r4, r6
    22ea:	d206      	bcs.n	22fa <hexdump_line_print+0x9a>
			char c = (char)data[i];
    22ec:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    22ee:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    22f2:	2b5e      	cmp	r3, #94	; 0x5e
    22f4:	d9ec      	bls.n	22d0 <hexdump_line_print+0x70>
    22f6:	222e      	movs	r2, #46	; 0x2e
    22f8:	e7ea      	b.n	22d0 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    22fa:	4903      	ldr	r1, [pc, #12]	; (2308 <hexdump_line_print+0xa8>)
    22fc:	4628      	mov	r0, r5
    22fe:	f7ff ff2d 	bl	215c <print_formatted>
    2302:	e7e9      	b.n	22d8 <hexdump_line_print+0x78>
		}
	}
}
    2304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2308:	000148c4 	.word	0x000148c4
    230c:	000148a8 	.word	0x000148a8
    2310:	000148a0 	.word	0x000148a0
    2314:	000148ac 	.word	0x000148ac
    2318:	000148b0 	.word	0x000148b0

0000231c <ids_print>:
{
    231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2320:	4680      	mov	r8, r0
    2322:	4616      	mov	r6, r2
    2324:	461d      	mov	r5, r3
    2326:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    232a:	b959      	cbnz	r1, 2344 <ids_print+0x28>
	int total = 0;
    232c:	2400      	movs	r4, #0
	if (source_id >= 0) {
    232e:	2f00      	cmp	r7, #0
    2330:	db1c      	blt.n	236c <ids_print+0x50>
		total += print_formatted(output,
    2332:	b186      	cbz	r6, 2356 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2334:	2301      	movs	r3, #1
    2336:	9a07      	ldr	r2, [sp, #28]
    2338:	4093      	lsls	r3, r2
				(func_on &&
    233a:	f013 0f10 	tst.w	r3, #16
    233e:	d118      	bne.n	2372 <ids_print+0x56>
		total += print_formatted(output,
    2340:	4e0d      	ldr	r6, [pc, #52]	; (2378 <ids_print+0x5c>)
    2342:	e009      	b.n	2358 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    2344:	4b0d      	ldr	r3, [pc, #52]	; (237c <ids_print+0x60>)
    2346:	9a07      	ldr	r2, [sp, #28]
    2348:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    234c:	490c      	ldr	r1, [pc, #48]	; (2380 <ids_print+0x64>)
    234e:	f7ff ff05 	bl	215c <print_formatted>
    2352:	4604      	mov	r4, r0
    2354:	e7eb      	b.n	232e <ids_print+0x12>
		total += print_formatted(output,
    2356:	4e08      	ldr	r6, [pc, #32]	; (2378 <ids_print+0x5c>)
    2358:	4639      	mov	r1, r7
    235a:	4628      	mov	r0, r5
    235c:	f7ff fe4c 	bl	1ff8 <log_source_name_get>
    2360:	4602      	mov	r2, r0
    2362:	4631      	mov	r1, r6
    2364:	4640      	mov	r0, r8
    2366:	f7ff fef9 	bl	215c <print_formatted>
    236a:	4404      	add	r4, r0
}
    236c:	4620      	mov	r0, r4
    236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    2372:	4e04      	ldr	r6, [pc, #16]	; (2384 <ids_print+0x68>)
    2374:	e7f0      	b.n	2358 <ids_print+0x3c>
    2376:	bf00      	nop
    2378:	000148b4 	.word	0x000148b4
    237c:	00014928 	.word	0x00014928
    2380:	000148c0 	.word	0x000148c0
    2384:	000148bc 	.word	0x000148bc

00002388 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
    2388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    238c:	b089      	sub	sp, #36	; 0x24
    238e:	4607      	mov	r7, r0
    2390:	460e      	mov	r6, r1
    2392:	4691      	mov	r9, r2
    2394:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
    2396:	f00e fa44 	bl	10822 <log_msg_str_get>
    239a:	4602      	mov	r2, r0
    239c:	490e      	ldr	r1, [pc, #56]	; (23d8 <hexdump_print+0x50>)
    239e:	4630      	mov	r0, r6
    23a0:	f7ff fedc 	bl	215c <print_formatted>
	uint32_t offset = 0U;
    23a4:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
    23a6:	2510      	movs	r5, #16
    23a8:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    23aa:	4623      	mov	r3, r4
    23ac:	aa03      	add	r2, sp, #12
    23ae:	eb0d 0105 	add.w	r1, sp, r5
    23b2:	4638      	mov	r0, r7
    23b4:	f00e fa8f 	bl	108d6 <log_msg_hexdump_data_get>

		if (length) {
    23b8:	9a03      	ldr	r2, [sp, #12]
    23ba:	b152      	cbz	r2, 23d2 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    23bc:	f8cd 8000 	str.w	r8, [sp]
    23c0:	464b      	mov	r3, r9
    23c2:	eb0d 0105 	add.w	r1, sp, r5
    23c6:	4630      	mov	r0, r6
    23c8:	f7ff ff4a 	bl	2260 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
    23cc:	9d03      	ldr	r5, [sp, #12]
    23ce:	442c      	add	r4, r5
		length = sizeof(buf);
    23d0:	e7e9      	b.n	23a6 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
    23d2:	b009      	add	sp, #36	; 0x24
    23d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    23d8:	00015604 	.word	0x00015604

000023dc <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
    23dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23de:	b083      	sub	sp, #12
    23e0:	4606      	mov	r6, r0
    23e2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
    23e4:	2700      	movs	r7, #0
	size_t offset = 0;
    23e6:	463d      	mov	r5, r7
    23e8:	e00d      	b.n	2406 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
    23ea:	68a2      	ldr	r2, [r4, #8]
    23ec:	4413      	add	r3, r2
    23ee:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    23f2:	2f0a      	cmp	r7, #10
    23f4:	bf14      	ite	ne
    23f6:	2700      	movne	r7, #0
    23f8:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
    23fa:	4620      	mov	r0, r4
    23fc:	f00e fc1a 	bl	10c34 <log_output_flush>
		offset += length;
    2400:	9b01      	ldr	r3, [sp, #4]
    2402:	441d      	add	r5, r3
	} while (length > 0);
    2404:	b173      	cbz	r3, 2424 <raw_string_print+0x48>
		length = output->size;
    2406:	68e3      	ldr	r3, [r4, #12]
    2408:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    240a:	462b      	mov	r3, r5
    240c:	aa01      	add	r2, sp, #4
    240e:	68a1      	ldr	r1, [r4, #8]
    2410:	4630      	mov	r0, r6
    2412:	f00e fa60 	bl	108d6 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    2416:	6863      	ldr	r3, [r4, #4]
    2418:	9a01      	ldr	r2, [sp, #4]
    241a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    241c:	9b01      	ldr	r3, [sp, #4]
    241e:	2b00      	cmp	r3, #0
    2420:	d0eb      	beq.n	23fa <raw_string_print+0x1e>
    2422:	e7e2      	b.n	23ea <raw_string_print+0xe>

	if (eol) {
    2424:	b90f      	cbnz	r7, 242a <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
    2426:	b003      	add	sp, #12
    2428:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    242a:	4902      	ldr	r1, [pc, #8]	; (2434 <raw_string_print+0x58>)
    242c:	4620      	mov	r0, r4
    242e:	f7ff fe95 	bl	215c <print_formatted>
}
    2432:	e7f8      	b.n	2426 <raw_string_print+0x4a>
    2434:	000148c8 	.word	0x000148c8

00002438 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2438:	b570      	push	{r4, r5, r6, lr}
    243a:	b082      	sub	sp, #8
    243c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    243e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2440:	f242 730f 	movw	r3, #9999	; 0x270f
    2444:	428b      	cmp	r3, r1
    2446:	bf28      	it	cs
    2448:	460b      	movcs	r3, r1
    244a:	4a0e      	ldr	r2, [pc, #56]	; (2484 <log_output_dropped_process+0x4c>)
    244c:	2105      	movs	r1, #5
    244e:	4668      	mov	r0, sp
    2450:	f00d fa18 	bl	f884 <snprintk>
    2454:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    2456:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2458:	685b      	ldr	r3, [r3, #4]
    245a:	220b      	movs	r2, #11
    245c:	490a      	ldr	r1, [pc, #40]	; (2488 <log_output_dropped_process+0x50>)
    245e:	4628      	mov	r0, r5
    2460:	f00e fa41 	bl	108e6 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    2464:	6863      	ldr	r3, [r4, #4]
    2466:	685b      	ldr	r3, [r3, #4]
    2468:	4632      	mov	r2, r6
    246a:	4669      	mov	r1, sp
    246c:	4628      	mov	r0, r5
    246e:	f00e fa3a 	bl	108e6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    2472:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2474:	685b      	ldr	r3, [r3, #4]
    2476:	221b      	movs	r2, #27
    2478:	4904      	ldr	r1, [pc, #16]	; (248c <log_output_dropped_process+0x54>)
    247a:	4628      	mov	r0, r5
    247c:	f00e fa33 	bl	108e6 <buffer_write>
}
    2480:	b002      	add	sp, #8
    2482:	bd70      	pop	{r4, r5, r6, pc}
    2484:	00015854 	.word	0x00015854
    2488:	0001491c 	.word	0x0001491c
    248c:	00014900 	.word	0x00014900

00002490 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2490:	4b07      	ldr	r3, [pc, #28]	; (24b0 <log_output_timestamp_freq_set+0x20>)
    2492:	2201      	movs	r2, #1
    2494:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2496:	4b07      	ldr	r3, [pc, #28]	; (24b4 <log_output_timestamp_freq_set+0x24>)
    2498:	4298      	cmp	r0, r3
    249a:	d905      	bls.n	24a8 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    249c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    249e:	4a04      	ldr	r2, [pc, #16]	; (24b0 <log_output_timestamp_freq_set+0x20>)
    24a0:	6813      	ldr	r3, [r2, #0]
    24a2:	005b      	lsls	r3, r3, #1
    24a4:	6013      	str	r3, [r2, #0]
    24a6:	e7f6      	b.n	2496 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    24a8:	4b03      	ldr	r3, [pc, #12]	; (24b8 <log_output_timestamp_freq_set+0x28>)
    24aa:	6018      	str	r0, [r3, #0]
}
    24ac:	4770      	bx	lr
    24ae:	bf00      	nop
    24b0:	20001604 	.word	0x20001604
    24b4:	000f4240 	.word	0x000f4240
    24b8:	20001600 	.word	0x20001600

000024bc <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    24bc:	b570      	push	{r4, r5, r6, lr}
    24be:	4606      	mov	r6, r0
    24c0:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    24c2:	2400      	movs	r4, #0
    24c4:	42ac      	cmp	r4, r5
    24c6:	d207      	bcs.n	24d8 <char_out+0x1c>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    24c8:	4b04      	ldr	r3, [pc, #16]	; (24dc <char_out+0x20>)
    24ca:	6818      	ldr	r0, [r3, #0]
    24cc:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    24ce:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    24d0:	685b      	ldr	r3, [r3, #4]
    24d2:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    24d4:	3401      	adds	r4, #1
    24d6:	e7f5      	b.n	24c4 <char_out+0x8>
#endif
	}

	return length;
}
    24d8:	4628      	mov	r0, r5
    24da:	bd70      	pop	{r4, r5, r6, pc}
    24dc:	2000161c 	.word	0x2000161c

000024e0 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    24e0:	4b01      	ldr	r3, [pc, #4]	; (24e8 <log_backend_uart_init+0x8>)
    24e2:	4a02      	ldr	r2, [pc, #8]	; (24ec <log_backend_uart_init+0xc>)
    24e4:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    24e6:	4770      	bx	lr
    24e8:	2000161c 	.word	0x2000161c
    24ec:	00014490 	.word	0x00014490

000024f0 <panic>:

static void panic(struct log_backend const *const backend)
{
    24f0:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    24f2:	4802      	ldr	r0, [pc, #8]	; (24fc <panic+0xc>)
    24f4:	f00e fb9e 	bl	10c34 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    24f8:	bd08      	pop	{r3, pc}
    24fa:	bf00      	nop
    24fc:	0001496c 	.word	0x0001496c

00002500 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2500:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2502:	4802      	ldr	r0, [pc, #8]	; (250c <dropped+0xc>)
    2504:	f7ff ff98 	bl	2438 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    2508:	bd08      	pop	{r3, pc}
    250a:	bf00      	nop
    250c:	0001496c 	.word	0x0001496c

00002510 <put>:
{
    2510:	b510      	push	{r4, lr}
    2512:	460c      	mov	r4, r1
	log_msg_get(msg);
    2514:	4608      	mov	r0, r1
    2516:	f00e f962 	bl	107de <log_msg_get>
	log_output_msg_process(output, msg, flags);
    251a:	220f      	movs	r2, #15
    251c:	4621      	mov	r1, r4
    251e:	4803      	ldr	r0, [pc, #12]	; (252c <put+0x1c>)
    2520:	f00e fbb1 	bl	10c86 <log_output_msg_process>
	log_msg_put(msg);
    2524:	4620      	mov	r0, r4
    2526:	f00e f97e 	bl	10826 <log_msg_put>
}
    252a:	bd10      	pop	{r4, pc}
    252c:	0001496c 	.word	0x0001496c

00002530 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2530:	4b01      	ldr	r3, [pc, #4]	; (2538 <log_backend_rtt_init+0x8>)
    2532:	2201      	movs	r2, #1
    2534:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2536:	4770      	bx	lr
    2538:	20002ed8 	.word	0x20002ed8

0000253c <on_failed_write>:
{
    253c:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    253e:	b918      	cbnz	r0, 2548 <on_failed_write+0xc>
		host_present = false;
    2540:	4b08      	ldr	r3, [pc, #32]	; (2564 <on_failed_write+0x28>)
    2542:	2200      	movs	r2, #0
    2544:	701a      	strb	r2, [r3, #0]
}
    2546:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2548:	4b07      	ldr	r3, [pc, #28]	; (2568 <on_failed_write+0x2c>)
    254a:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    254c:	b123      	cbz	r3, 2558 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    254e:	f241 3088 	movw	r0, #5000	; 0x1388
    2552:	f011 feaa 	bl	142aa <z_impl_k_busy_wait>
}
    2556:	e7f6      	b.n	2546 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    2558:	20a4      	movs	r0, #164	; 0xa4
    255a:	2100      	movs	r1, #0
    255c:	f00c fc3c 	bl	edd8 <z_impl_k_sleep>
}
    2560:	e7f1      	b.n	2546 <on_failed_write+0xa>
    2562:	bf00      	nop
    2564:	20002ed8 	.word	0x20002ed8
    2568:	20002ed9 	.word	0x20002ed9

0000256c <on_write>:
{
    256c:	b538      	push	{r3, r4, r5, lr}
    256e:	4604      	mov	r4, r0
	host_present = true;
    2570:	4b0a      	ldr	r3, [pc, #40]	; (259c <on_write+0x30>)
    2572:	2201      	movs	r2, #1
    2574:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    2576:	4b0a      	ldr	r3, [pc, #40]	; (25a0 <on_write+0x34>)
    2578:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    257a:	b903      	cbnz	r3, 257e <on_write+0x12>
}
    257c:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    257e:	2000      	movs	r0, #0
    2580:	f00b fa56 	bl	da30 <SEGGER_RTT_HasDataUp>
    2584:	2800      	cmp	r0, #0
    2586:	d0f9      	beq.n	257c <on_write+0x10>
    2588:	4b04      	ldr	r3, [pc, #16]	; (259c <on_write+0x30>)
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	2b00      	cmp	r3, #0
    258e:	d0f5      	beq.n	257c <on_write+0x10>
			on_failed_write(retry_cnt--);
    2590:	1e65      	subs	r5, r4, #1
    2592:	4620      	mov	r0, r4
    2594:	f7ff ffd2 	bl	253c <on_failed_write>
    2598:	462c      	mov	r4, r5
    259a:	e7f0      	b.n	257e <on_write+0x12>
    259c:	20002ed8 	.word	0x20002ed8
    25a0:	20002ed9 	.word	0x20002ed9

000025a4 <data_out_block_mode>:
{
    25a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25a8:	4606      	mov	r6, r0
    25aa:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    25ac:	2704      	movs	r7, #4
    25ae:	e00d      	b.n	25cc <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    25b0:	462a      	mov	r2, r5
    25b2:	4631      	mov	r1, r6
    25b4:	2000      	movs	r0, #0
    25b6:	f00b f9d7 	bl	d968 <SEGGER_RTT_WriteSkipNoLock>
    25ba:	4604      	mov	r4, r0
    25bc:	e01c      	b.n	25f8 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    25be:	4638      	mov	r0, r7
    25c0:	f7ff ffd4 	bl	256c <on_write>
	} while ((ret == 0) && host_present);
    25c4:	bb1c      	cbnz	r4, 260e <data_out_block_mode+0x6a>
    25c6:	4b16      	ldr	r3, [pc, #88]	; (2620 <data_out_block_mode+0x7c>)
    25c8:	781b      	ldrb	r3, [r3, #0]
    25ca:	b303      	cbz	r3, 260e <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    25cc:	4b15      	ldr	r3, [pc, #84]	; (2624 <data_out_block_mode+0x80>)
    25ce:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    25d0:	2b00      	cmp	r3, #0
    25d2:	d1ed      	bne.n	25b0 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    25d4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2628 <data_out_block_mode+0x84>
    25d8:	f04f 32ff 	mov.w	r2, #4294967295
    25dc:	f04f 33ff 	mov.w	r3, #4294967295
    25e0:	4640      	mov	r0, r8
    25e2:	f00b fdb1 	bl	e148 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    25e6:	462a      	mov	r2, r5
    25e8:	4631      	mov	r1, r6
    25ea:	2000      	movs	r0, #0
    25ec:	f00b f9bc 	bl	d968 <SEGGER_RTT_WriteSkipNoLock>
    25f0:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    25f2:	4640      	mov	r0, r8
    25f4:	f00b fe32 	bl	e25c <z_impl_k_mutex_unlock>
		if (ret) {
    25f8:	2c00      	cmp	r4, #0
    25fa:	d1e0      	bne.n	25be <data_out_block_mode+0x1a>
		} else if (host_present) {
    25fc:	4b08      	ldr	r3, [pc, #32]	; (2620 <data_out_block_mode+0x7c>)
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	2b00      	cmp	r3, #0
    2602:	d0df      	beq.n	25c4 <data_out_block_mode+0x20>
			retry_cnt--;
    2604:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    2606:	4638      	mov	r0, r7
    2608:	f7ff ff98 	bl	253c <on_failed_write>
    260c:	e7da      	b.n	25c4 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    260e:	b914      	cbnz	r4, 2616 <data_out_block_mode+0x72>
    2610:	4b03      	ldr	r3, [pc, #12]	; (2620 <data_out_block_mode+0x7c>)
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	b903      	cbnz	r3, 2618 <data_out_block_mode+0x74>
    2616:	462c      	mov	r4, r5
}
    2618:	4620      	mov	r0, r4
    261a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    261e:	bf00      	nop
    2620:	20002ed8 	.word	0x20002ed8
    2624:	20002ed9 	.word	0x20002ed9
    2628:	200003a0 	.word	0x200003a0

0000262c <panic>:

static void panic(struct log_backend const *const backend)
{
    262c:	b508      	push	{r3, lr}
	panic_mode = true;
    262e:	4b03      	ldr	r3, [pc, #12]	; (263c <panic+0x10>)
    2630:	2201      	movs	r2, #1
    2632:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    2634:	4802      	ldr	r0, [pc, #8]	; (2640 <panic+0x14>)
    2636:	f00e fafd 	bl	10c34 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    263a:	bd08      	pop	{r3, pc}
    263c:	20002ed9 	.word	0x20002ed9
    2640:	000149a8 	.word	0x000149a8

00002644 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2644:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    2646:	4802      	ldr	r0, [pc, #8]	; (2650 <dropped+0xc>)
    2648:	f7ff fef6 	bl	2438 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    264c:	bd08      	pop	{r3, pc}
    264e:	bf00      	nop
    2650:	000149a8 	.word	0x000149a8

00002654 <put>:
{
    2654:	b510      	push	{r4, lr}
    2656:	460c      	mov	r4, r1
	log_msg_get(msg);
    2658:	4608      	mov	r0, r1
    265a:	f00e f8c0 	bl	107de <log_msg_get>
	log_output_msg_process(output, msg, flags);
    265e:	220f      	movs	r2, #15
    2660:	4621      	mov	r1, r4
    2662:	4803      	ldr	r0, [pc, #12]	; (2670 <put+0x1c>)
    2664:	f00e fb0f 	bl	10c86 <log_output_msg_process>
	log_msg_put(msg);
    2668:	4620      	mov	r0, r4
    266a:	f00e f8dc 	bl	10826 <log_msg_put>
}
    266e:	bd10      	pop	{r4, pc}
    2670:	000149a8 	.word	0x000149a8

00002674 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2674:	2807      	cmp	r0, #7
    2676:	d901      	bls.n	267c <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    2678:	2000      	movs	r0, #0
}
    267a:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    267c:	4b02      	ldr	r3, [pc, #8]	; (2688 <usb_set_alt_setting+0x14>)
    267e:	4418      	add	r0, r3
    2680:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
    2684:	2001      	movs	r0, #1
    2686:	4770      	bx	lr
    2688:	20001644 	.word	0x20001644

0000268c <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    268c:	2807      	cmp	r0, #7
    268e:	d901      	bls.n	2694 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    2690:	2000      	movs	r0, #0
}
    2692:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    2694:	4b02      	ldr	r3, [pc, #8]	; (26a0 <usb_get_alt_setting+0x14>)
    2696:	4418      	add	r0, r3
    2698:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
    269c:	4770      	bx	lr
    269e:	bf00      	nop
    26a0:	20001644 	.word	0x20001644

000026a4 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    26a4:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    26a6:	7803      	ldrb	r3, [r0, #0]
    26a8:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    26ac:	330a      	adds	r3, #10
    26ae:	4c06      	ldr	r4, [pc, #24]	; (26c8 <usb_handle_request+0x24>)
    26b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    26b4:	b123      	cbz	r3, 26c0 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    26b6:	4798      	blx	r3
    26b8:	2800      	cmp	r0, #0
    26ba:	db03      	blt.n	26c4 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    26bc:	2001      	movs	r0, #1
}
    26be:	bd10      	pop	{r4, pc}
		return false;
    26c0:	2000      	movs	r0, #0
    26c2:	e7fc      	b.n	26be <usb_handle_request+0x1a>
		return false;
    26c4:	2000      	movs	r0, #0
    26c6:	e7fa      	b.n	26be <usb_handle_request+0x1a>
    26c8:	20001644 	.word	0x20001644

000026cc <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    26cc:	300a      	adds	r0, #10
    26ce:	4b02      	ldr	r3, [pc, #8]	; (26d8 <usb_register_request_handler+0xc>)
    26d0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    26d4:	4770      	bx	lr
    26d6:	bf00      	nop
    26d8:	20001644 	.word	0x20001644

000026dc <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    26dc:	4b01      	ldr	r3, [pc, #4]	; (26e4 <usb_register_descriptors+0x8>)
    26de:	6258      	str	r0, [r3, #36]	; 0x24
}
    26e0:	4770      	bx	lr
    26e2:	bf00      	nop
    26e4:	20001644 	.word	0x20001644

000026e8 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    26e8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    26ea:	8847      	ldrh	r7, [r0, #2]
    26ec:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    26ee:	1f2b      	subs	r3, r5, #4
    26f0:	b2db      	uxtb	r3, r3
    26f2:	2b01      	cmp	r3, #1
    26f4:	d91e      	bls.n	2734 <usb_get_descriptor+0x4c>
    26f6:	b2ff      	uxtb	r7, r7
    26f8:	2d07      	cmp	r5, #7
    26fa:	d81e      	bhi.n	273a <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    26fc:	4b10      	ldr	r3, [pc, #64]	; (2740 <usb_get_descriptor+0x58>)
    26fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    2700:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
    2702:	e000      	b.n	2706 <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    2704:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    2706:	7818      	ldrb	r0, [r3, #0]
    2708:	b138      	cbz	r0, 271a <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
    270a:	785c      	ldrb	r4, [r3, #1]
    270c:	42ac      	cmp	r4, r5
    270e:	d1f9      	bne.n	2704 <usb_get_descriptor+0x1c>
			if (cur_index == index) {
    2710:	42b7      	cmp	r7, r6
    2712:	d001      	beq.n	2718 <usb_get_descriptor+0x30>
			cur_index++;
    2714:	3601      	adds	r6, #1
    2716:	e7f5      	b.n	2704 <usb_get_descriptor+0x1c>
				found = true;
    2718:	2001      	movs	r0, #1
	}

	if (found) {
    271a:	b160      	cbz	r0, 2736 <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
    271c:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    271e:	2d02      	cmp	r5, #2
    2720:	d002      	beq.n	2728 <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    2722:	781b      	ldrb	r3, [r3, #0]
    2724:	600b      	str	r3, [r1, #0]
    2726:	e006      	b.n	2736 <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
    2728:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    272a:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    272c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2730:	600b      	str	r3, [r1, #0]
    2732:	e000      	b.n	2736 <usb_get_descriptor+0x4e>
		return false;
    2734:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    2736:	bcf0      	pop	{r4, r5, r6, r7}
    2738:	4770      	bx	lr
		return false;
    273a:	2000      	movs	r0, #0
    273c:	e7fb      	b.n	2736 <usb_get_descriptor+0x4e>
    273e:	bf00      	nop
    2740:	20001644 	.word	0x20001644

00002744 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    2744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2746:	4684      	mov	ip, r0
    2748:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
    274a:	4b0c      	ldr	r3, [pc, #48]	; (277c <usb_get_interface+0x38>)
    274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    274e:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    2750:	e000      	b.n	2754 <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    2752:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    2754:	781a      	ldrb	r2, [r3, #0]
    2756:	b172      	cbz	r2, 2776 <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    2758:	785c      	ldrb	r4, [r3, #1]
    275a:	2c04      	cmp	r4, #4
    275c:	d1f9      	bne.n	2752 <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    275e:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
    2760:	b285      	uxth	r5, r0
    2762:	f8bc 4004 	ldrh.w	r4, [ip, #4]
    2766:	42a5      	cmp	r5, r4
    2768:	d1f3      	bne.n	2752 <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
    276a:	f7ff ff8f 	bl	268c <usb_get_alt_setting>
    276e:	7038      	strb	r0, [r7, #0]
				*len = 1;
    2770:	2001      	movs	r0, #1
    2772:	6030      	str	r0, [r6, #0]
				return true;
    2774:	e000      	b.n	2778 <usb_get_interface+0x34>
	}

	return false;
    2776:	2000      	movs	r0, #0
}
    2778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    277a:	bf00      	nop
    277c:	20001644 	.word	0x20001644

00002780 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    2780:	4b03      	ldr	r3, [pc, #12]	; (2790 <is_device_configured+0x10>)
    2782:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    2786:	3800      	subs	r0, #0
    2788:	bf18      	it	ne
    278a:	2001      	movne	r0, #1
    278c:	4770      	bx	lr
    278e:	bf00      	nop
    2790:	20001644 	.word	0x20001644

00002794 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2794:	4b07      	ldr	r3, [pc, #28]	; (27b4 <is_interface_valid+0x20>)
    2796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    2798:	e000      	b.n	279c <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    279a:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    279c:	781a      	ldrb	r2, [r3, #0]
    279e:	b13a      	cbz	r2, 27b0 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    27a0:	7859      	ldrb	r1, [r3, #1]
    27a2:	2902      	cmp	r1, #2
    27a4:	d1f9      	bne.n	279a <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    27a6:	7919      	ldrb	r1, [r3, #4]
    27a8:	4281      	cmp	r1, r0
    27aa:	d9f6      	bls.n	279a <is_interface_valid+0x6>
				return true;
    27ac:	2001      	movs	r0, #1
	}

	return false;
}
    27ae:	4770      	bx	lr
	return false;
    27b0:	2000      	movs	r0, #0
    27b2:	4770      	bx	lr
    27b4:	20001644 	.word	0x20001644

000027b8 <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
    27b8:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
    27ba:	4b16      	ldr	r3, [pc, #88]	; (2814 <is_ep_valid+0x5c>)
    27bc:	4a16      	ldr	r2, [pc, #88]	; (2818 <is_ep_valid+0x60>)
    27be:	1a9b      	subs	r3, r3, r2
    27c0:	109b      	asrs	r3, r3, #2
    27c2:	4e16      	ldr	r6, [pc, #88]	; (281c <is_ep_valid+0x64>)
    27c4:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    27c8:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    27cc:	d01d      	beq.n	280a <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
    27ce:	2400      	movs	r4, #0
    27d0:	42b4      	cmp	r4, r6
    27d2:	d218      	bcs.n	2806 <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
    27d4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    27d8:	4b0f      	ldr	r3, [pc, #60]	; (2818 <is_ep_valid+0x60>)
    27da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    27de:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    27e0:	2300      	movs	r3, #0
    27e2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    27e6:	490c      	ldr	r1, [pc, #48]	; (2818 <is_ep_valid+0x60>)
    27e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    27ec:	7f12      	ldrb	r2, [r2, #28]
    27ee:	429a      	cmp	r2, r3
    27f0:	d907      	bls.n	2802 <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
    27f2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    27f6:	7912      	ldrb	r2, [r2, #4]
    27f8:	4282      	cmp	r2, r0
    27fa:	d008      	beq.n	280e <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    27fc:	3301      	adds	r3, #1
    27fe:	b2db      	uxtb	r3, r3
    2800:	e7ef      	b.n	27e2 <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
    2802:	3401      	adds	r4, #1
    2804:	e7e4      	b.n	27d0 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
    2806:	2000      	movs	r0, #0
    2808:	e002      	b.n	2810 <is_ep_valid+0x58>
		return true;
    280a:	2001      	movs	r0, #1
    280c:	e000      	b.n	2810 <is_ep_valid+0x58>
				return true;
    280e:	2001      	movs	r0, #1
}
    2810:	bc70      	pop	{r4, r5, r6}
    2812:	4770      	bx	lr
    2814:	200004e0 	.word	0x200004e0
    2818:	200004bc 	.word	0x200004bc
    281c:	38e38e39 	.word	0x38e38e39

00002820 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    2820:	4b01      	ldr	r3, [pc, #4]	; (2828 <usb_register_custom_req_handler+0x8>)
    2822:	6198      	str	r0, [r3, #24]
}
    2824:	4770      	bx	lr
    2826:	bf00      	nop
    2828:	20001644 	.word	0x20001644

0000282c <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    282c:	4b01      	ldr	r3, [pc, #4]	; (2834 <usb_register_status_callback+0x8>)
    282e:	61d8      	str	r0, [r3, #28]
}
    2830:	4770      	bx	lr
    2832:	bf00      	nop
    2834:	20001644 	.word	0x20001644

00002838 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    2838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    283c:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
    283e:	4b14      	ldr	r3, [pc, #80]	; (2890 <foreach_ep+0x58>)
    2840:	4a14      	ldr	r2, [pc, #80]	; (2894 <foreach_ep+0x5c>)
    2842:	eba3 0802 	sub.w	r8, r3, r2
    2846:	ea4f 03a8 	mov.w	r3, r8, asr #2
    284a:	4a13      	ldr	r2, [pc, #76]	; (2898 <foreach_ep+0x60>)
    284c:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
    2850:	2500      	movs	r5, #0
    2852:	4545      	cmp	r5, r8
    2854:	d218      	bcs.n	2888 <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    2856:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    285a:	4a0e      	ldr	r2, [pc, #56]	; (2894 <foreach_ep+0x5c>)
    285c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2860:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    2862:	2400      	movs	r4, #0
    2864:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    2868:	4a0a      	ldr	r2, [pc, #40]	; (2894 <foreach_ep+0x5c>)
    286a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    286e:	7f1b      	ldrb	r3, [r3, #28]
    2870:	42a3      	cmp	r3, r4
    2872:	d907      	bls.n	2884 <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    2874:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    2878:	47b0      	blx	r6
			if (ret < 0) {
    287a:	2800      	cmp	r0, #0
    287c:	db05      	blt.n	288a <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    287e:	3401      	adds	r4, #1
    2880:	b2e4      	uxtb	r4, r4
    2882:	e7ef      	b.n	2864 <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
    2884:	3501      	adds	r5, #1
    2886:	e7e4      	b.n	2852 <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
    2888:	2000      	movs	r0, #0
}
    288a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    288e:	bf00      	nop
    2890:	200004e0 	.word	0x200004e0
    2894:	200004bc 	.word	0x200004bc
    2898:	38e38e39 	.word	0x38e38e39

0000289c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    289e:	4f13      	ldr	r7, [pc, #76]	; (28ec <class_handler+0x50>)
    28a0:	4b13      	ldr	r3, [pc, #76]	; (28f0 <class_handler+0x54>)
    28a2:	1aff      	subs	r7, r7, r3
    28a4:	10bb      	asrs	r3, r7, #2
    28a6:	4f13      	ldr	r7, [pc, #76]	; (28f4 <class_handler+0x58>)
    28a8:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    28ac:	2300      	movs	r3, #0
    28ae:	e000      	b.n	28b2 <class_handler+0x16>
    28b0:	3301      	adds	r3, #1
    28b2:	42bb      	cmp	r3, r7
    28b4:	d216      	bcs.n	28e4 <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
    28b6:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    28ba:	4d0d      	ldr	r5, [pc, #52]	; (28f0 <class_handler+0x54>)
    28bc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    28c0:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    28c2:	4c0d      	ldr	r4, [pc, #52]	; (28f8 <class_handler+0x5c>)
    28c4:	6a64      	ldr	r4, [r4, #36]	; 0x24
    28c6:	42a6      	cmp	r6, r4
    28c8:	d3f2      	bcc.n	28b0 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
    28ca:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    28ce:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    28d2:	6924      	ldr	r4, [r4, #16]
    28d4:	2c00      	cmp	r4, #0
    28d6:	d0eb      	beq.n	28b0 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    28d8:	78b6      	ldrb	r6, [r6, #2]
    28da:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    28dc:	42ae      	cmp	r6, r5
    28de:	d1e7      	bne.n	28b0 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
    28e0:	47a0      	blx	r4
    28e2:	e001      	b.n	28e8 <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
    28e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    28e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28ea:	bf00      	nop
    28ec:	200004e0 	.word	0x200004e0
    28f0:	200004bc 	.word	0x200004bc
    28f4:	38e38e39 	.word	0x38e38e39
    28f8:	20001644 	.word	0x20001644

000028fc <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    28fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2900:	4607      	mov	r7, r0
    2902:	4688      	mov	r8, r1
    2904:	4691      	mov	r9, r2
	size_t size = (__usb_data_end - __usb_data_start);
    2906:	4e19      	ldr	r6, [pc, #100]	; (296c <custom_handler+0x70>)
    2908:	4b19      	ldr	r3, [pc, #100]	; (2970 <custom_handler+0x74>)
    290a:	1af6      	subs	r6, r6, r3
    290c:	10b3      	asrs	r3, r6, #2
    290e:	4e19      	ldr	r6, [pc, #100]	; (2974 <custom_handler+0x78>)
    2910:	fb06 f603 	mul.w	r6, r6, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    2914:	2400      	movs	r4, #0
    2916:	e005      	b.n	2924 <custom_handler+0x28>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    2918:	464a      	mov	r2, r9
    291a:	4641      	mov	r1, r8
    291c:	4638      	mov	r0, r7
    291e:	47a8      	blx	r5
    2920:	e021      	b.n	2966 <custom_handler+0x6a>
	for (size_t i = 0; i < size; i++) {
    2922:	3401      	adds	r4, #1
    2924:	42a6      	cmp	r6, r4
    2926:	d91c      	bls.n	2962 <custom_handler+0x66>
		if_descr = __usb_data_start[i].interface_descriptor;
    2928:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    292c:	4d10      	ldr	r5, [pc, #64]	; (2970 <custom_handler+0x74>)
    292e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2932:	685b      	ldr	r3, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2934:	4a10      	ldr	r2, [pc, #64]	; (2978 <custom_handler+0x7c>)
    2936:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2938:	4293      	cmp	r3, r2
    293a:	d3f2      	bcc.n	2922 <custom_handler+0x26>
		if (iface->custom_handler == NULL) {
    293c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    2940:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    2944:	6995      	ldr	r5, [r2, #24]
    2946:	2d00      	cmp	r5, #0
    2948:	d0eb      	beq.n	2922 <custom_handler+0x26>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    294a:	7899      	ldrb	r1, [r3, #2]
    294c:	793a      	ldrb	r2, [r7, #4]
    294e:	4291      	cmp	r1, r2
    2950:	d0e2      	beq.n	2918 <custom_handler+0x1c>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    2952:	795b      	ldrb	r3, [r3, #5]
    2954:	2b01      	cmp	r3, #1
    2956:	d1e4      	bne.n	2922 <custom_handler+0x26>
				(void)iface->custom_handler(pSetup, len, data);
    2958:	464a      	mov	r2, r9
    295a:	4641      	mov	r1, r8
    295c:	4638      	mov	r0, r7
    295e:	47a8      	blx	r5
    2960:	e7df      	b.n	2922 <custom_handler+0x26>
			}
		}
	}

	return -ENOTSUP;
    2962:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    296a:	bf00      	nop
    296c:	200004e0 	.word	0x200004e0
    2970:	200004bc 	.word	0x200004bc
    2974:	38e38e39 	.word	0x38e38e39
    2978:	20001644 	.word	0x20001644

0000297c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    297c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2980:	4681      	mov	r9, r0
    2982:	4688      	mov	r8, r1
    2984:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
    2986:	4e10      	ldr	r6, [pc, #64]	; (29c8 <vendor_handler+0x4c>)
    2988:	4b10      	ldr	r3, [pc, #64]	; (29cc <vendor_handler+0x50>)
    298a:	1af6      	subs	r6, r6, r3
    298c:	10b3      	asrs	r3, r6, #2
    298e:	4e10      	ldr	r6, [pc, #64]	; (29d0 <vendor_handler+0x54>)
    2990:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
    2994:	2400      	movs	r4, #0
    2996:	e000      	b.n	299a <vendor_handler+0x1e>
    2998:	3401      	adds	r4, #1
    299a:	42a6      	cmp	r6, r4
    299c:	d90f      	bls.n	29be <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
    299e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    29a2:	4d0a      	ldr	r5, [pc, #40]	; (29cc <vendor_handler+0x50>)
    29a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    29a8:	695b      	ldr	r3, [r3, #20]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d0f4      	beq.n	2998 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
    29ae:	463a      	mov	r2, r7
    29b0:	4641      	mov	r1, r8
    29b2:	4648      	mov	r0, r9
    29b4:	4798      	blx	r3
    29b6:	4603      	mov	r3, r0
    29b8:	2800      	cmp	r0, #0
    29ba:	d1ed      	bne.n	2998 <vendor_handler+0x1c>
    29bc:	e001      	b.n	29c2 <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    29be:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    29c2:	4618      	mov	r0, r3
    29c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    29c8:	200004e0 	.word	0x200004e0
    29cc:	200004bc 	.word	0x200004bc
    29d0:	38e38e39 	.word	0x38e38e39

000029d4 <usb_halt_endpoint_req>:
{
    29d4:	b570      	push	{r4, r5, r6, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    29da:	7904      	ldrb	r4, [r0, #4]
    29dc:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    29e0:	4620      	mov	r0, r4
    29e2:	f7ff fee9 	bl	27b8 <is_ep_valid>
    29e6:	4606      	mov	r6, r0
    29e8:	b130      	cbz	r0, 29f8 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    29ea:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    29ee:	d006      	beq.n	29fe <usb_halt_endpoint_req+0x2a>
    29f0:	f7ff fec6 	bl	2780 <is_device_configured>
    29f4:	b918      	cbnz	r0, 29fe <usb_halt_endpoint_req+0x2a>
	return false;
    29f6:	4606      	mov	r6, r0
}
    29f8:	4630      	mov	r0, r6
    29fa:	b002      	add	sp, #8
    29fc:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    29fe:	b15d      	cbz	r5, 2a18 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    2a00:	4620      	mov	r0, r4
    2a02:	f004 fa35 	bl	6e70 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    2a06:	4b0a      	ldr	r3, [pc, #40]	; (2a30 <usb_halt_endpoint_req+0x5c>)
    2a08:	69db      	ldr	r3, [r3, #28]
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d0f4      	beq.n	29f8 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2a0e:	f10d 0107 	add.w	r1, sp, #7
    2a12:	2008      	movs	r0, #8
    2a14:	4798      	blx	r3
    2a16:	e7ef      	b.n	29f8 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    2a18:	4620      	mov	r0, r4
    2a1a:	f004 fa6f 	bl	6efc <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2a1e:	4b04      	ldr	r3, [pc, #16]	; (2a30 <usb_halt_endpoint_req+0x5c>)
    2a20:	69db      	ldr	r3, [r3, #28]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d0e8      	beq.n	29f8 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2a26:	f10d 0107 	add.w	r1, sp, #7
    2a2a:	2009      	movs	r0, #9
    2a2c:	4798      	blx	r3
		return true;
    2a2e:	e7e3      	b.n	29f8 <usb_halt_endpoint_req+0x24>
    2a30:	20001644 	.word	0x20001644

00002a34 <set_endpoint>:
{
    2a34:	b500      	push	{lr}
    2a36:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2a38:	7883      	ldrb	r3, [r0, #2]
    2a3a:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2a3e:	8883      	ldrh	r3, [r0, #4]
    2a40:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2a44:	78c3      	ldrb	r3, [r0, #3]
    2a46:	f003 0303 	and.w	r3, r3, #3
    2a4a:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    2a4e:	4668      	mov	r0, sp
    2a50:	f004 f9d0 	bl	6df4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    2a54:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2a58:	d000      	beq.n	2a5c <set_endpoint+0x28>
	} else if (ret) {
    2a5a:	b970      	cbnz	r0, 2a7a <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2a5c:	f89d 0000 	ldrb.w	r0, [sp]
    2a60:	f004 fa96 	bl	6f90 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2a64:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2a68:	d000      	beq.n	2a6c <set_endpoint+0x38>
	} else if (ret) {
    2a6a:	b9d0      	cbnz	r0, 2aa2 <set_endpoint+0x6e>
	usb_dev.configured = true;
    2a6c:	2001      	movs	r0, #1
    2a6e:	4b17      	ldr	r3, [pc, #92]	; (2acc <set_endpoint+0x98>)
    2a70:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
    2a74:	b003      	add	sp, #12
    2a76:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2a7a:	4b15      	ldr	r3, [pc, #84]	; (2ad0 <set_endpoint+0x9c>)
    2a7c:	4a15      	ldr	r2, [pc, #84]	; (2ad4 <set_endpoint+0xa0>)
    2a7e:	1a9b      	subs	r3, r3, r2
    2a80:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2a82:	f04f 0200 	mov.w	r2, #0
    2a86:	2101      	movs	r1, #1
    2a88:	f361 0202 	bfi	r2, r1, #0, #3
    2a8c:	f36f 02c5 	bfc	r2, #3, #3
    2a90:	f363 128f 	bfi	r2, r3, #6, #10
    2a94:	f89d 1000 	ldrb.w	r1, [sp]
    2a98:	480f      	ldr	r0, [pc, #60]	; (2ad8 <set_endpoint+0xa4>)
    2a9a:	f7ff f989 	bl	1db0 <log_1>
		return false;
    2a9e:	2000      	movs	r0, #0
    2aa0:	e7e8      	b.n	2a74 <set_endpoint+0x40>
    2aa2:	4b0b      	ldr	r3, [pc, #44]	; (2ad0 <set_endpoint+0x9c>)
    2aa4:	4a0b      	ldr	r2, [pc, #44]	; (2ad4 <set_endpoint+0xa0>)
    2aa6:	1a9b      	subs	r3, r3, r2
    2aa8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2aaa:	f04f 0200 	mov.w	r2, #0
    2aae:	2101      	movs	r1, #1
    2ab0:	f361 0202 	bfi	r2, r1, #0, #3
    2ab4:	f36f 02c5 	bfc	r2, #3, #3
    2ab8:	f363 128f 	bfi	r2, r3, #6, #10
    2abc:	f89d 1000 	ldrb.w	r1, [sp]
    2ac0:	4806      	ldr	r0, [pc, #24]	; (2adc <set_endpoint+0xa8>)
    2ac2:	f7ff f975 	bl	1db0 <log_1>
		return false;
    2ac6:	2000      	movs	r0, #0
    2ac8:	e7d4      	b.n	2a74 <set_endpoint+0x40>
    2aca:	bf00      	nop
    2acc:	20001644 	.word	0x20001644
    2ad0:	000146e8 	.word	0x000146e8
    2ad4:	00014688 	.word	0x00014688
    2ad8:	000149b8 	.word	0x000149b8
    2adc:	000149dc 	.word	0x000149dc

00002ae0 <usb_reset_alt_setting>:
{
    2ae0:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2ae2:	2208      	movs	r2, #8
    2ae4:	2100      	movs	r1, #0
    2ae6:	4802      	ldr	r0, [pc, #8]	; (2af0 <usb_reset_alt_setting+0x10>)
    2ae8:	f00e fd5c 	bl	115a4 <memset>
}
    2aec:	bd08      	pop	{r3, pc}
    2aee:	bf00      	nop
    2af0:	200016ff 	.word	0x200016ff

00002af4 <usb_set_configuration>:
{
    2af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2af8:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2afa:	4b23      	ldr	r3, [pc, #140]	; (2b88 <usb_set_configuration+0x94>)
    2afc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    2afe:	8843      	ldrh	r3, [r0, #2]
    2b00:	b11b      	cbz	r3, 2b0a <usb_set_configuration+0x16>
	bool found = false;
    2b02:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    2b04:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2b06:	46b0      	mov	r8, r6
    2b08:	e010      	b.n	2b2c <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    2b0a:	f7ff ffe9 	bl	2ae0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2b0e:	886a      	ldrh	r2, [r5, #2]
    2b10:	4b1d      	ldr	r3, [pc, #116]	; (2b88 <usb_set_configuration+0x94>)
    2b12:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    2b16:	69db      	ldr	r3, [r3, #28]
    2b18:	b113      	cbz	r3, 2b20 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2b1a:	491c      	ldr	r1, [pc, #112]	; (2b8c <usb_set_configuration+0x98>)
    2b1c:	2003      	movs	r0, #3
    2b1e:	4798      	blx	r3
		return true;
    2b20:	2701      	movs	r7, #1
    2b22:	e020      	b.n	2b66 <usb_set_configuration+0x72>
			cur_alt_setting =
    2b24:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    2b28:	7823      	ldrb	r3, [r4, #0]
    2b2a:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    2b2c:	7823      	ldrb	r3, [r4, #0]
    2b2e:	b1cb      	cbz	r3, 2b64 <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
    2b30:	7863      	ldrb	r3, [r4, #1]
    2b32:	2b04      	cmp	r3, #4
    2b34:	d0f6      	beq.n	2b24 <usb_set_configuration+0x30>
    2b36:	2b05      	cmp	r3, #5
    2b38:	d008      	beq.n	2b4c <usb_set_configuration+0x58>
    2b3a:	2b02      	cmp	r3, #2
    2b3c:	d1f4      	bne.n	2b28 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2b3e:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    2b40:	b2b2      	uxth	r2, r6
    2b42:	886b      	ldrh	r3, [r5, #2]
    2b44:	429a      	cmp	r2, r3
    2b46:	d1ef      	bne.n	2b28 <usb_set_configuration+0x34>
				found = true;
    2b48:	2701      	movs	r7, #1
    2b4a:	e7ed      	b.n	2b28 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    2b4c:	b2b3      	uxth	r3, r6
    2b4e:	886a      	ldrh	r2, [r5, #2]
    2b50:	4293      	cmp	r3, r2
    2b52:	d1e9      	bne.n	2b28 <usb_set_configuration+0x34>
    2b54:	f1b8 0f00 	cmp.w	r8, #0
    2b58:	d1e6      	bne.n	2b28 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2b5a:	4620      	mov	r0, r4
    2b5c:	f7ff ff6a 	bl	2a34 <set_endpoint>
    2b60:	4607      	mov	r7, r0
			break;
    2b62:	e7e1      	b.n	2b28 <usb_set_configuration+0x34>
	if (found) {
    2b64:	b917      	cbnz	r7, 2b6c <usb_set_configuration+0x78>
}
    2b66:	4638      	mov	r0, r7
    2b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    2b6c:	f7ff ffb8 	bl	2ae0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2b70:	886a      	ldrh	r2, [r5, #2]
    2b72:	4b05      	ldr	r3, [pc, #20]	; (2b88 <usb_set_configuration+0x94>)
    2b74:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    2b78:	69db      	ldr	r3, [r3, #28]
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d0f3      	beq.n	2b66 <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2b7e:	4903      	ldr	r1, [pc, #12]	; (2b8c <usb_set_configuration+0x98>)
    2b80:	2003      	movs	r0, #3
    2b82:	4798      	blx	r3
    2b84:	e7ef      	b.n	2b66 <usb_set_configuration+0x72>
    2b86:	bf00      	nop
    2b88:	20001644 	.word	0x20001644
    2b8c:	200016fe 	.word	0x200016fe

00002b90 <usb_handle_std_device_req>:
{
    2b90:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    2b92:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    2b94:	f990 3000 	ldrsb.w	r3, [r0]
    2b98:	2b00      	cmp	r3, #0
    2b9a:	db06      	blt.n	2baa <usb_handle_std_device_req+0x1a>
		switch (setup->bRequest) {
    2b9c:	7843      	ldrb	r3, [r0, #1]
    2b9e:	2b05      	cmp	r3, #5
    2ba0:	d018      	beq.n	2bd4 <usb_handle_std_device_req+0x44>
    2ba2:	2b09      	cmp	r3, #9
    2ba4:	d01d      	beq.n	2be2 <usb_handle_std_device_req+0x52>
    2ba6:	2000      	movs	r0, #0
}
    2ba8:	bd10      	pop	{r4, pc}
		switch (setup->bRequest) {
    2baa:	7843      	ldrb	r3, [r0, #1]
    2bac:	2b06      	cmp	r3, #6
    2bae:	d007      	beq.n	2bc0 <usb_handle_std_device_req+0x30>
    2bb0:	2b08      	cmp	r3, #8
    2bb2:	d008      	beq.n	2bc6 <usb_handle_std_device_req+0x36>
    2bb4:	b10b      	cbz	r3, 2bba <usb_handle_std_device_req+0x2a>
    2bb6:	2000      	movs	r0, #0
    2bb8:	e7f6      	b.n	2ba8 <usb_handle_std_device_req+0x18>
			return usb_get_status(setup, len, data_buf);
    2bba:	f00e f8a3 	bl	10d04 <usb_get_status>
    2bbe:	e7f3      	b.n	2ba8 <usb_handle_std_device_req+0x18>
			return usb_get_descriptor(setup, len, data_buf);
    2bc0:	f7ff fd92 	bl	26e8 <usb_get_descriptor>
    2bc4:	e7f0      	b.n	2ba8 <usb_handle_std_device_req+0x18>
			data[0] = usb_dev.configuration;
    2bc6:	4b08      	ldr	r3, [pc, #32]	; (2be8 <usb_handle_std_device_req+0x58>)
    2bc8:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    2bcc:	7023      	strb	r3, [r4, #0]
			*len = 1;
    2bce:	2001      	movs	r0, #1
    2bd0:	6008      	str	r0, [r1, #0]
			return true;
    2bd2:	e7e9      	b.n	2ba8 <usb_handle_std_device_req+0x18>
			return !usb_dc_set_address(setup->wValue);
    2bd4:	7880      	ldrb	r0, [r0, #2]
    2bd6:	f004 f8b7 	bl	6d48 <usb_dc_set_address>
    2bda:	fab0 f080 	clz	r0, r0
    2bde:	0940      	lsrs	r0, r0, #5
    2be0:	e7e2      	b.n	2ba8 <usb_handle_std_device_req+0x18>
			return usb_set_configuration(setup);
    2be2:	f7ff ff87 	bl	2af4 <usb_set_configuration>
    2be6:	e7df      	b.n	2ba8 <usb_handle_std_device_req+0x18>
    2be8:	20001644 	.word	0x20001644

00002bec <reset_endpoint>:
{
    2bec:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2bee:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2bf0:	4620      	mov	r0, r4
    2bf2:	f000 fdcb 	bl	378c <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    2bf6:	4620      	mov	r0, r4
    2bf8:	f004 f9f8 	bl	6fec <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2bfc:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2c00:	d015      	beq.n	2c2e <reset_endpoint+0x42>
	} else if (ret) {
    2c02:	b908      	cbnz	r0, 2c08 <reset_endpoint+0x1c>
	return true;
    2c04:	2001      	movs	r0, #1
}
    2c06:	bd10      	pop	{r4, pc}
    2c08:	4b0a      	ldr	r3, [pc, #40]	; (2c34 <reset_endpoint+0x48>)
    2c0a:	4a0b      	ldr	r2, [pc, #44]	; (2c38 <reset_endpoint+0x4c>)
    2c0c:	1a9b      	subs	r3, r3, r2
    2c0e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    2c10:	f04f 0200 	mov.w	r2, #0
    2c14:	2101      	movs	r1, #1
    2c16:	f361 0202 	bfi	r2, r1, #0, #3
    2c1a:	f36f 02c5 	bfc	r2, #3, #3
    2c1e:	f363 128f 	bfi	r2, r3, #6, #10
    2c22:	4621      	mov	r1, r4
    2c24:	4805      	ldr	r0, [pc, #20]	; (2c3c <reset_endpoint+0x50>)
    2c26:	f7ff f8c3 	bl	1db0 <log_1>
		return false;
    2c2a:	2000      	movs	r0, #0
    2c2c:	e7eb      	b.n	2c06 <reset_endpoint+0x1a>
	return true;
    2c2e:	2001      	movs	r0, #1
    2c30:	e7e9      	b.n	2c06 <reset_endpoint+0x1a>
    2c32:	bf00      	nop
    2c34:	000146e8 	.word	0x000146e8
    2c38:	00014688 	.word	0x00014688
    2c3c:	00014a00 	.word	0x00014a00

00002c40 <usb_set_interface>:
{
    2c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2c44:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    2c46:	4b1b      	ldr	r3, [pc, #108]	; (2cb4 <usb_set_interface+0x74>)
    2c48:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    2c4a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    2c4c:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2c4e:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    2c50:	46b9      	mov	r9, r7
    2c52:	e008      	b.n	2c66 <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2c54:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2c58:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2c5a:	b2ab      	uxth	r3, r5
    2c5c:	88b0      	ldrh	r0, [r6, #4]
    2c5e:	4283      	cmp	r3, r0
    2c60:	d013      	beq.n	2c8a <usb_set_interface+0x4a>
		p += p[DESC_bLength];
    2c62:	7823      	ldrb	r3, [r4, #0]
    2c64:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    2c66:	7823      	ldrb	r3, [r4, #0]
    2c68:	b1db      	cbz	r3, 2ca2 <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
    2c6a:	7863      	ldrb	r3, [r4, #1]
    2c6c:	2b04      	cmp	r3, #4
    2c6e:	d0f1      	beq.n	2c54 <usb_set_interface+0x14>
    2c70:	2b05      	cmp	r3, #5
    2c72:	d1f6      	bne.n	2c62 <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
    2c74:	b2ab      	uxth	r3, r5
    2c76:	88b2      	ldrh	r2, [r6, #4]
    2c78:	4293      	cmp	r3, r2
    2c7a:	d1f2      	bne.n	2c62 <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    2c7c:	78b2      	ldrb	r2, [r6, #2]
    2c7e:	4641      	mov	r1, r8
    2c80:	4620      	mov	r0, r4
    2c82:	f00e f849 	bl	10d18 <usb_eps_reconfigure>
    2c86:	4607      	mov	r7, r0
    2c88:	e7eb      	b.n	2c62 <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
    2c8a:	fa1f f388 	uxth.w	r3, r8
    2c8e:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    2c90:	428b      	cmp	r3, r1
    2c92:	d1e6      	bne.n	2c62 <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
    2c94:	b2c9      	uxtb	r1, r1
    2c96:	b2c0      	uxtb	r0, r0
    2c98:	f7ff fcec 	bl	2674 <usb_set_alt_setting>
    2c9c:	4607      	mov	r7, r0
				if_desc = (void *)p;
    2c9e:	46a1      	mov	r9, r4
    2ca0:	e7df      	b.n	2c62 <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    2ca2:	4b04      	ldr	r3, [pc, #16]	; (2cb4 <usb_set_interface+0x74>)
    2ca4:	69db      	ldr	r3, [r3, #28]
    2ca6:	b113      	cbz	r3, 2cae <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2ca8:	4649      	mov	r1, r9
    2caa:	2007      	movs	r0, #7
    2cac:	4798      	blx	r3
}
    2cae:	4638      	mov	r0, r7
    2cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2cb4:	20001644 	.word	0x20001644

00002cb8 <usb_handle_standard_request>:
{
    2cb8:	b570      	push	{r4, r5, r6, lr}
    2cba:	4604      	mov	r4, r0
    2cbc:	460d      	mov	r5, r1
    2cbe:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    2cc0:	4b18      	ldr	r3, [pc, #96]	; (2d24 <usb_handle_standard_request+0x6c>)
    2cc2:	699b      	ldr	r3, [r3, #24]
    2cc4:	b10b      	cbz	r3, 2cca <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    2cc6:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2cc8:	b148      	cbz	r0, 2cde <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    2cca:	7823      	ldrb	r3, [r4, #0]
    2ccc:	f003 031f 	and.w	r3, r3, #31
    2cd0:	2b01      	cmp	r3, #1
    2cd2:	d00d      	beq.n	2cf0 <usb_handle_standard_request+0x38>
    2cd4:	2b02      	cmp	r3, #2
    2cd6:	d013      	beq.n	2d00 <usb_handle_standard_request+0x48>
    2cd8:	b113      	cbz	r3, 2ce0 <usb_handle_standard_request+0x28>
    2cda:	f06f 0015 	mvn.w	r0, #21
}
    2cde:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    2ce0:	4632      	mov	r2, r6
    2ce2:	4629      	mov	r1, r5
    2ce4:	4620      	mov	r0, r4
    2ce6:	f7ff ff53 	bl	2b90 <usb_handle_std_device_req>
    2cea:	b188      	cbz	r0, 2d10 <usb_handle_standard_request+0x58>
	int rc = 0;
    2cec:	2000      	movs	r0, #0
    2cee:	e7f6      	b.n	2cde <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2cf0:	4632      	mov	r2, r6
    2cf2:	4629      	mov	r1, r5
    2cf4:	4620      	mov	r0, r4
    2cf6:	f00e f818 	bl	10d2a <usb_handle_std_interface_req>
    2cfa:	b160      	cbz	r0, 2d16 <usb_handle_standard_request+0x5e>
	int rc = 0;
    2cfc:	2000      	movs	r0, #0
    2cfe:	e7ee      	b.n	2cde <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2d00:	4632      	mov	r2, r6
    2d02:	4629      	mov	r1, r5
    2d04:	4620      	mov	r0, r4
    2d06:	f00e f85d 	bl	10dc4 <usb_handle_std_endpoint_req>
    2d0a:	b138      	cbz	r0, 2d1c <usb_handle_standard_request+0x64>
	int rc = 0;
    2d0c:	2000      	movs	r0, #0
    2d0e:	e7e6      	b.n	2cde <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2d10:	f06f 0015 	mvn.w	r0, #21
    2d14:	e7e3      	b.n	2cde <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2d16:	f06f 0015 	mvn.w	r0, #21
    2d1a:	e7e0      	b.n	2cde <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2d1c:	f06f 0015 	mvn.w	r0, #21
    2d20:	e7dd      	b.n	2cde <usb_handle_standard_request+0x26>
    2d22:	bf00      	nop
    2d24:	20001644 	.word	0x20001644

00002d28 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    2d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    2d2a:	4f15      	ldr	r7, [pc, #84]	; (2d80 <composite_setup_ep_cb+0x58>)
    2d2c:	4b15      	ldr	r3, [pc, #84]	; (2d84 <composite_setup_ep_cb+0x5c>)
    2d2e:	1aff      	subs	r7, r7, r3
    2d30:	10bb      	asrs	r3, r7, #2
    2d32:	4f15      	ldr	r7, [pc, #84]	; (2d88 <composite_setup_ep_cb+0x60>)
    2d34:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
    2d38:	2500      	movs	r5, #0
    2d3a:	42af      	cmp	r7, r5
    2d3c:	d91b      	bls.n	2d76 <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
    2d3e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    2d42:	4a10      	ldr	r2, [pc, #64]	; (2d84 <composite_setup_ep_cb+0x5c>)
    2d44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d48:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    2d4a:	2400      	movs	r4, #0
    2d4c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    2d50:	4a0c      	ldr	r2, [pc, #48]	; (2d84 <composite_setup_ep_cb+0x5c>)
    2d52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2d56:	7f1b      	ldrb	r3, [r3, #28]
    2d58:	429c      	cmp	r4, r3
    2d5a:	d20a      	bcs.n	2d72 <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2d5c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    2d60:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
    2d64:	7918      	ldrb	r0, [r3, #4]
    2d66:	f004 fb5d 	bl	7424 <usb_dc_ep_set_callback>
    2d6a:	b930      	cbnz	r0, 2d7a <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    2d6c:	3401      	adds	r4, #1
    2d6e:	b2e4      	uxtb	r4, r4
    2d70:	e7ec      	b.n	2d4c <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
    2d72:	3501      	adds	r5, #1
    2d74:	e7e1      	b.n	2d3a <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
    2d76:	2000      	movs	r0, #0
    2d78:	e001      	b.n	2d7e <composite_setup_ep_cb+0x56>
				return -1;
    2d7a:	f04f 30ff 	mov.w	r0, #4294967295
}
    2d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d80:	200004e0 	.word	0x200004e0
    2d84:	200004bc 	.word	0x200004bc
    2d88:	38e38e39 	.word	0x38e38e39

00002d8c <forward_status_cb>:
{
    2d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d8e:	4606      	mov	r6, r0
    2d90:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
    2d92:	4d1c      	ldr	r5, [pc, #112]	; (2e04 <forward_status_cb+0x78>)
    2d94:	4b1c      	ldr	r3, [pc, #112]	; (2e08 <forward_status_cb+0x7c>)
    2d96:	1aed      	subs	r5, r5, r3
    2d98:	10ab      	asrs	r3, r5, #2
    2d9a:	4d1c      	ldr	r5, [pc, #112]	; (2e0c <forward_status_cb+0x80>)
    2d9c:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED) {
    2da0:	2804      	cmp	r0, #4
    2da2:	d005      	beq.n	2db0 <forward_status_cb+0x24>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    2da4:	1f33      	subs	r3, r6, #4
    2da6:	b2db      	uxtb	r3, r3
    2da8:	2b01      	cmp	r3, #1
    2daa:	d904      	bls.n	2db6 <forward_status_cb+0x2a>
{
    2dac:	2400      	movs	r4, #0
    2dae:	e014      	b.n	2dda <forward_status_cb+0x4e>
		usb_reset_alt_setting();
    2db0:	f7ff fe96 	bl	2ae0 <usb_reset_alt_setting>
    2db4:	e7f6      	b.n	2da4 <forward_status_cb+0x18>
		if (usb_dev.configured) {
    2db6:	4b16      	ldr	r3, [pc, #88]	; (2e10 <forward_status_cb+0x84>)
    2db8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d0f5      	beq.n	2dac <forward_status_cb+0x20>
			usb_cancel_transfers();
    2dc0:	f000 fd04 	bl	37cc <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    2dc4:	2e04      	cmp	r6, #4
    2dc6:	d1f1      	bne.n	2dac <forward_status_cb+0x20>
				foreach_ep(disable_interface_ep);
    2dc8:	4812      	ldr	r0, [pc, #72]	; (2e14 <forward_status_cb+0x88>)
    2dca:	f7ff fd35 	bl	2838 <foreach_ep>
				usb_dev.configured = false;
    2dce:	4b10      	ldr	r3, [pc, #64]	; (2e10 <forward_status_cb+0x84>)
    2dd0:	2200      	movs	r2, #0
    2dd2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    2dd6:	e7e9      	b.n	2dac <forward_status_cb+0x20>
	for (size_t i = 0; i < size; i++) {
    2dd8:	3401      	adds	r4, #1
    2dda:	42ac      	cmp	r4, r5
    2ddc:	d20b      	bcs.n	2df6 <forward_status_cb+0x6a>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
    2dde:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    2de2:	4b09      	ldr	r3, [pc, #36]	; (2e08 <forward_status_cb+0x7c>)
    2de4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
    2de8:	68c3      	ldr	r3, [r0, #12]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d0f4      	beq.n	2dd8 <forward_status_cb+0x4c>
			cfg->cb_usb_status(cfg, status, param);
    2dee:	463a      	mov	r2, r7
    2df0:	4631      	mov	r1, r6
    2df2:	4798      	blx	r3
    2df4:	e7f0      	b.n	2dd8 <forward_status_cb+0x4c>
	if (usb_dev.user_status_callback) {
    2df6:	4b06      	ldr	r3, [pc, #24]	; (2e10 <forward_status_cb+0x84>)
    2df8:	6a1b      	ldr	r3, [r3, #32]
    2dfa:	b113      	cbz	r3, 2e02 <forward_status_cb+0x76>
		usb_dev.user_status_callback(status, param);
    2dfc:	4639      	mov	r1, r7
    2dfe:	4630      	mov	r0, r6
    2e00:	4798      	blx	r3
}
    2e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e04:	200004e0 	.word	0x200004e0
    2e08:	200004bc 	.word	0x200004bc
    2e0c:	38e38e39 	.word	0x38e38e39
    2e10:	20001644 	.word	0x20001644
    2e14:	00010d85 	.word	0x00010d85

00002e18 <usb_data_to_host>:
{
    2e18:	b510      	push	{r4, lr}
    2e1a:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    2e1c:	4b13      	ldr	r3, [pc, #76]	; (2e6c <usb_data_to_host+0x54>)
    2e1e:	7d1b      	ldrb	r3, [r3, #20]
    2e20:	b9cb      	cbnz	r3, 2e56 <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
    2e22:	4c12      	ldr	r4, [pc, #72]	; (2e6c <usb_data_to_host+0x54>)
    2e24:	68e2      	ldr	r2, [r4, #12]
    2e26:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2e28:	ab01      	add	r3, sp, #4
    2e2a:	68a1      	ldr	r1, [r4, #8]
    2e2c:	2080      	movs	r0, #128	; 0x80
    2e2e:	f00d ffec 	bl	10e0a <usb_write>
		usb_dev.data_buf += chunk;
    2e32:	9901      	ldr	r1, [sp, #4]
    2e34:	68a2      	ldr	r2, [r4, #8]
    2e36:	440a      	add	r2, r1
    2e38:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2e3a:	68e3      	ldr	r3, [r4, #12]
    2e3c:	1a5b      	subs	r3, r3, r1
    2e3e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    2e40:	b98b      	cbnz	r3, 2e66 <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2e42:	88e2      	ldrh	r2, [r4, #6]
    2e44:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
    2e46:	429a      	cmp	r2, r3
    2e48:	dd0d      	ble.n	2e66 <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    2e4a:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    2e4e:	d10a      	bne.n	2e66 <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
    2e50:	2201      	movs	r2, #1
    2e52:	7522      	strb	r2, [r4, #20]
    2e54:	e007      	b.n	2e66 <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
    2e56:	2100      	movs	r1, #0
    2e58:	4b04      	ldr	r3, [pc, #16]	; (2e6c <usb_data_to_host+0x54>)
    2e5a:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2e5c:	460b      	mov	r3, r1
    2e5e:	460a      	mov	r2, r1
    2e60:	2080      	movs	r0, #128	; 0x80
    2e62:	f004 f8ed 	bl	7040 <usb_dc_ep_write>
}
    2e66:	b002      	add	sp, #8
    2e68:	bd10      	pop	{r4, pc}
    2e6a:	bf00      	nop
    2e6c:	20001644 	.word	0x20001644

00002e70 <usb_handle_control_transfer>:
{
    2e70:	b510      	push	{r4, lr}
    2e72:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
    2e74:	2300      	movs	r3, #0
    2e76:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2e78:	4604      	mov	r4, r0
    2e7a:	b900      	cbnz	r0, 2e7e <usb_handle_control_transfer+0xe>
    2e7c:	b331      	cbz	r1, 2ecc <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
    2e7e:	2c00      	cmp	r4, #0
    2e80:	f040 8094 	bne.w	2fac <usb_handle_control_transfer+0x13c>
		if (usb_dev.data_buf_residue <= 0) {
    2e84:	4b50      	ldr	r3, [pc, #320]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2e86:	68da      	ldr	r2, [r3, #12]
    2e88:	2a00      	cmp	r2, #0
    2e8a:	dd77      	ble.n	2f7c <usb_handle_control_transfer+0x10c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2e8c:	ab03      	add	r3, sp, #12
    2e8e:	494e      	ldr	r1, [pc, #312]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2e90:	6889      	ldr	r1, [r1, #8]
    2e92:	2000      	movs	r0, #0
    2e94:	f00e ff0d 	bl	11cb2 <usb_dc_ep_read>
    2e98:	2800      	cmp	r0, #0
    2e9a:	db7c      	blt.n	2f96 <usb_handle_control_transfer+0x126>
		usb_dev.data_buf += chunk;
    2e9c:	9803      	ldr	r0, [sp, #12]
    2e9e:	4a4a      	ldr	r2, [pc, #296]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2ea0:	6891      	ldr	r1, [r2, #8]
    2ea2:	4401      	add	r1, r0
    2ea4:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    2ea6:	68d3      	ldr	r3, [r2, #12]
    2ea8:	1a1b      	subs	r3, r3, r0
    2eaa:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    2eac:	2b00      	cmp	r3, #0
    2eae:	d17f      	bne.n	2fb0 <usb_handle_control_transfer+0x140>
			usb_dev.data_buf = usb_dev.req_data;
    2eb0:	4610      	mov	r0, r2
    2eb2:	f102 0338 	add.w	r3, r2, #56	; 0x38
    2eb6:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    2eba:	f100 0110 	add.w	r1, r0, #16
    2ebe:	f7ff fbf1 	bl	26a4 <usb_handle_request>
    2ec2:	2800      	cmp	r0, #0
    2ec4:	d06e      	beq.n	2fa4 <usb_handle_control_transfer+0x134>
			usb_data_to_host();
    2ec6:	f7ff ffa7 	bl	2e18 <usb_data_to_host>
    2eca:	e071      	b.n	2fb0 <usb_handle_control_transfer+0x140>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2ecc:	2208      	movs	r2, #8
    2ece:	a901      	add	r1, sp, #4
    2ed0:	f00e feef 	bl	11cb2 <usb_dc_ep_read>
    2ed4:	2800      	cmp	r0, #0
    2ed6:	db2e      	blt.n	2f36 <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
    2ed8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2edc:	4b3a      	ldr	r3, [pc, #232]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2ede:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    2ee0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    2ee4:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    2ee6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2eea:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2eec:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    2ef0:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2ef2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2ef6:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    2ef8:	f103 0238 	add.w	r2, r3, #56	; 0x38
    2efc:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    2efe:	2200      	movs	r2, #0
    2f00:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    2f02:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    2f04:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    2f06:	f010 0f80 	tst.w	r0, #128	; 0x80
    2f0a:	d102      	bne.n	2f12 <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    2f0c:	2980      	cmp	r1, #128	; 0x80
    2f0e:	d816      	bhi.n	2f3e <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
    2f10:	bb61      	cbnz	r1, 2f6c <usb_handle_control_transfer+0xfc>
		if (!usb_handle_request(setup,
    2f12:	482d      	ldr	r0, [pc, #180]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2f14:	f100 0208 	add.w	r2, r0, #8
    2f18:	f100 0110 	add.w	r1, r0, #16
    2f1c:	f7ff fbc2 	bl	26a4 <usb_handle_request>
    2f20:	b340      	cbz	r0, 2f74 <usb_handle_control_transfer+0x104>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2f22:	4b29      	ldr	r3, [pc, #164]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2f24:	88da      	ldrh	r2, [r3, #6]
    2f26:	6919      	ldr	r1, [r3, #16]
    2f28:	428a      	cmp	r2, r1
    2f2a:	bfa8      	it	ge
    2f2c:	460a      	movge	r2, r1
    2f2e:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    2f30:	f7ff ff72 	bl	2e18 <usb_data_to_host>
    2f34:	e03c      	b.n	2fb0 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2f36:	2080      	movs	r0, #128	; 0x80
    2f38:	f003 ff9a 	bl	6e70 <usb_dc_ep_set_stall>
			return;
    2f3c:	e038      	b.n	2fb0 <usb_handle_control_transfer+0x140>
    2f3e:	4b23      	ldr	r3, [pc, #140]	; (2fcc <usb_handle_control_transfer+0x15c>)
    2f40:	4a23      	ldr	r2, [pc, #140]	; (2fd0 <usb_handle_control_transfer+0x160>)
    2f42:	1a9b      	subs	r3, r3, r2
    2f44:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Request buffer too small");
    2f46:	f04f 0100 	mov.w	r1, #0
    2f4a:	2201      	movs	r2, #1
    2f4c:	f362 0102 	bfi	r1, r2, #0, #3
    2f50:	f36f 01c5 	bfc	r1, #3, #3
    2f54:	f363 118f 	bfi	r1, r3, #6, #10
    2f58:	481e      	ldr	r0, [pc, #120]	; (2fd4 <usb_handle_control_transfer+0x164>)
    2f5a:	f7fe ffbd 	bl	1ed8 <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2f5e:	2080      	movs	r0, #128	; 0x80
    2f60:	f003 ff86 	bl	6e70 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2f64:	2000      	movs	r0, #0
    2f66:	f003 ff83 	bl	6e70 <usb_dc_ep_set_stall>
				return;
    2f6a:	e021      	b.n	2fb0 <usb_handle_control_transfer+0x140>
				usb_dev.data_buf_len = setup->wLength;
    2f6c:	4b16      	ldr	r3, [pc, #88]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2f6e:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    2f70:	60d9      	str	r1, [r3, #12]
				return;
    2f72:	e01d      	b.n	2fb0 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2f74:	2080      	movs	r0, #128	; 0x80
    2f76:	f003 ff7b 	bl	6e70 <usb_dc_ep_set_stall>
			return;
    2f7a:	e019      	b.n	2fb0 <usb_handle_control_transfer+0x140>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2f7c:	ab03      	add	r3, sp, #12
    2f7e:	2200      	movs	r2, #0
    2f80:	4911      	ldr	r1, [pc, #68]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2f82:	6889      	ldr	r1, [r1, #8]
    2f84:	4610      	mov	r0, r2
    2f86:	f00e fe94 	bl	11cb2 <usb_dc_ep_read>
    2f8a:	2800      	cmp	r0, #0
    2f8c:	da10      	bge.n	2fb0 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2f8e:	2080      	movs	r0, #128	; 0x80
    2f90:	f003 ff6e 	bl	6e70 <usb_dc_ep_set_stall>
			return;
    2f94:	e00c      	b.n	2fb0 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2f96:	2080      	movs	r0, #128	; 0x80
    2f98:	f003 ff6a 	bl	6e70 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2f9c:	2000      	movs	r0, #0
    2f9e:	f003 ff67 	bl	6e70 <usb_dc_ep_set_stall>
			return;
    2fa2:	e005      	b.n	2fb0 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2fa4:	2080      	movs	r0, #128	; 0x80
    2fa6:	f003 ff63 	bl	6e70 <usb_dc_ep_set_stall>
				return;
    2faa:	e001      	b.n	2fb0 <usb_handle_control_transfer+0x140>
	} else if (ep == USB_CONTROL_EP_IN) {
    2fac:	2c80      	cmp	r4, #128	; 0x80
    2fae:	d001      	beq.n	2fb4 <usb_handle_control_transfer+0x144>
}
    2fb0:	b004      	add	sp, #16
    2fb2:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2fb4:	4b04      	ldr	r3, [pc, #16]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2fb6:	68db      	ldr	r3, [r3, #12]
    2fb8:	b91b      	cbnz	r3, 2fc2 <usb_handle_control_transfer+0x152>
    2fba:	4b03      	ldr	r3, [pc, #12]	; (2fc8 <usb_handle_control_transfer+0x158>)
    2fbc:	7d1b      	ldrb	r3, [r3, #20]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d0f6      	beq.n	2fb0 <usb_handle_control_transfer+0x140>
			usb_data_to_host();
    2fc2:	f7ff ff29 	bl	2e18 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    2fc6:	e7f3      	b.n	2fb0 <usb_handle_control_transfer+0x140>
    2fc8:	20001644 	.word	0x20001644
    2fcc:	000146e8 	.word	0x000146e8
    2fd0:	00014688 	.word	0x00014688
    2fd4:	00014a24 	.word	0x00014a24

00002fd8 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    2fd8:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    2fda:	f7ff fb7f 	bl	26dc <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    2fde:	4908      	ldr	r1, [pc, #32]	; (3000 <CONFIG_USB_DEVICE_VID+0x1d>)
    2fe0:	2000      	movs	r0, #0
    2fe2:	f7ff fb73 	bl	26cc <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    2fe6:	4907      	ldr	r1, [pc, #28]	; (3004 <CONFIG_USB_DEVICE_VID+0x21>)
    2fe8:	2001      	movs	r0, #1
    2fea:	f7ff fb6f 	bl	26cc <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    2fee:	4906      	ldr	r1, [pc, #24]	; (3008 <CONFIG_USB_DEVICE_VID+0x25>)
    2ff0:	2002      	movs	r0, #2
    2ff2:	f7ff fb6b 	bl	26cc <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    2ff6:	4805      	ldr	r0, [pc, #20]	; (300c <CONFIG_USB_DEVICE_VID+0x29>)
    2ff8:	f7ff fc12 	bl	2820 <usb_register_custom_req_handler>

	return 0;
}
    2ffc:	2000      	movs	r0, #0
    2ffe:	bd08      	pop	{r3, pc}
    3000:	00002cb9 	.word	0x00002cb9
    3004:	0000289d 	.word	0x0000289d
    3008:	0000297d 	.word	0x0000297d
    300c:	000028fd 	.word	0x000028fd

00003010 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    3010:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    3012:	4b10      	ldr	r3, [pc, #64]	; (3054 <usb_device_init+0x44>)
    3014:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    3018:	b10b      	cbz	r3, 301e <usb_device_init+0xe>
		return 0;
    301a:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
    301c:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
    301e:	f000 f9d7 	bl	33d0 <usb_get_device_descriptor>
	if (!device_descriptor) {
    3022:	b118      	cbz	r0, 302c <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
    3024:	f7ff ffd8 	bl	2fd8 <usb_set_config>
	return 0;
    3028:	2000      	movs	r0, #0
    302a:	e7f7      	b.n	301c <usb_device_init+0xc>
    302c:	4b0a      	ldr	r3, [pc, #40]	; (3058 <usb_device_init+0x48>)
    302e:	4a0b      	ldr	r2, [pc, #44]	; (305c <usb_device_init+0x4c>)
    3030:	1a9b      	subs	r3, r3, r2
    3032:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure USB device stack");
    3034:	f04f 0100 	mov.w	r1, #0
    3038:	2201      	movs	r2, #1
    303a:	f362 0102 	bfi	r1, r2, #0, #3
    303e:	f36f 01c5 	bfc	r1, #3, #3
    3042:	f363 118f 	bfi	r1, r3, #6, #10
    3046:	4806      	ldr	r0, [pc, #24]	; (3060 <usb_device_init+0x50>)
    3048:	f7fe ff46 	bl	1ed8 <log_0>
		return -1;
    304c:	f04f 30ff 	mov.w	r0, #4294967295
    3050:	e7e4      	b.n	301c <usb_device_init+0xc>
    3052:	bf00      	nop
    3054:	20001644 	.word	0x20001644
    3058:	000146e8 	.word	0x000146e8
    305c:	00014688 	.word	0x00014688
    3060:	00014a40 	.word	0x00014a40

00003064 <usb_enable>:
{
    3064:	b530      	push	{r4, r5, lr}
    3066:	b083      	sub	sp, #12
    3068:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    306a:	f04f 32ff 	mov.w	r2, #4294967295
    306e:	f04f 33ff 	mov.w	r3, #4294967295
    3072:	482d      	ldr	r0, [pc, #180]	; (3128 <usb_enable+0xc4>)
    3074:	f00b f868 	bl	e148 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    3078:	4b2c      	ldr	r3, [pc, #176]	; (312c <usb_enable+0xc8>)
    307a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    307e:	2b00      	cmp	r3, #0
    3080:	d14a      	bne.n	3118 <usb_enable+0xb4>
	ret = usb_vbus_set(true);
    3082:	2001      	movs	r0, #1
    3084:	f00d fe46 	bl	10d14 <usb_vbus_set>
	if (ret < 0) {
    3088:	1e04      	subs	r4, r0, #0
    308a:	db46      	blt.n	311a <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
    308c:	4b27      	ldr	r3, [pc, #156]	; (312c <usb_enable+0xc8>)
    308e:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    3090:	4c27      	ldr	r4, [pc, #156]	; (3130 <usb_enable+0xcc>)
    3092:	4620      	mov	r0, r4
    3094:	f7ff fbca 	bl	282c <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    3098:	4620      	mov	r0, r4
    309a:	f004 f9d7 	bl	744c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    309e:	f003 fe0b 	bl	6cb8 <usb_dc_attach>
	if (ret < 0) {
    30a2:	1e04      	subs	r4, r0, #0
    30a4:	db39      	blt.n	311a <usb_enable+0xb6>
	ret = usb_transfer_init();
    30a6:	f000 fbbd 	bl	3824 <usb_transfer_init>
	if (ret < 0) {
    30aa:	1e04      	subs	r4, r0, #0
    30ac:	db35      	blt.n	311a <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    30ae:	2340      	movs	r3, #64	; 0x40
    30b0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    30b4:	2300      	movs	r3, #0
    30b6:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    30ba:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    30be:	4668      	mov	r0, sp
    30c0:	f003 fe98 	bl	6df4 <usb_dc_ep_configure>
	if (ret < 0) {
    30c4:	1e04      	subs	r4, r0, #0
    30c6:	db28      	blt.n	311a <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    30c8:	2380      	movs	r3, #128	; 0x80
    30ca:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    30ce:	4668      	mov	r0, sp
    30d0:	f003 fe90 	bl	6df4 <usb_dc_ep_configure>
	if (ret < 0) {
    30d4:	1e04      	subs	r4, r0, #0
    30d6:	db20      	blt.n	311a <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    30d8:	4916      	ldr	r1, [pc, #88]	; (3134 <usb_enable+0xd0>)
    30da:	2000      	movs	r0, #0
    30dc:	f004 f9a2 	bl	7424 <usb_dc_ep_set_callback>
	if (ret < 0) {
    30e0:	1e04      	subs	r4, r0, #0
    30e2:	db1a      	blt.n	311a <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    30e4:	4913      	ldr	r1, [pc, #76]	; (3134 <usb_enable+0xd0>)
    30e6:	2080      	movs	r0, #128	; 0x80
    30e8:	f004 f99c 	bl	7424 <usb_dc_ep_set_callback>
	if (ret < 0) {
    30ec:	1e04      	subs	r4, r0, #0
    30ee:	db14      	blt.n	311a <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
    30f0:	f7ff fe1a 	bl	2d28 <composite_setup_ep_cb>
	if (ret < 0) {
    30f4:	1e04      	subs	r4, r0, #0
    30f6:	db10      	blt.n	311a <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    30f8:	2000      	movs	r0, #0
    30fa:	f003 ff49 	bl	6f90 <usb_dc_ep_enable>
	if (ret < 0) {
    30fe:	1e04      	subs	r4, r0, #0
    3100:	db0b      	blt.n	311a <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    3102:	2080      	movs	r0, #128	; 0x80
    3104:	f003 ff44 	bl	6f90 <usb_dc_ep_enable>
	if (ret < 0) {
    3108:	1e04      	subs	r4, r0, #0
    310a:	db06      	blt.n	311a <usb_enable+0xb6>
	usb_dev.enabled = true;
    310c:	4b07      	ldr	r3, [pc, #28]	; (312c <usb_enable+0xc8>)
    310e:	2201      	movs	r2, #1
    3110:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    3114:	2400      	movs	r4, #0
    3116:	e000      	b.n	311a <usb_enable+0xb6>
		ret = 0;
    3118:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    311a:	4803      	ldr	r0, [pc, #12]	; (3128 <usb_enable+0xc4>)
    311c:	f00b f89e 	bl	e25c <z_impl_k_mutex_unlock>
}
    3120:	4620      	mov	r0, r4
    3122:	b003      	add	sp, #12
    3124:	bd30      	pop	{r4, r5, pc}
    3126:	bf00      	nop
    3128:	200003c8 	.word	0x200003c8
    312c:	20001644 	.word	0x20001644
    3130:	00002d8d 	.word	0x00002d8d
    3134:	00002e71 	.word	0x00002e71

00003138 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    3138:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
    313a:	4c0e      	ldr	r4, [pc, #56]	; (3174 <usb_get_cfg_data+0x3c>)
    313c:	4b0e      	ldr	r3, [pc, #56]	; (3178 <usb_get_cfg_data+0x40>)
    313e:	1ae4      	subs	r4, r4, r3
    3140:	10a3      	asrs	r3, r4, #2
    3142:	4c0e      	ldr	r4, [pc, #56]	; (317c <usb_get_cfg_data+0x44>)
    3144:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
    3148:	2300      	movs	r3, #0
    314a:	42a3      	cmp	r3, r4
    314c:	d20e      	bcs.n	316c <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
    314e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3152:	4909      	ldr	r1, [pc, #36]	; (3178 <usb_get_cfg_data+0x40>)
    3154:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3158:	6852      	ldr	r2, [r2, #4]
    315a:	4282      	cmp	r2, r0
    315c:	d001      	beq.n	3162 <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
    315e:	3301      	adds	r3, #1
    3160:	e7f3      	b.n	314a <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
    3162:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3166:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    316a:	e000      	b.n	316e <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
    316c:	2000      	movs	r0, #0
}
    316e:	bc10      	pop	{r4}
    3170:	4770      	bx	lr
    3172:	bf00      	nop
    3174:	200004e0 	.word	0x200004e0
    3178:	200004bc 	.word	0x200004bc
    317c:	38e38e39 	.word	0x38e38e39

00003180 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    3180:	b530      	push	{r4, r5, lr}
    3182:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    3184:	ac01      	add	r4, sp, #4
    3186:	4d1b      	ldr	r5, [pc, #108]	; (31f4 <usb_update_sn_string_descriptor+0x74>)
    3188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    318a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    318c:	682b      	ldr	r3, [r5, #0]
    318e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    3190:	2210      	movs	r2, #16
    3192:	2100      	movs	r1, #0
    3194:	a806      	add	r0, sp, #24
    3196:	f00e fa05 	bl	115a4 <memset>
	memset(sn, 0, sizeof(sn));
    319a:	2212      	movs	r2, #18
    319c:	2100      	movs	r1, #0
    319e:	4816      	ldr	r0, [pc, #88]	; (31f8 <usb_update_sn_string_descriptor+0x78>)
    31a0:	f00e fa00 	bl	115a4 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    31a4:	2110      	movs	r1, #16
    31a6:	a806      	add	r0, sp, #24
    31a8:	f00e fec3 	bl	11f32 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    31ac:	2800      	cmp	r0, #0
    31ae:	dd1d      	ble.n	31ec <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
    31b0:	3808      	subs	r0, #8
    31b2:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    31b6:	2200      	movs	r2, #0
    31b8:	e016      	b.n	31e8 <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    31ba:	18a3      	adds	r3, r4, r2
    31bc:	a90a      	add	r1, sp, #40	; 0x28
    31be:	440b      	add	r3, r1
    31c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    31c4:	0051      	lsls	r1, r2, #1
    31c6:	a80a      	add	r0, sp, #40	; 0x28
    31c8:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    31cc:	f810 5c24 	ldrb.w	r5, [r0, #-36]
    31d0:	4809      	ldr	r0, [pc, #36]	; (31f8 <usb_update_sn_string_descriptor+0x78>)
    31d2:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    31d6:	f003 030f 	and.w	r3, r3, #15
    31da:	3101      	adds	r1, #1
    31dc:	ad0a      	add	r5, sp, #40	; 0x28
    31de:	442b      	add	r3, r5
    31e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    31e4:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    31e6:	3201      	adds	r2, #1
    31e8:	2a07      	cmp	r2, #7
    31ea:	dde6      	ble.n	31ba <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
    31ec:	4802      	ldr	r0, [pc, #8]	; (31f8 <usb_update_sn_string_descriptor+0x78>)
    31ee:	b00b      	add	sp, #44	; 0x2c
    31f0:	bd30      	pop	{r4, r5, pc}
    31f2:	bf00      	nop
    31f4:	00014a74 	.word	0x00014a74
    31f8:	20001708 	.word	0x20001708

000031fc <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    31fc:	b570      	push	{r4, r5, r6, lr}
    31fe:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    3200:	f7ff ffbe 	bl	3180 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    3204:	b120      	cbz	r0, 3210 <usb_fix_ascii_sn_string_descriptor+0x14>
    3206:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    3208:	f00e f95a 	bl	114c0 <strlen>
	if (!runtime_sn_len) {
    320c:	4606      	mov	r6, r0
    320e:	b900      	cbnz	r0, 3212 <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    3210:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    3212:	480e      	ldr	r0, [pc, #56]	; (324c <usb_fix_ascii_sn_string_descriptor+0x50>)
    3214:	f00e f954 	bl	114c0 <strlen>
	if (runtime_sn_len != default_sn_len) {
    3218:	4286      	cmp	r6, r0
    321a:	d010      	beq.n	323e <usb_fix_ascii_sn_string_descriptor+0x42>
    321c:	4b0c      	ldr	r3, [pc, #48]	; (3250 <usb_fix_ascii_sn_string_descriptor+0x54>)
    321e:	4a0d      	ldr	r2, [pc, #52]	; (3254 <usb_fix_ascii_sn_string_descriptor+0x58>)
    3220:	1a9b      	subs	r3, r3, r2
    3222:	08db      	lsrs	r3, r3, #3
		LOG_ERR("the new SN descriptor doesn't have the same "
    3224:	f04f 0100 	mov.w	r1, #0
    3228:	2201      	movs	r2, #1
    322a:	f362 0102 	bfi	r1, r2, #0, #3
    322e:	f36f 01c5 	bfc	r1, #3, #3
    3232:	f363 118f 	bfi	r1, r3, #6, #10
    3236:	4808      	ldr	r0, [pc, #32]	; (3258 <usb_fix_ascii_sn_string_descriptor+0x5c>)
    3238:	f7fe fe4e 	bl	1ed8 <log_0>
		return;
    323c:	e7e8      	b.n	3210 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    323e:	4632      	mov	r2, r6
    3240:	4629      	mov	r1, r5
    3242:	1ca0      	adds	r0, r4, #2
    3244:	f00e f98a 	bl	1155c <memcpy>
    3248:	e7e2      	b.n	3210 <usb_fix_ascii_sn_string_descriptor+0x14>
    324a:	bf00      	nop
    324c:	00014a74 	.word	0x00014a74
    3250:	000146e0 	.word	0x000146e0
    3254:	00014688 	.word	0x00014688
    3258:	00014a88 	.word	0x00014a88

0000325c <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3260:	b082      	sub	sp, #8
    3262:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    3264:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3268:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
    326a:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    326c:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    326e:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    3270:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    3272:	e062      	b.n	333a <usb_fix_descriptor+0xde>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    3274:	78e3      	ldrb	r3, [r4, #3]
    3276:	2b00      	cmp	r3, #0
    3278:	d15d      	bne.n	3336 <usb_fix_descriptor+0xda>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    327a:	78a3      	ldrb	r3, [r4, #2]
    327c:	b94b      	cbnz	r3, 3292 <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    327e:	4620      	mov	r0, r4
    3280:	f7ff ff5a 	bl	3138 <usb_get_cfg_data>
				if (!cfg_data) {
    3284:	4680      	mov	r8, r0
    3286:	b138      	cbz	r0, 3298 <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    3288:	6883      	ldr	r3, [r0, #8]
    328a:	b113      	cbz	r3, 3292 <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    328c:	4639      	mov	r1, r7
    328e:	4620      	mov	r0, r4
    3290:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    3292:	3701      	adds	r7, #1
    3294:	b2ff      	uxtb	r7, r7
			break;
    3296:	e04e      	b.n	3336 <usb_fix_descriptor+0xda>
    3298:	4b46      	ldr	r3, [pc, #280]	; (33b4 <usb_fix_descriptor+0x158>)
    329a:	4a47      	ldr	r2, [pc, #284]	; (33b8 <usb_fix_descriptor+0x15c>)
    329c:	1a9b      	subs	r3, r3, r2
    329e:	08db      	lsrs	r3, r3, #3
					LOG_ERR("There is no usb_cfg_data "
    32a0:	f04f 0200 	mov.w	r2, #0
    32a4:	2101      	movs	r1, #1
    32a6:	f361 0202 	bfi	r2, r1, #0, #3
    32aa:	f36f 02c5 	bfc	r2, #3, #3
    32ae:	f363 128f 	bfi	r2, r3, #6, #10
    32b2:	4621      	mov	r1, r4
    32b4:	4841      	ldr	r0, [pc, #260]	; (33bc <usb_fix_descriptor+0x160>)
    32b6:	f7fe fd7b 	bl	1db0 <log_1>
					return -1;
    32ba:	f04f 30ff 	mov.w	r0, #4294967295
    32be:	e073      	b.n	33a8 <usb_fix_descriptor+0x14c>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    32c0:	f1b8 0f00 	cmp.w	r8, #0
    32c4:	d018      	beq.n	32f8 <usb_fix_descriptor+0x9c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    32c6:	aa01      	add	r2, sp, #4
    32c8:	4641      	mov	r1, r8
    32ca:	4620      	mov	r0, r4
    32cc:	f00d fdd0 	bl	10e70 <usb_validate_ep_cfg_data>
    32d0:	b388      	cbz	r0, 3336 <usb_fix_descriptor+0xda>
    32d2:	4b38      	ldr	r3, [pc, #224]	; (33b4 <usb_fix_descriptor+0x158>)
    32d4:	4a38      	ldr	r2, [pc, #224]	; (33b8 <usb_fix_descriptor+0x15c>)
    32d6:	1a9b      	subs	r3, r3, r2
    32d8:	08db      	lsrs	r3, r3, #3
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    32da:	f04f 0100 	mov.w	r1, #0
    32de:	2201      	movs	r2, #1
    32e0:	f362 0102 	bfi	r1, r2, #0, #3
    32e4:	f36f 01c5 	bfc	r1, #3, #3
    32e8:	f363 118f 	bfi	r1, r3, #6, #10
    32ec:	4834      	ldr	r0, [pc, #208]	; (33c0 <usb_fix_descriptor+0x164>)
    32ee:	f7fe fdf3 	bl	1ed8 <log_0>
				return -1;
    32f2:	f04f 30ff 	mov.w	r0, #4294967295
    32f6:	e057      	b.n	33a8 <usb_fix_descriptor+0x14c>
    32f8:	4b2e      	ldr	r3, [pc, #184]	; (33b4 <usb_fix_descriptor+0x158>)
    32fa:	4a2f      	ldr	r2, [pc, #188]	; (33b8 <usb_fix_descriptor+0x15c>)
    32fc:	1a9b      	subs	r3, r3, r2
    32fe:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    3300:	f04f 0100 	mov.w	r1, #0
    3304:	2201      	movs	r2, #1
    3306:	f362 0102 	bfi	r1, r2, #0, #3
    330a:	f36f 01c5 	bfc	r1, #3, #3
    330e:	f363 118f 	bfi	r1, r3, #6, #10
    3312:	482c      	ldr	r0, [pc, #176]	; (33c4 <usb_fix_descriptor+0x168>)
    3314:	f7fe fde0 	bl	1ed8 <log_0>
				return -1;
    3318:	f04f 30ff 	mov.w	r0, #4294967295
    331c:	e044      	b.n	33a8 <usb_fix_descriptor+0x14c>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    331e:	2d03      	cmp	r5, #3
    3320:	d020      	beq.n	3364 <usb_fix_descriptor+0x108>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    3322:	bb1d      	cbnz	r5, 336c <usb_fix_descriptor+0x110>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    3324:	b336      	cbz	r6, 3374 <usb_fix_descriptor+0x118>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    3326:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    3328:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    332a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    332e:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    3330:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    3332:	3501      	adds	r5, #1
    3334:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    3336:	7823      	ldrb	r3, [r4, #0]
    3338:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    333a:	7823      	ldrb	r3, [r4, #0]
    333c:	b37b      	cbz	r3, 339e <usb_fix_descriptor+0x142>
		switch (head->bDescriptorType) {
    333e:	7863      	ldrb	r3, [r4, #1]
    3340:	2b05      	cmp	r3, #5
    3342:	d8f8      	bhi.n	3336 <usb_fix_descriptor+0xda>
    3344:	a201      	add	r2, pc, #4	; (adr r2, 334c <usb_fix_descriptor+0xf0>)
    3346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    334a:	bf00      	nop
    334c:	0000331f 	.word	0x0000331f
    3350:	00003337 	.word	0x00003337
    3354:	0000339b 	.word	0x0000339b
    3358:	0000331f 	.word	0x0000331f
    335c:	00003275 	.word	0x00003275
    3360:	000032c1 	.word	0x000032c1
				usb_fix_ascii_sn_string_descriptor(sn);
    3364:	4620      	mov	r0, r4
    3366:	f7ff ff49 	bl	31fc <usb_fix_ascii_sn_string_descriptor>
    336a:	e7da      	b.n	3322 <usb_fix_descriptor+0xc6>
				ascii7_to_utf16le(head);
    336c:	4620      	mov	r0, r4
    336e:	f00d fd6b 	bl	10e48 <ascii7_to_utf16le>
    3372:	e7de      	b.n	3332 <usb_fix_descriptor+0xd6>
    3374:	4b0f      	ldr	r3, [pc, #60]	; (33b4 <usb_fix_descriptor+0x158>)
    3376:	4a10      	ldr	r2, [pc, #64]	; (33b8 <usb_fix_descriptor+0x15c>)
    3378:	1a9b      	subs	r3, r3, r2
    337a:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Incomplete device descriptor");
    337c:	f04f 0100 	mov.w	r1, #0
    3380:	2201      	movs	r2, #1
    3382:	f362 0102 	bfi	r1, r2, #0, #3
    3386:	f36f 01c5 	bfc	r1, #3, #3
    338a:	f363 118f 	bfi	r1, r3, #6, #10
    338e:	480e      	ldr	r0, [pc, #56]	; (33c8 <usb_fix_descriptor+0x16c>)
    3390:	f7fe fda2 	bl	1ed8 <log_0>
					return -1;
    3394:	f04f 30ff 	mov.w	r0, #4294967295
    3398:	e006      	b.n	33a8 <usb_fix_descriptor+0x14c>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    339a:	4626      	mov	r6, r4
    339c:	e7cb      	b.n	3336 <usb_fix_descriptor+0xda>
	}

	if ((head + 1) != __usb_descriptor_end) {
    339e:	1ca0      	adds	r0, r4, #2
    33a0:	4b0a      	ldr	r3, [pc, #40]	; (33cc <usb_fix_descriptor+0x170>)
    33a2:	4298      	cmp	r0, r3
    33a4:	d103      	bne.n	33ae <usb_fix_descriptor+0x152>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    33a6:	2000      	movs	r0, #0
}
    33a8:	b002      	add	sp, #8
    33aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    33ae:	f7ff ff55 	bl	325c <usb_fix_descriptor>
    33b2:	e7f9      	b.n	33a8 <usb_fix_descriptor+0x14c>
    33b4:	000146e0 	.word	0x000146e0
    33b8:	00014688 	.word	0x00014688
    33bc:	00014ad4 	.word	0x00014ad4
    33c0:	00014b38 	.word	0x00014b38
    33c4:	00014af4 	.word	0x00014af4
    33c8:	00014b58 	.word	0x00014b58
    33cc:	200004bb 	.word	0x200004bb

000033d0 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    33d0:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    33d2:	480c      	ldr	r0, [pc, #48]	; (3404 <usb_get_device_descriptor+0x34>)
    33d4:	f7ff ff42 	bl	325c <usb_fix_descriptor>
    33d8:	b908      	cbnz	r0, 33de <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    33da:	480a      	ldr	r0, [pc, #40]	; (3404 <usb_get_device_descriptor+0x34>)
}
    33dc:	bd08      	pop	{r3, pc}
    33de:	4b0a      	ldr	r3, [pc, #40]	; (3408 <usb_get_device_descriptor+0x38>)
    33e0:	4a0a      	ldr	r2, [pc, #40]	; (340c <usb_get_device_descriptor+0x3c>)
    33e2:	1a9b      	subs	r3, r3, r2
    33e4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to fixup USB descriptor");
    33e6:	f04f 0100 	mov.w	r1, #0
    33ea:	2201      	movs	r2, #1
    33ec:	f362 0102 	bfi	r1, r2, #0, #3
    33f0:	f36f 01c5 	bfc	r1, #3, #3
    33f4:	f363 118f 	bfi	r1, r3, #6, #10
    33f8:	4805      	ldr	r0, [pc, #20]	; (3410 <usb_get_device_descriptor+0x40>)
    33fa:	f7fe fd6d 	bl	1ed8 <log_0>
		return NULL;
    33fe:	2000      	movs	r0, #0
    3400:	e7ec      	b.n	33dc <usb_get_device_descriptor+0xc>
    3402:	bf00      	nop
    3404:	200003fc 	.word	0x200003fc
    3408:	000146e0 	.word	0x000146e0
    340c:	00014688 	.word	0x00014688
    3410:	00014b78 	.word	0x00014b78

00003414 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3414:	2300      	movs	r3, #0
    3416:	e000      	b.n	341a <usb_ep_get_transfer+0x6>
    3418:	3301      	adds	r3, #1
    341a:	2b03      	cmp	r3, #3
    341c:	dc0c      	bgt.n	3438 <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    341e:	019a      	lsls	r2, r3, #6
    3420:	4906      	ldr	r1, [pc, #24]	; (343c <usb_ep_get_transfer+0x28>)
    3422:	5c8a      	ldrb	r2, [r1, r2]
    3424:	4282      	cmp	r2, r0
    3426:	d1f7      	bne.n	3418 <usb_ep_get_transfer+0x4>
    3428:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    342c:	6852      	ldr	r2, [r2, #4]
    342e:	2a00      	cmp	r2, #0
    3430:	d0f2      	beq.n	3418 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    3432:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    3436:	4770      	bx	lr
		}
	}

	return NULL;
    3438:	2000      	movs	r0, #0
}
    343a:	4770      	bx	lr
    343c:	2000171c 	.word	0x2000171c

00003440 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    3440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3444:	b082      	sub	sp, #8
    3446:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    3448:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    344c:	f850 3c28 	ldr.w	r3, [r0, #-40]
    3450:	f113 0f10 	cmn.w	r3, #16
    3454:	d10c      	bne.n	3470 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    3456:	6903      	ldr	r3, [r0, #16]
    3458:	f013 0f02 	tst.w	r3, #2
    345c:	d062      	beq.n	3524 <usb_transfer_work+0xe4>
		if (!trans->bsize) {
    345e:	f850 2c20 	ldr.w	r2, [r0, #-32]
    3462:	bb82      	cbnz	r2, 34c6 <usb_transfer_work+0x86>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    3464:	f013 0f04 	tst.w	r3, #4
    3468:	d026      	beq.n	34b8 <usb_transfer_work+0x78>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    346a:	2300      	movs	r3, #0
    346c:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    3470:	f854 3c28 	ldr.w	r3, [r4, #-40]
    3474:	f113 0f10 	cmn.w	r3, #16
    3478:	d01b      	beq.n	34b2 <usb_transfer_work+0x72>
    347a:	f854 6c18 	ldr.w	r6, [r4, #-24]
    347e:	b1c6      	cbz	r6, 34b2 <usb_transfer_work+0x72>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    3480:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    3484:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    3488:	f010 fbc6 	bl	13c18 <k_is_in_isr>
    348c:	2800      	cmp	r0, #0
    348e:	f040 808f 	bne.w	35b0 <usb_transfer_work+0x170>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    3492:	2300      	movs	r3, #0
    3494:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    3498:	f1a4 0010 	sub.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    349c:	f00a ff5e 	bl	e35c <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
    34a0:	f854 3c28 	ldr.w	r3, [r4, #-40]
    34a4:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    34a8:	d003      	beq.n	34b2 <usb_transfer_work+0x72>
			cb(ep, tsize, priv);
    34aa:	4642      	mov	r2, r8
    34ac:	4639      	mov	r1, r7
    34ae:	4628      	mov	r0, r5
    34b0:	47b0      	blx	r6
		}
	}
}
    34b2:	b002      	add	sp, #8
    34b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
    34b8:	2300      	movs	r3, #0
    34ba:	461a      	mov	r2, r3
    34bc:	4619      	mov	r1, r3
    34be:	4628      	mov	r0, r5
    34c0:	f00d fca3 	bl	10e0a <usb_write>
    34c4:	e7d1      	b.n	346a <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    34c6:	ab01      	add	r3, sp, #4
    34c8:	f850 1c24 	ldr.w	r1, [r0, #-36]
    34cc:	4628      	mov	r0, r5
    34ce:	f00d fc9c 	bl	10e0a <usb_write>
		if (ret) {
    34d2:	4601      	mov	r1, r0
    34d4:	b980      	cbnz	r0, 34f8 <usb_transfer_work+0xb8>
		trans->buffer += bytes;
    34d6:	f854 3c24 	ldr.w	r3, [r4, #-36]
    34da:	9a01      	ldr	r2, [sp, #4]
    34dc:	4413      	add	r3, r2
    34de:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    34e2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    34e6:	1a9b      	subs	r3, r3, r2
    34e8:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    34ec:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    34f0:	4413      	add	r3, r2
    34f2:	f844 3c1c 	str.w	r3, [r4, #-28]
    34f6:	e7bb      	b.n	3470 <usb_transfer_work+0x30>
    34f8:	4a30      	ldr	r2, [pc, #192]	; (35bc <usb_transfer_work+0x17c>)
    34fa:	4b31      	ldr	r3, [pc, #196]	; (35c0 <usb_transfer_work+0x180>)
    34fc:	1ad2      	subs	r2, r2, r3
    34fe:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3500:	f04f 0300 	mov.w	r3, #0
    3504:	2001      	movs	r0, #1
    3506:	f360 0302 	bfi	r3, r0, #0, #3
    350a:	f36f 03c5 	bfc	r3, #3, #3
    350e:	f362 138f 	bfi	r3, r2, #6, #10
    3512:	462a      	mov	r2, r5
    3514:	482b      	ldr	r0, [pc, #172]	; (35c4 <usb_transfer_work+0x184>)
    3516:	f7fe fc81 	bl	1e1c <log_2>
			trans->status = -EINVAL;
    351a:	f06f 0315 	mvn.w	r3, #21
    351e:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    3522:	e7a5      	b.n	3470 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    3524:	ab01      	add	r3, sp, #4
    3526:	f850 2c20 	ldr.w	r2, [r0, #-32]
    352a:	f850 1c24 	ldr.w	r1, [r0, #-36]
    352e:	4628      	mov	r0, r5
    3530:	f003 fe36 	bl	71a0 <usb_dc_ep_read_wait>
		if (ret) {
    3534:	4601      	mov	r1, r0
    3536:	b9a0      	cbnz	r0, 3562 <usb_transfer_work+0x122>
		trans->buffer += bytes;
    3538:	f854 3c24 	ldr.w	r3, [r4, #-36]
    353c:	9e01      	ldr	r6, [sp, #4]
    353e:	4433      	add	r3, r6
    3540:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    3544:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3548:	1b9b      	subs	r3, r3, r6
    354a:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    354e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3552:	4433      	add	r3, r6
    3554:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    3558:	b9ce      	cbnz	r6, 358e <usb_transfer_work+0x14e>
			trans->status = 0;
    355a:	2300      	movs	r3, #0
    355c:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    3560:	e786      	b.n	3470 <usb_transfer_work+0x30>
    3562:	4a16      	ldr	r2, [pc, #88]	; (35bc <usb_transfer_work+0x17c>)
    3564:	4b16      	ldr	r3, [pc, #88]	; (35c0 <usb_transfer_work+0x180>)
    3566:	1ad2      	subs	r2, r2, r3
    3568:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    356a:	f04f 0300 	mov.w	r3, #0
    356e:	2001      	movs	r0, #1
    3570:	f360 0302 	bfi	r3, r0, #0, #3
    3574:	f36f 03c5 	bfc	r3, #3, #3
    3578:	f362 138f 	bfi	r3, r2, #6, #10
    357c:	462a      	mov	r2, r5
    357e:	4811      	ldr	r0, [pc, #68]	; (35c4 <usb_transfer_work+0x184>)
    3580:	f7fe fc4c 	bl	1e1c <log_2>
			trans->status = -EINVAL;
    3584:	f06f 0315 	mvn.w	r3, #21
    3588:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    358c:	e770      	b.n	3470 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    358e:	4628      	mov	r0, r5
    3590:	f003 ff62 	bl	7458 <usb_dc_ep_mps>
    3594:	fbb6 f3f0 	udiv	r3, r6, r0
    3598:	fb00 6013 	mls	r0, r0, r3, r6
    359c:	2800      	cmp	r0, #0
    359e:	d1dc      	bne.n	355a <usb_transfer_work+0x11a>
    35a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d0d8      	beq.n	355a <usb_transfer_work+0x11a>
		usb_dc_ep_read_continue(ep);
    35a8:	4628      	mov	r0, r5
    35aa:	f003 fe73 	bl	7294 <usb_dc_ep_read_continue>
    35ae:	e75f      	b.n	3470 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    35b0:	4621      	mov	r1, r4
    35b2:	4805      	ldr	r0, [pc, #20]	; (35c8 <usb_transfer_work+0x188>)
    35b4:	f010 fc36 	bl	13e24 <k_work_submit_to_queue>
			return;
    35b8:	e77b      	b.n	34b2 <usb_transfer_work+0x72>
    35ba:	bf00      	nop
    35bc:	000146f8 	.word	0x000146f8
    35c0:	00014688 	.word	0x00014688
    35c4:	00014ba8 	.word	0x00014ba8
    35c8:	200005c8 	.word	0x200005c8

000035cc <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    35cc:	b570      	push	{r4, r5, r6, lr}
    35ce:	b082      	sub	sp, #8
    35d0:	4606      	mov	r6, r0
    35d2:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    35d4:	f7ff ff1e 	bl	3414 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    35d8:	1e63      	subs	r3, r4, #1
    35da:	b2db      	uxtb	r3, r3
    35dc:	2b01      	cmp	r3, #1
    35de:	d80a      	bhi.n	35f6 <usb_transfer_ep_callback+0x2a>
    35e0:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    35e2:	b150      	cbz	r0, 35fa <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    35e4:	f010 fb18 	bl	13c18 <k_is_in_isr>
    35e8:	b108      	cbz	r0, 35ee <usb_transfer_ep_callback+0x22>
    35ea:	2c01      	cmp	r4, #1
    35ec:	d122      	bne.n	3634 <usb_transfer_ep_callback+0x68>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    35ee:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    35f2:	f7ff ff25 	bl	3440 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    35f6:	b002      	add	sp, #8
    35f8:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    35fa:	2c01      	cmp	r4, #1
    35fc:	d1fb      	bne.n	35f6 <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    35fe:	ab01      	add	r3, sp, #4
    3600:	2201      	movs	r2, #1
    3602:	f10d 0103 	add.w	r1, sp, #3
    3606:	4630      	mov	r0, r6
    3608:	f003 fdca 	bl	71a0 <usb_dc_ep_read_wait>
			} while (bytes);
    360c:	9b01      	ldr	r3, [sp, #4]
    360e:	2b00      	cmp	r3, #0
    3610:	d1f5      	bne.n	35fe <usb_transfer_ep_callback+0x32>
    3612:	4b0b      	ldr	r3, [pc, #44]	; (3640 <usb_transfer_ep_callback+0x74>)
    3614:	4a0b      	ldr	r2, [pc, #44]	; (3644 <usb_transfer_ep_callback+0x78>)
    3616:	1a9b      	subs	r3, r3, r2
    3618:	08db      	lsrs	r3, r3, #3
			LOG_ERR("RX data lost, no transfer");
    361a:	f04f 0100 	mov.w	r1, #0
    361e:	2201      	movs	r2, #1
    3620:	f362 0102 	bfi	r1, r2, #0, #3
    3624:	f36f 01c5 	bfc	r1, #3, #3
    3628:	f363 118f 	bfi	r1, r3, #6, #10
    362c:	4806      	ldr	r0, [pc, #24]	; (3648 <usb_transfer_ep_callback+0x7c>)
    362e:	f7fe fc53 	bl	1ed8 <log_0>
		return;
    3632:	e7e0      	b.n	35f6 <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3634:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    3638:	4804      	ldr	r0, [pc, #16]	; (364c <usb_transfer_ep_callback+0x80>)
    363a:	f010 fbf3 	bl	13e24 <k_work_submit_to_queue>
    363e:	e7da      	b.n	35f6 <usb_transfer_ep_callback+0x2a>
    3640:	000146f8 	.word	0x000146f8
    3644:	00014688 	.word	0x00014688
    3648:	00014bc8 	.word	0x00014bc8
    364c:	200005c8 	.word	0x200005c8

00003650 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    3650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3654:	4605      	mov	r5, r0
    3656:	4688      	mov	r8, r1
    3658:	4617      	mov	r7, r2
    365a:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    365c:	f00d fcb2 	bl	10fc4 <usb_transfer_is_busy>
    3660:	2800      	cmp	r0, #0
    3662:	f040 8083 	bne.w	376c <usb_transfer+0x11c>
	__asm__ volatile(
    3666:	f04f 0320 	mov.w	r3, #32
    366a:	f3ef 8911 	mrs	r9, BASEPRI
    366e:	f383 8812 	msr	BASEPRI_MAX, r3
    3672:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3676:	2400      	movs	r4, #0
    3678:	2c03      	cmp	r4, #3
    367a:	dc10      	bgt.n	369e <usb_transfer+0x4e>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    367c:	01a0      	lsls	r0, r4, #6
    367e:	f100 0318 	add.w	r3, r0, #24
    3682:	483c      	ldr	r0, [pc, #240]	; (3774 <usb_transfer+0x124>)
    3684:	4418      	add	r0, r3
    3686:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    3688:	2200      	movs	r2, #0
    368a:	2300      	movs	r3, #0
    368c:	f00a fe8a 	bl	e3a4 <z_impl_k_sem_take>
    3690:	b108      	cbz	r0, 3696 <usb_transfer+0x46>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3692:	3401      	adds	r4, #1
    3694:	e7f0      	b.n	3678 <usb_transfer+0x28>
			trans = &ut_data[i];
    3696:	4837      	ldr	r0, [pc, #220]	; (3774 <usb_transfer+0x124>)
    3698:	eb00 1484 	add.w	r4, r0, r4, lsl #6
			break;
    369c:	e000      	b.n	36a0 <usb_transfer+0x50>
	struct usb_transfer_data *trans = NULL;
    369e:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
    36a0:	b344      	cbz	r4, 36f4 <usb_transfer+0xa4>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    36a2:	f8d4 a004 	ldr.w	sl, [r4, #4]
    36a6:	f11a 0f10 	cmn.w	sl, #16
    36aa:	d036      	beq.n	371a <usb_transfer+0xca>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    36ac:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
    36ae:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
    36b2:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
    36b4:	2300      	movs	r3, #0
    36b6:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    36b8:	9b08      	ldr	r3, [sp, #32]
    36ba:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    36bc:	63e6      	str	r6, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    36be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36c0:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    36c2:	f06f 030f 	mvn.w	r3, #15
    36c6:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    36c8:	4628      	mov	r0, r5
    36ca:	f003 fec5 	bl	7458 <usb_dc_ep_mps>
    36ce:	2800      	cmp	r0, #0
    36d0:	d139      	bne.n	3746 <usb_transfer+0xf6>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    36d2:	f016 0f02 	tst.w	r6, #2
    36d6:	d044      	beq.n	3762 <usb_transfer+0x112>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    36d8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    36dc:	4826      	ldr	r0, [pc, #152]	; (3778 <usb_transfer+0x128>)
    36de:	f010 fba1 	bl	13e24 <k_work_submit_to_queue>
	int i, key, ret = 0;
    36e2:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
    36e6:	f389 8811 	msr	BASEPRI, r9
    36ea:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    36ee:	4650      	mov	r0, sl
    36f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36f4:	4b21      	ldr	r3, [pc, #132]	; (377c <usb_transfer+0x12c>)
    36f6:	4a22      	ldr	r2, [pc, #136]	; (3780 <usb_transfer+0x130>)
    36f8:	1a9b      	subs	r3, r3, r2
    36fa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No transfer slot available");
    36fc:	f04f 0100 	mov.w	r1, #0
    3700:	2201      	movs	r2, #1
    3702:	f362 0102 	bfi	r1, r2, #0, #3
    3706:	f36f 01c5 	bfc	r1, #3, #3
    370a:	f363 118f 	bfi	r1, r3, #6, #10
    370e:	481d      	ldr	r0, [pc, #116]	; (3784 <usb_transfer+0x134>)
    3710:	f7fe fbe2 	bl	1ed8 <log_0>
		ret = -ENOMEM;
    3714:	f06f 0a0b 	mvn.w	sl, #11
		goto done;
    3718:	e7e5      	b.n	36e6 <usb_transfer+0x96>
    371a:	4b18      	ldr	r3, [pc, #96]	; (377c <usb_transfer+0x12c>)
    371c:	4a18      	ldr	r2, [pc, #96]	; (3780 <usb_transfer+0x130>)
    371e:	1a9b      	subs	r3, r3, r2
    3720:	08db      	lsrs	r3, r3, #3
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    3722:	f04f 0200 	mov.w	r2, #0
    3726:	2101      	movs	r1, #1
    3728:	f361 0202 	bfi	r2, r1, #0, #3
    372c:	f36f 02c5 	bfc	r2, #3, #3
    3730:	f363 128f 	bfi	r2, r3, #6, #10
    3734:	4629      	mov	r1, r5
    3736:	4814      	ldr	r0, [pc, #80]	; (3788 <usb_transfer+0x138>)
    3738:	f7fe fb3a 	bl	1db0 <log_1>
		k_sem_give(&trans->sem);
    373c:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    3740:	f00a fe0c 	bl	e35c <z_impl_k_sem_give>
		goto done;
    3744:	e7cf      	b.n	36e6 <usb_transfer+0x96>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    3746:	4628      	mov	r0, r5
    3748:	f003 fe86 	bl	7458 <usb_dc_ep_mps>
    374c:	fbb7 f3f0 	udiv	r3, r7, r0
    3750:	fb00 7013 	mls	r0, r0, r3, r7
    3754:	2800      	cmp	r0, #0
    3756:	d0bc      	beq.n	36d2 <usb_transfer+0x82>
		trans->flags |= USB_TRANS_NO_ZLP;
    3758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    375a:	f043 0304 	orr.w	r3, r3, #4
    375e:	63e3      	str	r3, [r4, #60]	; 0x3c
    3760:	e7b7      	b.n	36d2 <usb_transfer+0x82>
		ret = usb_dc_ep_read_continue(ep);
    3762:	4628      	mov	r0, r5
    3764:	f003 fd96 	bl	7294 <usb_dc_ep_read_continue>
    3768:	4682      	mov	sl, r0
    376a:	e7bc      	b.n	36e6 <usb_transfer+0x96>
		return -EBUSY;
    376c:	f06f 0a0f 	mvn.w	sl, #15
    3770:	e7bd      	b.n	36ee <usb_transfer+0x9e>
    3772:	bf00      	nop
    3774:	2000171c 	.word	0x2000171c
    3778:	200005c8 	.word	0x200005c8
    377c:	000146f8 	.word	0x000146f8
    3780:	00014688 	.word	0x00014688
    3784:	00014be4 	.word	0x00014be4
    3788:	00014c00 	.word	0x00014c00

0000378c <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    378c:	b510      	push	{r4, lr}
	__asm__ volatile(
    378e:	f04f 0320 	mov.w	r3, #32
    3792:	f3ef 8411 	mrs	r4, BASEPRI
    3796:	f383 8812 	msr	BASEPRI_MAX, r3
    379a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    379e:	f7ff fe39 	bl	3414 <usb_ep_get_transfer>
	if (!trans) {
    37a2:	b120      	cbz	r0, 37ae <usb_cancel_transfer+0x22>
    37a4:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    37a6:	6843      	ldr	r3, [r0, #4]
    37a8:	f113 0f10 	cmn.w	r3, #16
    37ac:	d004      	beq.n	37b8 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    37ae:	f384 8811 	msr	BASEPRI, r4
    37b2:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    37b6:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    37b8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    37bc:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    37be:	312c      	adds	r1, #44	; 0x2c
    37c0:	4801      	ldr	r0, [pc, #4]	; (37c8 <usb_cancel_transfer+0x3c>)
    37c2:	f010 fb2f 	bl	13e24 <k_work_submit_to_queue>
    37c6:	e7f2      	b.n	37ae <usb_cancel_transfer+0x22>
    37c8:	200005c8 	.word	0x200005c8

000037cc <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    37cc:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    37ce:	2400      	movs	r4, #0
    37d0:	e011      	b.n	37f6 <usb_cancel_transfers+0x2a>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    37d2:	4b12      	ldr	r3, [pc, #72]	; (381c <usb_cancel_transfers+0x50>)
    37d4:	01a1      	lsls	r1, r4, #6
    37d6:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    37da:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    37de:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    37e0:	3128      	adds	r1, #40	; 0x28
    37e2:	4419      	add	r1, r3
    37e4:	3104      	adds	r1, #4
    37e6:	480e      	ldr	r0, [pc, #56]	; (3820 <usb_cancel_transfers+0x54>)
    37e8:	f010 fb1c 	bl	13e24 <k_work_submit_to_queue>
    37ec:	f385 8811 	msr	BASEPRI, r5
    37f0:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    37f4:	3401      	adds	r4, #1
    37f6:	2c03      	cmp	r4, #3
    37f8:	dc0f      	bgt.n	381a <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    37fa:	f04f 0320 	mov.w	r3, #32
    37fe:	f3ef 8511 	mrs	r5, BASEPRI
    3802:	f383 8812 	msr	BASEPRI_MAX, r3
    3806:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    380a:	4b04      	ldr	r3, [pc, #16]	; (381c <usb_cancel_transfers+0x50>)
    380c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    3810:	685b      	ldr	r3, [r3, #4]
    3812:	f113 0f10 	cmn.w	r3, #16
    3816:	d1e9      	bne.n	37ec <usb_cancel_transfers+0x20>
    3818:	e7db      	b.n	37d2 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    381a:	bd38      	pop	{r3, r4, r5, pc}
    381c:	2000171c 	.word	0x2000171c
    3820:	200005c8 	.word	0x200005c8

00003824 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    3824:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3826:	2600      	movs	r6, #0
    3828:	e011      	b.n	384e <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    382a:	4c0b      	ldr	r4, [pc, #44]	; (3858 <usb_transfer_init+0x34>)
    382c:	01b5      	lsls	r5, r6, #6
    382e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3832:	4420      	add	r0, r4
    3834:	4909      	ldr	r1, [pc, #36]	; (385c <usb_transfer_init+0x38>)
    3836:	3004      	adds	r0, #4
    3838:	f010 faee 	bl	13e18 <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    383c:	f105 0018 	add.w	r0, r5, #24
    3840:	4420      	add	r0, r4
    3842:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    3844:	2201      	movs	r2, #1
    3846:	4611      	mov	r1, r2
    3848:	f010 fad7 	bl	13dfa <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    384c:	3601      	adds	r6, #1
    384e:	2e03      	cmp	r6, #3
    3850:	ddeb      	ble.n	382a <usb_transfer_init+0x6>
	}

	return 0;
}
    3852:	2000      	movs	r0, #0
    3854:	bd70      	pop	{r4, r5, r6, pc}
    3856:	bf00      	nop
    3858:	2000171c 	.word	0x2000171c
    385c:	00003441 	.word	0x00003441

00003860 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    3860:	b570      	push	{r4, r5, r6, lr}
    3862:	4604      	mov	r4, r0
    3864:	460e      	mov	r6, r1
    3866:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    3868:	7901      	ldrb	r1, [r0, #4]
    386a:	481e      	ldr	r0, [pc, #120]	; (38e4 <cdc_acm_class_handle_req+0x84>)
    386c:	f00d fb76 	bl	10f5c <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3870:	b158      	cbz	r0, 388a <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    3872:	f994 2000 	ldrsb.w	r2, [r4]
    3876:	2a00      	cmp	r2, #0
    3878:	db27      	blt.n	38ca <cdc_acm_class_handle_req+0x6a>
		switch (setup->bRequest) {
    387a:	7862      	ldrb	r2, [r4, #1]
    387c:	2a20      	cmp	r2, #32
    387e:	d018      	beq.n	38b2 <cdc_acm_class_handle_req+0x52>
    3880:	2a22      	cmp	r2, #34	; 0x22
    3882:	d01d      	beq.n	38c0 <cdc_acm_class_handle_req+0x60>
    3884:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3888:	e028      	b.n	38dc <cdc_acm_class_handle_req+0x7c>
    388a:	4b17      	ldr	r3, [pc, #92]	; (38e8 <cdc_acm_class_handle_req+0x88>)
    388c:	4a17      	ldr	r2, [pc, #92]	; (38ec <cdc_acm_class_handle_req+0x8c>)
    388e:	1a9b      	subs	r3, r3, r2
    3890:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for interface %u",
    3892:	f04f 0200 	mov.w	r2, #0
    3896:	2102      	movs	r1, #2
    3898:	f361 0202 	bfi	r2, r1, #0, #3
    389c:	f36f 02c5 	bfc	r2, #3, #3
    38a0:	f363 128f 	bfi	r2, r3, #6, #10
    38a4:	88a1      	ldrh	r1, [r4, #4]
    38a6:	4812      	ldr	r0, [pc, #72]	; (38f0 <cdc_acm_class_handle_req+0x90>)
    38a8:	f7fe fa82 	bl	1db0 <log_1>
		return -ENODEV;
    38ac:	f06f 0012 	mvn.w	r0, #18
    38b0:	e014      	b.n	38dc <cdc_acm_class_handle_req+0x7c>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    38b2:	2207      	movs	r2, #7
    38b4:	6829      	ldr	r1, [r5, #0]
    38b6:	380c      	subs	r0, #12
    38b8:	f00d fe50 	bl	1155c <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    38bc:	2000      	movs	r0, #0
    38be:	e00d      	b.n	38dc <cdc_acm_class_handle_req+0x7c>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    38c0:	78a2      	ldrb	r2, [r4, #2]
    38c2:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    38c6:	2000      	movs	r0, #0
    38c8:	e008      	b.n	38dc <cdc_acm_class_handle_req+0x7c>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    38ca:	7862      	ldrb	r2, [r4, #1]
    38cc:	2a21      	cmp	r2, #33	; 0x21
    38ce:	d106      	bne.n	38de <cdc_acm_class_handle_req+0x7e>
			*data = (uint8_t *)(&dev_data->line_coding);
    38d0:	f1a0 030c 	sub.w	r3, r0, #12
    38d4:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    38d6:	2307      	movs	r3, #7
    38d8:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    38da:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    38dc:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOTSUP;
    38de:	f06f 0085 	mvn.w	r0, #133	; 0x85
    38e2:	e7fb      	b.n	38dc <cdc_acm_class_handle_req+0x7c>
    38e4:	2000181c 	.word	0x2000181c
    38e8:	000146d8 	.word	0x000146d8
    38ec:	00014688 	.word	0x00014688
    38f0:	00014c3c 	.word	0x00014c3c

000038f4 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    38f4:	b510      	push	{r4, lr}
    38f6:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    38f8:	4601      	mov	r1, r0
    38fa:	480d      	ldr	r0, [pc, #52]	; (3930 <cdc_acm_int_in+0x3c>)
    38fc:	f00d fb42 	bl	10f84 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    3900:	b118      	cbz	r0, 390a <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    3902:	2201      	movs	r2, #1
    3904:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    3908:	bd10      	pop	{r4, pc}
    390a:	4b0a      	ldr	r3, [pc, #40]	; (3934 <cdc_acm_int_in+0x40>)
    390c:	4a0a      	ldr	r2, [pc, #40]	; (3938 <cdc_acm_int_in+0x44>)
    390e:	1a9b      	subs	r3, r3, r2
    3910:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for endpoint %u", ep);
    3912:	f04f 0200 	mov.w	r2, #0
    3916:	2102      	movs	r1, #2
    3918:	f361 0202 	bfi	r2, r1, #0, #3
    391c:	f36f 02c5 	bfc	r2, #3, #3
    3920:	f363 128f 	bfi	r2, r3, #6, #10
    3924:	4621      	mov	r1, r4
    3926:	4805      	ldr	r0, [pc, #20]	; (393c <cdc_acm_int_in+0x48>)
    3928:	f7fe fa42 	bl	1db0 <log_1>
		return;
    392c:	e7ec      	b.n	3908 <cdc_acm_int_in+0x14>
    392e:	bf00      	nop
    3930:	2000181c 	.word	0x2000181c
    3934:	000146d8 	.word	0x000146d8
    3938:	00014688 	.word	0x00014688
    393c:	00014c64 	.word	0x00014c64

00003940 <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    3940:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3942:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    3944:	2301      	movs	r3, #1
    3946:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    394a:	680b      	ldr	r3, [r1, #0]
    394c:	b113      	cbz	r3, 3954 <cdc_acm_irq_rx_enable+0x14>
    394e:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    3952:	b903      	cbnz	r3, 3956 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    3954:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3956:	3108      	adds	r1, #8
    3958:	4801      	ldr	r0, [pc, #4]	; (3960 <cdc_acm_irq_rx_enable+0x20>)
    395a:	f010 fa63 	bl	13e24 <k_work_submit_to_queue>
}
    395e:	e7f9      	b.n	3954 <cdc_acm_irq_rx_enable+0x14>
    3960:	200005c8 	.word	0x200005c8

00003964 <cdc_acm_irq_tx_enable>:
{
    3964:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3966:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    3968:	2301      	movs	r3, #1
    396a:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    396e:	680b      	ldr	r3, [r1, #0]
    3970:	b113      	cbz	r3, 3978 <cdc_acm_irq_tx_enable+0x14>
    3972:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    3976:	b903      	cbnz	r3, 397a <cdc_acm_irq_tx_enable+0x16>
}
    3978:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    397a:	3108      	adds	r1, #8
    397c:	4801      	ldr	r0, [pc, #4]	; (3984 <cdc_acm_irq_tx_enable+0x20>)
    397e:	f010 fa51 	bl	13e24 <k_work_submit_to_queue>
}
    3982:	e7f9      	b.n	3978 <cdc_acm_irq_tx_enable+0x14>
    3984:	200005c8 	.word	0x200005c8

00003988 <cdc_acm_reset_port>:
{
    3988:	b510      	push	{r4, lr}
    398a:	4603      	mov	r3, r0
	dev_data->configured = false;
    398c:	2400      	movs	r4, #0
    398e:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
    3992:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
    3996:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
    399a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    399e:	4a0a      	ldr	r2, [pc, #40]	; (39c8 <cdc_acm_reset_port+0x40>)
    39a0:	e892 0003 	ldmia.w	r2, {r0, r1}
    39a4:	6758      	str	r0, [r3, #116]	; 0x74
    39a6:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
    39aa:	0c09      	lsrs	r1, r1, #16
    39ac:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    39b0:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    39b4:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    39b8:	2240      	movs	r2, #64	; 0x40
    39ba:	4621      	mov	r1, r4
    39bc:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    39c0:	f00d fdf0 	bl	115a4 <memset>
}
    39c4:	bd10      	pop	{r4, pc}
    39c6:	bf00      	nop
    39c8:	00014790 	.word	0x00014790

000039cc <cdc_acm_fifo_fill>:
{
    39cc:	b570      	push	{r4, r5, r6, lr}
    39ce:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    39d0:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    39d2:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
    39d6:	b113      	cbz	r3, 39de <cdc_acm_fifo_fill+0x12>
    39d8:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    39dc:	b193      	cbz	r3, 3a04 <cdc_acm_fifo_fill+0x38>
    39de:	4b1a      	ldr	r3, [pc, #104]	; (3a48 <cdc_acm_fifo_fill+0x7c>)
    39e0:	4a1a      	ldr	r2, [pc, #104]	; (3a4c <cdc_acm_fifo_fill+0x80>)
    39e2:	1a9b      	subs	r3, r3, r2
    39e4:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    39e6:	f04f 0200 	mov.w	r2, #0
    39ea:	2102      	movs	r1, #2
    39ec:	f361 0202 	bfi	r2, r1, #0, #3
    39f0:	f36f 02c5 	bfc	r2, #3, #3
    39f4:	f363 128f 	bfi	r2, r3, #6, #10
    39f8:	4621      	mov	r1, r4
    39fa:	4815      	ldr	r0, [pc, #84]	; (3a50 <cdc_acm_fifo_fill+0x84>)
    39fc:	f7fe f9d8 	bl	1db0 <log_1>
		return 0;
    3a00:	2000      	movs	r0, #0
}
    3a02:	bd70      	pop	{r4, r5, r6, pc}
	dev_data->tx_ready = false;
    3a04:	2300      	movs	r3, #0
    3a06:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3a0a:	6f30      	ldr	r0, [r6, #112]	; 0x70
    3a0c:	f00c fd80 	bl	10510 <ring_buf_put>
    3a10:	4605      	mov	r5, r0
	if (wrote < len) {
    3a12:	4284      	cmp	r4, r0
    3a14:	d806      	bhi.n	3a24 <cdc_acm_fifo_fill+0x58>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3a16:	f106 0118 	add.w	r1, r6, #24
    3a1a:	480e      	ldr	r0, [pc, #56]	; (3a54 <cdc_acm_fifo_fill+0x88>)
    3a1c:	f010 fa02 	bl	13e24 <k_work_submit_to_queue>
	return wrote;
    3a20:	4628      	mov	r0, r5
    3a22:	e7ee      	b.n	3a02 <cdc_acm_fifo_fill+0x36>
    3a24:	4b08      	ldr	r3, [pc, #32]	; (3a48 <cdc_acm_fifo_fill+0x7c>)
    3a26:	4a09      	ldr	r2, [pc, #36]	; (3a4c <cdc_acm_fifo_fill+0x80>)
    3a28:	1a9b      	subs	r3, r3, r2
    3a2a:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    3a2c:	f04f 0200 	mov.w	r2, #0
    3a30:	2102      	movs	r1, #2
    3a32:	f361 0202 	bfi	r2, r1, #0, #3
    3a36:	f36f 02c5 	bfc	r2, #3, #3
    3a3a:	f363 128f 	bfi	r2, r3, #6, #10
    3a3e:	1a21      	subs	r1, r4, r0
    3a40:	4805      	ldr	r0, [pc, #20]	; (3a58 <cdc_acm_fifo_fill+0x8c>)
    3a42:	f7fe f9b5 	bl	1db0 <log_1>
    3a46:	e7e6      	b.n	3a16 <cdc_acm_fifo_fill+0x4a>
    3a48:	000146d8 	.word	0x000146d8
    3a4c:	00014688 	.word	0x00014688
    3a50:	00014c8c 	.word	0x00014c8c
    3a54:	200005c8 	.word	0x200005c8
    3a58:	00014cc0 	.word	0x00014cc0

00003a5c <cdc_acm_read_cb>:
{
    3a5c:	b570      	push	{r4, r5, r6, lr}
    3a5e:	b082      	sub	sp, #8
    3a60:	4606      	mov	r6, r0
    3a62:	4614      	mov	r4, r2
	if (size <= 0) {
    3a64:	1e0d      	subs	r5, r1, #0
    3a66:	dd0f      	ble.n	3a88 <cdc_acm_read_cb+0x2c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    3a68:	462a      	mov	r2, r5
    3a6a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3a6e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    3a70:	f00c fd4e 	bl	10510 <ring_buf_put>
	if (wrote < size) {
    3a74:	4285      	cmp	r5, r0
    3a76:	d813      	bhi.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
	dev_data->rx_ready = true;
    3a78:	2301      	movs	r3, #1
    3a7a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    3a7e:	6823      	ldr	r3, [r4, #0]
    3a80:	b113      	cbz	r3, 3a88 <cdc_acm_read_cb+0x2c>
    3a82:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    3a86:	b9eb      	cbnz	r3, 3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    3a88:	9401      	str	r4, [sp, #4]
    3a8a:	4b11      	ldr	r3, [pc, #68]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3a8c:	9300      	str	r3, [sp, #0]
    3a8e:	2301      	movs	r3, #1
    3a90:	2240      	movs	r2, #64	; 0x40
    3a92:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3a96:	4630      	mov	r0, r6
    3a98:	f7ff fdda 	bl	3650 <usb_transfer>
}
    3a9c:	b002      	add	sp, #8
    3a9e:	bd70      	pop	{r4, r5, r6, pc}
    3aa0:	4b0c      	ldr	r3, [pc, #48]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3aa2:	4a0d      	ldr	r2, [pc, #52]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3aa4:	1a9b      	subs	r3, r3, r2
    3aa6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    3aa8:	f04f 0200 	mov.w	r2, #0
    3aac:	2101      	movs	r1, #1
    3aae:	f361 0202 	bfi	r2, r1, #0, #3
    3ab2:	f36f 02c5 	bfc	r2, #3, #3
    3ab6:	f363 128f 	bfi	r2, r3, #6, #10
    3aba:	1a29      	subs	r1, r5, r0
    3abc:	4807      	ldr	r0, [pc, #28]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3abe:	f7fe f977 	bl	1db0 <log_1>
    3ac2:	e7d9      	b.n	3a78 <cdc_acm_read_cb+0x1c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3ac4:	f104 0108 	add.w	r1, r4, #8
    3ac8:	4805      	ldr	r0, [pc, #20]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3aca:	f010 f9ab 	bl	13e24 <k_work_submit_to_queue>
    3ace:	e7db      	b.n	3a88 <cdc_acm_read_cb+0x2c>
    3ad0:	00003a5d 	.word	0x00003a5d
    3ad4:	000146d8 	.word	0x000146d8
    3ad8:	00014688 	.word	0x00014688
    3adc:	00014cc0 	.word	0x00014cc0
    3ae0:	200005c8 	.word	0x200005c8

00003ae4 <cdc_acm_do_cb>:
{
    3ae4:	b538      	push	{r3, r4, r5, lr}
    3ae6:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    3ae8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
    3aec:	685d      	ldr	r5, [r3, #4]
	switch (status) {
    3aee:	3901      	subs	r1, #1
    3af0:	2905      	cmp	r1, #5
    3af2:	d806      	bhi.n	3b02 <cdc_acm_do_cb+0x1e>
    3af4:	e8df f001 	tbb	[pc, r1]
    3af8:	37060503 	.word	0x37060503
    3afc:	5f4b      	.short	0x5f4b
		cdc_acm_reset_port(dev_data);
    3afe:	f7ff ff43 	bl	3988 <cdc_acm_reset_port>
}
    3b02:	bd38      	pop	{r3, r4, r5, pc}
    3b04:	4b45      	ldr	r3, [pc, #276]	; (3c1c <cdc_acm_do_cb+0x138>)
    3b06:	4a46      	ldr	r2, [pc, #280]	; (3c20 <cdc_acm_do_cb+0x13c>)
    3b08:	1a9b      	subs	r3, r3, r2
    3b0a:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device configured");
    3b0c:	f04f 0100 	mov.w	r1, #0
    3b10:	2203      	movs	r2, #3
    3b12:	f362 0102 	bfi	r1, r2, #0, #3
    3b16:	f36f 01c5 	bfc	r1, #3, #3
    3b1a:	f363 118f 	bfi	r1, r3, #6, #10
    3b1e:	4841      	ldr	r0, [pc, #260]	; (3c24 <cdc_acm_do_cb+0x140>)
    3b20:	f7fe f9da 	bl	1ed8 <log_0>
		if (!dev_data->configured) {
    3b24:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    3b28:	b19b      	cbz	r3, 3b52 <cdc_acm_do_cb+0x6e>
		if (!dev_data->tx_ready) {
    3b2a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d1e7      	bne.n	3b02 <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
    3b32:	2301      	movs	r3, #1
    3b34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    3b38:	6823      	ldr	r3, [r4, #0]
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d0e1      	beq.n	3b02 <cdc_acm_do_cb+0x1e>
    3b3e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    3b42:	2b00      	cmp	r3, #0
    3b44:	d0dd      	beq.n	3b02 <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3b46:	f104 0108 	add.w	r1, r4, #8
    3b4a:	4837      	ldr	r0, [pc, #220]	; (3c28 <cdc_acm_do_cb+0x144>)
    3b4c:	f010 f96a 	bl	13e24 <k_work_submit_to_queue>
    3b50:	e7d7      	b.n	3b02 <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    3b52:	6a2b      	ldr	r3, [r5, #32]
    3b54:	4622      	mov	r2, r4
    3b56:	2100      	movs	r1, #0
    3b58:	7b18      	ldrb	r0, [r3, #12]
    3b5a:	f7ff ff7f 	bl	3a5c <cdc_acm_read_cb>
			dev_data->configured = true;
    3b5e:	2301      	movs	r3, #1
    3b60:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    3b64:	e7e1      	b.n	3b2a <cdc_acm_do_cb+0x46>
    3b66:	4b2d      	ldr	r3, [pc, #180]	; (3c1c <cdc_acm_do_cb+0x138>)
    3b68:	4a2d      	ldr	r2, [pc, #180]	; (3c20 <cdc_acm_do_cb+0x13c>)
    3b6a:	1a9b      	subs	r3, r3, r2
    3b6c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device disconnected");
    3b6e:	f04f 0100 	mov.w	r1, #0
    3b72:	2203      	movs	r2, #3
    3b74:	f362 0102 	bfi	r1, r2, #0, #3
    3b78:	f36f 01c5 	bfc	r1, #3, #3
    3b7c:	f363 118f 	bfi	r1, r3, #6, #10
    3b80:	482a      	ldr	r0, [pc, #168]	; (3c2c <cdc_acm_do_cb+0x148>)
    3b82:	f7fe f9a9 	bl	1ed8 <log_0>
		cdc_acm_reset_port(dev_data);
    3b86:	4620      	mov	r0, r4
    3b88:	f7ff fefe 	bl	3988 <cdc_acm_reset_port>
		break;
    3b8c:	e7b9      	b.n	3b02 <cdc_acm_do_cb+0x1e>
    3b8e:	4b23      	ldr	r3, [pc, #140]	; (3c1c <cdc_acm_do_cb+0x138>)
    3b90:	4a23      	ldr	r2, [pc, #140]	; (3c20 <cdc_acm_do_cb+0x13c>)
    3b92:	1a9b      	subs	r3, r3, r2
    3b94:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device suspended");
    3b96:	f04f 0100 	mov.w	r1, #0
    3b9a:	2203      	movs	r2, #3
    3b9c:	f362 0102 	bfi	r1, r2, #0, #3
    3ba0:	f36f 01c5 	bfc	r1, #3, #3
    3ba4:	f363 118f 	bfi	r1, r3, #6, #10
    3ba8:	4821      	ldr	r0, [pc, #132]	; (3c30 <cdc_acm_do_cb+0x14c>)
    3baa:	f7fe f995 	bl	1ed8 <log_0>
		dev_data->suspended = true;
    3bae:	2301      	movs	r3, #1
    3bb0:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
		break;
    3bb4:	e7a5      	b.n	3b02 <cdc_acm_do_cb+0x1e>
    3bb6:	4b19      	ldr	r3, [pc, #100]	; (3c1c <cdc_acm_do_cb+0x138>)
    3bb8:	4a19      	ldr	r2, [pc, #100]	; (3c20 <cdc_acm_do_cb+0x13c>)
    3bba:	1a9b      	subs	r3, r3, r2
    3bbc:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device resumed");
    3bbe:	f04f 0100 	mov.w	r1, #0
    3bc2:	2203      	movs	r2, #3
    3bc4:	f362 0102 	bfi	r1, r2, #0, #3
    3bc8:	f36f 01c5 	bfc	r1, #3, #3
    3bcc:	f363 118f 	bfi	r1, r3, #6, #10
    3bd0:	4818      	ldr	r0, [pc, #96]	; (3c34 <cdc_acm_do_cb+0x150>)
    3bd2:	f7fe f981 	bl	1ed8 <log_0>
		if (dev_data->suspended) {
    3bd6:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d091      	beq.n	3b02 <cdc_acm_do_cb+0x1e>
    3bde:	4b0f      	ldr	r3, [pc, #60]	; (3c1c <cdc_acm_do_cb+0x138>)
    3be0:	4a0f      	ldr	r2, [pc, #60]	; (3c20 <cdc_acm_do_cb+0x13c>)
    3be2:	1a9b      	subs	r3, r3, r2
    3be4:	08db      	lsrs	r3, r3, #3
			LOG_INF("from suspend");
    3be6:	f04f 0100 	mov.w	r1, #0
    3bea:	2203      	movs	r2, #3
    3bec:	f362 0102 	bfi	r1, r2, #0, #3
    3bf0:	f36f 01c5 	bfc	r1, #3, #3
    3bf4:	f363 118f 	bfi	r1, r3, #6, #10
    3bf8:	480f      	ldr	r0, [pc, #60]	; (3c38 <cdc_acm_do_cb+0x154>)
    3bfa:	f7fe f96d 	bl	1ed8 <log_0>
			dev_data->suspended = false;
    3bfe:	2300      	movs	r3, #0
    3c00:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
			if (dev_data->configured) {
    3c04:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    3c08:	2b00      	cmp	r3, #0
    3c0a:	f43f af7a 	beq.w	3b02 <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    3c0e:	6a2b      	ldr	r3, [r5, #32]
    3c10:	4622      	mov	r2, r4
    3c12:	2100      	movs	r1, #0
    3c14:	7b18      	ldrb	r0, [r3, #12]
    3c16:	f7ff ff21 	bl	3a5c <cdc_acm_read_cb>
}
    3c1a:	e772      	b.n	3b02 <cdc_acm_do_cb+0x1e>
    3c1c:	000146d8 	.word	0x000146d8
    3c20:	00014688 	.word	0x00014688
    3c24:	00014ce4 	.word	0x00014ce4
    3c28:	200005c8 	.word	0x200005c8
    3c2c:	00014cf8 	.word	0x00014cf8
    3c30:	00014d0c 	.word	0x00014d0c
    3c34:	00014d20 	.word	0x00014d20
    3c38:	00014d30 	.word	0x00014d30

00003c3c <cdc_acm_dev_status_cb>:
{
    3c3c:	b570      	push	{r4, r5, r6, lr}
    3c3e:	4604      	mov	r4, r0
    3c40:	460d      	mov	r5, r1
    3c42:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    3c44:	4601      	mov	r1, r0
    3c46:	480e      	ldr	r0, [pc, #56]	; (3c80 <cdc_acm_dev_status_cb+0x44>)
    3c48:	f00d f976 	bl	10f38 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3c4c:	b128      	cbz	r0, 3c5a <cdc_acm_dev_status_cb+0x1e>
	cdc_acm_do_cb(dev_data, status, param);
    3c4e:	4632      	mov	r2, r6
    3c50:	4629      	mov	r1, r5
    3c52:	3880      	subs	r0, #128	; 0x80
    3c54:	f7ff ff46 	bl	3ae4 <cdc_acm_do_cb>
}
    3c58:	bd70      	pop	{r4, r5, r6, pc}
    3c5a:	4b0a      	ldr	r3, [pc, #40]	; (3c84 <cdc_acm_dev_status_cb+0x48>)
    3c5c:	4a0a      	ldr	r2, [pc, #40]	; (3c88 <cdc_acm_dev_status_cb+0x4c>)
    3c5e:	1a9b      	subs	r3, r3, r2
    3c60:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for cfg %p", cfg);
    3c62:	f04f 0200 	mov.w	r2, #0
    3c66:	2102      	movs	r1, #2
    3c68:	f361 0202 	bfi	r2, r1, #0, #3
    3c6c:	f36f 02c5 	bfc	r2, #3, #3
    3c70:	f363 128f 	bfi	r2, r3, #6, #10
    3c74:	4621      	mov	r1, r4
    3c76:	4805      	ldr	r0, [pc, #20]	; (3c8c <cdc_acm_dev_status_cb+0x50>)
    3c78:	f7fe f89a 	bl	1db0 <log_1>
		return;
    3c7c:	e7ec      	b.n	3c58 <cdc_acm_dev_status_cb+0x1c>
    3c7e:	bf00      	nop
    3c80:	2000181c 	.word	0x2000181c
    3c84:	000146d8 	.word	0x000146d8
    3c88:	00014688 	.word	0x00014688
    3c8c:	00014d40 	.word	0x00014d40

00003c90 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    3c90:	b530      	push	{r4, r5, lr}
    3c92:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3c94:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    3c96:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    3c98:	22a1      	movs	r2, #161	; 0xa1
    3c9a:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    3c9e:	2220      	movs	r2, #32
    3ca0:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    3ca4:	2400      	movs	r4, #0
    3ca6:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    3caa:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    3cae:	2202      	movs	r2, #2
    3cb0:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    3cb4:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    3cb8:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    3cbc:	6a18      	ldr	r0, [r3, #32]
    3cbe:	4623      	mov	r3, r4
    3cc0:	220a      	movs	r2, #10
    3cc2:	a901      	add	r1, sp, #4
    3cc4:	7900      	ldrb	r0, [r0, #4]
    3cc6:	f00d f8a0 	bl	10e0a <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    3cca:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    3cce:	b94b      	cbnz	r3, 3ce4 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    3cd0:	2001      	movs	r0, #1
    3cd2:	f010 faea 	bl	142aa <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    3cd6:	3401      	adds	r4, #1
    3cd8:	4b04      	ldr	r3, [pc, #16]	; (3cec <cdc_acm_send_notification+0x5c>)
    3cda:	429c      	cmp	r4, r3
    3cdc:	d9f5      	bls.n	3cca <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    3cde:	f06f 0004 	mvn.w	r0, #4
    3ce2:	e000      	b.n	3ce6 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    3ce4:	2000      	movs	r0, #0
}
    3ce6:	b005      	add	sp, #20
    3ce8:	bd30      	pop	{r4, r5, pc}
    3cea:	bf00      	nop
    3cec:	000186a0 	.word	0x000186a0

00003cf0 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    3cf0:	b510      	push	{r4, lr}
    3cf2:	b082      	sub	sp, #8
    3cf4:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3cf8:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    3cfa:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    3cfe:	b113      	cbz	r3, 3d06 <cdc_acm_poll_out+0x16>
    3d00:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    3d04:	b18b      	cbz	r3, 3d2a <cdc_acm_poll_out+0x3a>
    3d06:	4b28      	ldr	r3, [pc, #160]	; (3da8 <cdc_acm_poll_out+0xb8>)
    3d08:	4a28      	ldr	r2, [pc, #160]	; (3dac <cdc_acm_poll_out+0xbc>)
    3d0a:	1a9b      	subs	r3, r3, r2
    3d0c:	08db      	lsrs	r3, r3, #3
		LOG_INF("USB device not ready, drop data");
    3d0e:	f04f 0100 	mov.w	r1, #0
    3d12:	2203      	movs	r2, #3
    3d14:	f362 0102 	bfi	r1, r2, #0, #3
    3d18:	f36f 01c5 	bfc	r1, #3, #3
    3d1c:	f363 118f 	bfi	r1, r3, #6, #10
    3d20:	4823      	ldr	r0, [pc, #140]	; (3db0 <cdc_acm_poll_out+0xc0>)
    3d22:	f7fe f8d9 	bl	1ed8 <log_0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    3d26:	b002      	add	sp, #8
    3d28:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
    3d2a:	2300      	movs	r3, #0
    3d2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    3d30:	2201      	movs	r2, #1
    3d32:	f10d 0107 	add.w	r1, sp, #7
    3d36:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3d38:	f00c fbea 	bl	10510 <ring_buf_put>
    3d3c:	b9e0      	cbnz	r0, 3d78 <cdc_acm_poll_out+0x88>
    3d3e:	4b1a      	ldr	r3, [pc, #104]	; (3da8 <cdc_acm_poll_out+0xb8>)
    3d40:	4a1a      	ldr	r2, [pc, #104]	; (3dac <cdc_acm_poll_out+0xbc>)
    3d42:	1a9b      	subs	r3, r3, r2
    3d44:	08db      	lsrs	r3, r3, #3
		LOG_INF("Ring buffer full, drain buffer");
    3d46:	f04f 0100 	mov.w	r1, #0
    3d4a:	2203      	movs	r2, #3
    3d4c:	f362 0102 	bfi	r1, r2, #0, #3
    3d50:	f36f 01c5 	bfc	r1, #3, #3
    3d54:	f363 118f 	bfi	r1, r3, #6, #10
    3d58:	4816      	ldr	r0, [pc, #88]	; (3db4 <cdc_acm_poll_out+0xc4>)
    3d5a:	f7fe f8bd 	bl	1ed8 <log_0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    3d5e:	2201      	movs	r2, #1
    3d60:	2100      	movs	r1, #0
    3d62:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3d64:	f00c fc3e 	bl	105e4 <ring_buf_get>
    3d68:	b160      	cbz	r0, 3d84 <cdc_acm_poll_out+0x94>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    3d6a:	2201      	movs	r2, #1
    3d6c:	f10d 0107 	add.w	r1, sp, #7
    3d70:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3d72:	f00c fbcd 	bl	10510 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    3d76:	b128      	cbz	r0, 3d84 <cdc_acm_poll_out+0x94>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3d78:	f104 0118 	add.w	r1, r4, #24
    3d7c:	480e      	ldr	r0, [pc, #56]	; (3db8 <cdc_acm_poll_out+0xc8>)
    3d7e:	f010 f851 	bl	13e24 <k_work_submit_to_queue>
    3d82:	e7d0      	b.n	3d26 <cdc_acm_poll_out+0x36>
    3d84:	4b08      	ldr	r3, [pc, #32]	; (3da8 <cdc_acm_poll_out+0xb8>)
    3d86:	4a09      	ldr	r2, [pc, #36]	; (3dac <cdc_acm_poll_out+0xbc>)
    3d88:	1a9b      	subs	r3, r3, r2
    3d8a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to drain buffer");
    3d8c:	f04f 0100 	mov.w	r1, #0
    3d90:	2201      	movs	r2, #1
    3d92:	f362 0102 	bfi	r1, r2, #0, #3
    3d96:	f36f 01c5 	bfc	r1, #3, #3
    3d9a:	f363 118f 	bfi	r1, r3, #6, #10
    3d9e:	4807      	ldr	r0, [pc, #28]	; (3dbc <cdc_acm_poll_out+0xcc>)
    3da0:	f7fe f89a 	bl	1ed8 <log_0>
			return;
    3da4:	e7bf      	b.n	3d26 <cdc_acm_poll_out+0x36>
    3da6:	bf00      	nop
    3da8:	000146d8 	.word	0x000146d8
    3dac:	00014688 	.word	0x00014688
    3db0:	00014d64 	.word	0x00014d64
    3db4:	00014d84 	.word	0x00014d84
    3db8:	200005c8 	.word	0x200005c8
    3dbc:	00014da4 	.word	0x00014da4

00003dc0 <cdc_acm_write_cb>:
{
    3dc0:	b510      	push	{r4, lr}
    3dc2:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    3dc4:	2301      	movs	r3, #1
    3dc6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3dca:	6813      	ldr	r3, [r2, #0]
    3dcc:	b113      	cbz	r3, 3dd4 <cdc_acm_write_cb+0x14>
    3dce:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    3dd2:	b923      	cbnz	r3, 3dde <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    3dd4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3dd6:	f00c fb37 	bl	10448 <ring_buf_is_empty>
    3dda:	b130      	cbz	r0, 3dea <cdc_acm_write_cb+0x2a>
}
    3ddc:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3dde:	f102 0108 	add.w	r1, r2, #8
    3de2:	4805      	ldr	r0, [pc, #20]	; (3df8 <cdc_acm_write_cb+0x38>)
    3de4:	f010 f81e 	bl	13e24 <k_work_submit_to_queue>
    3de8:	e7f4      	b.n	3dd4 <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3dea:	f104 0118 	add.w	r1, r4, #24
    3dee:	4802      	ldr	r0, [pc, #8]	; (3df8 <cdc_acm_write_cb+0x38>)
    3df0:	f010 f818 	bl	13e24 <k_work_submit_to_queue>
    3df4:	e7f2      	b.n	3ddc <cdc_acm_write_cb+0x1c>
    3df6:	bf00      	nop
    3df8:	200005c8 	.word	0x200005c8

00003dfc <cdc_acm_init>:
{
    3dfc:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3dfe:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    3e00:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    3e04:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
    3e08:	2200      	movs	r2, #0
    3e0a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3e0e:	4a0b      	ldr	r2, [pc, #44]	; (3e3c <cdc_acm_init+0x40>)
    3e10:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3e12:	b172      	cbz	r2, 3e32 <cdc_acm_init+0x36>
	parent->next = child;
    3e14:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3e16:	4a09      	ldr	r2, [pc, #36]	; (3e3c <cdc_acm_init+0x40>)
    3e18:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    3e1a:	4909      	ldr	r1, [pc, #36]	; (3e40 <cdc_acm_init+0x44>)
    3e1c:	f104 0008 	add.w	r0, r4, #8
    3e20:	f00f fffa 	bl	13e18 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    3e24:	4907      	ldr	r1, [pc, #28]	; (3e44 <cdc_acm_init+0x48>)
    3e26:	f104 0018 	add.w	r0, r4, #24
    3e2a:	f00f fff5 	bl	13e18 <k_work_init>
}
    3e2e:	2000      	movs	r0, #0
    3e30:	bd10      	pop	{r4, pc}
    3e32:	4a02      	ldr	r2, [pc, #8]	; (3e3c <cdc_acm_init+0x40>)
    3e34:	6053      	str	r3, [r2, #4]
	list->head = node;
    3e36:	6013      	str	r3, [r2, #0]
}
    3e38:	e7ef      	b.n	3e1a <cdc_acm_init+0x1e>
    3e3a:	bf00      	nop
    3e3c:	2000181c 	.word	0x2000181c
    3e40:	00010ff5 	.word	0x00010ff5
    3e44:	00003e49 	.word	0x00003e49

00003e48 <tx_work_handler>:
{
    3e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e4a:	b085      	sub	sp, #20
    3e4c:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    3e4e:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    3e52:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
    3e54:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    3e56:	6a1b      	ldr	r3, [r3, #32]
    3e58:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    3e5a:	4628      	mov	r0, r5
    3e5c:	f00d f8b2 	bl	10fc4 <usb_transfer_is_busy>
    3e60:	b108      	cbz	r0, 3e66 <tx_work_handler+0x1e>
}
    3e62:	b005      	add	sp, #20
    3e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    3e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3e6a:	a903      	add	r1, sp, #12
    3e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3e6e:	f00c fb6f 	bl	10550 <ring_buf_get_claim>
	if (!len) {
    3e72:	4606      	mov	r6, r0
    3e74:	2800      	cmp	r0, #0
    3e76:	d0f4      	beq.n	3e62 <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    3e78:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    3e7c:	d100      	bne.n	3e80 <tx_work_handler+0x38>
		len -= 1;
    3e7e:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    3e80:	9701      	str	r7, [sp, #4]
    3e82:	4b06      	ldr	r3, [pc, #24]	; (3e9c <tx_work_handler+0x54>)
    3e84:	9300      	str	r3, [sp, #0]
    3e86:	2302      	movs	r3, #2
    3e88:	4632      	mov	r2, r6
    3e8a:	9903      	ldr	r1, [sp, #12]
    3e8c:	4628      	mov	r0, r5
    3e8e:	f7ff fbdf 	bl	3650 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    3e92:	4631      	mov	r1, r6
    3e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3e96:	f00c fb87 	bl	105a8 <ring_buf_get_finish>
    3e9a:	e7e2      	b.n	3e62 <tx_work_handler+0x1a>
    3e9c:	00003dc1 	.word	0x00003dc1

00003ea0 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    3ea0:	b530      	push	{r4, r5, lr}
    3ea2:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    3ea4:	4d08      	ldr	r5, [pc, #32]	; (3ec8 <z_usb_work_q_init+0x28>)
    3ea6:	2400      	movs	r4, #0
    3ea8:	9400      	str	r4, [sp, #0]
    3eaa:	f04f 33ff 	mov.w	r3, #4294967295
    3eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3eb2:	4906      	ldr	r1, [pc, #24]	; (3ecc <z_usb_work_q_init+0x2c>)
    3eb4:	4628      	mov	r0, r5
    3eb6:	f00a fbbf 	bl	e638 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    3eba:	4905      	ldr	r1, [pc, #20]	; (3ed0 <z_usb_work_q_init+0x30>)
    3ebc:	4628      	mov	r0, r5
    3ebe:	f00a f85f 	bl	df80 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    3ec2:	4620      	mov	r0, r4
    3ec4:	b003      	add	sp, #12
    3ec6:	bd30      	pop	{r4, r5, pc}
    3ec8:	200005c8 	.word	0x200005c8
    3ecc:	200033c0 	.word	0x200033c0
    3ed0:	00014e28 	.word	0x00014e28

00003ed4 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    3ed4:	b410      	push	{r4}
    3ed6:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    3ed8:	2300      	movs	r3, #0
    3eda:	4a08      	ldr	r2, [pc, #32]	; (3efc <get_flash_area_from_id+0x28>)
    3edc:	6812      	ldr	r2, [r2, #0]
    3ede:	429a      	cmp	r2, r3
    3ee0:	dd09      	ble.n	3ef6 <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
    3ee2:	011a      	lsls	r2, r3, #4
    3ee4:	4906      	ldr	r1, [pc, #24]	; (3f00 <get_flash_area_from_id+0x2c>)
    3ee6:	6809      	ldr	r1, [r1, #0]
    3ee8:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    3eec:	5c8a      	ldrb	r2, [r1, r2]
    3eee:	42a2      	cmp	r2, r4
    3ef0:	d002      	beq.n	3ef8 <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
    3ef2:	3301      	adds	r3, #1
    3ef4:	e7f1      	b.n	3eda <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    3ef6:	2000      	movs	r0, #0
}
    3ef8:	bc10      	pop	{r4}
    3efa:	4770      	bx	lr
    3efc:	00014e98 	.word	0x00014e98
    3f00:	20000204 	.word	0x20000204

00003f04 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    3f04:	4b08      	ldr	r3, [pc, #32]	; (3f28 <flash_area_open+0x24>)
    3f06:	681b      	ldr	r3, [r3, #0]
    3f08:	b13b      	cbz	r3, 3f1a <flash_area_open+0x16>
{
    3f0a:	b510      	push	{r4, lr}
    3f0c:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    3f0e:	f7ff ffe1 	bl	3ed4 <get_flash_area_from_id>
	if (area == NULL) {
    3f12:	b128      	cbz	r0, 3f20 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    3f14:	6020      	str	r0, [r4, #0]
	return 0;
    3f16:	2000      	movs	r0, #0
}
    3f18:	bd10      	pop	{r4, pc}
		return -EACCES;
    3f1a:	f06f 000c 	mvn.w	r0, #12
}
    3f1e:	4770      	bx	lr
		return -ENOENT;
    3f20:	f06f 0001 	mvn.w	r0, #1
    3f24:	e7f8      	b.n	3f18 <flash_area_open+0x14>
    3f26:	bf00      	nop
    3f28:	20000204 	.word	0x20000204

00003f2c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3f2c:	4b1b      	ldr	r3, [pc, #108]	; (3f9c <pm_system_resume+0x70>)
    3f2e:	681b      	ldr	r3, [r3, #0]
    3f30:	2b00      	cmp	r3, #0
    3f32:	d132      	bne.n	3f9a <pm_system_resume+0x6e>
{
    3f34:	b530      	push	{r4, r5, lr}
    3f36:	b085      	sub	sp, #20
		post_ops_done = 1;
    3f38:	4b18      	ldr	r3, [pc, #96]	; (3f9c <pm_system_resume+0x70>)
    3f3a:	2201      	movs	r2, #1
    3f3c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3f3e:	4b18      	ldr	r3, [pc, #96]	; (3fa0 <pm_system_resume+0x74>)
    3f40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3f44:	ab04      	add	r3, sp, #16
    3f46:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3f4a:	4b16      	ldr	r3, [pc, #88]	; (3fa4 <pm_system_resume+0x78>)
    3f4c:	b163      	cbz	r3, 3f68 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    3f4e:	f00d fb85 	bl	1165c <pm_power_state_exit_post_ops>
    3f52:	f04f 0320 	mov.w	r3, #32
    3f56:	f3ef 8511 	mrs	r5, BASEPRI
    3f5a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f5e:	f3bf 8f6f 	isb	sy
	return list->head;
    3f62:	4b11      	ldr	r3, [pc, #68]	; (3fa8 <pm_system_resume+0x7c>)
    3f64:	681c      	ldr	r4, [r3, #0]
    3f66:	e00a      	b.n	3f7e <pm_system_resume+0x52>
	__asm__ volatile(
    3f68:	2300      	movs	r3, #0
    3f6a:	f383 8811 	msr	BASEPRI, r3
    3f6e:	f3bf 8f6f 	isb	sy
}
    3f72:	e7ee      	b.n	3f52 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f74:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3f76:	b10c      	cbz	r4, 3f7c <pm_system_resume+0x50>
	return node->next;
    3f78:	6823      	ldr	r3, [r4, #0]
    3f7a:	b143      	cbz	r3, 3f8e <pm_system_resume+0x62>
{
    3f7c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f7e:	b134      	cbz	r4, 3f8e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3f80:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3f82:	2b00      	cmp	r3, #0
    3f84:	d0f6      	beq.n	3f74 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3f86:	4a06      	ldr	r2, [pc, #24]	; (3fa0 <pm_system_resume+0x74>)
    3f88:	7810      	ldrb	r0, [r2, #0]
    3f8a:	4798      	blx	r3
    3f8c:	e7f2      	b.n	3f74 <pm_system_resume+0x48>
	__asm__ volatile(
    3f8e:	f385 8811 	msr	BASEPRI, r5
    3f92:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3f96:	b005      	add	sp, #20
    3f98:	bd30      	pop	{r4, r5, pc}
    3f9a:	4770      	bx	lr
    3f9c:	20000208 	.word	0x20000208
    3fa0:	2000182c 	.word	0x2000182c
    3fa4:	0001165d 	.word	0x0001165d
    3fa8:	20001824 	.word	0x20001824

00003fac <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3fac:	b570      	push	{r4, r5, r6, lr}
    3fae:	b088      	sub	sp, #32
    3fb0:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3fb2:	4c2a      	ldr	r4, [pc, #168]	; (405c <pm_system_suspend+0xb0>)
    3fb4:	466d      	mov	r5, sp
    3fb6:	4601      	mov	r1, r0
    3fb8:	4628      	mov	r0, r5
    3fba:	f00d f9ce 	bl	1135a <pm_policy_next_state>
    3fbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3fc6:	7820      	ldrb	r0, [r4, #0]
    3fc8:	2800      	cmp	r0, #0
    3fca:	d045      	beq.n	4058 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3fcc:	4b24      	ldr	r3, [pc, #144]	; (4060 <pm_system_suspend+0xb4>)
    3fce:	2200      	movs	r2, #0
    3fd0:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3fd2:	f1b6 3fff 	cmp.w	r6, #4294967295
    3fd6:	d10c      	bne.n	3ff2 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3fd8:	f00a fbea 	bl	e7b0 <k_sched_lock>
	__asm__ volatile(
    3fdc:	f04f 0320 	mov.w	r3, #32
    3fe0:	f3ef 8511 	mrs	r5, BASEPRI
    3fe4:	f383 8812 	msr	BASEPRI_MAX, r3
    3fe8:	f3bf 8f6f 	isb	sy
	return list->head;
    3fec:	4b1d      	ldr	r3, [pc, #116]	; (4064 <pm_system_suspend+0xb8>)
    3fee:	681c      	ldr	r4, [r3, #0]
    3ff0:	e016      	b.n	4020 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3ff2:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3ff4:	0c59      	lsrs	r1, r3, #17
    3ff6:	03d8      	lsls	r0, r3, #15
    3ff8:	4c1b      	ldr	r4, [pc, #108]	; (4068 <pm_system_suspend+0xbc>)
    3ffa:	4a1c      	ldr	r2, [pc, #112]	; (406c <pm_system_suspend+0xc0>)
    3ffc:	2300      	movs	r3, #0
    3ffe:	1900      	adds	r0, r0, r4
    4000:	f04f 0400 	mov.w	r4, #0
    4004:	eb44 0101 	adc.w	r1, r4, r1
    4008:	f7fc f9ae 	bl	368 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    400c:	2101      	movs	r1, #1
    400e:	1a30      	subs	r0, r6, r0
    4010:	f010 f91c 	bl	1424c <z_set_timeout_expiry>
    4014:	e7e0      	b.n	3fd8 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4016:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4018:	b10c      	cbz	r4, 401e <pm_system_suspend+0x72>
	return node->next;
    401a:	6823      	ldr	r3, [r4, #0]
    401c:	b143      	cbz	r3, 4030 <pm_system_suspend+0x84>
{
    401e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4020:	b134      	cbz	r4, 4030 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    4022:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    4024:	2b00      	cmp	r3, #0
    4026:	d0f6      	beq.n	4016 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    4028:	4a0c      	ldr	r2, [pc, #48]	; (405c <pm_system_suspend+0xb0>)
    402a:	7810      	ldrb	r0, [r2, #0]
    402c:	4798      	blx	r3
    402e:	e7f2      	b.n	4016 <pm_system_suspend+0x6a>
	__asm__ volatile(
    4030:	f385 8811 	msr	BASEPRI, r5
    4034:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    4038:	4b08      	ldr	r3, [pc, #32]	; (405c <pm_system_suspend+0xb0>)
    403a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    403e:	ab08      	add	r3, sp, #32
    4040:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    4044:	4b0a      	ldr	r3, [pc, #40]	; (4070 <pm_system_suspend+0xc4>)
    4046:	b10b      	cbz	r3, 404c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    4048:	f00d faf5 	bl	11636 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    404c:	f7ff ff6e 	bl	3f2c <pm_system_resume>
	k_sched_unlock();
    4050:	f00a fdac 	bl	ebac <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    4054:	4b01      	ldr	r3, [pc, #4]	; (405c <pm_system_suspend+0xb0>)
    4056:	7818      	ldrb	r0, [r3, #0]
}
    4058:	b008      	add	sp, #32
    405a:	bd70      	pop	{r4, r5, r6, pc}
    405c:	2000182c 	.word	0x2000182c
    4060:	20000208 	.word	0x20000208
    4064:	20001824 	.word	0x20001824
    4068:	000f423f 	.word	0x000f423f
    406c:	000f4240 	.word	0x000f4240
    4070:	00011637 	.word	0x00011637

00004074 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    4074:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    4076:	4802      	ldr	r0, [pc, #8]	; (4080 <nrf_cc3xx_platform_abort_init+0xc>)
    4078:	f00b f9f0 	bl	f45c <nrf_cc3xx_platform_set_abort>
}
    407c:	bd08      	pop	{r3, pc}
    407e:	bf00      	nop
    4080:	00014ea4 	.word	0x00014ea4

00004084 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    4084:	b1d0      	cbz	r0, 40bc <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4086:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    4088:	6842      	ldr	r2, [r0, #4]
    408a:	2a04      	cmp	r2, #4
    408c:	d005      	beq.n	409a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    408e:	b1d2      	cbz	r2, 40c6 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    4090:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    4092:	f00a f8e3 	bl	e25c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    4096:	2000      	movs	r0, #0
    }
}
    4098:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    409a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    409c:	2200      	movs	r2, #0
    409e:	f3bf 8f5b 	dmb	ish
    40a2:	e853 1f00 	ldrex	r1, [r3]
    40a6:	2901      	cmp	r1, #1
    40a8:	d103      	bne.n	40b2 <mutex_unlock_platform+0x2e>
    40aa:	e843 2000 	strex	r0, r2, [r3]
    40ae:	2800      	cmp	r0, #0
    40b0:	d1f7      	bne.n	40a2 <mutex_unlock_platform+0x1e>
    40b2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40b6:	d104      	bne.n	40c2 <mutex_unlock_platform+0x3e>
    40b8:	4610      	mov	r0, r2
    40ba:	e7ed      	b.n	4098 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    40bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    40c0:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40c2:	4802      	ldr	r0, [pc, #8]	; (40cc <mutex_unlock_platform+0x48>)
    40c4:	e7e8      	b.n	4098 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    40c6:	4802      	ldr	r0, [pc, #8]	; (40d0 <mutex_unlock_platform+0x4c>)
    40c8:	e7e6      	b.n	4098 <mutex_unlock_platform+0x14>
    40ca:	bf00      	nop
    40cc:	ffff8fe9 	.word	0xffff8fe9
    40d0:	ffff8fea 	.word	0xffff8fea

000040d4 <mutex_lock_platform>:
    if(mutex == NULL) {
    40d4:	b320      	cbz	r0, 4120 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    40d6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    40d8:	6842      	ldr	r2, [r0, #4]
    40da:	2a04      	cmp	r2, #4
    40dc:	d002      	beq.n	40e4 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    40de:	b992      	cbnz	r2, 4106 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    40e0:	4811      	ldr	r0, [pc, #68]	; (4128 <mutex_lock_platform+0x54>)
    40e2:	e00f      	b.n	4104 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    40e4:	6803      	ldr	r3, [r0, #0]
    40e6:	2201      	movs	r2, #1
    40e8:	f3bf 8f5b 	dmb	ish
    40ec:	e853 1f00 	ldrex	r1, [r3]
    40f0:	2900      	cmp	r1, #0
    40f2:	d103      	bne.n	40fc <mutex_lock_platform+0x28>
    40f4:	e843 2000 	strex	r0, r2, [r3]
    40f8:	2800      	cmp	r0, #0
    40fa:	d1f7      	bne.n	40ec <mutex_lock_platform+0x18>
    40fc:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4100:	d10c      	bne.n	411c <mutex_lock_platform+0x48>
    4102:	2000      	movs	r0, #0
}
    4104:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    4106:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4108:	f04f 32ff 	mov.w	r2, #4294967295
    410c:	f04f 33ff 	mov.w	r3, #4294967295
    4110:	f00a f81a 	bl	e148 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4114:	2800      	cmp	r0, #0
    4116:	d0f5      	beq.n	4104 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    4118:	4804      	ldr	r0, [pc, #16]	; (412c <mutex_lock_platform+0x58>)
    411a:	e7f3      	b.n	4104 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    411c:	4803      	ldr	r0, [pc, #12]	; (412c <mutex_lock_platform+0x58>)
    411e:	e7f1      	b.n	4104 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4120:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4124:	4770      	bx	lr
    4126:	bf00      	nop
    4128:	ffff8fea 	.word	0xffff8fea
    412c:	ffff8fe9 	.word	0xffff8fe9

00004130 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4130:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4132:	4604      	mov	r4, r0
    4134:	b188      	cbz	r0, 415a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4136:	6863      	ldr	r3, [r4, #4]
    4138:	2b04      	cmp	r3, #4
    413a:	d00d      	beq.n	4158 <mutex_free_platform+0x28>
    413c:	2b08      	cmp	r3, #8
    413e:	d00b      	beq.n	4158 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4140:	b153      	cbz	r3, 4158 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    4142:	f013 0f02 	tst.w	r3, #2
    4146:	d00d      	beq.n	4164 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    4148:	4621      	mov	r1, r4
    414a:	4809      	ldr	r0, [pc, #36]	; (4170 <mutex_free_platform+0x40>)
    414c:	f00f fd26 	bl	13b9c <k_mem_slab_free>
        mutex->mutex = NULL;
    4150:	2300      	movs	r3, #0
    4152:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    4154:	2300      	movs	r3, #0
    4156:	6063      	str	r3, [r4, #4]
}
    4158:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    415a:	4b06      	ldr	r3, [pc, #24]	; (4174 <mutex_free_platform+0x44>)
    415c:	685b      	ldr	r3, [r3, #4]
    415e:	4806      	ldr	r0, [pc, #24]	; (4178 <mutex_free_platform+0x48>)
    4160:	4798      	blx	r3
    4162:	e7e8      	b.n	4136 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4164:	2214      	movs	r2, #20
    4166:	2100      	movs	r1, #0
    4168:	6820      	ldr	r0, [r4, #0]
    416a:	f00d fa1b 	bl	115a4 <memset>
    416e:	e7f1      	b.n	4154 <mutex_free_platform+0x24>
    4170:	20001838 	.word	0x20001838
    4174:	20000268 	.word	0x20000268
    4178:	00014eac 	.word	0x00014eac

0000417c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    417c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    417e:	4604      	mov	r4, r0
    4180:	b178      	cbz	r0, 41a2 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4182:	6863      	ldr	r3, [r4, #4]
    4184:	2b04      	cmp	r3, #4
    4186:	d00b      	beq.n	41a0 <mutex_init_platform+0x24>
    4188:	2b08      	cmp	r3, #8
    418a:	d009      	beq.n	41a0 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    418c:	b90b      	cbnz	r3, 4192 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    418e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4190:	b163      	cbz	r3, 41ac <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    4192:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4194:	f00f fda1 	bl	13cda <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4198:	6863      	ldr	r3, [r4, #4]
    419a:	f043 0301 	orr.w	r3, r3, #1
    419e:	6063      	str	r3, [r4, #4]
}
    41a0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    41a2:	4b0f      	ldr	r3, [pc, #60]	; (41e0 <mutex_init_platform+0x64>)
    41a4:	685b      	ldr	r3, [r3, #4]
    41a6:	480f      	ldr	r0, [pc, #60]	; (41e4 <mutex_init_platform+0x68>)
    41a8:	4798      	blx	r3
    41aa:	e7ea      	b.n	4182 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    41ac:	f04f 32ff 	mov.w	r2, #4294967295
    41b0:	f04f 33ff 	mov.w	r3, #4294967295
    41b4:	4621      	mov	r1, r4
    41b6:	480c      	ldr	r0, [pc, #48]	; (41e8 <mutex_init_platform+0x6c>)
    41b8:	f009 fe8c 	bl	ded4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    41bc:	b908      	cbnz	r0, 41c2 <mutex_init_platform+0x46>
    41be:	6823      	ldr	r3, [r4, #0]
    41c0:	b91b      	cbnz	r3, 41ca <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    41c2:	4b07      	ldr	r3, [pc, #28]	; (41e0 <mutex_init_platform+0x64>)
    41c4:	685b      	ldr	r3, [r3, #4]
    41c6:	4809      	ldr	r0, [pc, #36]	; (41ec <mutex_init_platform+0x70>)
    41c8:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    41ca:	2214      	movs	r2, #20
    41cc:	2100      	movs	r1, #0
    41ce:	6820      	ldr	r0, [r4, #0]
    41d0:	f00d f9e8 	bl	115a4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    41d4:	6863      	ldr	r3, [r4, #4]
    41d6:	f043 0302 	orr.w	r3, r3, #2
    41da:	6063      	str	r3, [r4, #4]
    41dc:	e7d9      	b.n	4192 <mutex_init_platform+0x16>
    41de:	bf00      	nop
    41e0:	20000268 	.word	0x20000268
    41e4:	00014eac 	.word	0x00014eac
    41e8:	20001838 	.word	0x20001838
    41ec:	00014ed4 	.word	0x00014ed4

000041f0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    41f0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    41f2:	2340      	movs	r3, #64	; 0x40
    41f4:	2214      	movs	r2, #20
    41f6:	4904      	ldr	r1, [pc, #16]	; (4208 <nrf_cc3xx_platform_mutex_init+0x18>)
    41f8:	4804      	ldr	r0, [pc, #16]	; (420c <nrf_cc3xx_platform_mutex_init+0x1c>)
    41fa:	f00f fcc1 	bl	13b80 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    41fe:	4904      	ldr	r1, [pc, #16]	; (4210 <nrf_cc3xx_platform_mutex_init+0x20>)
    4200:	4804      	ldr	r0, [pc, #16]	; (4214 <nrf_cc3xx_platform_mutex_init+0x24>)
    4202:	f00b f98d 	bl	f520 <nrf_cc3xx_platform_set_mutexes>
}
    4206:	bd08      	pop	{r3, pc}
    4208:	20001854 	.word	0x20001854
    420c:	20001838 	.word	0x20001838
    4210:	00014f14 	.word	0x00014f14
    4214:	00014f04 	.word	0x00014f04

00004218 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4218:	4901      	ldr	r1, [pc, #4]	; (4220 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    421a:	2210      	movs	r2, #16
	str	r2, [r1]
    421c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    421e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4220:	e000ed10 	.word	0xe000ed10

00004224 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4224:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4226:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4228:	f380 8811 	msr	BASEPRI, r0
	isb
    422c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4230:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4234:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4236:	b662      	cpsie	i
	isb
    4238:	f3bf 8f6f 	isb	sy

	bx	lr
    423c:	4770      	bx	lr
    423e:	bf00      	nop

00004240 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4240:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4242:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4244:	f381 8811 	msr	BASEPRI, r1

	wfe
    4248:	bf20      	wfe

	msr	BASEPRI, r0
    424a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    424e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4250:	4770      	bx	lr
    4252:	bf00      	nop

00004254 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    4254:	b570      	push	{r4, r5, r6, lr}
    4256:	b082      	sub	sp, #8
    4258:	4604      	mov	r4, r0
    425a:	4d1f      	ldr	r5, [pc, #124]	; (42d8 <esf_dump+0x84>)
    425c:	4b1f      	ldr	r3, [pc, #124]	; (42dc <esf_dump+0x88>)
    425e:	1aed      	subs	r5, r5, r3
    4260:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4262:	2601      	movs	r6, #1
    4264:	f04f 0300 	mov.w	r3, #0
    4268:	f366 0302 	bfi	r3, r6, #0, #3
    426c:	f36f 03c5 	bfc	r3, #3, #3
    4270:	f365 138f 	bfi	r3, r5, #6, #10
    4274:	f8ad 3000 	strh.w	r3, [sp]
    4278:	6883      	ldr	r3, [r0, #8]
    427a:	6842      	ldr	r2, [r0, #4]
    427c:	6801      	ldr	r1, [r0, #0]
    427e:	4818      	ldr	r0, [pc, #96]	; (42e0 <esf_dump+0x8c>)
    4280:	f7fd fd58 	bl	1d34 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4284:	f04f 0300 	mov.w	r3, #0
    4288:	f366 0302 	bfi	r3, r6, #0, #3
    428c:	f36f 03c5 	bfc	r3, #3, #3
    4290:	f365 138f 	bfi	r3, r5, #6, #10
    4294:	f8ad 3000 	strh.w	r3, [sp]
    4298:	6963      	ldr	r3, [r4, #20]
    429a:	6922      	ldr	r2, [r4, #16]
    429c:	68e1      	ldr	r1, [r4, #12]
    429e:	4811      	ldr	r0, [pc, #68]	; (42e4 <esf_dump+0x90>)
    42a0:	f7fd fd48 	bl	1d34 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    42a4:	f04f 0200 	mov.w	r2, #0
    42a8:	f366 0202 	bfi	r2, r6, #0, #3
    42ac:	f36f 02c5 	bfc	r2, #3, #3
    42b0:	f365 128f 	bfi	r2, r5, #6, #10
    42b4:	69e1      	ldr	r1, [r4, #28]
    42b6:	480c      	ldr	r0, [pc, #48]	; (42e8 <esf_dump+0x94>)
    42b8:	f7fd fd7a 	bl	1db0 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    42bc:	f04f 0200 	mov.w	r2, #0
    42c0:	f366 0202 	bfi	r2, r6, #0, #3
    42c4:	f36f 02c5 	bfc	r2, #3, #3
    42c8:	f365 128f 	bfi	r2, r5, #6, #10
    42cc:	69a1      	ldr	r1, [r4, #24]
    42ce:	4807      	ldr	r0, [pc, #28]	; (42ec <esf_dump+0x98>)
    42d0:	f7fd fd6e 	bl	1db0 <log_1>
		esf->basic.pc);
}
    42d4:	b002      	add	sp, #8
    42d6:	bd70      	pop	{r4, r5, r6, pc}
    42d8:	000146b8 	.word	0x000146b8
    42dc:	00014688 	.word	0x00014688
    42e0:	00014f28 	.word	0x00014f28
    42e4:	00014f58 	.word	0x00014f58
    42e8:	00014f88 	.word	0x00014f88
    42ec:	00014f98 	.word	0x00014f98

000042f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    42f0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    42f2:	2b00      	cmp	r3, #0
    42f4:	db08      	blt.n	4308 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42f6:	f000 001f 	and.w	r0, r0, #31
    42fa:	095b      	lsrs	r3, r3, #5
    42fc:	2201      	movs	r2, #1
    42fe:	fa02 f000 	lsl.w	r0, r2, r0
    4302:	4a02      	ldr	r2, [pc, #8]	; (430c <arch_irq_enable+0x1c>)
    4304:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4308:	4770      	bx	lr
    430a:	bf00      	nop
    430c:	e000e100 	.word	0xe000e100

00004310 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4310:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4312:	2b00      	cmp	r3, #0
    4314:	db0d      	blt.n	4332 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4316:	f000 001f 	and.w	r0, r0, #31
    431a:	095b      	lsrs	r3, r3, #5
    431c:	2201      	movs	r2, #1
    431e:	fa02 f000 	lsl.w	r0, r2, r0
    4322:	3320      	adds	r3, #32
    4324:	4a03      	ldr	r2, [pc, #12]	; (4334 <arch_irq_disable+0x24>)
    4326:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    432a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    432e:	f3bf 8f6f 	isb	sy
}
    4332:	4770      	bx	lr
    4334:	e000e100 	.word	0xe000e100

00004338 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4338:	0942      	lsrs	r2, r0, #5
    433a:	4b05      	ldr	r3, [pc, #20]	; (4350 <arch_irq_is_enabled+0x18>)
    433c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4340:	f000 001f 	and.w	r0, r0, #31
    4344:	2301      	movs	r3, #1
    4346:	fa03 f000 	lsl.w	r0, r3, r0
}
    434a:	4010      	ands	r0, r2
    434c:	4770      	bx	lr
    434e:	bf00      	nop
    4350:	e000e100 	.word	0xe000e100

00004354 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4354:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4356:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4358:	2b00      	cmp	r3, #0
    435a:	db08      	blt.n	436e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    435c:	0149      	lsls	r1, r1, #5
    435e:	b2c9      	uxtb	r1, r1
    4360:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4364:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4368:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    436c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    436e:	f000 000f 	and.w	r0, r0, #15
    4372:	0149      	lsls	r1, r1, #5
    4374:	b2c9      	uxtb	r1, r1
    4376:	4b01      	ldr	r3, [pc, #4]	; (437c <z_arm_irq_priority_set+0x28>)
    4378:	5419      	strb	r1, [r3, r0]
}
    437a:	4770      	bx	lr
    437c:	e000ed14 	.word	0xe000ed14

00004380 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4380:	bf30      	wfi
    b z_SysNmiOnReset
    4382:	f7ff bffd 	b.w	4380 <z_SysNmiOnReset>
    4386:	bf00      	nop

00004388 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4388:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    438a:	4b0b      	ldr	r3, [pc, #44]	; (43b8 <z_arm_prep_c+0x30>)
    438c:	4a0b      	ldr	r2, [pc, #44]	; (43bc <z_arm_prep_c+0x34>)
    438e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4392:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4398:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    439c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    43a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    43a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    43a8:	f009 fd20 	bl	ddec <z_bss_zero>
	z_data_copy();
    43ac:	f00a fd90 	bl	eed0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    43b0:	f000 fcb6 	bl	4d20 <z_arm_interrupt_init>
	z_cstart();
    43b4:	f009 fd26 	bl	de04 <z_cstart>
    43b8:	e000ed00 	.word	0xe000ed00
    43bc:	00000000 	.word	0x00000000

000043c0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    43c0:	4a0a      	ldr	r2, [pc, #40]	; (43ec <arch_swap+0x2c>)
    43c2:	6893      	ldr	r3, [r2, #8]
    43c4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    43c8:	4909      	ldr	r1, [pc, #36]	; (43f0 <arch_swap+0x30>)
    43ca:	6809      	ldr	r1, [r1, #0]
    43cc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    43d0:	4908      	ldr	r1, [pc, #32]	; (43f4 <arch_swap+0x34>)
    43d2:	684b      	ldr	r3, [r1, #4]
    43d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    43d8:	604b      	str	r3, [r1, #4]
    43da:	2300      	movs	r3, #0
    43dc:	f383 8811 	msr	BASEPRI, r3
    43e0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    43e4:	6893      	ldr	r3, [r2, #8]
}
    43e6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    43ea:	4770      	bx	lr
    43ec:	20002e78 	.word	0x20002e78
    43f0:	00015dc0 	.word	0x00015dc0
    43f4:	e000ed00 	.word	0xe000ed00

000043f8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    43f8:	4913      	ldr	r1, [pc, #76]	; (4448 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    43fa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    43fc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4400:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4402:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4406:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    440a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    440c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4410:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4414:	4f0d      	ldr	r7, [pc, #52]	; (444c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4416:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    441a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    441c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    441e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4420:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4424:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4426:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    442a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    442e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4430:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4432:	f000 fd17 	bl	4e64 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4436:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    443a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    443e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4442:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4446:	4770      	bx	lr
    ldr r1, =_kernel
    4448:	20002e78 	.word	0x20002e78
    ldr v4, =_SCS_ICSR
    444c:	e000ed04 	.word	0xe000ed04

00004450 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4450:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4454:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4456:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    445a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    445e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4460:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4464:	2902      	cmp	r1, #2
    beq _oops
    4466:	d0ff      	beq.n	4468 <_oops>

00004468 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4468:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    446a:	f00c ff88 	bl	1137e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    446e:	bd01      	pop	{r0, pc}

00004470 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4470:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4472:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4476:	490d      	ldr	r1, [pc, #52]	; (44ac <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4478:	f021 0101 	bic.w	r1, r1, #1
    447c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4480:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4484:	9b01      	ldr	r3, [sp, #4]
    4486:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    448a:	9b02      	ldr	r3, [sp, #8]
    448c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4490:	9b03      	ldr	r3, [sp, #12]
    4492:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    449a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    449e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    44a0:	2300      	movs	r3, #0
    44a2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    44a6:	bc10      	pop	{r4}
    44a8:	4770      	bx	lr
    44aa:	bf00      	nop
    44ac:	0000fc07 	.word	0x0000fc07

000044b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    44b0:	4b16      	ldr	r3, [pc, #88]	; (450c <z_check_thread_stack_fail+0x5c>)
    44b2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    44b4:	b1da      	cbz	r2, 44ee <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    44b6:	f110 0f16 	cmn.w	r0, #22
    44ba:	d01a      	beq.n	44f2 <z_check_thread_stack_fail+0x42>
{
    44bc:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    44be:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    44c2:	f1a3 0420 	sub.w	r4, r3, #32
    44c6:	4284      	cmp	r4, r0
    44c8:	d805      	bhi.n	44d6 <z_check_thread_stack_fail+0x26>
    44ca:	4283      	cmp	r3, r0
    44cc:	d908      	bls.n	44e0 <z_check_thread_stack_fail+0x30>
    44ce:	428b      	cmp	r3, r1
    44d0:	d808      	bhi.n	44e4 <z_check_thread_stack_fail+0x34>
    44d2:	2100      	movs	r1, #0
    44d4:	e000      	b.n	44d8 <z_check_thread_stack_fail+0x28>
    44d6:	2100      	movs	r1, #0
    44d8:	b931      	cbnz	r1, 44e8 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    44da:	2000      	movs	r0, #0
}
    44dc:	bc10      	pop	{r4}
    44de:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    44e0:	2100      	movs	r1, #0
    44e2:	e7f9      	b.n	44d8 <z_check_thread_stack_fail+0x28>
    44e4:	2101      	movs	r1, #1
    44e6:	e7f7      	b.n	44d8 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    44e8:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    44ec:	e7f6      	b.n	44dc <z_check_thread_stack_fail+0x2c>
		return 0;
    44ee:	2000      	movs	r0, #0
    44f0:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    44f2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    44f6:	428b      	cmp	r3, r1
    44f8:	bf94      	ite	ls
    44fa:	2100      	movls	r1, #0
    44fc:	2101      	movhi	r1, #1
    44fe:	b909      	cbnz	r1, 4504 <z_check_thread_stack_fail+0x54>
	return 0;
    4500:	2000      	movs	r0, #0
}
    4502:	4770      	bx	lr
		return thread->stack_info.start;
    4504:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4508:	4770      	bx	lr
    450a:	bf00      	nop
    450c:	20002e78 	.word	0x20002e78

00004510 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4510:	b508      	push	{r3, lr}
    4512:	460d      	mov	r5, r1
    4514:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4516:	4b08      	ldr	r3, [pc, #32]	; (4538 <arch_switch_to_main_thread+0x28>)
    4518:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    451a:	f000 fca3 	bl	4e64 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    451e:	4620      	mov	r0, r4
    4520:	f385 8809 	msr	PSP, r5
    4524:	2100      	movs	r1, #0
    4526:	b663      	cpsie	if
    4528:	f381 8811 	msr	BASEPRI, r1
    452c:	f3bf 8f6f 	isb	sy
    4530:	2200      	movs	r2, #0
    4532:	2300      	movs	r3, #0
    4534:	f00b fb67 	bl	fc06 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4538:	20002e78 	.word	0x20002e78

0000453c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    453c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    453e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4540:	4a0b      	ldr	r2, [pc, #44]	; (4570 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4542:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4544:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4546:	bf1e      	ittt	ne
	movne	r1, #0
    4548:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    454a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    454c:	f00f fb9d 	blne	13c8a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4550:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4552:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4556:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    455a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    455e:	4905      	ldr	r1, [pc, #20]	; (4574 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4560:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4562:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4564:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4566:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    456a:	4903      	ldr	r1, [pc, #12]	; (4578 <_isr_wrapper+0x3c>)
	bx r1
    456c:	4708      	bx	r1
    456e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4570:	20002e78 	.word	0x20002e78
	ldr r1, =_sw_isr_table
    4574:	00014508 	.word	0x00014508
	ldr r1, =z_arm_int_exit
    4578:	0000457d 	.word	0x0000457d

0000457c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    457c:	4b04      	ldr	r3, [pc, #16]	; (4590 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    457e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4580:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4582:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4584:	d003      	beq.n	458e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4586:	4903      	ldr	r1, [pc, #12]	; (4594 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    458c:	600a      	str	r2, [r1, #0]

0000458e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    458e:	4770      	bx	lr
	ldr r3, =_kernel
    4590:	20002e78 	.word	0x20002e78
	ldr r1, =_SCS_ICSR
    4594:	e000ed04 	.word	0xe000ed04

00004598 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    4598:	b508      	push	{r3, lr}
    459a:	4b4e      	ldr	r3, [pc, #312]	; (46d4 <usage_fault+0x13c>)
    459c:	4a4e      	ldr	r2, [pc, #312]	; (46d8 <usage_fault+0x140>)
    459e:	1a9b      	subs	r3, r3, r2
    45a0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    45a2:	f04f 0100 	mov.w	r1, #0
    45a6:	2201      	movs	r2, #1
    45a8:	f362 0102 	bfi	r1, r2, #0, #3
    45ac:	f36f 01c5 	bfc	r1, #3, #3
    45b0:	f363 118f 	bfi	r1, r3, #6, #10
    45b4:	4849      	ldr	r0, [pc, #292]	; (46dc <usage_fault+0x144>)
    45b6:	f7fd fc8f 	bl	1ed8 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    45ba:	4b49      	ldr	r3, [pc, #292]	; (46e0 <usage_fault+0x148>)
    45bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    45c2:	d121      	bne.n	4608 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    45c4:	4b46      	ldr	r3, [pc, #280]	; (46e0 <usage_fault+0x148>)
    45c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    45cc:	d12d      	bne.n	462a <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    45ce:	4b44      	ldr	r3, [pc, #272]	; (46e0 <usage_fault+0x148>)
    45d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45d2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    45d6:	d139      	bne.n	464c <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    45d8:	4b41      	ldr	r3, [pc, #260]	; (46e0 <usage_fault+0x148>)
    45da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    45e0:	d145      	bne.n	466e <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    45e2:	4b3f      	ldr	r3, [pc, #252]	; (46e0 <usage_fault+0x148>)
    45e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    45ea:	d151      	bne.n	4690 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    45ec:	4b3c      	ldr	r3, [pc, #240]	; (46e0 <usage_fault+0x148>)
    45ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    45f4:	d15d      	bne.n	46b2 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    45f6:	4a3a      	ldr	r2, [pc, #232]	; (46e0 <usage_fault+0x148>)
    45f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    45fa:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    45fe:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4602:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4604:	2000      	movs	r0, #0
    4606:	bd08      	pop	{r3, pc}
    4608:	4b32      	ldr	r3, [pc, #200]	; (46d4 <usage_fault+0x13c>)
    460a:	4a33      	ldr	r2, [pc, #204]	; (46d8 <usage_fault+0x140>)
    460c:	1a9b      	subs	r3, r3, r2
    460e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    4610:	f04f 0100 	mov.w	r1, #0
    4614:	2201      	movs	r2, #1
    4616:	f362 0102 	bfi	r1, r2, #0, #3
    461a:	f36f 01c5 	bfc	r1, #3, #3
    461e:	f363 118f 	bfi	r1, r3, #6, #10
    4622:	4830      	ldr	r0, [pc, #192]	; (46e4 <usage_fault+0x14c>)
    4624:	f7fd fc58 	bl	1ed8 <log_0>
    4628:	e7cc      	b.n	45c4 <usage_fault+0x2c>
    462a:	4b2a      	ldr	r3, [pc, #168]	; (46d4 <usage_fault+0x13c>)
    462c:	4a2a      	ldr	r2, [pc, #168]	; (46d8 <usage_fault+0x140>)
    462e:	1a9b      	subs	r3, r3, r2
    4630:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    4632:	f04f 0100 	mov.w	r1, #0
    4636:	2201      	movs	r2, #1
    4638:	f362 0102 	bfi	r1, r2, #0, #3
    463c:	f36f 01c5 	bfc	r1, #3, #3
    4640:	f363 118f 	bfi	r1, r3, #6, #10
    4644:	4828      	ldr	r0, [pc, #160]	; (46e8 <usage_fault+0x150>)
    4646:	f7fd fc47 	bl	1ed8 <log_0>
    464a:	e7c0      	b.n	45ce <usage_fault+0x36>
    464c:	4b21      	ldr	r3, [pc, #132]	; (46d4 <usage_fault+0x13c>)
    464e:	4a22      	ldr	r2, [pc, #136]	; (46d8 <usage_fault+0x140>)
    4650:	1a9b      	subs	r3, r3, r2
    4652:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    4654:	f04f 0100 	mov.w	r1, #0
    4658:	2201      	movs	r2, #1
    465a:	f362 0102 	bfi	r1, r2, #0, #3
    465e:	f36f 01c5 	bfc	r1, #3, #3
    4662:	f363 118f 	bfi	r1, r3, #6, #10
    4666:	4821      	ldr	r0, [pc, #132]	; (46ec <usage_fault+0x154>)
    4668:	f7fd fc36 	bl	1ed8 <log_0>
    466c:	e7b4      	b.n	45d8 <usage_fault+0x40>
    466e:	4b19      	ldr	r3, [pc, #100]	; (46d4 <usage_fault+0x13c>)
    4670:	4a19      	ldr	r2, [pc, #100]	; (46d8 <usage_fault+0x140>)
    4672:	1a9b      	subs	r3, r3, r2
    4674:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4676:	f04f 0100 	mov.w	r1, #0
    467a:	2201      	movs	r2, #1
    467c:	f362 0102 	bfi	r1, r2, #0, #3
    4680:	f36f 01c5 	bfc	r1, #3, #3
    4684:	f363 118f 	bfi	r1, r3, #6, #10
    4688:	4819      	ldr	r0, [pc, #100]	; (46f0 <usage_fault+0x158>)
    468a:	f7fd fc25 	bl	1ed8 <log_0>
    468e:	e7a8      	b.n	45e2 <usage_fault+0x4a>
    4690:	4b10      	ldr	r3, [pc, #64]	; (46d4 <usage_fault+0x13c>)
    4692:	4a11      	ldr	r2, [pc, #68]	; (46d8 <usage_fault+0x140>)
    4694:	1a9b      	subs	r3, r3, r2
    4696:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4698:	f04f 0100 	mov.w	r1, #0
    469c:	2201      	movs	r2, #1
    469e:	f362 0102 	bfi	r1, r2, #0, #3
    46a2:	f36f 01c5 	bfc	r1, #3, #3
    46a6:	f363 118f 	bfi	r1, r3, #6, #10
    46aa:	4812      	ldr	r0, [pc, #72]	; (46f4 <usage_fault+0x15c>)
    46ac:	f7fd fc14 	bl	1ed8 <log_0>
    46b0:	e79c      	b.n	45ec <usage_fault+0x54>
    46b2:	4b08      	ldr	r3, [pc, #32]	; (46d4 <usage_fault+0x13c>)
    46b4:	4a08      	ldr	r2, [pc, #32]	; (46d8 <usage_fault+0x140>)
    46b6:	1a9b      	subs	r3, r3, r2
    46b8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    46ba:	f04f 0100 	mov.w	r1, #0
    46be:	2201      	movs	r2, #1
    46c0:	f362 0102 	bfi	r1, r2, #0, #3
    46c4:	f36f 01c5 	bfc	r1, #3, #3
    46c8:	f363 118f 	bfi	r1, r3, #6, #10
    46cc:	480a      	ldr	r0, [pc, #40]	; (46f8 <usage_fault+0x160>)
    46ce:	f7fd fc03 	bl	1ed8 <log_0>
    46d2:	e790      	b.n	45f6 <usage_fault+0x5e>
    46d4:	000146b8 	.word	0x000146b8
    46d8:	00014688 	.word	0x00014688
    46dc:	00014fc8 	.word	0x00014fc8
    46e0:	e000ed00 	.word	0xe000ed00
    46e4:	00014fe0 	.word	0x00014fe0
    46e8:	00014ff4 	.word	0x00014ff4
    46ec:	00015010 	.word	0x00015010
    46f0:	00015030 	.word	0x00015030
    46f4:	00015058 	.word	0x00015058
    46f8:	00015074 	.word	0x00015074

000046fc <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    46fc:	b508      	push	{r3, lr}
	*recoverable = false;
    46fe:	2200      	movs	r2, #0
    4700:	700a      	strb	r2, [r1, #0]
    4702:	4b08      	ldr	r3, [pc, #32]	; (4724 <debug_monitor+0x28>)
    4704:	4908      	ldr	r1, [pc, #32]	; (4728 <debug_monitor+0x2c>)
    4706:	1a5b      	subs	r3, r3, r1
    4708:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    470a:	f04f 0100 	mov.w	r1, #0
    470e:	2001      	movs	r0, #1
    4710:	f360 0102 	bfi	r1, r0, #0, #3
    4714:	f362 01c5 	bfi	r1, r2, #3, #3
    4718:	f363 118f 	bfi	r1, r3, #6, #10
    471c:	4803      	ldr	r0, [pc, #12]	; (472c <debug_monitor+0x30>)
    471e:	f7fd fbdb 	bl	1ed8 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    4722:	bd08      	pop	{r3, pc}
    4724:	000146b8 	.word	0x000146b8
    4728:	00014688 	.word	0x00014688
    472c:	000150a0 	.word	0x000150a0

00004730 <bus_fault>:
{
    4730:	b570      	push	{r4, r5, r6, lr}
    4732:	4605      	mov	r5, r0
    4734:	460e      	mov	r6, r1
    4736:	4614      	mov	r4, r2
    4738:	4b5e      	ldr	r3, [pc, #376]	; (48b4 <bus_fault+0x184>)
    473a:	4a5f      	ldr	r2, [pc, #380]	; (48b8 <bus_fault+0x188>)
    473c:	1a9b      	subs	r3, r3, r2
    473e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    4740:	f04f 0100 	mov.w	r1, #0
    4744:	2201      	movs	r2, #1
    4746:	f362 0102 	bfi	r1, r2, #0, #3
    474a:	f36f 01c5 	bfc	r1, #3, #3
    474e:	f363 118f 	bfi	r1, r3, #6, #10
    4752:	485a      	ldr	r0, [pc, #360]	; (48bc <bus_fault+0x18c>)
    4754:	f7fd fbc0 	bl	1ed8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4758:	4b59      	ldr	r3, [pc, #356]	; (48c0 <bus_fault+0x190>)
    475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    475c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    4760:	d124      	bne.n	47ac <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4762:	4b57      	ldr	r3, [pc, #348]	; (48c0 <bus_fault+0x190>)
    4764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4766:	f413 6f00 	tst.w	r3, #2048	; 0x800
    476a:	d130      	bne.n	47ce <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    476c:	4b54      	ldr	r3, [pc, #336]	; (48c0 <bus_fault+0x190>)
    476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4770:	f413 7f00 	tst.w	r3, #512	; 0x200
    4774:	d13c      	bne.n	47f0 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4776:	4b52      	ldr	r3, [pc, #328]	; (48c0 <bus_fault+0x190>)
    4778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    477a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    477e:	d165      	bne.n	484c <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4780:	4b4f      	ldr	r3, [pc, #316]	; (48c0 <bus_fault+0x190>)
    4782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4784:	f413 7f80 	tst.w	r3, #256	; 0x100
    4788:	d171      	bne.n	486e <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    478a:	4b4d      	ldr	r3, [pc, #308]	; (48c0 <bus_fault+0x190>)
    478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    478e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4792:	d17d      	bne.n	4890 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4794:	4a4a      	ldr	r2, [pc, #296]	; (48c0 <bus_fault+0x190>)
    4796:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4798:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    479c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    479e:	2101      	movs	r1, #1
    47a0:	4628      	mov	r0, r5
    47a2:	f00c fdfe 	bl	113a2 <memory_fault_recoverable>
    47a6:	7020      	strb	r0, [r4, #0]
}
    47a8:	2000      	movs	r0, #0
    47aa:	bd70      	pop	{r4, r5, r6, pc}
    47ac:	4b41      	ldr	r3, [pc, #260]	; (48b4 <bus_fault+0x184>)
    47ae:	4a42      	ldr	r2, [pc, #264]	; (48b8 <bus_fault+0x188>)
    47b0:	1a9b      	subs	r3, r3, r2
    47b2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    47b4:	f04f 0100 	mov.w	r1, #0
    47b8:	2201      	movs	r2, #1
    47ba:	f362 0102 	bfi	r1, r2, #0, #3
    47be:	f36f 01c5 	bfc	r1, #3, #3
    47c2:	f363 118f 	bfi	r1, r3, #6, #10
    47c6:	483f      	ldr	r0, [pc, #252]	; (48c4 <bus_fault+0x194>)
    47c8:	f7fd fb86 	bl	1ed8 <log_0>
    47cc:	e7c9      	b.n	4762 <bus_fault+0x32>
    47ce:	4b39      	ldr	r3, [pc, #228]	; (48b4 <bus_fault+0x184>)
    47d0:	4a39      	ldr	r2, [pc, #228]	; (48b8 <bus_fault+0x188>)
    47d2:	1a9b      	subs	r3, r3, r2
    47d4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    47d6:	f04f 0100 	mov.w	r1, #0
    47da:	2201      	movs	r2, #1
    47dc:	f362 0102 	bfi	r1, r2, #0, #3
    47e0:	f36f 01c5 	bfc	r1, #3, #3
    47e4:	f363 118f 	bfi	r1, r3, #6, #10
    47e8:	4837      	ldr	r0, [pc, #220]	; (48c8 <bus_fault+0x198>)
    47ea:	f7fd fb75 	bl	1ed8 <log_0>
    47ee:	e7bd      	b.n	476c <bus_fault+0x3c>
    47f0:	4b30      	ldr	r3, [pc, #192]	; (48b4 <bus_fault+0x184>)
    47f2:	4a31      	ldr	r2, [pc, #196]	; (48b8 <bus_fault+0x188>)
    47f4:	1a9b      	subs	r3, r3, r2
    47f6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    47f8:	f04f 0100 	mov.w	r1, #0
    47fc:	2201      	movs	r2, #1
    47fe:	f362 0102 	bfi	r1, r2, #0, #3
    4802:	f36f 01c5 	bfc	r1, #3, #3
    4806:	f363 118f 	bfi	r1, r3, #6, #10
    480a:	4830      	ldr	r0, [pc, #192]	; (48cc <bus_fault+0x19c>)
    480c:	f7fd fb64 	bl	1ed8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    4810:	4b2b      	ldr	r3, [pc, #172]	; (48c0 <bus_fault+0x190>)
    4812:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4816:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    481a:	d0ac      	beq.n	4776 <bus_fault+0x46>
    481c:	4b25      	ldr	r3, [pc, #148]	; (48b4 <bus_fault+0x184>)
    481e:	4a26      	ldr	r2, [pc, #152]	; (48b8 <bus_fault+0x188>)
    4820:	1a9b      	subs	r3, r3, r2
    4822:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4824:	f04f 0200 	mov.w	r2, #0
    4828:	2001      	movs	r0, #1
    482a:	f360 0202 	bfi	r2, r0, #0, #3
    482e:	f36f 02c5 	bfc	r2, #3, #3
    4832:	f363 128f 	bfi	r2, r3, #6, #10
    4836:	4826      	ldr	r0, [pc, #152]	; (48d0 <bus_fault+0x1a0>)
    4838:	f7fd faba 	bl	1db0 <log_1>
			if (from_hard_fault != 0) {
    483c:	2e00      	cmp	r6, #0
    483e:	d09a      	beq.n	4776 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4840:	4a1f      	ldr	r2, [pc, #124]	; (48c0 <bus_fault+0x190>)
    4842:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4844:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4848:	6293      	str	r3, [r2, #40]	; 0x28
    484a:	e794      	b.n	4776 <bus_fault+0x46>
    484c:	4b19      	ldr	r3, [pc, #100]	; (48b4 <bus_fault+0x184>)
    484e:	4a1a      	ldr	r2, [pc, #104]	; (48b8 <bus_fault+0x188>)
    4850:	1a9b      	subs	r3, r3, r2
    4852:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    4854:	f04f 0100 	mov.w	r1, #0
    4858:	2201      	movs	r2, #1
    485a:	f362 0102 	bfi	r1, r2, #0, #3
    485e:	f36f 01c5 	bfc	r1, #3, #3
    4862:	f363 118f 	bfi	r1, r3, #6, #10
    4866:	481b      	ldr	r0, [pc, #108]	; (48d4 <bus_fault+0x1a4>)
    4868:	f7fd fb36 	bl	1ed8 <log_0>
    486c:	e788      	b.n	4780 <bus_fault+0x50>
    486e:	4b11      	ldr	r3, [pc, #68]	; (48b4 <bus_fault+0x184>)
    4870:	4a11      	ldr	r2, [pc, #68]	; (48b8 <bus_fault+0x188>)
    4872:	1a9b      	subs	r3, r3, r2
    4874:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    4876:	f04f 0100 	mov.w	r1, #0
    487a:	2201      	movs	r2, #1
    487c:	f362 0102 	bfi	r1, r2, #0, #3
    4880:	f36f 01c5 	bfc	r1, #3, #3
    4884:	f363 118f 	bfi	r1, r3, #6, #10
    4888:	4813      	ldr	r0, [pc, #76]	; (48d8 <bus_fault+0x1a8>)
    488a:	f7fd fb25 	bl	1ed8 <log_0>
    488e:	e781      	b.n	4794 <bus_fault+0x64>
    4890:	4b08      	ldr	r3, [pc, #32]	; (48b4 <bus_fault+0x184>)
    4892:	4a09      	ldr	r2, [pc, #36]	; (48b8 <bus_fault+0x188>)
    4894:	1a9b      	subs	r3, r3, r2
    4896:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4898:	f04f 0100 	mov.w	r1, #0
    489c:	2201      	movs	r2, #1
    489e:	f362 0102 	bfi	r1, r2, #0, #3
    48a2:	f36f 01c5 	bfc	r1, #3, #3
    48a6:	f363 118f 	bfi	r1, r3, #6, #10
    48aa:	480c      	ldr	r0, [pc, #48]	; (48dc <bus_fault+0x1ac>)
    48ac:	f7fd fb14 	bl	1ed8 <log_0>
    48b0:	e770      	b.n	4794 <bus_fault+0x64>
    48b2:	bf00      	nop
    48b4:	000146b8 	.word	0x000146b8
    48b8:	00014688 	.word	0x00014688
    48bc:	000150c4 	.word	0x000150c4
    48c0:	e000ed00 	.word	0xe000ed00
    48c4:	000150dc 	.word	0x000150dc
    48c8:	000150f0 	.word	0x000150f0
    48cc:	00015104 	.word	0x00015104
    48d0:	00015120 	.word	0x00015120
    48d4:	00015138 	.word	0x00015138
    48d8:	00015154 	.word	0x00015154
    48dc:	0001516c 	.word	0x0001516c

000048e0 <mem_manage_fault>:
{
    48e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e2:	4605      	mov	r5, r0
    48e4:	460c      	mov	r4, r1
    48e6:	4616      	mov	r6, r2
    48e8:	4b64      	ldr	r3, [pc, #400]	; (4a7c <mem_manage_fault+0x19c>)
    48ea:	4a65      	ldr	r2, [pc, #404]	; (4a80 <mem_manage_fault+0x1a0>)
    48ec:	1a9b      	subs	r3, r3, r2
    48ee:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    48f0:	f04f 0100 	mov.w	r1, #0
    48f4:	2201      	movs	r2, #1
    48f6:	f362 0102 	bfi	r1, r2, #0, #3
    48fa:	f36f 01c5 	bfc	r1, #3, #3
    48fe:	f363 118f 	bfi	r1, r3, #6, #10
    4902:	4860      	ldr	r0, [pc, #384]	; (4a84 <mem_manage_fault+0x1a4>)
    4904:	f7fd fae8 	bl	1ed8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4908:	4b5f      	ldr	r3, [pc, #380]	; (4a88 <mem_manage_fault+0x1a8>)
    490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    490c:	f013 0f10 	tst.w	r3, #16
    4910:	d132      	bne.n	4978 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4912:	4b5d      	ldr	r3, [pc, #372]	; (4a88 <mem_manage_fault+0x1a8>)
    4914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4916:	f013 0f08 	tst.w	r3, #8
    491a:	d13e      	bne.n	499a <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    491c:	4b5a      	ldr	r3, [pc, #360]	; (4a88 <mem_manage_fault+0x1a8>)
    491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4920:	f013 0f02 	tst.w	r3, #2
    4924:	d14a      	bne.n	49bc <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    4926:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    492a:	4b57      	ldr	r3, [pc, #348]	; (4a88 <mem_manage_fault+0x1a8>)
    492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    492e:	f013 0f01 	tst.w	r3, #1
    4932:	d175      	bne.n	4a20 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4934:	4b54      	ldr	r3, [pc, #336]	; (4a88 <mem_manage_fault+0x1a8>)
    4936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4938:	f013 0f20 	tst.w	r3, #32
    493c:	f040 8081 	bne.w	4a42 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4940:	4b51      	ldr	r3, [pc, #324]	; (4a88 <mem_manage_fault+0x1a8>)
    4942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4944:	f013 0f10 	tst.w	r3, #16
    4948:	d104      	bne.n	4954 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    494a:	4b4f      	ldr	r3, [pc, #316]	; (4a88 <mem_manage_fault+0x1a8>)
    494c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    494e:	f014 0402 	ands.w	r4, r4, #2
    4952:	d005      	beq.n	4960 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4954:	4b4c      	ldr	r3, [pc, #304]	; (4a88 <mem_manage_fault+0x1a8>)
    4956:	685c      	ldr	r4, [r3, #4]
    4958:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    495c:	f040 8082 	bne.w	4a64 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4960:	4a49      	ldr	r2, [pc, #292]	; (4a88 <mem_manage_fault+0x1a8>)
    4962:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4964:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4968:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    496a:	2101      	movs	r1, #1
    496c:	4628      	mov	r0, r5
    496e:	f00c fd18 	bl	113a2 <memory_fault_recoverable>
    4972:	7030      	strb	r0, [r6, #0]
}
    4974:	4620      	mov	r0, r4
    4976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4978:	4b40      	ldr	r3, [pc, #256]	; (4a7c <mem_manage_fault+0x19c>)
    497a:	4a41      	ldr	r2, [pc, #260]	; (4a80 <mem_manage_fault+0x1a0>)
    497c:	1a9b      	subs	r3, r3, r2
    497e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    4980:	f04f 0100 	mov.w	r1, #0
    4984:	2201      	movs	r2, #1
    4986:	f362 0102 	bfi	r1, r2, #0, #3
    498a:	f36f 01c5 	bfc	r1, #3, #3
    498e:	f363 118f 	bfi	r1, r3, #6, #10
    4992:	483e      	ldr	r0, [pc, #248]	; (4a8c <mem_manage_fault+0x1ac>)
    4994:	f7fd faa0 	bl	1ed8 <log_0>
    4998:	e7bb      	b.n	4912 <mem_manage_fault+0x32>
    499a:	4b38      	ldr	r3, [pc, #224]	; (4a7c <mem_manage_fault+0x19c>)
    499c:	4a38      	ldr	r2, [pc, #224]	; (4a80 <mem_manage_fault+0x1a0>)
    499e:	1a9b      	subs	r3, r3, r2
    49a0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    49a2:	f04f 0100 	mov.w	r1, #0
    49a6:	2201      	movs	r2, #1
    49a8:	f362 0102 	bfi	r1, r2, #0, #3
    49ac:	f36f 01c5 	bfc	r1, #3, #3
    49b0:	f363 118f 	bfi	r1, r3, #6, #10
    49b4:	4836      	ldr	r0, [pc, #216]	; (4a90 <mem_manage_fault+0x1b0>)
    49b6:	f7fd fa8f 	bl	1ed8 <log_0>
    49ba:	e7af      	b.n	491c <mem_manage_fault+0x3c>
    49bc:	4b2f      	ldr	r3, [pc, #188]	; (4a7c <mem_manage_fault+0x19c>)
    49be:	4a30      	ldr	r2, [pc, #192]	; (4a80 <mem_manage_fault+0x1a0>)
    49c0:	1a9b      	subs	r3, r3, r2
    49c2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    49c4:	f04f 0100 	mov.w	r1, #0
    49c8:	2201      	movs	r2, #1
    49ca:	f362 0102 	bfi	r1, r2, #0, #3
    49ce:	f36f 01c5 	bfc	r1, #3, #3
    49d2:	f363 118f 	bfi	r1, r3, #6, #10
    49d6:	482f      	ldr	r0, [pc, #188]	; (4a94 <mem_manage_fault+0x1b4>)
    49d8:	f7fd fa7e 	bl	1ed8 <log_0>
		uint32_t temp = SCB->MMFAR;
    49dc:	4b2a      	ldr	r3, [pc, #168]	; (4a88 <mem_manage_fault+0x1a8>)
    49de:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    49e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49e2:	f013 0f80 	tst.w	r3, #128	; 0x80
    49e6:	d102      	bne.n	49ee <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    49e8:	f06f 0715 	mvn.w	r7, #21
    49ec:	e79d      	b.n	492a <mem_manage_fault+0x4a>
    49ee:	4b23      	ldr	r3, [pc, #140]	; (4a7c <mem_manage_fault+0x19c>)
    49f0:	4a23      	ldr	r2, [pc, #140]	; (4a80 <mem_manage_fault+0x1a0>)
    49f2:	1a9b      	subs	r3, r3, r2
    49f4:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    49f6:	f04f 0200 	mov.w	r2, #0
    49fa:	2101      	movs	r1, #1
    49fc:	f361 0202 	bfi	r2, r1, #0, #3
    4a00:	f36f 02c5 	bfc	r2, #3, #3
    4a04:	f363 128f 	bfi	r2, r3, #6, #10
    4a08:	4639      	mov	r1, r7
    4a0a:	4823      	ldr	r0, [pc, #140]	; (4a98 <mem_manage_fault+0x1b8>)
    4a0c:	f7fd f9d0 	bl	1db0 <log_1>
			if (from_hard_fault != 0) {
    4a10:	2c00      	cmp	r4, #0
    4a12:	d08a      	beq.n	492a <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4a14:	4a1c      	ldr	r2, [pc, #112]	; (4a88 <mem_manage_fault+0x1a8>)
    4a16:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4a1c:	6293      	str	r3, [r2, #40]	; 0x28
    4a1e:	e784      	b.n	492a <mem_manage_fault+0x4a>
    4a20:	4b16      	ldr	r3, [pc, #88]	; (4a7c <mem_manage_fault+0x19c>)
    4a22:	4a17      	ldr	r2, [pc, #92]	; (4a80 <mem_manage_fault+0x1a0>)
    4a24:	1a9b      	subs	r3, r3, r2
    4a26:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    4a28:	f04f 0100 	mov.w	r1, #0
    4a2c:	2201      	movs	r2, #1
    4a2e:	f362 0102 	bfi	r1, r2, #0, #3
    4a32:	f36f 01c5 	bfc	r1, #3, #3
    4a36:	f363 118f 	bfi	r1, r3, #6, #10
    4a3a:	4818      	ldr	r0, [pc, #96]	; (4a9c <mem_manage_fault+0x1bc>)
    4a3c:	f7fd fa4c 	bl	1ed8 <log_0>
    4a40:	e778      	b.n	4934 <mem_manage_fault+0x54>
    4a42:	4b0e      	ldr	r3, [pc, #56]	; (4a7c <mem_manage_fault+0x19c>)
    4a44:	4a0e      	ldr	r2, [pc, #56]	; (4a80 <mem_manage_fault+0x1a0>)
    4a46:	1a9b      	subs	r3, r3, r2
    4a48:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    4a4a:	f04f 0100 	mov.w	r1, #0
    4a4e:	2201      	movs	r2, #1
    4a50:	f362 0102 	bfi	r1, r2, #0, #3
    4a54:	f36f 01c5 	bfc	r1, #3, #3
    4a58:	f363 118f 	bfi	r1, r3, #6, #10
    4a5c:	4810      	ldr	r0, [pc, #64]	; (4aa0 <mem_manage_fault+0x1c0>)
    4a5e:	f7fd fa3b 	bl	1ed8 <log_0>
    4a62:	e76d      	b.n	4940 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4a64:	4629      	mov	r1, r5
    4a66:	4638      	mov	r0, r7
    4a68:	f7ff fd22 	bl	44b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4a6c:	4604      	mov	r4, r0
    4a6e:	2800      	cmp	r0, #0
    4a70:	f43f af76 	beq.w	4960 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4a74:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4a78:	2402      	movs	r4, #2
    4a7a:	e771      	b.n	4960 <mem_manage_fault+0x80>
    4a7c:	000146b8 	.word	0x000146b8
    4a80:	00014688 	.word	0x00014688
    4a84:	0001519c 	.word	0x0001519c
    4a88:	e000ed00 	.word	0xe000ed00
    4a8c:	000151b4 	.word	0x000151b4
    4a90:	000150f0 	.word	0x000150f0
    4a94:	000151e8 	.word	0x000151e8
    4a98:	00015200 	.word	0x00015200
    4a9c:	00015218 	.word	0x00015218
    4aa0:	0001516c 	.word	0x0001516c

00004aa4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4aa4:	b570      	push	{r4, r5, r6, lr}
    4aa6:	4605      	mov	r5, r0
    4aa8:	460c      	mov	r4, r1
    4aaa:	4b47      	ldr	r3, [pc, #284]	; (4bc8 <hard_fault+0x124>)
    4aac:	4a47      	ldr	r2, [pc, #284]	; (4bcc <hard_fault+0x128>)
    4aae:	1a9b      	subs	r3, r3, r2
    4ab0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    4ab2:	f04f 0100 	mov.w	r1, #0
    4ab6:	2201      	movs	r2, #1
    4ab8:	f362 0102 	bfi	r1, r2, #0, #3
    4abc:	f36f 01c5 	bfc	r1, #3, #3
    4ac0:	f363 118f 	bfi	r1, r3, #6, #10
    4ac4:	4842      	ldr	r0, [pc, #264]	; (4bd0 <hard_fault+0x12c>)
    4ac6:	f7fd fa07 	bl	1ed8 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4aca:	2300      	movs	r3, #0
    4acc:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4ace:	4b41      	ldr	r3, [pc, #260]	; (4bd4 <hard_fault+0x130>)
    4ad0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    4ad2:	f016 0602 	ands.w	r6, r6, #2
    4ad6:	d109      	bne.n	4aec <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4ad8:	4b3e      	ldr	r3, [pc, #248]	; (4bd4 <hard_fault+0x130>)
    4ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4adc:	2b00      	cmp	r3, #0
    4ade:	db17      	blt.n	4b10 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4ae0:	4b3c      	ldr	r3, [pc, #240]	; (4bd4 <hard_fault+0x130>)
    4ae2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4ae4:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    4ae8:	d124      	bne.n	4b34 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4aea:	bd70      	pop	{r4, r5, r6, pc}
    4aec:	4b36      	ldr	r3, [pc, #216]	; (4bc8 <hard_fault+0x124>)
    4aee:	4a37      	ldr	r2, [pc, #220]	; (4bcc <hard_fault+0x128>)
    4af0:	1a9b      	subs	r3, r3, r2
    4af2:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    4af4:	f04f 0100 	mov.w	r1, #0
    4af8:	2201      	movs	r2, #1
    4afa:	f362 0102 	bfi	r1, r2, #0, #3
    4afe:	f36f 01c5 	bfc	r1, #3, #3
    4b02:	f363 118f 	bfi	r1, r3, #6, #10
    4b06:	4834      	ldr	r0, [pc, #208]	; (4bd8 <hard_fault+0x134>)
    4b08:	f7fd f9e6 	bl	1ed8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4b0c:	2000      	movs	r0, #0
    4b0e:	e7ec      	b.n	4aea <hard_fault+0x46>
    4b10:	4b2d      	ldr	r3, [pc, #180]	; (4bc8 <hard_fault+0x124>)
    4b12:	4a2e      	ldr	r2, [pc, #184]	; (4bcc <hard_fault+0x128>)
    4b14:	1a9b      	subs	r3, r3, r2
    4b16:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    4b18:	f04f 0100 	mov.w	r1, #0
    4b1c:	2201      	movs	r2, #1
    4b1e:	f362 0102 	bfi	r1, r2, #0, #3
    4b22:	f36f 01c5 	bfc	r1, #3, #3
    4b26:	f363 118f 	bfi	r1, r3, #6, #10
    4b2a:	482c      	ldr	r0, [pc, #176]	; (4bdc <hard_fault+0x138>)
    4b2c:	f7fd f9d4 	bl	1ed8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4b30:	4630      	mov	r0, r6
    4b32:	e7da      	b.n	4aea <hard_fault+0x46>
    4b34:	4b24      	ldr	r3, [pc, #144]	; (4bc8 <hard_fault+0x124>)
    4b36:	4a25      	ldr	r2, [pc, #148]	; (4bcc <hard_fault+0x128>)
    4b38:	1a9b      	subs	r3, r3, r2
    4b3a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    4b3c:	f04f 0100 	mov.w	r1, #0
    4b40:	2201      	movs	r2, #1
    4b42:	f362 0102 	bfi	r1, r2, #0, #3
    4b46:	f36f 01c5 	bfc	r1, #3, #3
    4b4a:	f363 118f 	bfi	r1, r3, #6, #10
    4b4e:	4824      	ldr	r0, [pc, #144]	; (4be0 <hard_fault+0x13c>)
    4b50:	f7fd f9c2 	bl	1ed8 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4b54:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4b56:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4b5a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4b5e:	429a      	cmp	r2, r3
    4b60:	d00e      	beq.n	4b80 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    4b62:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4b66:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    4b6a:	781b      	ldrb	r3, [r3, #0]
    4b6c:	b9db      	cbnz	r3, 4ba6 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    4b6e:	4b1d      	ldr	r3, [pc, #116]	; (4be4 <hard_fault+0x140>)
    4b70:	781b      	ldrb	r3, [r3, #0]
    4b72:	b9f3      	cbnz	r3, 4bb2 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    4b74:	4b1c      	ldr	r3, [pc, #112]	; (4be8 <hard_fault+0x144>)
    4b76:	881b      	ldrh	r3, [r3, #0]
    4b78:	b29b      	uxth	r3, r3
    4b7a:	bb03      	cbnz	r3, 4bbe <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4b7c:	4630      	mov	r0, r6
	return reason;
    4b7e:	e7b4      	b.n	4aea <hard_fault+0x46>
    4b80:	4b11      	ldr	r3, [pc, #68]	; (4bc8 <hard_fault+0x124>)
    4b82:	4a12      	ldr	r2, [pc, #72]	; (4bcc <hard_fault+0x128>)
    4b84:	1a9b      	subs	r3, r3, r2
    4b86:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4b88:	f04f 0200 	mov.w	r2, #0
    4b8c:	2101      	movs	r1, #1
    4b8e:	f361 0202 	bfi	r2, r1, #0, #3
    4b92:	f36f 02c5 	bfc	r2, #3, #3
    4b96:	f363 128f 	bfi	r2, r3, #6, #10
    4b9a:	6829      	ldr	r1, [r5, #0]
    4b9c:	4813      	ldr	r0, [pc, #76]	; (4bec <hard_fault+0x148>)
    4b9e:	f7fd f907 	bl	1db0 <log_1>
			reason = esf->basic.r0;
    4ba2:	6828      	ldr	r0, [r5, #0]
    4ba4:	e7a1      	b.n	4aea <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    4ba6:	4622      	mov	r2, r4
    4ba8:	2101      	movs	r1, #1
    4baa:	4628      	mov	r0, r5
    4bac:	f7ff fe98 	bl	48e0 <mem_manage_fault>
    4bb0:	e79b      	b.n	4aea <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    4bb2:	4622      	mov	r2, r4
    4bb4:	2101      	movs	r1, #1
    4bb6:	4628      	mov	r0, r5
    4bb8:	f7ff fdba 	bl	4730 <bus_fault>
    4bbc:	e795      	b.n	4aea <hard_fault+0x46>
			reason = usage_fault(esf);
    4bbe:	4628      	mov	r0, r5
    4bc0:	f7ff fcea 	bl	4598 <usage_fault>
    4bc4:	e791      	b.n	4aea <hard_fault+0x46>
    4bc6:	bf00      	nop
    4bc8:	000146b8 	.word	0x000146b8
    4bcc:	00014688 	.word	0x00014688
    4bd0:	00015238 	.word	0x00015238
    4bd4:	e000ed00 	.word	0xe000ed00
    4bd8:	00015250 	.word	0x00015250
    4bdc:	00015274 	.word	0x00015274
    4be0:	00015284 	.word	0x00015284
    4be4:	e000ed29 	.word	0xe000ed29
    4be8:	e000ed2a 	.word	0xe000ed2a
    4bec:	000152a4 	.word	0x000152a4

00004bf0 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    4bf0:	b508      	push	{r3, lr}
    4bf2:	460a      	mov	r2, r1
    4bf4:	480b      	ldr	r0, [pc, #44]	; (4c24 <reserved_exception+0x34>)
    4bf6:	4b0c      	ldr	r3, [pc, #48]	; (4c28 <reserved_exception+0x38>)
    4bf8:	1ac0      	subs	r0, r0, r3
    4bfa:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    4bfc:	f04f 0300 	mov.w	r3, #0
    4c00:	2101      	movs	r1, #1
    4c02:	f361 0302 	bfi	r3, r1, #0, #3
    4c06:	f36f 03c5 	bfc	r3, #3, #3
    4c0a:	f360 138f 	bfi	r3, r0, #6, #10
    4c0e:	2a0f      	cmp	r2, #15
    4c10:	dc05      	bgt.n	4c1e <reserved_exception+0x2e>
    4c12:	4906      	ldr	r1, [pc, #24]	; (4c2c <reserved_exception+0x3c>)
    4c14:	3a10      	subs	r2, #16
    4c16:	4806      	ldr	r0, [pc, #24]	; (4c30 <reserved_exception+0x40>)
    4c18:	f7fd f900 	bl	1e1c <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    4c1c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    4c1e:	4905      	ldr	r1, [pc, #20]	; (4c34 <reserved_exception+0x44>)
    4c20:	e7f8      	b.n	4c14 <reserved_exception+0x24>
    4c22:	bf00      	nop
    4c24:	000146b8 	.word	0x000146b8
    4c28:	00014688 	.word	0x00014688
    4c2c:	000152c0 	.word	0x000152c0
    4c30:	000152f4 	.word	0x000152f4
    4c34:	000152d8 	.word	0x000152d8

00004c38 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4c38:	b570      	push	{r4, r5, r6, lr}
    4c3a:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4c3c:	4b2b      	ldr	r3, [pc, #172]	; (4cec <z_arm_fault+0xb4>)
    4c3e:	685d      	ldr	r5, [r3, #4]
    4c40:	f3c5 0508 	ubfx	r5, r5, #0, #9
    4c44:	2300      	movs	r3, #0
    4c46:	f383 8811 	msr	BASEPRI, r3
    4c4a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4c4e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4c52:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4c56:	d12a      	bne.n	4cae <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4c58:	f002 030c 	and.w	r3, r2, #12
    4c5c:	2b08      	cmp	r3, #8
    4c5e:	d010      	beq.n	4c82 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4c60:	f012 0f08 	tst.w	r2, #8
    4c64:	d020      	beq.n	4ca8 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    4c66:	460c      	mov	r4, r1
	*nested_exc = false;
    4c68:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4c6a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    4c6e:	4629      	mov	r1, r5
    4c70:	4620      	mov	r0, r4
    4c72:	f00c fb98 	bl	113a6 <fault_handle>
    4c76:	4605      	mov	r5, r0
	if (recoverable) {
    4c78:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4c7c:	b1d3      	cbz	r3, 4cb4 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4c7e:	b00a      	add	sp, #40	; 0x28
    4c80:	bd70      	pop	{r4, r5, r6, pc}
    4c82:	4b1b      	ldr	r3, [pc, #108]	; (4cf0 <z_arm_fault+0xb8>)
    4c84:	4a1b      	ldr	r2, [pc, #108]	; (4cf4 <z_arm_fault+0xbc>)
    4c86:	1a9b      	subs	r3, r3, r2
    4c88:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4c8a:	f04f 0100 	mov.w	r1, #0
    4c8e:	2201      	movs	r2, #1
    4c90:	f362 0102 	bfi	r1, r2, #0, #3
    4c94:	f36f 01c5 	bfc	r1, #3, #3
    4c98:	f363 118f 	bfi	r1, r3, #6, #10
    4c9c:	4816      	ldr	r0, [pc, #88]	; (4cf8 <z_arm_fault+0xc0>)
    4c9e:	f7fd f91b 	bl	1ed8 <log_0>
	*nested_exc = false;
    4ca2:	2600      	movs	r6, #0
		return NULL;
    4ca4:	4634      	mov	r4, r6
    4ca6:	e7e0      	b.n	4c6a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4ca8:	4604      	mov	r4, r0
			*nested_exc = true;
    4caa:	2601      	movs	r6, #1
    4cac:	e7dd      	b.n	4c6a <z_arm_fault+0x32>
	*nested_exc = false;
    4cae:	2600      	movs	r6, #0
		return NULL;
    4cb0:	4634      	mov	r4, r6
    4cb2:	e7da      	b.n	4c6a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4cb4:	2220      	movs	r2, #32
    4cb6:	4621      	mov	r1, r4
    4cb8:	a801      	add	r0, sp, #4
    4cba:	f00c fc4f 	bl	1155c <memcpy>
	if (nested_exc) {
    4cbe:	b14e      	cbz	r6, 4cd4 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4cc0:	9b08      	ldr	r3, [sp, #32]
    4cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4cc6:	b95a      	cbnz	r2, 4ce0 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4cc8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4ccc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4cd0:	9308      	str	r3, [sp, #32]
    4cd2:	e005      	b.n	4ce0 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4cd4:	9b08      	ldr	r3, [sp, #32]
    4cd6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4cda:	f023 0301 	bic.w	r3, r3, #1
    4cde:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    4ce0:	a901      	add	r1, sp, #4
    4ce2:	4628      	mov	r0, r5
    4ce4:	f00c fb3f 	bl	11366 <z_arm_fatal_error>
    4ce8:	e7c9      	b.n	4c7e <z_arm_fault+0x46>
    4cea:	bf00      	nop
    4cec:	e000ed00 	.word	0xe000ed00
    4cf0:	000146b8 	.word	0x000146b8
    4cf4:	00014688 	.word	0x00014688
    4cf8:	00015308 	.word	0x00015308

00004cfc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4cfc:	4a02      	ldr	r2, [pc, #8]	; (4d08 <z_arm_fault_init+0xc>)
    4cfe:	6953      	ldr	r3, [r2, #20]
    4d00:	f043 0310 	orr.w	r3, r3, #16
    4d04:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4d06:	4770      	bx	lr
    4d08:	e000ed00 	.word	0xe000ed00

00004d0c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4d0c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4d10:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4d14:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4d16:	4672      	mov	r2, lr
	bl z_arm_fault
    4d18:	f7ff ff8e 	bl	4c38 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4d1c:	bd01      	pop	{r0, pc}
    4d1e:	bf00      	nop

00004d20 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4d20:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4d22:	e006      	b.n	4d32 <z_arm_interrupt_init+0x12>
    4d24:	f002 010f 	and.w	r1, r2, #15
    4d28:	4b09      	ldr	r3, [pc, #36]	; (4d50 <z_arm_interrupt_init+0x30>)
    4d2a:	440b      	add	r3, r1
    4d2c:	2120      	movs	r1, #32
    4d2e:	7619      	strb	r1, [r3, #24]
    4d30:	3201      	adds	r2, #1
    4d32:	2a2f      	cmp	r2, #47	; 0x2f
    4d34:	dc0a      	bgt.n	4d4c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4d36:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4d38:	2b00      	cmp	r3, #0
    4d3a:	dbf3      	blt.n	4d24 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4d3c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4d40:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4d44:	2120      	movs	r1, #32
    4d46:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4d4a:	e7f1      	b.n	4d30 <z_arm_interrupt_init+0x10>
	}
}
    4d4c:	4770      	bx	lr
    4d4e:	bf00      	nop
    4d50:	e000ecfc 	.word	0xe000ecfc

00004d54 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4d54:	2000      	movs	r0, #0
    msr CONTROL, r0
    4d56:	f380 8814 	msr	CONTROL, r0
    isb
    4d5a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4d5e:	f00f fb25 	bl	143ac <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4d62:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4d64:	490d      	ldr	r1, [pc, #52]	; (4d9c <__start+0x48>)
    str r0, [r1]
    4d66:	6008      	str	r0, [r1, #0]
    dsb
    4d68:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4d6c:	480c      	ldr	r0, [pc, #48]	; (4da0 <__start+0x4c>)
    msr msp, r0
    4d6e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4d72:	f000 f829 	bl	4dc8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4d76:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4d78:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4d7c:	4809      	ldr	r0, [pc, #36]	; (4da4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4d7e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4d82:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4d84:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4d88:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4d8c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4d8e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4d90:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4d94:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4d98:	f7ff faf6 	bl	4388 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4d9c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4da0:	20004400 	.word	0x20004400
    ldr r0, =z_interrupt_stacks
    4da4:	20004580 	.word	0x20004580

00004da8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4da8:	4b06      	ldr	r3, [pc, #24]	; (4dc4 <z_arm_clear_arm_mpu_config+0x1c>)
    4daa:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4dac:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4db0:	2300      	movs	r3, #0
    4db2:	4283      	cmp	r3, r0
    4db4:	da05      	bge.n	4dc2 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4db6:	4a03      	ldr	r2, [pc, #12]	; (4dc4 <z_arm_clear_arm_mpu_config+0x1c>)
    4db8:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4dba:	2100      	movs	r1, #0
    4dbc:	6111      	str	r1, [r2, #16]
    4dbe:	3301      	adds	r3, #1
    4dc0:	e7f7      	b.n	4db2 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    4dc2:	4770      	bx	lr
    4dc4:	e000ed90 	.word	0xe000ed90

00004dc8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4dc8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4dca:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4dcc:	2400      	movs	r4, #0
    4dce:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4dd2:	f7ff ffe9 	bl	4da8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4dd6:	4623      	mov	r3, r4
    4dd8:	e008      	b.n	4dec <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4dda:	f103 0120 	add.w	r1, r3, #32
    4dde:	4a0e      	ldr	r2, [pc, #56]	; (4e18 <z_arm_init_arch_hw_at_boot+0x50>)
    4de0:	f04f 30ff 	mov.w	r0, #4294967295
    4de4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4de8:	3301      	adds	r3, #1
    4dea:	b2db      	uxtb	r3, r3
    4dec:	2b07      	cmp	r3, #7
    4dee:	d9f4      	bls.n	4dda <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4df0:	2300      	movs	r3, #0
    4df2:	e008      	b.n	4e06 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4df4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4df8:	4a07      	ldr	r2, [pc, #28]	; (4e18 <z_arm_init_arch_hw_at_boot+0x50>)
    4dfa:	f04f 30ff 	mov.w	r0, #4294967295
    4dfe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4e02:	3301      	adds	r3, #1
    4e04:	b2db      	uxtb	r3, r3
    4e06:	2b07      	cmp	r3, #7
    4e08:	d9f4      	bls.n	4df4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4e0a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4e0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e10:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4e14:	bd10      	pop	{r4, pc}
    4e16:	bf00      	nop
    4e18:	e000e100 	.word	0xe000e100

00004e1c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4e1c:	b508      	push	{r3, lr}
	if (_current == thread) {
    4e1e:	4b08      	ldr	r3, [pc, #32]	; (4e40 <z_impl_k_thread_abort+0x24>)
    4e20:	689b      	ldr	r3, [r3, #8]
    4e22:	4283      	cmp	r3, r0
    4e24:	d002      	beq.n	4e2c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    4e26:	f00a f819 	bl	ee5c <z_thread_abort>
}
    4e2a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4e2c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4e30:	2b00      	cmp	r3, #0
    4e32:	d0f8      	beq.n	4e26 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4e34:	4a03      	ldr	r2, [pc, #12]	; (4e44 <z_impl_k_thread_abort+0x28>)
    4e36:	6853      	ldr	r3, [r2, #4]
    4e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4e3c:	6053      	str	r3, [r2, #4]
    4e3e:	e7f2      	b.n	4e26 <z_impl_k_thread_abort+0xa>
    4e40:	20002e78 	.word	0x20002e78
    4e44:	e000ed00 	.word	0xe000ed00

00004e48 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4e48:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4e4a:	4b03      	ldr	r3, [pc, #12]	; (4e58 <z_arm_configure_static_mpu_regions+0x10>)
    4e4c:	4a03      	ldr	r2, [pc, #12]	; (4e5c <z_arm_configure_static_mpu_regions+0x14>)
    4e4e:	2101      	movs	r1, #1
    4e50:	4803      	ldr	r0, [pc, #12]	; (4e60 <z_arm_configure_static_mpu_regions+0x18>)
    4e52:	f00c fafd 	bl	11450 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4e56:	bd08      	pop	{r3, pc}
    4e58:	20040000 	.word	0x20040000
    4e5c:	20000000 	.word	0x20000000
    4e60:	00015338 	.word	0x00015338

00004e64 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4e64:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4e66:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4e6a:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4e6c:	4804      	ldr	r0, [pc, #16]	; (4e80 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4e6e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4e70:	2320      	movs	r3, #32
    4e72:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4e74:	4b03      	ldr	r3, [pc, #12]	; (4e84 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4e76:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4e78:	2101      	movs	r1, #1
    4e7a:	f00c faed 	bl	11458 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4e7e:	bd08      	pop	{r3, pc}
    4e80:	20001d54 	.word	0x20001d54
    4e84:	150b0000 	.word	0x150b0000

00004e88 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4e88:	4a06      	ldr	r2, [pc, #24]	; (4ea4 <region_init+0x1c>)
    4e8a:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4e8c:	680b      	ldr	r3, [r1, #0]
    4e8e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4e92:	4303      	orrs	r3, r0
    4e94:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4e98:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4e9a:	688b      	ldr	r3, [r1, #8]
    4e9c:	f043 0301 	orr.w	r3, r3, #1
    4ea0:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    4ea2:	4770      	bx	lr
    4ea4:	e000ed90 	.word	0xe000ed90

00004ea8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    4ea8:	b510      	push	{r4, lr}
    4eaa:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    4eac:	2807      	cmp	r0, #7
    4eae:	d803      	bhi.n	4eb8 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    4eb0:	f7ff ffea 	bl	4e88 <region_init>

	return index;
    4eb4:	4620      	mov	r0, r4
}
    4eb6:	bd10      	pop	{r4, pc}
    4eb8:	4b09      	ldr	r3, [pc, #36]	; (4ee0 <region_allocate_and_init+0x38>)
    4eba:	4a0a      	ldr	r2, [pc, #40]	; (4ee4 <region_allocate_and_init+0x3c>)
    4ebc:	1a9b      	subs	r3, r3, r2
    4ebe:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4ec0:	f04f 0200 	mov.w	r2, #0
    4ec4:	2101      	movs	r1, #1
    4ec6:	f361 0202 	bfi	r2, r1, #0, #3
    4eca:	f36f 02c5 	bfc	r2, #3, #3
    4ece:	f363 128f 	bfi	r2, r3, #6, #10
    4ed2:	4601      	mov	r1, r0
    4ed4:	4804      	ldr	r0, [pc, #16]	; (4ee8 <region_allocate_and_init+0x40>)
    4ed6:	f7fc ff6b 	bl	1db0 <log_1>
		return -EINVAL;
    4eda:	f06f 0015 	mvn.w	r0, #21
    4ede:	e7ea      	b.n	4eb6 <region_allocate_and_init+0xe>
    4ee0:	000146b0 	.word	0x000146b0
    4ee4:	00014688 	.word	0x00014688
    4ee8:	00015344 	.word	0x00015344

00004eec <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ef0:	4680      	mov	r8, r0
    4ef2:	460f      	mov	r7, r1
    4ef4:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    4ef6:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    4ef8:	2400      	movs	r4, #0
    4efa:	e009      	b.n	4f10 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4efc:	4629      	mov	r1, r5
    4efe:	b2f0      	uxtb	r0, r6
    4f00:	f00c fa87 	bl	11412 <mpu_configure_region>
    4f04:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    4f06:	f110 0f16 	cmn.w	r0, #22
    4f0a:	d025      	beq.n	4f58 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    4f0c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    4f0e:	3401      	adds	r4, #1
    4f10:	42bc      	cmp	r4, r7
    4f12:	da21      	bge.n	4f58 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    4f14:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    4f18:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    4f1c:	686a      	ldr	r2, [r5, #4]
    4f1e:	2a00      	cmp	r2, #0
    4f20:	d0f5      	beq.n	4f0e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    4f22:	f1ba 0f00 	cmp.w	sl, #0
    4f26:	d0e9      	beq.n	4efc <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    4f28:	4628      	mov	r0, r5
    4f2a:	f00c fa61 	bl	113f0 <mpu_partition_is_valid>
		if (do_sanity_check &&
    4f2e:	2800      	cmp	r0, #0
    4f30:	d1e4      	bne.n	4efc <mpu_configure_regions+0x10>
    4f32:	4b0b      	ldr	r3, [pc, #44]	; (4f60 <mpu_configure_regions+0x74>)
    4f34:	4a0b      	ldr	r2, [pc, #44]	; (4f64 <mpu_configure_regions+0x78>)
    4f36:	1a9b      	subs	r3, r3, r2
    4f38:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    4f3a:	f04f 0200 	mov.w	r2, #0
    4f3e:	2101      	movs	r1, #1
    4f40:	f361 0202 	bfi	r2, r1, #0, #3
    4f44:	f36f 02c5 	bfc	r2, #3, #3
    4f48:	f363 128f 	bfi	r2, r3, #6, #10
    4f4c:	4621      	mov	r1, r4
    4f4e:	4806      	ldr	r0, [pc, #24]	; (4f68 <mpu_configure_regions+0x7c>)
    4f50:	f7fc ff2e 	bl	1db0 <log_1>
			return -EINVAL;
    4f54:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    4f58:	4630      	mov	r0, r6
    4f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f5e:	bf00      	nop
    4f60:	000146b0 	.word	0x000146b0
    4f64:	00014688 	.word	0x00014688
    4f68:	0001536c 	.word	0x0001536c

00004f6c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4f6c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4f6e:	4c03      	ldr	r4, [pc, #12]	; (4f7c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4f70:	2301      	movs	r3, #1
    4f72:	7822      	ldrb	r2, [r4, #0]
    4f74:	f7ff ffba 	bl	4eec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4f78:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4f7a:	bd10      	pop	{r4, pc}
    4f7c:	20002eda 	.word	0x20002eda

00004f80 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4f80:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4f82:	2300      	movs	r3, #0
    4f84:	4a08      	ldr	r2, [pc, #32]	; (4fa8 <mpu_configure_dynamic_mpu_regions+0x28>)
    4f86:	7812      	ldrb	r2, [r2, #0]
    4f88:	f7ff ffb0 	bl	4eec <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4f8c:	f110 0f16 	cmn.w	r0, #22
    4f90:	d008      	beq.n	4fa4 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4f92:	4603      	mov	r3, r0
    4f94:	2b07      	cmp	r3, #7
    4f96:	dc05      	bgt.n	4fa4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    4f98:	4a04      	ldr	r2, [pc, #16]	; (4fac <mpu_configure_dynamic_mpu_regions+0x2c>)
    4f9a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4f9c:	2100      	movs	r1, #0
    4f9e:	6111      	str	r1, [r2, #16]
    4fa0:	3301      	adds	r3, #1
    4fa2:	e7f7      	b.n	4f94 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    4fa4:	bd08      	pop	{r3, pc}
    4fa6:	bf00      	nop
    4fa8:	20002eda 	.word	0x20002eda
    4fac:	e000ed90 	.word	0xe000ed90

00004fb0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4fb0:	4b03      	ldr	r3, [pc, #12]	; (4fc0 <arm_core_mpu_enable+0x10>)
    4fb2:	2205      	movs	r2, #5
    4fb4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4fb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4fba:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4fbe:	4770      	bx	lr
    4fc0:	e000ed90 	.word	0xe000ed90

00004fc4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4fc4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4fc8:	4b01      	ldr	r3, [pc, #4]	; (4fd0 <arm_core_mpu_disable+0xc>)
    4fca:	2200      	movs	r2, #0
    4fcc:	605a      	str	r2, [r3, #4]
}
    4fce:	4770      	bx	lr
    4fd0:	e000ed90 	.word	0xe000ed90

00004fd4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4fd4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4fd6:	4b0e      	ldr	r3, [pc, #56]	; (5010 <z_arm_mpu_init+0x3c>)
    4fd8:	681d      	ldr	r5, [r3, #0]
    4fda:	2d08      	cmp	r5, #8
    4fdc:	d815      	bhi.n	500a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4fde:	f7ff fff1 	bl	4fc4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4fe2:	2400      	movs	r4, #0
    4fe4:	42a5      	cmp	r5, r4
    4fe6:	d90a      	bls.n	4ffe <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4fe8:	4b09      	ldr	r3, [pc, #36]	; (5010 <z_arm_mpu_init+0x3c>)
    4fea:	6859      	ldr	r1, [r3, #4]
    4fec:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4ff0:	0093      	lsls	r3, r2, #2
    4ff2:	4419      	add	r1, r3
    4ff4:	4620      	mov	r0, r4
    4ff6:	f7ff ff47 	bl	4e88 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4ffa:	3401      	adds	r4, #1
    4ffc:	e7f2      	b.n	4fe4 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4ffe:	4b05      	ldr	r3, [pc, #20]	; (5014 <z_arm_mpu_init+0x40>)
    5000:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    5002:	f7ff ffd5 	bl	4fb0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5006:	2000      	movs	r0, #0
}
    5008:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    500a:	f04f 30ff 	mov.w	r0, #4294967295
    500e:	e7fb      	b.n	5008 <z_arm_mpu_init+0x34>
    5010:	000153cc 	.word	0x000153cc
    5014:	20002eda 	.word	0x20002eda

00005018 <malloc>:
}

SYS_INIT(malloc_prepare, APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);
#else /* No malloc arena */
void *malloc(size_t size)
{
    5018:	b508      	push	{r3, lr}
    501a:	4b0b      	ldr	r3, [pc, #44]	; (5048 <malloc+0x30>)
    501c:	4a0b      	ldr	r2, [pc, #44]	; (504c <malloc+0x34>)
    501e:	1a9b      	subs	r3, r3, r2
    5020:	08db      	lsrs	r3, r3, #3
	ARG_UNUSED(size);

	LOG_ERR("CONFIG_MINIMAL_LIBC_MALLOC_ARENA_SIZE is 0");
    5022:	f04f 0100 	mov.w	r1, #0
    5026:	2201      	movs	r2, #1
    5028:	f362 0102 	bfi	r1, r2, #0, #3
    502c:	f36f 01c5 	bfc	r1, #3, #3
    5030:	f363 118f 	bfi	r1, r3, #6, #10
    5034:	4806      	ldr	r0, [pc, #24]	; (5050 <malloc+0x38>)
    5036:	f7fc ff4f 	bl	1ed8 <log_0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    503a:	f008 fd6f 	bl	db1c <z_impl_z_errno>
	errno = ENOMEM;
    503e:	230c      	movs	r3, #12
    5040:	6003      	str	r3, [r0, #0]

	return NULL;
}
    5042:	2000      	movs	r0, #0
    5044:	bd08      	pop	{r3, pc}
    5046:	bf00      	nop
    5048:	000146b8 	.word	0x000146b8
    504c:	00014688 	.word	0x00014688
    5050:	00015390 	.word	0x00015390

00005054 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5054:	4b01      	ldr	r3, [pc, #4]	; (505c <__stdout_hook_install+0x8>)
    5056:	6018      	str	r0, [r3, #0]
}
    5058:	4770      	bx	lr
    505a:	bf00      	nop
    505c:	2000022c 	.word	0x2000022c

00005060 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT str, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    5060:	b40c      	push	{r2, r3}
    5062:	b500      	push	{lr}
    5064:	b085      	sub	sp, #20

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    5066:	460b      	mov	r3, r1
    5068:	b909      	cbnz	r1, 506e <snprintf+0xe>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    506a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
    506e:	9001      	str	r0, [sp, #4]
	p.len = (int) len;
    5070:	9302      	str	r3, [sp, #8]

	va_start(vargs, format);
    5072:	ab07      	add	r3, sp, #28
    5074:	9303      	str	r3, [sp, #12]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    5076:	9a06      	ldr	r2, [sp, #24]
    5078:	a901      	add	r1, sp, #4
    507a:	4805      	ldr	r0, [pc, #20]	; (5090 <snprintf+0x30>)
    507c:	f7fb fef2 	bl	e64 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    5080:	9b01      	ldr	r3, [sp, #4]
    5082:	2200      	movs	r2, #0
    5084:	701a      	strb	r2, [r3, #0]
	return r;
}
    5086:	b005      	add	sp, #20
    5088:	f85d eb04 	ldr.w	lr, [sp], #4
    508c:	b002      	add	sp, #8
    508e:	4770      	bx	lr
    5090:	0001161d 	.word	0x0001161d

00005094 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    5094:	f04f 0320 	mov.w	r3, #32
    5098:	f3ef 8211 	mrs	r2, BASEPRI
    509c:	f383 8812 	msr	BASEPRI_MAX, r3
    50a0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    50a4:	2301      	movs	r3, #1
    50a6:	4906      	ldr	r1, [pc, #24]	; (50c0 <nordicsemi_nrf52_init+0x2c>)
    50a8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    50ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    50b0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    50b4:	f382 8811 	msr	BASEPRI, r2
    50b8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    50bc:	2000      	movs	r0, #0
    50be:	4770      	bx	lr
    50c0:	4001e000 	.word	0x4001e000

000050c4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    50c4:	b130      	cbz	r0, 50d4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    50c6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    50c8:	0180      	lsls	r0, r0, #6
    50ca:	4b03      	ldr	r3, [pc, #12]	; (50d8 <arch_busy_wait+0x14>)
    50cc:	f043 0301 	orr.w	r3, r3, #1
    50d0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    50d2:	bd08      	pop	{r3, pc}
    50d4:	4770      	bx	lr
    50d6:	bf00      	nop
    50d8:	000147b0 	.word	0x000147b0

000050dc <registry_add>:
static int registry_add(int type,
			const struct fs_file_system_t *fstp)
{
	int rv = -ENOSPC;

	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    50dc:	2300      	movs	r3, #0
    50de:	2b01      	cmp	r3, #1
    50e0:	d80e      	bhi.n	5100 <registry_add+0x24>
		struct registry_entry *ep = &registry[i];

		if (ep->fstp == NULL) {
    50e2:	4a09      	ldr	r2, [pc, #36]	; (5108 <registry_add+0x2c>)
    50e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    50e8:	6852      	ldr	r2, [r2, #4]
    50ea:	b10a      	cbz	r2, 50f0 <registry_add+0x14>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    50ec:	3301      	adds	r3, #1
    50ee:	e7f6      	b.n	50de <registry_add+0x2>
			ep->type = type;
    50f0:	4a05      	ldr	r2, [pc, #20]	; (5108 <registry_add+0x2c>)
    50f2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			ep->fstp = fstp;
    50f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    50fa:	6059      	str	r1, [r3, #4]
			rv = 0;
    50fc:	2000      	movs	r0, #0
			break;
    50fe:	4770      	bx	lr
	int rv = -ENOSPC;
    5100:	f06f 001b 	mvn.w	r0, #27
		}
	}

	return rv;
}
    5104:	4770      	bx	lr
    5106:	bf00      	nop
    5108:	20001d7c 	.word	0x20001d7c

0000510c <registry_find>:

static struct registry_entry *registry_find(int type)
{
    510c:	4601      	mov	r1, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    510e:	2300      	movs	r3, #0
    5110:	e000      	b.n	5114 <registry_find+0x8>
    5112:	3301      	adds	r3, #1
    5114:	2b01      	cmp	r3, #1
    5116:	d80b      	bhi.n	5130 <registry_find+0x24>
		struct registry_entry *ep = &registry[i];
    5118:	4806      	ldr	r0, [pc, #24]	; (5134 <registry_find+0x28>)
    511a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		if ((ep->fstp != NULL) && (ep->type == type)) {
    511e:	6842      	ldr	r2, [r0, #4]
    5120:	2a00      	cmp	r2, #0
    5122:	d0f6      	beq.n	5112 <registry_find+0x6>
    5124:	4a03      	ldr	r2, [pc, #12]	; (5134 <registry_find+0x28>)
    5126:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    512a:	428a      	cmp	r2, r1
    512c:	d1f1      	bne.n	5112 <registry_find+0x6>
    512e:	e000      	b.n	5132 <registry_find+0x26>
			return ep;
		}
	}
	return NULL;
    5130:	2000      	movs	r0, #0
}
    5132:	4770      	bx	lr
    5134:	20001d7c 	.word	0x20001d7c

00005138 <fs_get_mnt_point>:
	return (ep != NULL) ? ep->fstp : NULL;
}

static int fs_get_mnt_point(struct fs_mount_t **mnt_pntp,
			    const char *name, size_t *match_len)
{
    5138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    513c:	4683      	mov	fp, r0
    513e:	460f      	mov	r7, r1
    5140:	4692      	mov	sl, r2
	struct fs_mount_t *mnt_p = NULL, *itr;
	size_t longest_match = 0;
	size_t len, name_len = strlen(name);
    5142:	4608      	mov	r0, r1
    5144:	f00c f9bc 	bl	114c0 <strlen>
    5148:	4680      	mov	r8, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    514a:	f04f 32ff 	mov.w	r2, #4294967295
    514e:	f04f 33ff 	mov.w	r3, #4294967295
    5152:	4820      	ldr	r0, [pc, #128]	; (51d4 <fs_get_mnt_point+0x9c>)
    5154:	f008 fff8 	bl	e148 <z_impl_k_mutex_lock>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5158:	4b1f      	ldr	r3, [pc, #124]	; (51d8 <fs_get_mnt_point+0xa0>)
    515a:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    515c:	429c      	cmp	r4, r3
    515e:	d01d      	beq.n	519c <fs_get_mnt_point+0x64>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5160:	2600      	movs	r6, #0
    5162:	46b1      	mov	r9, r6
    5164:	e00c      	b.n	5180 <fs_get_mnt_point+0x48>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
			continue;
		}

		/* Check for mount point match */
		if (strncmp(name, itr->mnt_point, len) == 0) {
    5166:	462a      	mov	r2, r5
    5168:	68e1      	ldr	r1, [r4, #12]
    516a:	4638      	mov	r0, r7
    516c:	f00c f9c4 	bl	114f8 <strncmp>
    5170:	b908      	cbnz	r0, 5176 <fs_get_mnt_point+0x3e>
			mnt_p = itr;
			longest_match = len;
    5172:	462e      	mov	r6, r5
			mnt_p = itr;
    5174:	46a1      	mov	r9, r4
    5176:	4b18      	ldr	r3, [pc, #96]	; (51d8 <fs_get_mnt_point+0xa0>)
    5178:	685b      	ldr	r3, [r3, #4]
    517a:	429c      	cmp	r4, r3
    517c:	d010      	beq.n	51a0 <fs_get_mnt_point+0x68>
    517e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    5180:	b184      	cbz	r4, 51a4 <fs_get_mnt_point+0x6c>
		len = itr->mountp_len;
    5182:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
    5184:	42ae      	cmp	r6, r5
    5186:	d8f6      	bhi.n	5176 <fs_get_mnt_point+0x3e>
    5188:	45a8      	cmp	r8, r5
    518a:	d3f4      	bcc.n	5176 <fs_get_mnt_point+0x3e>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
    518c:	2d01      	cmp	r5, #1
    518e:	d9ea      	bls.n	5166 <fs_get_mnt_point+0x2e>
    5190:	5d7b      	ldrb	r3, [r7, r5]
    5192:	2b2f      	cmp	r3, #47	; 0x2f
    5194:	d0e7      	beq.n	5166 <fs_get_mnt_point+0x2e>
    5196:	2b00      	cmp	r3, #0
    5198:	d0e5      	beq.n	5166 <fs_get_mnt_point+0x2e>
    519a:	e7ec      	b.n	5176 <fs_get_mnt_point+0x3e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    519c:	2400      	movs	r4, #0
    519e:	e7df      	b.n	5160 <fs_get_mnt_point+0x28>
	return (node == list->tail) ? NULL : node->next;
    51a0:	2400      	movs	r4, #0
    51a2:	e7ed      	b.n	5180 <fs_get_mnt_point+0x48>
	return z_impl_k_mutex_unlock(mutex);
    51a4:	480b      	ldr	r0, [pc, #44]	; (51d4 <fs_get_mnt_point+0x9c>)
    51a6:	f009 f859 	bl	e25c <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&mutex);

	if (mnt_p == NULL) {
    51aa:	f1b9 0f00 	cmp.w	r9, #0
    51ae:	d00b      	beq.n	51c8 <fs_get_mnt_point+0x90>
		return -ENOENT;
	}

	*mnt_pntp = mnt_p;
    51b0:	f8cb 9000 	str.w	r9, [fp]
	if (match_len)
    51b4:	f1ba 0f00 	cmp.w	sl, #0
    51b8:	d009      	beq.n	51ce <fs_get_mnt_point+0x96>
		*match_len = mnt_p->mountp_len;
    51ba:	f8d9 3018 	ldr.w	r3, [r9, #24]
    51be:	f8ca 3000 	str.w	r3, [sl]

	return 0;
    51c2:	2000      	movs	r0, #0
}
    51c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
    51c8:	f06f 0001 	mvn.w	r0, #1
    51cc:	e7fa      	b.n	51c4 <fs_get_mnt_point+0x8c>
	return 0;
    51ce:	2000      	movs	r0, #0
    51d0:	e7f8      	b.n	51c4 <fs_get_mnt_point+0x8c>
    51d2:	bf00      	nop
    51d4:	20001d68 	.word	0x20001d68
    51d8:	20001d60 	.word	0x20001d60

000051dc <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    51dc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    51de:	4804      	ldr	r0, [pc, #16]	; (51f0 <fs_init+0x14>)
    51e0:	f00e fd7b 	bl	13cda <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    51e4:	4b03      	ldr	r3, [pc, #12]	; (51f4 <fs_init+0x18>)
    51e6:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    51e8:	605b      	str	r3, [r3, #4]
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    51ea:	2000      	movs	r0, #0
    51ec:	bd08      	pop	{r3, pc}
    51ee:	bf00      	nop
    51f0:	20001d68 	.word	0x20001d68
    51f4:	20001d60 	.word	0x20001d60

000051f8 <fs_open>:
{
    51f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51fa:	b083      	sub	sp, #12
    51fc:	4605      	mov	r5, r0
	zfp->flags = flags;
    51fe:	7202      	strb	r2, [r0, #8]
	if ((file_name == NULL) ||
    5200:	b361      	cbz	r1, 525c <fs_open+0x64>
    5202:	4616      	mov	r6, r2
    5204:	460f      	mov	r7, r1
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    5206:	4608      	mov	r0, r1
    5208:	f00c f95a 	bl	114c0 <strlen>
	if ((file_name == NULL) ||
    520c:	2801      	cmp	r0, #1
    520e:	d925      	bls.n	525c <fs_open+0x64>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    5210:	783b      	ldrb	r3, [r7, #0]
    5212:	2b2f      	cmp	r3, #47	; 0x2f
    5214:	d122      	bne.n	525c <fs_open+0x64>
	if (zfp->mp != NULL) {
    5216:	686b      	ldr	r3, [r5, #4]
    5218:	2b00      	cmp	r3, #0
    521a:	d157      	bne.n	52cc <fs_open+0xd4>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
    521c:	2200      	movs	r2, #0
    521e:	4639      	mov	r1, r7
    5220:	a801      	add	r0, sp, #4
    5222:	f7ff ff89 	bl	5138 <fs_get_mnt_point>
	if (rc < 0) {
    5226:	1e04      	subs	r4, r0, #0
    5228:	db2b      	blt.n	5282 <fs_open+0x8a>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
    522a:	9b01      	ldr	r3, [sp, #4]
    522c:	f893 2020 	ldrb.w	r2, [r3, #32]
    5230:	f012 0f02 	tst.w	r2, #2
    5234:	d002      	beq.n	523c <fs_open+0x44>
    5236:	f016 0f12 	tst.w	r6, #18
    523a:	d14a      	bne.n	52d2 <fs_open+0xda>
	CHECKIF(mp->fs->open == NULL) {
    523c:	69da      	ldr	r2, [r3, #28]
    523e:	6812      	ldr	r2, [r2, #0]
    5240:	2a00      	cmp	r2, #0
    5242:	d049      	beq.n	52d8 <fs_open+0xe0>
	zfp->mp = mp;
    5244:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
    5246:	69db      	ldr	r3, [r3, #28]
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	4632      	mov	r2, r6
    524c:	4639      	mov	r1, r7
    524e:	4628      	mov	r0, r5
    5250:	4798      	blx	r3
	if (rc < 0) {
    5252:	1e04      	subs	r4, r0, #0
    5254:	db26      	blt.n	52a4 <fs_open+0xac>
}
    5256:	4620      	mov	r0, r4
    5258:	b003      	add	sp, #12
    525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    525c:	4b20      	ldr	r3, [pc, #128]	; (52e0 <fs_open+0xe8>)
    525e:	4a21      	ldr	r2, [pc, #132]	; (52e4 <fs_open+0xec>)
    5260:	1a9b      	subs	r3, r3, r2
    5262:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    5264:	f04f 0100 	mov.w	r1, #0
    5268:	2201      	movs	r2, #1
    526a:	f362 0102 	bfi	r1, r2, #0, #3
    526e:	f36f 01c5 	bfc	r1, #3, #3
    5272:	f363 118f 	bfi	r1, r3, #6, #10
    5276:	481c      	ldr	r0, [pc, #112]	; (52e8 <fs_open+0xf0>)
    5278:	f7fc fe2e 	bl	1ed8 <log_0>
		return -EINVAL;
    527c:	f06f 0415 	mvn.w	r4, #21
    5280:	e7e9      	b.n	5256 <fs_open+0x5e>
    5282:	4b17      	ldr	r3, [pc, #92]	; (52e0 <fs_open+0xe8>)
    5284:	4a17      	ldr	r2, [pc, #92]	; (52e4 <fs_open+0xec>)
    5286:	1a9b      	subs	r3, r3, r2
    5288:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    528a:	f04f 0100 	mov.w	r1, #0
    528e:	2201      	movs	r2, #1
    5290:	f362 0102 	bfi	r1, r2, #0, #3
    5294:	f36f 01c5 	bfc	r1, #3, #3
    5298:	f363 118f 	bfi	r1, r3, #6, #10
    529c:	4813      	ldr	r0, [pc, #76]	; (52ec <fs_open+0xf4>)
    529e:	f7fc fe1b 	bl	1ed8 <log_0>
		return rc;
    52a2:	e7d8      	b.n	5256 <fs_open+0x5e>
    52a4:	4b0e      	ldr	r3, [pc, #56]	; (52e0 <fs_open+0xe8>)
    52a6:	4a0f      	ldr	r2, [pc, #60]	; (52e4 <fs_open+0xec>)
    52a8:	1a9b      	subs	r3, r3, r2
    52aa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file open error (%d)", rc);
    52ac:	f04f 0200 	mov.w	r2, #0
    52b0:	2101      	movs	r1, #1
    52b2:	f361 0202 	bfi	r2, r1, #0, #3
    52b6:	f36f 02c5 	bfc	r2, #3, #3
    52ba:	f363 128f 	bfi	r2, r3, #6, #10
    52be:	4621      	mov	r1, r4
    52c0:	480b      	ldr	r0, [pc, #44]	; (52f0 <fs_open+0xf8>)
    52c2:	f7fc fd75 	bl	1db0 <log_1>
		zfp->mp = NULL;
    52c6:	2300      	movs	r3, #0
    52c8:	606b      	str	r3, [r5, #4]
		return rc;
    52ca:	e7c4      	b.n	5256 <fs_open+0x5e>
		return -EBUSY;
    52cc:	f06f 040f 	mvn.w	r4, #15
    52d0:	e7c1      	b.n	5256 <fs_open+0x5e>
		return -EROFS;
    52d2:	f06f 041d 	mvn.w	r4, #29
    52d6:	e7be      	b.n	5256 <fs_open+0x5e>
		return -ENOTSUP;
    52d8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    52dc:	e7bb      	b.n	5256 <fs_open+0x5e>
    52de:	bf00      	nop
    52e0:	00014698 	.word	0x00014698
    52e4:	00014688 	.word	0x00014688
    52e8:	000153f0 	.word	0x000153f0
    52ec:	00015404 	.word	0x00015404
    52f0:	0001541c 	.word	0x0001541c

000052f4 <fs_close>:
{
    52f4:	b538      	push	{r3, r4, r5, lr}
	if (zfp->mp == NULL) {
    52f6:	6843      	ldr	r3, [r0, #4]
    52f8:	b1e3      	cbz	r3, 5334 <fs_close+0x40>
    52fa:	4604      	mov	r4, r0
	CHECKIF(zfp->mp->fs->close == NULL) {
    52fc:	69db      	ldr	r3, [r3, #28]
    52fe:	69db      	ldr	r3, [r3, #28]
    5300:	b1d3      	cbz	r3, 5338 <fs_close+0x44>
	rc = zfp->mp->fs->close(zfp);
    5302:	4798      	blx	r3
	if (rc < 0) {
    5304:	1e05      	subs	r5, r0, #0
    5306:	db03      	blt.n	5310 <fs_close+0x1c>
	zfp->mp = NULL;
    5308:	2300      	movs	r3, #0
    530a:	6063      	str	r3, [r4, #4]
}
    530c:	4628      	mov	r0, r5
    530e:	bd38      	pop	{r3, r4, r5, pc}
    5310:	4b0b      	ldr	r3, [pc, #44]	; (5340 <fs_close+0x4c>)
    5312:	4a0c      	ldr	r2, [pc, #48]	; (5344 <fs_close+0x50>)
    5314:	1a9b      	subs	r3, r3, r2
    5316:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file close error (%d)", rc);
    5318:	f04f 0200 	mov.w	r2, #0
    531c:	2101      	movs	r1, #1
    531e:	f361 0202 	bfi	r2, r1, #0, #3
    5322:	f36f 02c5 	bfc	r2, #3, #3
    5326:	f363 128f 	bfi	r2, r3, #6, #10
    532a:	4629      	mov	r1, r5
    532c:	4806      	ldr	r0, [pc, #24]	; (5348 <fs_close+0x54>)
    532e:	f7fc fd3f 	bl	1db0 <log_1>
		return rc;
    5332:	e7eb      	b.n	530c <fs_close+0x18>
		return 0;
    5334:	2500      	movs	r5, #0
    5336:	e7e9      	b.n	530c <fs_close+0x18>
		return -ENOTSUP;
    5338:	f06f 0585 	mvn.w	r5, #133	; 0x85
    533c:	e7e6      	b.n	530c <fs_close+0x18>
    533e:	bf00      	nop
    5340:	00014698 	.word	0x00014698
    5344:	00014688 	.word	0x00014688
    5348:	00015434 	.word	0x00015434

0000534c <fs_read>:
{
    534c:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    534e:	6843      	ldr	r3, [r0, #4]
    5350:	b1cb      	cbz	r3, 5386 <fs_read+0x3a>
	CHECKIF(zfp->mp->fs->read == NULL) {
    5352:	69db      	ldr	r3, [r3, #28]
    5354:	685b      	ldr	r3, [r3, #4]
    5356:	b1cb      	cbz	r3, 538c <fs_read+0x40>
	rc = zfp->mp->fs->read(zfp, ptr, size);
    5358:	4798      	blx	r3
	if (rc < 0) {
    535a:	1e04      	subs	r4, r0, #0
    535c:	db01      	blt.n	5362 <fs_read+0x16>
}
    535e:	4620      	mov	r0, r4
    5360:	bd10      	pop	{r4, pc}
    5362:	4b0c      	ldr	r3, [pc, #48]	; (5394 <fs_read+0x48>)
    5364:	4a0c      	ldr	r2, [pc, #48]	; (5398 <fs_read+0x4c>)
    5366:	1a9b      	subs	r3, r3, r2
    5368:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file read error (%d)", rc);
    536a:	f04f 0200 	mov.w	r2, #0
    536e:	2101      	movs	r1, #1
    5370:	f361 0202 	bfi	r2, r1, #0, #3
    5374:	f36f 02c5 	bfc	r2, #3, #3
    5378:	f363 128f 	bfi	r2, r3, #6, #10
    537c:	4621      	mov	r1, r4
    537e:	4807      	ldr	r0, [pc, #28]	; (539c <fs_read+0x50>)
    5380:	f7fc fd16 	bl	1db0 <log_1>
    5384:	e7eb      	b.n	535e <fs_read+0x12>
		return -EBADF;
    5386:	f06f 0408 	mvn.w	r4, #8
    538a:	e7e8      	b.n	535e <fs_read+0x12>
		return -ENOTSUP;
    538c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5390:	e7e5      	b.n	535e <fs_read+0x12>
    5392:	bf00      	nop
    5394:	00014698 	.word	0x00014698
    5398:	00014688 	.word	0x00014688
    539c:	0001544c 	.word	0x0001544c

000053a0 <fs_write>:
{
    53a0:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    53a2:	6843      	ldr	r3, [r0, #4]
    53a4:	b1cb      	cbz	r3, 53da <fs_write+0x3a>
	CHECKIF(zfp->mp->fs->write == NULL) {
    53a6:	69db      	ldr	r3, [r3, #28]
    53a8:	689b      	ldr	r3, [r3, #8]
    53aa:	b1cb      	cbz	r3, 53e0 <fs_write+0x40>
	rc = zfp->mp->fs->write(zfp, ptr, size);
    53ac:	4798      	blx	r3
	if (rc < 0) {
    53ae:	1e04      	subs	r4, r0, #0
    53b0:	db01      	blt.n	53b6 <fs_write+0x16>
}
    53b2:	4620      	mov	r0, r4
    53b4:	bd10      	pop	{r4, pc}
    53b6:	4b0c      	ldr	r3, [pc, #48]	; (53e8 <fs_write+0x48>)
    53b8:	4a0c      	ldr	r2, [pc, #48]	; (53ec <fs_write+0x4c>)
    53ba:	1a9b      	subs	r3, r3, r2
    53bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file write error (%d)", rc);
    53be:	f04f 0200 	mov.w	r2, #0
    53c2:	2101      	movs	r1, #1
    53c4:	f361 0202 	bfi	r2, r1, #0, #3
    53c8:	f36f 02c5 	bfc	r2, #3, #3
    53cc:	f363 128f 	bfi	r2, r3, #6, #10
    53d0:	4621      	mov	r1, r4
    53d2:	4807      	ldr	r0, [pc, #28]	; (53f0 <fs_write+0x50>)
    53d4:	f7fc fcec 	bl	1db0 <log_1>
    53d8:	e7eb      	b.n	53b2 <fs_write+0x12>
		return -EBADF;
    53da:	f06f 0408 	mvn.w	r4, #8
    53de:	e7e8      	b.n	53b2 <fs_write+0x12>
		return -ENOTSUP;
    53e0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    53e4:	e7e5      	b.n	53b2 <fs_write+0x12>
    53e6:	bf00      	nop
    53e8:	00014698 	.word	0x00014698
    53ec:	00014688 	.word	0x00014688
    53f0:	00015464 	.word	0x00015464

000053f4 <fs_seek>:
{
    53f4:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    53f6:	6843      	ldr	r3, [r0, #4]
    53f8:	b1cb      	cbz	r3, 542e <fs_seek+0x3a>
	CHECKIF(zfp->mp->fs->lseek == NULL) {
    53fa:	69db      	ldr	r3, [r3, #28]
    53fc:	68db      	ldr	r3, [r3, #12]
    53fe:	b1cb      	cbz	r3, 5434 <fs_seek+0x40>
	rc = zfp->mp->fs->lseek(zfp, offset, whence);
    5400:	4798      	blx	r3
	if (rc < 0) {
    5402:	1e04      	subs	r4, r0, #0
    5404:	db01      	blt.n	540a <fs_seek+0x16>
}
    5406:	4620      	mov	r0, r4
    5408:	bd10      	pop	{r4, pc}
    540a:	4b0c      	ldr	r3, [pc, #48]	; (543c <fs_seek+0x48>)
    540c:	4a0c      	ldr	r2, [pc, #48]	; (5440 <fs_seek+0x4c>)
    540e:	1a9b      	subs	r3, r3, r2
    5410:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file seek error (%d)", rc);
    5412:	f04f 0200 	mov.w	r2, #0
    5416:	2101      	movs	r1, #1
    5418:	f361 0202 	bfi	r2, r1, #0, #3
    541c:	f36f 02c5 	bfc	r2, #3, #3
    5420:	f363 128f 	bfi	r2, r3, #6, #10
    5424:	4621      	mov	r1, r4
    5426:	4807      	ldr	r0, [pc, #28]	; (5444 <fs_seek+0x50>)
    5428:	f7fc fcc2 	bl	1db0 <log_1>
    542c:	e7eb      	b.n	5406 <fs_seek+0x12>
		return -EBADF;
    542e:	f06f 0408 	mvn.w	r4, #8
    5432:	e7e8      	b.n	5406 <fs_seek+0x12>
		return -ENOTSUP;
    5434:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5438:	e7e5      	b.n	5406 <fs_seek+0x12>
    543a:	bf00      	nop
    543c:	00014698 	.word	0x00014698
    5440:	00014688 	.word	0x00014688
    5444:	0001547c 	.word	0x0001547c

00005448 <fs_stat>:
{
    5448:	b570      	push	{r4, r5, r6, lr}
    544a:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    544c:	b300      	cbz	r0, 5490 <fs_stat+0x48>
    544e:	460e      	mov	r6, r1
    5450:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    5452:	f00c f835 	bl	114c0 <strlen>
	if ((abs_path == NULL) ||
    5456:	2801      	cmp	r0, #1
    5458:	d91a      	bls.n	5490 <fs_stat+0x48>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    545a:	782b      	ldrb	r3, [r5, #0]
    545c:	2b2f      	cmp	r3, #47	; 0x2f
    545e:	d117      	bne.n	5490 <fs_stat+0x48>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    5460:	2200      	movs	r2, #0
    5462:	4629      	mov	r1, r5
    5464:	a801      	add	r0, sp, #4
    5466:	f7ff fe67 	bl	5138 <fs_get_mnt_point>
	if (rc < 0) {
    546a:	1e04      	subs	r4, r0, #0
    546c:	db23      	blt.n	54b6 <fs_stat+0x6e>
	CHECKIF(mp->fs->stat == NULL) {
    546e:	9801      	ldr	r0, [sp, #4]
    5470:	69c3      	ldr	r3, [r0, #28]
    5472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5474:	2b00      	cmp	r3, #0
    5476:	d041      	beq.n	54fc <fs_stat+0xb4>
	rc = mp->fs->stat(mp, abs_path, entry);
    5478:	4632      	mov	r2, r6
    547a:	4629      	mov	r1, r5
    547c:	4798      	blx	r3
    547e:	4604      	mov	r4, r0
	if (rc == -ENOENT) {
    5480:	f110 0f02 	cmn.w	r0, #2
    5484:	d001      	beq.n	548a <fs_stat+0x42>
	} else if (rc < 0) {
    5486:	2800      	cmp	r0, #0
    5488:	db26      	blt.n	54d8 <fs_stat+0x90>
}
    548a:	4620      	mov	r0, r4
    548c:	b002      	add	sp, #8
    548e:	bd70      	pop	{r4, r5, r6, pc}
    5490:	4b1c      	ldr	r3, [pc, #112]	; (5504 <fs_stat+0xbc>)
    5492:	4a1d      	ldr	r2, [pc, #116]	; (5508 <fs_stat+0xc0>)
    5494:	1a9b      	subs	r3, r3, r2
    5496:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    5498:	f04f 0100 	mov.w	r1, #0
    549c:	2201      	movs	r2, #1
    549e:	f362 0102 	bfi	r1, r2, #0, #3
    54a2:	f36f 01c5 	bfc	r1, #3, #3
    54a6:	f363 118f 	bfi	r1, r3, #6, #10
    54aa:	4818      	ldr	r0, [pc, #96]	; (550c <fs_stat+0xc4>)
    54ac:	f7fc fd14 	bl	1ed8 <log_0>
		return -EINVAL;
    54b0:	f06f 0415 	mvn.w	r4, #21
    54b4:	e7e9      	b.n	548a <fs_stat+0x42>
    54b6:	4b13      	ldr	r3, [pc, #76]	; (5504 <fs_stat+0xbc>)
    54b8:	4a13      	ldr	r2, [pc, #76]	; (5508 <fs_stat+0xc0>)
    54ba:	1a9b      	subs	r3, r3, r2
    54bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    54be:	f04f 0100 	mov.w	r1, #0
    54c2:	2201      	movs	r2, #1
    54c4:	f362 0102 	bfi	r1, r2, #0, #3
    54c8:	f36f 01c5 	bfc	r1, #3, #3
    54cc:	f363 118f 	bfi	r1, r3, #6, #10
    54d0:	480f      	ldr	r0, [pc, #60]	; (5510 <fs_stat+0xc8>)
    54d2:	f7fc fd01 	bl	1ed8 <log_0>
		return rc;
    54d6:	e7d8      	b.n	548a <fs_stat+0x42>
    54d8:	4b0a      	ldr	r3, [pc, #40]	; (5504 <fs_stat+0xbc>)
    54da:	4a0b      	ldr	r2, [pc, #44]	; (5508 <fs_stat+0xc0>)
    54dc:	1a9b      	subs	r3, r3, r2
    54de:	08db      	lsrs	r3, r3, #3
		LOG_ERR("failed get file or dir stat (%d)", rc);
    54e0:	f04f 0200 	mov.w	r2, #0
    54e4:	2101      	movs	r1, #1
    54e6:	f361 0202 	bfi	r2, r1, #0, #3
    54ea:	f36f 02c5 	bfc	r2, #3, #3
    54ee:	f363 128f 	bfi	r2, r3, #6, #10
    54f2:	4601      	mov	r1, r0
    54f4:	4807      	ldr	r0, [pc, #28]	; (5514 <fs_stat+0xcc>)
    54f6:	f7fc fc5b 	bl	1db0 <log_1>
    54fa:	e7c6      	b.n	548a <fs_stat+0x42>
		return -ENOTSUP;
    54fc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5500:	e7c3      	b.n	548a <fs_stat+0x42>
    5502:	bf00      	nop
    5504:	00014698 	.word	0x00014698
    5508:	00014688 	.word	0x00014688
    550c:	000153f0 	.word	0x000153f0
    5510:	00015404 	.word	0x00015404
    5514:	00015494 	.word	0x00015494

00005518 <fs_statvfs>:
{
    5518:	b570      	push	{r4, r5, r6, lr}
    551a:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    551c:	b1d8      	cbz	r0, 5556 <fs_statvfs+0x3e>
    551e:	460e      	mov	r6, r1
    5520:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    5522:	f00b ffcd 	bl	114c0 <strlen>
	if ((abs_path == NULL) ||
    5526:	2801      	cmp	r0, #1
    5528:	d915      	bls.n	5556 <fs_statvfs+0x3e>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    552a:	782b      	ldrb	r3, [r5, #0]
    552c:	2b2f      	cmp	r3, #47	; 0x2f
    552e:	d112      	bne.n	5556 <fs_statvfs+0x3e>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    5530:	2200      	movs	r2, #0
    5532:	4629      	mov	r1, r5
    5534:	a801      	add	r0, sp, #4
    5536:	f7ff fdff 	bl	5138 <fs_get_mnt_point>
	if (rc < 0) {
    553a:	1e04      	subs	r4, r0, #0
    553c:	db1e      	blt.n	557c <fs_statvfs+0x64>
	if (mp->fs->statvfs != NULL) {
    553e:	9801      	ldr	r0, [sp, #4]
    5540:	69c3      	ldr	r3, [r0, #28]
    5542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5544:	b123      	cbz	r3, 5550 <fs_statvfs+0x38>
		rc = mp->fs->statvfs(mp, abs_path, stat);
    5546:	4632      	mov	r2, r6
    5548:	4629      	mov	r1, r5
    554a:	4798      	blx	r3
		if (rc < 0) {
    554c:	1e04      	subs	r4, r0, #0
    554e:	db26      	blt.n	559e <fs_statvfs+0x86>
}
    5550:	4620      	mov	r0, r4
    5552:	b002      	add	sp, #8
    5554:	bd70      	pop	{r4, r5, r6, pc}
    5556:	4b1b      	ldr	r3, [pc, #108]	; (55c4 <fs_statvfs+0xac>)
    5558:	4a1b      	ldr	r2, [pc, #108]	; (55c8 <fs_statvfs+0xb0>)
    555a:	1a9b      	subs	r3, r3, r2
    555c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    555e:	f04f 0100 	mov.w	r1, #0
    5562:	2201      	movs	r2, #1
    5564:	f362 0102 	bfi	r1, r2, #0, #3
    5568:	f36f 01c5 	bfc	r1, #3, #3
    556c:	f363 118f 	bfi	r1, r3, #6, #10
    5570:	4816      	ldr	r0, [pc, #88]	; (55cc <fs_statvfs+0xb4>)
    5572:	f7fc fcb1 	bl	1ed8 <log_0>
		return -EINVAL;
    5576:	f06f 0415 	mvn.w	r4, #21
    557a:	e7e9      	b.n	5550 <fs_statvfs+0x38>
    557c:	4b11      	ldr	r3, [pc, #68]	; (55c4 <fs_statvfs+0xac>)
    557e:	4a12      	ldr	r2, [pc, #72]	; (55c8 <fs_statvfs+0xb0>)
    5580:	1a9b      	subs	r3, r3, r2
    5582:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    5584:	f04f 0100 	mov.w	r1, #0
    5588:	2201      	movs	r2, #1
    558a:	f362 0102 	bfi	r1, r2, #0, #3
    558e:	f36f 01c5 	bfc	r1, #3, #3
    5592:	f363 118f 	bfi	r1, r3, #6, #10
    5596:	480e      	ldr	r0, [pc, #56]	; (55d0 <fs_statvfs+0xb8>)
    5598:	f7fc fc9e 	bl	1ed8 <log_0>
		return rc;
    559c:	e7d8      	b.n	5550 <fs_statvfs+0x38>
    559e:	4b09      	ldr	r3, [pc, #36]	; (55c4 <fs_statvfs+0xac>)
    55a0:	4a09      	ldr	r2, [pc, #36]	; (55c8 <fs_statvfs+0xb0>)
    55a2:	1a9b      	subs	r3, r3, r2
    55a4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("failed get file or dir stat (%d)", rc);
    55a6:	f04f 0200 	mov.w	r2, #0
    55aa:	2101      	movs	r1, #1
    55ac:	f361 0202 	bfi	r2, r1, #0, #3
    55b0:	f36f 02c5 	bfc	r2, #3, #3
    55b4:	f363 128f 	bfi	r2, r3, #6, #10
    55b8:	4621      	mov	r1, r4
    55ba:	4806      	ldr	r0, [pc, #24]	; (55d4 <fs_statvfs+0xbc>)
    55bc:	f7fc fbf8 	bl	1db0 <log_1>
    55c0:	e7c6      	b.n	5550 <fs_statvfs+0x38>
    55c2:	bf00      	nop
    55c4:	00014698 	.word	0x00014698
    55c8:	00014688 	.word	0x00014688
    55cc:	000153f0 	.word	0x000153f0
    55d0:	00015404 	.word	0x00015404
    55d4:	00015494 	.word	0x00015494

000055d8 <fs_mount>:
{
    55d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
    55da:	b1c0      	cbz	r0, 560e <fs_mount+0x36>
    55dc:	4606      	mov	r6, r0
    55de:	68c0      	ldr	r0, [r0, #12]
    55e0:	b1a8      	cbz	r0, 560e <fs_mount+0x36>
	len = strlen(mp->mnt_point);
    55e2:	f00b ff6d 	bl	114c0 <strlen>
    55e6:	4605      	mov	r5, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
    55e8:	2801      	cmp	r0, #1
    55ea:	d923      	bls.n	5634 <fs_mount+0x5c>
    55ec:	68f3      	ldr	r3, [r6, #12]
    55ee:	781b      	ldrb	r3, [r3, #0]
    55f0:	2b2f      	cmp	r3, #47	; 0x2f
    55f2:	d11f      	bne.n	5634 <fs_mount+0x5c>
	return z_impl_k_mutex_lock(mutex, timeout);
    55f4:	f04f 32ff 	mov.w	r2, #4294967295
    55f8:	f04f 33ff 	mov.w	r3, #4294967295
    55fc:	485e      	ldr	r0, [pc, #376]	; (5778 <fs_mount+0x1a0>)
    55fe:	f008 fda3 	bl	e148 <z_impl_k_mutex_lock>
	return list->head == list;
    5602:	4b5e      	ldr	r3, [pc, #376]	; (577c <fs_mount+0x1a4>)
    5604:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5606:	429c      	cmp	r4, r3
    5608:	d12c      	bne.n	5664 <fs_mount+0x8c>
    560a:	2400      	movs	r4, #0
    560c:	e02a      	b.n	5664 <fs_mount+0x8c>
    560e:	4b5c      	ldr	r3, [pc, #368]	; (5780 <fs_mount+0x1a8>)
    5610:	4a5c      	ldr	r2, [pc, #368]	; (5784 <fs_mount+0x1ac>)
    5612:	1a9b      	subs	r3, r3, r2
    5614:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not initialized!!");
    5616:	f04f 0100 	mov.w	r1, #0
    561a:	2201      	movs	r2, #1
    561c:	f362 0102 	bfi	r1, r2, #0, #3
    5620:	f36f 01c5 	bfc	r1, #3, #3
    5624:	f363 118f 	bfi	r1, r3, #6, #10
    5628:	4857      	ldr	r0, [pc, #348]	; (5788 <fs_mount+0x1b0>)
    562a:	f7fc fc55 	bl	1ed8 <log_0>
		return -EINVAL;
    562e:	f06f 0415 	mvn.w	r4, #21
    5632:	e050      	b.n	56d6 <fs_mount+0xfe>
    5634:	4b52      	ldr	r3, [pc, #328]	; (5780 <fs_mount+0x1a8>)
    5636:	4a53      	ldr	r2, [pc, #332]	; (5784 <fs_mount+0x1ac>)
    5638:	1a9b      	subs	r3, r3, r2
    563a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid mount point!!");
    563c:	f04f 0100 	mov.w	r1, #0
    5640:	2201      	movs	r2, #1
    5642:	f362 0102 	bfi	r1, r2, #0, #3
    5646:	f36f 01c5 	bfc	r1, #3, #3
    564a:	f363 118f 	bfi	r1, r3, #6, #10
    564e:	484f      	ldr	r0, [pc, #316]	; (578c <fs_mount+0x1b4>)
    5650:	f7fc fc42 	bl	1ed8 <log_0>
		return -EINVAL;
    5654:	f06f 0415 	mvn.w	r4, #21
    5658:	e03d      	b.n	56d6 <fs_mount+0xfe>
	return (node == list->tail) ? NULL : node->next;
    565a:	4b48      	ldr	r3, [pc, #288]	; (577c <fs_mount+0x1a4>)
    565c:	685b      	ldr	r3, [r3, #4]
    565e:	42a3      	cmp	r3, r4
    5660:	d01e      	beq.n	56a0 <fs_mount+0xc8>
    5662:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    5664:	b1e4      	cbz	r4, 56a0 <fs_mount+0xc8>
		if (len != itr->mountp_len) {
    5666:	69a3      	ldr	r3, [r4, #24]
    5668:	42ab      	cmp	r3, r5
    566a:	d1f6      	bne.n	565a <fs_mount+0x82>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
    566c:	462a      	mov	r2, r5
    566e:	68e1      	ldr	r1, [r4, #12]
    5670:	68f0      	ldr	r0, [r6, #12]
    5672:	f00b ff41 	bl	114f8 <strncmp>
    5676:	2800      	cmp	r0, #0
    5678:	d1ef      	bne.n	565a <fs_mount+0x82>
    567a:	4b41      	ldr	r3, [pc, #260]	; (5780 <fs_mount+0x1a8>)
    567c:	4a41      	ldr	r2, [pc, #260]	; (5784 <fs_mount+0x1ac>)
    567e:	1a9b      	subs	r3, r3, r2
    5680:	08db      	lsrs	r3, r3, #3
			LOG_ERR("mount point already exists!!");
    5682:	f04f 0100 	mov.w	r1, #0
    5686:	2201      	movs	r2, #1
    5688:	f362 0102 	bfi	r1, r2, #0, #3
    568c:	f36f 01c5 	bfc	r1, #3, #3
    5690:	f363 118f 	bfi	r1, r3, #6, #10
    5694:	483e      	ldr	r0, [pc, #248]	; (5790 <fs_mount+0x1b8>)
    5696:	f7fc fc1f 	bl	1ed8 <log_0>
			rc = -EBUSY;
    569a:	f06f 040f 	mvn.w	r4, #15
			goto mount_err;
    569e:	e017      	b.n	56d0 <fs_mount+0xf8>
	fs = fs_type_get(mp->type);
    56a0:	68b4      	ldr	r4, [r6, #8]
    56a2:	4620      	mov	r0, r4
    56a4:	f00b ffe5 	bl	11672 <fs_type_get>
	if (fs == NULL) {
    56a8:	4607      	mov	r7, r0
    56aa:	b1b0      	cbz	r0, 56da <fs_mount+0x102>
	CHECKIF(fs->mount == NULL) {
    56ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    56ae:	b33b      	cbz	r3, 5700 <fs_mount+0x128>
	if (fs->unmount == NULL) {
    56b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    56b2:	2b00      	cmp	r3, #0
    56b4:	d038      	beq.n	5728 <fs_mount+0x150>
	rc = fs->mount(mp);
    56b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    56b8:	4630      	mov	r0, r6
    56ba:	4798      	blx	r3
	if (rc < 0) {
    56bc:	1e04      	subs	r4, r0, #0
    56be:	db49      	blt.n	5754 <fs_mount+0x17c>
	mp->mountp_len = len;
    56c0:	61b5      	str	r5, [r6, #24]
	mp->fs = fs;
    56c2:	61f7      	str	r7, [r6, #28]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    56c4:	4b2d      	ldr	r3, [pc, #180]	; (577c <fs_mount+0x1a4>)
    56c6:	685a      	ldr	r2, [r3, #4]

	node->next = list;
    56c8:	6033      	str	r3, [r6, #0]
	node->prev = tail;
    56ca:	6072      	str	r2, [r6, #4]

	tail->next = node;
    56cc:	6016      	str	r6, [r2, #0]
	list->tail = node;
    56ce:	605e      	str	r6, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    56d0:	4829      	ldr	r0, [pc, #164]	; (5778 <fs_mount+0x1a0>)
    56d2:	f008 fdc3 	bl	e25c <z_impl_k_mutex_unlock>
}
    56d6:	4620      	mov	r0, r4
    56d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56da:	4b29      	ldr	r3, [pc, #164]	; (5780 <fs_mount+0x1a8>)
    56dc:	4a29      	ldr	r2, [pc, #164]	; (5784 <fs_mount+0x1ac>)
    56de:	1a9b      	subs	r3, r3, r2
    56e0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("requested file system type not registered!!");
    56e2:	f04f 0100 	mov.w	r1, #0
    56e6:	2201      	movs	r2, #1
    56e8:	f362 0102 	bfi	r1, r2, #0, #3
    56ec:	f36f 01c5 	bfc	r1, #3, #3
    56f0:	f363 118f 	bfi	r1, r3, #6, #10
    56f4:	4827      	ldr	r0, [pc, #156]	; (5794 <fs_mount+0x1bc>)
    56f6:	f7fc fbef 	bl	1ed8 <log_0>
		rc = -ENOENT;
    56fa:	f06f 0401 	mvn.w	r4, #1
		goto mount_err;
    56fe:	e7e7      	b.n	56d0 <fs_mount+0xf8>
    5700:	4b1f      	ldr	r3, [pc, #124]	; (5780 <fs_mount+0x1a8>)
    5702:	4a20      	ldr	r2, [pc, #128]	; (5784 <fs_mount+0x1ac>)
    5704:	1a9b      	subs	r3, r3, r2
    5706:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs type %d does not support mounting", mp->type);
    5708:	f04f 0200 	mov.w	r2, #0
    570c:	2101      	movs	r1, #1
    570e:	f361 0202 	bfi	r2, r1, #0, #3
    5712:	f36f 02c5 	bfc	r2, #3, #3
    5716:	f363 128f 	bfi	r2, r3, #6, #10
    571a:	4621      	mov	r1, r4
    571c:	481e      	ldr	r0, [pc, #120]	; (5798 <fs_mount+0x1c0>)
    571e:	f7fc fb47 	bl	1db0 <log_1>
		rc = -ENOTSUP;
    5722:	f06f 0485 	mvn.w	r4, #133	; 0x85
		goto mount_err;
    5726:	e7d3      	b.n	56d0 <fs_mount+0xf8>
    5728:	4b15      	ldr	r3, [pc, #84]	; (5780 <fs_mount+0x1a8>)
    572a:	4a16      	ldr	r2, [pc, #88]	; (5784 <fs_mount+0x1ac>)
    572c:	1a9b      	subs	r3, r3, r2
    572e:	08db      	lsrs	r3, r3, #3
		LOG_WRN("mount path %s is not unmountable",
    5730:	f04f 0400 	mov.w	r4, #0
    5734:	2202      	movs	r2, #2
    5736:	f362 0402 	bfi	r4, r2, #0, #3
    573a:	f36f 04c5 	bfc	r4, #3, #3
    573e:	f363 148f 	bfi	r4, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    5742:	68f0      	ldr	r0, [r6, #12]
    5744:	f7fc f9ba 	bl	1abc <z_log_strdup>
    5748:	4601      	mov	r1, r0
    574a:	4622      	mov	r2, r4
    574c:	4813      	ldr	r0, [pc, #76]	; (579c <fs_mount+0x1c4>)
    574e:	f7fc fb2f 	bl	1db0 <log_1>
    5752:	e7b0      	b.n	56b6 <fs_mount+0xde>
    5754:	4b0a      	ldr	r3, [pc, #40]	; (5780 <fs_mount+0x1a8>)
    5756:	4a0b      	ldr	r2, [pc, #44]	; (5784 <fs_mount+0x1ac>)
    5758:	1a9b      	subs	r3, r3, r2
    575a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs mount error (%d)", rc);
    575c:	f04f 0200 	mov.w	r2, #0
    5760:	2101      	movs	r1, #1
    5762:	f361 0202 	bfi	r2, r1, #0, #3
    5766:	f36f 02c5 	bfc	r2, #3, #3
    576a:	f363 128f 	bfi	r2, r3, #6, #10
    576e:	4621      	mov	r1, r4
    5770:	480b      	ldr	r0, [pc, #44]	; (57a0 <fs_mount+0x1c8>)
    5772:	f7fc fb1d 	bl	1db0 <log_1>
		goto mount_err;
    5776:	e7ab      	b.n	56d0 <fs_mount+0xf8>
    5778:	20001d68 	.word	0x20001d68
    577c:	20001d60 	.word	0x20001d60
    5780:	00014698 	.word	0x00014698
    5784:	00014688 	.word	0x00014688
    5788:	000154b8 	.word	0x000154b8
    578c:	000154d8 	.word	0x000154d8
    5790:	000154f0 	.word	0x000154f0
    5794:	00015510 	.word	0x00015510
    5798:	0001553c 	.word	0x0001553c
    579c:	00015564 	.word	0x00015564
    57a0:	00015588 	.word	0x00015588

000057a4 <fs_register>:
{
    57a4:	b538      	push	{r3, r4, r5, lr}
    57a6:	4604      	mov	r4, r0
    57a8:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    57aa:	f04f 32ff 	mov.w	r2, #4294967295
    57ae:	f04f 33ff 	mov.w	r3, #4294967295
    57b2:	480a      	ldr	r0, [pc, #40]	; (57dc <fs_register+0x38>)
    57b4:	f008 fcc8 	bl	e148 <z_impl_k_mutex_lock>
	if (fs_type_get(type) != NULL) {
    57b8:	4620      	mov	r0, r4
    57ba:	f00b ff5a 	bl	11672 <fs_type_get>
    57be:	b948      	cbnz	r0, 57d4 <fs_register+0x30>
		rc = registry_add(type, fs);
    57c0:	4629      	mov	r1, r5
    57c2:	4620      	mov	r0, r4
    57c4:	f7ff fc8a 	bl	50dc <registry_add>
    57c8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    57ca:	4804      	ldr	r0, [pc, #16]	; (57dc <fs_register+0x38>)
    57cc:	f008 fd46 	bl	e25c <z_impl_k_mutex_unlock>
}
    57d0:	4620      	mov	r0, r4
    57d2:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
    57d4:	f06f 0477 	mvn.w	r4, #119	; 0x77
    57d8:	e7f7      	b.n	57ca <fs_register+0x26>
    57da:	bf00      	nop
    57dc:	20001d68 	.word	0x20001d68

000057e0 <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
    57e0:	4603      	mov	r3, r0
    57e2:	b128      	cbz	r0, 57f0 <fs_impl_strip_prefix+0x10>
    57e4:	b129      	cbz	r1, 57f2 <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
    57e6:	698a      	ldr	r2, [r1, #24]
    57e8:	4410      	add	r0, r2
	return *path ? path : root;
    57ea:	5c9b      	ldrb	r3, [r3, r2]
    57ec:	b113      	cbz	r3, 57f4 <fs_impl_strip_prefix+0x14>
    57ee:	4770      	bx	lr
    57f0:	4770      	bx	lr
    57f2:	4770      	bx	lr
    57f4:	4800      	ldr	r0, [pc, #0]	; (57f8 <fs_impl_strip_prefix+0x18>)
}
    57f6:	4770      	bx	lr
    57f8:	000155a0 	.word	0x000155a0

000057fc <littlefs_init>:
		}
	}
}

static int littlefs_init(const struct device *dev)
{
    57fc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);
	static struct fs_mount_t *partitions[] = {
		DT_INST_FOREACH_STATUS_OKAY(REFERENCE_MOUNT)
	};

	int rc = fs_register(FS_LITTLEFS, &littlefs_fs);
    57fe:	4902      	ldr	r1, [pc, #8]	; (5808 <littlefs_init+0xc>)
    5800:	2001      	movs	r0, #1
    5802:	f7ff ffcf 	bl	57a4 <fs_register>
			mount_init(*mpi++);
		}
	}

	return rc;
}
    5806:	bd08      	pop	{r3, pc}
    5808:	00015710 	.word	0x00015710

0000580c <get_block_size>:
{
    580c:	b500      	push	{lr}
    580e:	b083      	sub	sp, #12
	struct get_page_ctx ctx = {
    5810:	9000      	str	r0, [sp, #0]
    5812:	2300      	movs	r3, #0
    5814:	9301      	str	r3, [sp, #4]
	const struct device *dev = flash_area_get_device(fa);
    5816:	f00b fd9b 	bl	11350 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
    581a:	466a      	mov	r2, sp
    581c:	4903      	ldr	r1, [pc, #12]	; (582c <get_block_size+0x20>)
    581e:	f00c fc0f 	bl	12040 <flash_page_foreach>
}
    5822:	9801      	ldr	r0, [sp, #4]
    5824:	b003      	add	sp, #12
    5826:	f85d fb04 	ldr.w	pc, [sp], #4
    582a:	bf00      	nop
    582c:	00011781 	.word	0x00011781

00005830 <littlefs_mount>:
{
    5830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5834:	b08d      	sub	sp, #52	; 0x34
    5836:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
    5838:	6904      	ldr	r4, [r0, #16]
	unsigned int area_id = (uintptr_t)mountp->storage_dev;
    583a:	6947      	ldr	r7, [r0, #20]
    583c:	4bc3      	ldr	r3, [pc, #780]	; (5b4c <littlefs_mount+0x31c>)
    583e:	4ac4      	ldr	r2, [pc, #784]	; (5b50 <littlefs_mount+0x320>)
    5840:	1a9b      	subs	r3, r3, r2
    5842:	08db      	lsrs	r3, r3, #3
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
    5844:	f04f 0c00 	mov.w	ip, #0
    5848:	2203      	movs	r2, #3
    584a:	f362 0c02 	bfi	ip, r2, #0, #3
    584e:	f36f 0cc5 	bfc	ip, #3, #3
    5852:	f363 1c8f 	bfi	ip, r3, #6, #10
    5856:	4bbf      	ldr	r3, [pc, #764]	; (5b54 <littlefs_mount+0x324>)
    5858:	ae07      	add	r6, sp, #28
    585a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    585c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    5860:	4663      	mov	r3, ip
    5862:	2204      	movs	r2, #4
    5864:	4631      	mov	r1, r6
    5866:	48bc      	ldr	r0, [pc, #752]	; (5b58 <littlefs_mount+0x328>)
    5868:	f7fc fb14 	bl	1e94 <log_n>
	if (fs->area) {
    586c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5870:	2b00      	cmp	r3, #0
    5872:	f040 8167 	bne.w	5b44 <littlefs_mount+0x314>
	k_mutex_init(&fs->mutex);
    5876:	f104 06ec 	add.w	r6, r4, #236	; 0xec
	return z_impl_k_mutex_init(mutex);
    587a:	4630      	mov	r0, r6
    587c:	f00e fa2d 	bl	13cda <z_impl_k_mutex_init>
	return z_impl_k_mutex_lock(mutex, timeout);
    5880:	f04f 32ff 	mov.w	r2, #4294967295
    5884:	f04f 33ff 	mov.w	r3, #4294967295
    5888:	4630      	mov	r0, r6
    588a:	f008 fc5d 	bl	e148 <z_impl_k_mutex_lock>
	ret = flash_area_open(area_id, &fs->area);
    588e:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    5892:	b2f8      	uxtb	r0, r7
    5894:	f7fe fb36 	bl	3f04 <flash_area_open>
	if ((ret < 0) || (fs->area == NULL)) {
    5898:	2800      	cmp	r0, #0
    589a:	db26      	blt.n	58ea <littlefs_mount+0xba>
    589c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    58a0:	b318      	cbz	r0, 58ea <littlefs_mount+0xba>
	dev = flash_area_get_device(fs->area);
    58a2:	f00b fd55 	bl	11350 <flash_area_get_device>
	if (dev == NULL) {
    58a6:	9004      	str	r0, [sp, #16]
    58a8:	2800      	cmp	r0, #0
    58aa:	d03b      	beq.n	5924 <littlefs_mount+0xf4>
	lfs_size_t read_size = lcp->read_size;
    58ac:	f8d4 9014 	ldr.w	r9, [r4, #20]
	if (read_size == 0) {
    58b0:	f1b9 0f00 	cmp.w	r9, #0
    58b4:	d101      	bne.n	58ba <littlefs_mount+0x8a>
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
    58b6:	f04f 0910 	mov.w	r9, #16
	lfs_size_t prog_size = lcp->prog_size;
    58ba:	f8d4 8018 	ldr.w	r8, [r4, #24]
	if (prog_size == 0) {
    58be:	f1b8 0f00 	cmp.w	r8, #0
    58c2:	d101      	bne.n	58c8 <littlefs_mount+0x98>
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
    58c4:	f04f 0810 	mov.w	r8, #16
	lfs_size_t block_size = lcp->block_size;
    58c8:	69e7      	ldr	r7, [r4, #28]
	if (block_size == 0) {
    58ca:	2f00      	cmp	r7, #0
    58cc:	d044      	beq.n	5958 <littlefs_mount+0x128>
	if (block_size == 0) {
    58ce:	2f00      	cmp	r7, #0
    58d0:	f000 8135 	beq.w	5b3e <littlefs_mount+0x30e>
	int32_t block_cycles = lcp->block_cycles;
    58d4:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
	if (block_cycles == 0) {
    58d8:	f1bb 0f00 	cmp.w	fp, #0
    58dc:	d042      	beq.n	5964 <littlefs_mount+0x134>
	if (block_cycles <= 0) {
    58de:	f1bb 0f00 	cmp.w	fp, #0
    58e2:	dc41      	bgt.n	5968 <littlefs_mount+0x138>
		block_cycles = -1;
    58e4:	f04f 3bff 	mov.w	fp, #4294967295
    58e8:	e03e      	b.n	5968 <littlefs_mount+0x138>
    58ea:	4b98      	ldr	r3, [pc, #608]	; (5b4c <littlefs_mount+0x31c>)
    58ec:	4a98      	ldr	r2, [pc, #608]	; (5b50 <littlefs_mount+0x320>)
    58ee:	1a9b      	subs	r3, r3, r2
    58f0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("can't open flash area %d", area_id);
    58f2:	f04f 0200 	mov.w	r2, #0
    58f6:	2101      	movs	r1, #1
    58f8:	f361 0202 	bfi	r2, r1, #0, #3
    58fc:	f36f 02c5 	bfc	r2, #3, #3
    5900:	f363 128f 	bfi	r2, r3, #6, #10
    5904:	4639      	mov	r1, r7
    5906:	4895      	ldr	r0, [pc, #596]	; (5b5c <littlefs_mount+0x32c>)
    5908:	f7fc fa52 	bl	1db0 <log_1>
		ret = -ENODEV;
    590c:	f06f 0712 	mvn.w	r7, #18
		fs->area = NULL;
    5910:	2300      	movs	r3, #0
    5912:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
    5916:	4630      	mov	r0, r6
    5918:	f008 fca0 	bl	e25c <z_impl_k_mutex_unlock>
}
    591c:	4638      	mov	r0, r7
    591e:	b00d      	add	sp, #52	; 0x34
    5920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5924:	4b89      	ldr	r3, [pc, #548]	; (5b4c <littlefs_mount+0x31c>)
    5926:	4a8a      	ldr	r2, [pc, #552]	; (5b50 <littlefs_mount+0x320>)
    5928:	1a9b      	subs	r3, r3, r2
    592a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("can't get flash device: %s", log_strdup(fs->area->fa_dev_name));
    592c:	f04f 0500 	mov.w	r5, #0
    5930:	2201      	movs	r2, #1
    5932:	f362 0502 	bfi	r5, r2, #0, #3
    5936:	f36f 05c5 	bfc	r5, #3, #3
    593a:	f363 158f 	bfi	r5, r3, #6, #10
    593e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5942:	68d8      	ldr	r0, [r3, #12]
    5944:	f7fc f8ba 	bl	1abc <z_log_strdup>
    5948:	4601      	mov	r1, r0
    594a:	462a      	mov	r2, r5
    594c:	4884      	ldr	r0, [pc, #528]	; (5b60 <littlefs_mount+0x330>)
    594e:	f7fc fa2f 	bl	1db0 <log_1>
		ret = -ENODEV;
    5952:	f06f 0712 	mvn.w	r7, #18
    5956:	e7db      	b.n	5910 <littlefs_mount+0xe0>
		block_size = get_block_size(fs->area);
    5958:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    595c:	f7ff ff56 	bl	580c <get_block_size>
    5960:	4607      	mov	r7, r0
    5962:	e7b4      	b.n	58ce <littlefs_mount+0x9e>
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
    5964:	f44f 7b00 	mov.w	fp, #512	; 0x200
	lfs_size_t cache_size = lcp->cache_size;
    5968:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    596a:	9302      	str	r3, [sp, #8]
	if (cache_size == 0) {
    596c:	b90b      	cbnz	r3, 5972 <littlefs_mount+0x142>
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
    596e:	2340      	movs	r3, #64	; 0x40
    5970:	9302      	str	r3, [sp, #8]
	lfs_size_t lookahead_size = lcp->lookahead_size;
    5972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5974:	9301      	str	r3, [sp, #4]
	if (lookahead_size == 0) {
    5976:	b90b      	cbnz	r3, 597c <littlefs_mount+0x14c>
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
    5978:	2320      	movs	r3, #32
    597a:	9301      	str	r3, [sp, #4]
	lfs_size_t block_count = fs->area->fa_size / block_size;
    597c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5980:	689b      	ldr	r3, [r3, #8]
    5982:	fbb3 f3f7 	udiv	r3, r3, r7
    5986:	9303      	str	r3, [sp, #12]
    5988:	4b70      	ldr	r3, [pc, #448]	; (5b4c <littlefs_mount+0x31c>)
    598a:	4a71      	ldr	r2, [pc, #452]	; (5b50 <littlefs_mount+0x320>)
    598c:	1a9b      	subs	r3, r3, r2
    598e:	08da      	lsrs	r2, r3, #3
	LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
    5990:	f04f 0a00 	mov.w	sl, #0
    5994:	2103      	movs	r1, #3
    5996:	f361 0a02 	bfi	sl, r1, #0, #3
    599a:	f36f 0ac5 	bfc	sl, #3, #3
    599e:	9205      	str	r2, [sp, #20]
    59a0:	f362 1a8f 	bfi	sl, r2, #6, #10
    59a4:	9804      	ldr	r0, [sp, #16]
    59a6:	6800      	ldr	r0, [r0, #0]
    59a8:	f7fc f888 	bl	1abc <z_log_strdup>
    59ac:	9007      	str	r0, [sp, #28]
    59ae:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    59b2:	685b      	ldr	r3, [r3, #4]
    59b4:	9308      	str	r3, [sp, #32]
    59b6:	9b03      	ldr	r3, [sp, #12]
    59b8:	9309      	str	r3, [sp, #36]	; 0x24
    59ba:	970a      	str	r7, [sp, #40]	; 0x28
    59bc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    59c0:	4653      	mov	r3, sl
    59c2:	2205      	movs	r2, #5
    59c4:	f10d 0c1c 	add.w	ip, sp, #28
    59c8:	4661      	mov	r1, ip
    59ca:	4866      	ldr	r0, [pc, #408]	; (5b64 <littlefs_mount+0x334>)
    59cc:	f7fc fa62 	bl	1e94 <log_n>
	LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
    59d0:	f04f 0300 	mov.w	r3, #0
    59d4:	2003      	movs	r0, #3
    59d6:	f360 0302 	bfi	r3, r0, #0, #3
    59da:	f36f 03c5 	bfc	r3, #3, #3
    59de:	9905      	ldr	r1, [sp, #20]
    59e0:	f361 138f 	bfi	r3, r1, #6, #10
    59e4:	f8cd 901c 	str.w	r9, [sp, #28]
    59e8:	f8cd 8020 	str.w	r8, [sp, #32]
    59ec:	9a02      	ldr	r2, [sp, #8]
    59ee:	9209      	str	r2, [sp, #36]	; 0x24
    59f0:	9901      	ldr	r1, [sp, #4]
    59f2:	910a      	str	r1, [sp, #40]	; 0x28
    59f4:	2204      	movs	r2, #4
    59f6:	a807      	add	r0, sp, #28
    59f8:	4601      	mov	r1, r0
    59fa:	485b      	ldr	r0, [pc, #364]	; (5b68 <littlefs_mount+0x338>)
    59fc:	f7fc fa4a 	bl	1e94 <log_n>
	lcp->context = (void *)fs->area;
    5a00:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5a04:	6023      	str	r3, [r4, #0]
	lcp->read = lfs_api_read;
    5a06:	4b59      	ldr	r3, [pc, #356]	; (5b6c <littlefs_mount+0x33c>)
    5a08:	6063      	str	r3, [r4, #4]
	lcp->prog = lfs_api_prog;
    5a0a:	4b59      	ldr	r3, [pc, #356]	; (5b70 <littlefs_mount+0x340>)
    5a0c:	60a3      	str	r3, [r4, #8]
	lcp->erase = lfs_api_erase;
    5a0e:	4b59      	ldr	r3, [pc, #356]	; (5b74 <littlefs_mount+0x344>)
    5a10:	60e3      	str	r3, [r4, #12]
	lcp->sync = lfs_api_sync;
    5a12:	4b59      	ldr	r3, [pc, #356]	; (5b78 <littlefs_mount+0x348>)
    5a14:	6123      	str	r3, [r4, #16]
	lcp->read_size = read_size;
    5a16:	f8c4 9014 	str.w	r9, [r4, #20]
	lcp->prog_size = prog_size;
    5a1a:	f8c4 8018 	str.w	r8, [r4, #24]
	lcp->block_size = block_size;
    5a1e:	61e7      	str	r7, [r4, #28]
	lcp->block_count = block_count;
    5a20:	9b03      	ldr	r3, [sp, #12]
    5a22:	6223      	str	r3, [r4, #32]
	lcp->block_cycles = block_cycles;
    5a24:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
	lcp->cache_size = cache_size;
    5a28:	9a02      	ldr	r2, [sp, #8]
    5a2a:	62a2      	str	r2, [r4, #40]	; 0x28
	lcp->lookahead_size = lookahead_size;
    5a2c:	9901      	ldr	r1, [sp, #4]
    5a2e:	62e1      	str	r1, [r4, #44]	; 0x2c
	ret = lfs_mount(&fs->lfs, &fs->cfg);
    5a30:	f104 0870 	add.w	r8, r4, #112	; 0x70
    5a34:	4621      	mov	r1, r4
    5a36:	4640      	mov	r0, r8
    5a38:	f006 f96e 	bl	bd18 <lfs_mount>
	if (ret < 0 &&
    5a3c:	1e07      	subs	r7, r0, #0
    5a3e:	da04      	bge.n	5a4a <littlefs_mount+0x21a>
	    (mountp->flags & FS_MOUNT_FLAG_NO_FORMAT) == 0) {
    5a40:	f895 3020 	ldrb.w	r3, [r5, #32]
	if (ret < 0 &&
    5a44:	f013 0f01 	tst.w	r3, #1
    5a48:	d018      	beq.n	5a7c <littlefs_mount+0x24c>
    5a4a:	4b40      	ldr	r3, [pc, #256]	; (5b4c <littlefs_mount+0x31c>)
    5a4c:	4a40      	ldr	r2, [pc, #256]	; (5b50 <littlefs_mount+0x320>)
    5a4e:	1a9b      	subs	r3, r3, r2
    5a50:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s mounted", log_strdup(mountp->mnt_point));
    5a52:	f04f 0800 	mov.w	r8, #0
    5a56:	2203      	movs	r2, #3
    5a58:	f362 0802 	bfi	r8, r2, #0, #3
    5a5c:	f36f 08c5 	bfc	r8, #3, #3
    5a60:	f363 188f 	bfi	r8, r3, #6, #10
    5a64:	68e8      	ldr	r0, [r5, #12]
    5a66:	f7fc f829 	bl	1abc <z_log_strdup>
    5a6a:	4601      	mov	r1, r0
    5a6c:	4642      	mov	r2, r8
    5a6e:	4843      	ldr	r0, [pc, #268]	; (5b7c <littlefs_mount+0x34c>)
    5a70:	f7fc f99e 	bl	1db0 <log_1>
	if (ret < 0) {
    5a74:	2f00      	cmp	r7, #0
    5a76:	f6bf af4e 	bge.w	5916 <littlefs_mount+0xe6>
    5a7a:	e749      	b.n	5910 <littlefs_mount+0xe0>
    5a7c:	4b33      	ldr	r3, [pc, #204]	; (5b4c <littlefs_mount+0x31c>)
    5a7e:	4a34      	ldr	r2, [pc, #208]	; (5b50 <littlefs_mount+0x320>)
    5a80:	1a9b      	subs	r3, r3, r2
    5a82:	08db      	lsrs	r3, r3, #3
		LOG_WRN("can't mount (LFS %d); formatting", ret);
    5a84:	f04f 0200 	mov.w	r2, #0
    5a88:	2102      	movs	r1, #2
    5a8a:	f361 0202 	bfi	r2, r1, #0, #3
    5a8e:	f36f 02c5 	bfc	r2, #3, #3
    5a92:	f363 128f 	bfi	r2, r3, #6, #10
    5a96:	4639      	mov	r1, r7
    5a98:	4839      	ldr	r0, [pc, #228]	; (5b80 <littlefs_mount+0x350>)
    5a9a:	f7fc f989 	bl	1db0 <log_1>
		if ((mountp->flags & FS_MOUNT_FLAG_READ_ONLY) == 0) {
    5a9e:	f895 3020 	ldrb.w	r3, [r5, #32]
    5aa2:	f013 0f02 	tst.w	r3, #2
    5aa6:	d137      	bne.n	5b18 <littlefs_mount+0x2e8>
			ret = lfs_format(&fs->lfs, &fs->cfg);
    5aa8:	4621      	mov	r1, r4
    5aaa:	4640      	mov	r0, r8
    5aac:	f007 fea6 	bl	d7fc <lfs_format>
			if (ret < 0) {
    5ab0:	1e07      	subs	r7, r0, #0
    5ab2:	db1b      	blt.n	5aec <littlefs_mount+0x2bc>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
    5ab4:	4621      	mov	r1, r4
    5ab6:	4640      	mov	r0, r8
    5ab8:	f006 f92e 	bl	bd18 <lfs_mount>
		if (ret < 0) {
    5abc:	1e07      	subs	r7, r0, #0
    5abe:	dac4      	bge.n	5a4a <littlefs_mount+0x21a>
    5ac0:	4b22      	ldr	r3, [pc, #136]	; (5b4c <littlefs_mount+0x31c>)
    5ac2:	4a23      	ldr	r2, [pc, #140]	; (5b50 <littlefs_mount+0x320>)
    5ac4:	1a9b      	subs	r3, r3, r2
    5ac6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("remount after format failed (LFS %d)", ret);
    5ac8:	f04f 0200 	mov.w	r2, #0
    5acc:	2101      	movs	r1, #1
    5ace:	f361 0202 	bfi	r2, r1, #0, #3
    5ad2:	f36f 02c5 	bfc	r2, #3, #3
    5ad6:	f363 128f 	bfi	r2, r3, #6, #10
    5ada:	4639      	mov	r1, r7
    5adc:	4829      	ldr	r0, [pc, #164]	; (5b84 <littlefs_mount+0x354>)
    5ade:	f7fc f967 	bl	1db0 <log_1>
			ret = lfs_to_errno(ret);
    5ae2:	4638      	mov	r0, r7
    5ae4:	f00b fdcd 	bl	11682 <lfs_to_errno>
    5ae8:	4607      	mov	r7, r0
			goto out;
    5aea:	e7c3      	b.n	5a74 <littlefs_mount+0x244>
    5aec:	4b17      	ldr	r3, [pc, #92]	; (5b4c <littlefs_mount+0x31c>)
    5aee:	4a18      	ldr	r2, [pc, #96]	; (5b50 <littlefs_mount+0x320>)
    5af0:	1a9b      	subs	r3, r3, r2
    5af2:	08db      	lsrs	r3, r3, #3
				LOG_ERR("format failed (LFS %d)", ret);
    5af4:	f04f 0200 	mov.w	r2, #0
    5af8:	2101      	movs	r1, #1
    5afa:	f361 0202 	bfi	r2, r1, #0, #3
    5afe:	f36f 02c5 	bfc	r2, #3, #3
    5b02:	f363 128f 	bfi	r2, r3, #6, #10
    5b06:	4639      	mov	r1, r7
    5b08:	481f      	ldr	r0, [pc, #124]	; (5b88 <littlefs_mount+0x358>)
    5b0a:	f7fc f951 	bl	1db0 <log_1>
				ret = lfs_to_errno(ret);
    5b0e:	4638      	mov	r0, r7
    5b10:	f00b fdb7 	bl	11682 <lfs_to_errno>
    5b14:	4607      	mov	r7, r0
				goto out;
    5b16:	e7ad      	b.n	5a74 <littlefs_mount+0x244>
    5b18:	4b0c      	ldr	r3, [pc, #48]	; (5b4c <littlefs_mount+0x31c>)
    5b1a:	4a0d      	ldr	r2, [pc, #52]	; (5b50 <littlefs_mount+0x320>)
    5b1c:	1a9b      	subs	r3, r3, r2
    5b1e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("can not format read-only system");
    5b20:	f04f 0100 	mov.w	r1, #0
    5b24:	2201      	movs	r2, #1
    5b26:	f362 0102 	bfi	r1, r2, #0, #3
    5b2a:	f36f 01c5 	bfc	r1, #3, #3
    5b2e:	f363 118f 	bfi	r1, r3, #6, #10
    5b32:	4816      	ldr	r0, [pc, #88]	; (5b8c <littlefs_mount+0x35c>)
    5b34:	f7fc f9d0 	bl	1ed8 <log_0>
			ret = -EROFS;
    5b38:	f06f 071d 	mvn.w	r7, #29
    5b3c:	e6e8      	b.n	5910 <littlefs_mount+0xe0>
		ret = -EINVAL;
    5b3e:	f06f 0715 	mvn.w	r7, #21
    5b42:	e6e5      	b.n	5910 <littlefs_mount+0xe0>
		return -EBUSY;
    5b44:	f06f 070f 	mvn.w	r7, #15
    5b48:	e6e8      	b.n	591c <littlefs_mount+0xec>
    5b4a:	bf00      	nop
    5b4c:	000146a0 	.word	0x000146a0
    5b50:	00014688 	.word	0x00014688
    5b54:	00014798 	.word	0x00014798
    5b58:	000155a4 	.word	0x000155a4
    5b5c:	000155d0 	.word	0x000155d0
    5b60:	000155ec 	.word	0x000155ec
    5b64:	00015608 	.word	0x00015608
    5b68:	0001563c 	.word	0x0001563c
    5b6c:	00011811 	.word	0x00011811
    5b70:	000117f7 	.word	0x000117f7
    5b74:	000117e3 	.word	0x000117e3
    5b78:	00011761 	.word	0x00011761
    5b7c:	000156e8 	.word	0x000156e8
    5b80:	00015664 	.word	0x00015664
    5b84:	000156c0 	.word	0x000156c0
    5b88:	00015688 	.word	0x00015688
    5b8c:	000156a0 	.word	0x000156a0

00005b90 <release_file_data>:
{
    5b90:	b510      	push	{r4, lr}
    5b92:	4604      	mov	r4, r0
	struct lfs_file_data *fdp = fp->filep;
    5b94:	6803      	ldr	r3, [r0, #0]
	if (fdp->config.buffer) {
    5b96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    5b98:	b11a      	cbz	r2, 5ba2 <release_file_data+0x12>
	k_heap_free(&file_cache_heap, buf);
    5b9a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    5b9c:	4804      	ldr	r0, [pc, #16]	; (5bb0 <release_file_data+0x20>)
    5b9e:	f00d ffbb 	bl	13b18 <k_heap_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
    5ba2:	4621      	mov	r1, r4
    5ba4:	4803      	ldr	r0, [pc, #12]	; (5bb4 <release_file_data+0x24>)
    5ba6:	f00d fff9 	bl	13b9c <k_mem_slab_free>
	fp->filep = NULL;
    5baa:	2300      	movs	r3, #0
    5bac:	6023      	str	r3, [r4, #0]
}
    5bae:	bd10      	pop	{r4, pc}
    5bb0:	20000350 	.word	0x20000350
    5bb4:	20000304 	.word	0x20000304

00005bb8 <littlefs_closedir>:
{
    5bb8:	b570      	push	{r4, r5, r6, lr}
    5bba:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
    5bbc:	6843      	ldr	r3, [r0, #4]
    5bbe:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
    5bc0:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    5bc4:	f04f 32ff 	mov.w	r2, #4294967295
    5bc8:	f04f 33ff 	mov.w	r3, #4294967295
    5bcc:	4630      	mov	r0, r6
    5bce:	f008 fabb 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
    5bd2:	6821      	ldr	r1, [r4, #0]
    5bd4:	f105 0070 	add.w	r0, r5, #112	; 0x70
    5bd8:	f00d fba7 	bl	1332a <lfs_dir_close>
    5bdc:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    5bde:	4630      	mov	r0, r6
    5be0:	f008 fb3c 	bl	e25c <z_impl_k_mutex_unlock>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
    5be4:	4621      	mov	r1, r4
    5be6:	4803      	ldr	r0, [pc, #12]	; (5bf4 <littlefs_closedir+0x3c>)
    5be8:	f00d ffd8 	bl	13b9c <k_mem_slab_free>
	return lfs_to_errno(ret);
    5bec:	4628      	mov	r0, r5
    5bee:	f00b fd48 	bl	11682 <lfs_to_errno>
}
    5bf2:	bd70      	pop	{r4, r5, r6, pc}
    5bf4:	20000320 	.word	0x20000320

00005bf8 <littlefs_unmount>:
{
    5bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bfa:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
    5bfc:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
    5bfe:	f104 07ec 	add.w	r7, r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    5c02:	f04f 32ff 	mov.w	r2, #4294967295
    5c06:	f04f 33ff 	mov.w	r3, #4294967295
    5c0a:	4638      	mov	r0, r7
    5c0c:	f008 fa9c 	bl	e148 <z_impl_k_mutex_lock>
	lfs_unmount(&fs->lfs);
    5c10:	f104 0070 	add.w	r0, r4, #112	; 0x70
    5c14:	f00d fbb7 	bl	13386 <lfs_unmount>
	flash_area_close(fs->area);
    5c18:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    5c1c:	f00b fb16 	bl	1124c <flash_area_close>
	fs->area = NULL;
    5c20:	2600      	movs	r6, #0
    5c22:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
    5c26:	4638      	mov	r0, r7
    5c28:	f008 fb18 	bl	e25c <z_impl_k_mutex_unlock>
    5c2c:	4b0b      	ldr	r3, [pc, #44]	; (5c5c <littlefs_unmount+0x64>)
    5c2e:	4a0c      	ldr	r2, [pc, #48]	; (5c60 <littlefs_unmount+0x68>)
    5c30:	1a9b      	subs	r3, r3, r2
    5c32:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s unmounted", log_strdup(mountp->mnt_point));
    5c34:	f04f 0400 	mov.w	r4, #0
    5c38:	2203      	movs	r2, #3
    5c3a:	f362 0402 	bfi	r4, r2, #0, #3
    5c3e:	f366 04c5 	bfi	r4, r6, #3, #3
    5c42:	f363 148f 	bfi	r4, r3, #6, #10
    5c46:	68e8      	ldr	r0, [r5, #12]
    5c48:	f7fb ff38 	bl	1abc <z_log_strdup>
    5c4c:	4601      	mov	r1, r0
    5c4e:	4622      	mov	r2, r4
    5c50:	4804      	ldr	r0, [pc, #16]	; (5c64 <littlefs_unmount+0x6c>)
    5c52:	f7fc f8ad 	bl	1db0 <log_1>
}
    5c56:	4630      	mov	r0, r6
    5c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c5a:	bf00      	nop
    5c5c:	000146a0 	.word	0x000146a0
    5c60:	00014688 	.word	0x00014688
    5c64:	000156f4 	.word	0x000156f4

00005c68 <littlefs_opendir>:
{
    5c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c6a:	4604      	mov	r4, r0
    5c6c:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
    5c6e:	6843      	ldr	r3, [r0, #4]
    5c70:	691e      	ldr	r6, [r3, #16]
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
    5c72:	2200      	movs	r2, #0
    5c74:	2300      	movs	r3, #0
    5c76:	4601      	mov	r1, r0
    5c78:	4817      	ldr	r0, [pc, #92]	; (5cd8 <littlefs_opendir+0x70>)
    5c7a:	f008 f92b 	bl	ded4 <k_mem_slab_alloc>
    5c7e:	bb10      	cbnz	r0, 5cc6 <littlefs_opendir+0x5e>
	memset(dp->dirp, 0, sizeof(struct lfs_dir));
    5c80:	2234      	movs	r2, #52	; 0x34
    5c82:	2100      	movs	r1, #0
    5c84:	6820      	ldr	r0, [r4, #0]
    5c86:	f00b fc8d 	bl	115a4 <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
    5c8a:	6861      	ldr	r1, [r4, #4]
    5c8c:	4628      	mov	r0, r5
    5c8e:	f7ff fda7 	bl	57e0 <fs_impl_strip_prefix>
    5c92:	4605      	mov	r5, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
    5c94:	f106 07ec 	add.w	r7, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    5c98:	f04f 32ff 	mov.w	r2, #4294967295
    5c9c:	f04f 33ff 	mov.w	r3, #4294967295
    5ca0:	4638      	mov	r0, r7
    5ca2:	f008 fa51 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
    5ca6:	462a      	mov	r2, r5
    5ca8:	6821      	ldr	r1, [r4, #0]
    5caa:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5cae:	f005 ff97 	bl	bbe0 <lfs_dir_open>
    5cb2:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    5cb4:	4638      	mov	r0, r7
    5cb6:	f008 fad1 	bl	e25c <z_impl_k_mutex_unlock>
	if (ret < 0) {
    5cba:	2d00      	cmp	r5, #0
    5cbc:	db06      	blt.n	5ccc <littlefs_opendir+0x64>
	return lfs_to_errno(ret);
    5cbe:	4628      	mov	r0, r5
    5cc0:	f00b fcdf 	bl	11682 <lfs_to_errno>
}
    5cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
    5cc6:	f06f 000b 	mvn.w	r0, #11
    5cca:	e7fb      	b.n	5cc4 <littlefs_opendir+0x5c>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
    5ccc:	4621      	mov	r1, r4
    5cce:	4802      	ldr	r0, [pc, #8]	; (5cd8 <littlefs_opendir+0x70>)
    5cd0:	f00d ff64 	bl	13b9c <k_mem_slab_free>
    5cd4:	e7f3      	b.n	5cbe <littlefs_opendir+0x56>
    5cd6:	bf00      	nop
    5cd8:	20000320 	.word	0x20000320

00005cdc <littlefs_open>:
{
    5cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ce0:	b082      	sub	sp, #8
    5ce2:	4604      	mov	r4, r0
    5ce4:	460e      	mov	r6, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
    5ce6:	6843      	ldr	r3, [r0, #4]
    5ce8:	691f      	ldr	r7, [r3, #16]
	int flags = lfs_flags_from_zephyr(zflags);
    5cea:	4610      	mov	r0, r2
    5cec:	f00b fd3a 	bl	11764 <lfs_flags_from_zephyr>
    5cf0:	4605      	mov	r5, r0
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
    5cf2:	2200      	movs	r2, #0
    5cf4:	2300      	movs	r3, #0
    5cf6:	4621      	mov	r1, r4
    5cf8:	4822      	ldr	r0, [pc, #136]	; (5d84 <littlefs_open+0xa8>)
    5cfa:	f008 f8eb 	bl	ded4 <k_mem_slab_alloc>
	if (ret != 0) {
    5cfe:	4603      	mov	r3, r0
    5d00:	b118      	cbz	r0, 5d0a <littlefs_open+0x2e>
}
    5d02:	4618      	mov	r0, r3
    5d04:	b002      	add	sp, #8
    5d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct lfs_file_data *fdp = fp->filep;
    5d0a:	f8d4 8000 	ldr.w	r8, [r4]
	memset(fdp, 0, sizeof(*fdp));
    5d0e:	2264      	movs	r2, #100	; 0x64
    5d10:	2100      	movs	r1, #0
    5d12:	4640      	mov	r0, r8
    5d14:	f00b fc46 	bl	115a4 <memset>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
    5d18:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
	ret = k_heap_alloc(&file_cache_heap, size, K_NO_WAIT);
    5d1c:	2200      	movs	r2, #0
    5d1e:	2300      	movs	r3, #0
    5d20:	6a89      	ldr	r1, [r1, #40]	; 0x28
    5d22:	4819      	ldr	r0, [pc, #100]	; (5d88 <littlefs_open+0xac>)
    5d24:	f00d feed 	bl	13b02 <k_heap_alloc>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
    5d28:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
	if (fdp->cache_block == NULL) {
    5d2c:	b300      	cbz	r0, 5d70 <littlefs_open+0x94>
	fdp->config.buffer = fdp->cache_block;
    5d2e:	46c1      	mov	r9, r8
    5d30:	f849 0f54 	str.w	r0, [r9, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
    5d34:	6861      	ldr	r1, [r4, #4]
    5d36:	4630      	mov	r0, r6
    5d38:	f7ff fd52 	bl	57e0 <fs_impl_strip_prefix>
    5d3c:	4682      	mov	sl, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
    5d3e:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    5d42:	f04f 32ff 	mov.w	r2, #4294967295
    5d46:	f04f 33ff 	mov.w	r3, #4294967295
    5d4a:	4630      	mov	r0, r6
    5d4c:	f008 f9fc 	bl	e148 <z_impl_k_mutex_lock>
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
    5d50:	f8cd 9000 	str.w	r9, [sp]
    5d54:	462b      	mov	r3, r5
    5d56:	4652      	mov	r2, sl
    5d58:	4641      	mov	r1, r8
    5d5a:	f107 0070 	add.w	r0, r7, #112	; 0x70
    5d5e:	f007 fa61 	bl	d224 <lfs_file_opencfg>
    5d62:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    5d64:	4630      	mov	r0, r6
    5d66:	f008 fa79 	bl	e25c <z_impl_k_mutex_unlock>
	if (ret < 0) {
    5d6a:	2d00      	cmp	r5, #0
    5d6c:	da05      	bge.n	5d7a <littlefs_open+0x9e>
    5d6e:	e001      	b.n	5d74 <littlefs_open+0x98>
		ret = -ENOMEM;
    5d70:	f06f 050b 	mvn.w	r5, #11
		release_file_data(fp);
    5d74:	4620      	mov	r0, r4
    5d76:	f7ff ff0b 	bl	5b90 <release_file_data>
	return lfs_to_errno(ret);
    5d7a:	4628      	mov	r0, r5
    5d7c:	f00b fc81 	bl	11682 <lfs_to_errno>
    5d80:	4603      	mov	r3, r0
    5d82:	e7be      	b.n	5d02 <littlefs_open+0x26>
    5d84:	20000304 	.word	0x20000304
    5d88:	20000350 	.word	0x20000350

00005d8c <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    5d8c:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
    5d90:	b242      	sxtb	r2, r0
    5d92:	2a00      	cmp	r2, #0
    5d94:	db12      	blt.n	5dbc <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    5d96:	2b08      	cmp	r3, #8
    5d98:	d002      	beq.n	5da0 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
    5d9a:	f010 0f78 	tst.w	r0, #120	; 0x78
    5d9e:	d11d      	bne.n	5ddc <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5da0:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    5da4:	2a00      	cmp	r2, #0
    5da6:	db10      	blt.n	5dca <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5da8:	f010 0f08 	tst.w	r0, #8
    5dac:	d11a      	bne.n	5de4 <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    5dae:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    5db0:	015b      	lsls	r3, r3, #5
    5db2:	3348      	adds	r3, #72	; 0x48
    5db4:	480c      	ldr	r0, [pc, #48]	; (5de8 <endpoint_ctx+0x5c>)
    5db6:	4403      	add	r3, r0
    5db8:	1d18      	adds	r0, r3, #4
    5dba:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    5dbc:	2b08      	cmp	r3, #8
    5dbe:	d0ef      	beq.n	5da0 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    5dc0:	f010 0f78 	tst.w	r0, #120	; 0x78
    5dc4:	d0ec      	beq.n	5da0 <endpoint_ctx+0x14>
		return NULL;
    5dc6:	2000      	movs	r0, #0
    5dc8:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5dca:	f010 0f08 	tst.w	r0, #8
    5dce:	d107      	bne.n	5de0 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
    5dd0:	015b      	lsls	r3, r3, #5
    5dd2:	3348      	adds	r3, #72	; 0x48
    5dd4:	4804      	ldr	r0, [pc, #16]	; (5de8 <endpoint_ctx+0x5c>)
    5dd6:	4403      	add	r3, r0
    5dd8:	1d18      	adds	r0, r3, #4
    5dda:	4770      	bx	lr
		return NULL;
    5ddc:	2000      	movs	r0, #0
    5dde:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    5de0:	4802      	ldr	r0, [pc, #8]	; (5dec <endpoint_ctx+0x60>)
    5de2:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    5de4:	4802      	ldr	r0, [pc, #8]	; (5df0 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
    5de6:	4770      	bx	lr
    5de8:	2000238c 	.word	0x2000238c
    5dec:	200024d8 	.word	0x200024d8
    5df0:	200025f8 	.word	0x200025f8

00005df4 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    5df4:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5df6:	2400      	movs	r4, #0
    5df8:	e005      	b.n	5e06 <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    5dfa:	b2e0      	uxtb	r0, r4
    5dfc:	f00b fec9 	bl	11b92 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    5e00:	f00b fed1 	bl	11ba6 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5e04:	3401      	adds	r4, #1
    5e06:	2c07      	cmp	r4, #7
    5e08:	d9f7      	bls.n	5dfa <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5e0a:	2400      	movs	r4, #0
    5e0c:	e006      	b.n	5e1c <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
    5e0e:	4b10      	ldr	r3, [pc, #64]	; (5e50 <eps_ctx_init+0x5c>)
    5e10:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    5e14:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
    5e16:	f00b fec6 	bl	11ba6 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5e1a:	3401      	adds	r4, #1
    5e1c:	2c07      	cmp	r4, #7
    5e1e:	d806      	bhi.n	5e2e <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    5e20:	b2e0      	uxtb	r0, r4
    5e22:	f00b febc 	bl	11b9e <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    5e26:	6903      	ldr	r3, [r0, #16]
    5e28:	2b00      	cmp	r3, #0
    5e2a:	d1f4      	bne.n	5e16 <eps_ctx_init+0x22>
    5e2c:	e7ef      	b.n	5e0e <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    5e2e:	2088      	movs	r0, #136	; 0x88
    5e30:	f00b feaf 	bl	11b92 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    5e34:	f00b feb7 	bl	11ba6 <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    5e38:	2008      	movs	r0, #8
    5e3a:	f00b feb0 	bl	11b9e <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    5e3e:	6903      	ldr	r3, [r0, #16]
    5e40:	b11b      	cbz	r3, 5e4a <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    5e42:	f00b feb0 	bl	11ba6 <ep_ctx_reset>
	}

	return 0;
}
    5e46:	2000      	movs	r0, #0
    5e48:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    5e4a:	4b02      	ldr	r3, [pc, #8]	; (5e54 <eps_ctx_init+0x60>)
    5e4c:	6103      	str	r3, [r0, #16]
    5e4e:	e7f8      	b.n	5e42 <eps_ctx_init+0x4e>
    5e50:	2000218c 	.word	0x2000218c
    5e54:	20001d8c 	.word	0x20001d8c

00005e58 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    5e58:	b510      	push	{r4, lr}
    5e5a:	b082      	sub	sp, #8
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    5e5c:	480b      	ldr	r0, [pc, #44]	; (5e8c <usb_init+0x34>)
    5e5e:	f003 f8b9 	bl	8fd4 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    5e62:	480b      	ldr	r0, [pc, #44]	; (5e90 <usb_init+0x38>)
    5e64:	f003 f8fa 	bl	905c <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
    5e68:	2400      	movs	r4, #0
    5e6a:	9400      	str	r4, [sp, #0]
    5e6c:	f04f 33ff 	mov.w	r3, #4294967295
    5e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5e74:	4907      	ldr	r1, [pc, #28]	; (5e94 <usb_init+0x3c>)
    5e76:	4808      	ldr	r0, [pc, #32]	; (5e98 <usb_init+0x40>)
    5e78:	f008 fbde 	bl	e638 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    5e7c:	4907      	ldr	r1, [pc, #28]	; (5e9c <usb_init+0x44>)
    5e7e:	4808      	ldr	r0, [pc, #32]	; (5ea0 <usb_init+0x48>)
    5e80:	f00d ffca 	bl	13e18 <k_work_init>

	return 0;
}
    5e84:	4620      	mov	r0, r4
    5e86:	b002      	add	sp, #8
    5e88:	bd10      	pop	{r4, pc}
    5e8a:	bf00      	nop
    5e8c:	00015978 	.word	0x00015978
    5e90:	0001597c 	.word	0x0001597c
    5e94:	200037e0 	.word	0x200037e0
    5e98:	20000698 	.word	0x20000698
    5e9c:	00006119 	.word	0x00006119
    5ea0:	200023b4 	.word	0x200023b4

00005ea4 <submit_dc_power_event>:
{
    5ea4:	b530      	push	{r4, r5, lr}
    5ea6:	b083      	sub	sp, #12
    5ea8:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5eaa:	2200      	movs	r2, #0
    5eac:	2300      	movs	r3, #0
    5eae:	a901      	add	r1, sp, #4
    5eb0:	482e      	ldr	r0, [pc, #184]	; (5f6c <submit_dc_power_event+0xc8>)
    5eb2:	f008 f80f 	bl	ded4 <k_mem_slab_alloc>
    5eb6:	b980      	cbnz	r0, 5eda <submit_dc_power_event+0x36>
	ev = (struct usbd_event *)block.data;
    5eb8:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5eba:	6064      	str	r4, [r4, #4]
	if (!ev) {
    5ebc:	b15c      	cbz	r4, 5ed6 <submit_dc_power_event+0x32>
	ev->evt_type = USBD_EVT_POWER;
    5ebe:	2300      	movs	r3, #0
    5ec0:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
    5ec2:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    5ec4:	4621      	mov	r1, r4
    5ec6:	482a      	ldr	r0, [pc, #168]	; (5f70 <submit_dc_power_event+0xcc>)
    5ec8:	f00d ff8b 	bl	13de2 <k_queue_append>
	if (usbd_ctx.attached) {
    5ecc:	4b29      	ldr	r3, [pc, #164]	; (5f74 <submit_dc_power_event+0xd0>)
    5ece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5ed2:	2b00      	cmp	r3, #0
    5ed4:	d144      	bne.n	5f60 <submit_dc_power_event+0xbc>
}
    5ed6:	b003      	add	sp, #12
    5ed8:	bd30      	pop	{r4, r5, pc}
    5eda:	4b27      	ldr	r3, [pc, #156]	; (5f78 <submit_dc_power_event+0xd4>)
    5edc:	4a27      	ldr	r2, [pc, #156]	; (5f7c <submit_dc_power_event+0xd8>)
    5ede:	1a9b      	subs	r3, r3, r2
    5ee0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5ee2:	f04f 0100 	mov.w	r1, #0
    5ee6:	2201      	movs	r2, #1
    5ee8:	f362 0102 	bfi	r1, r2, #0, #3
    5eec:	f36f 01c5 	bfc	r1, #3, #3
    5ef0:	f363 118f 	bfi	r1, r3, #6, #10
    5ef4:	4822      	ldr	r0, [pc, #136]	; (5f80 <submit_dc_power_event+0xdc>)
    5ef6:	f7fb ffef 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    5efa:	e004      	b.n	5f06 <submit_dc_power_event+0x62>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5efc:	1d01      	adds	r1, r0, #4
    5efe:	481b      	ldr	r0, [pc, #108]	; (5f6c <submit_dc_power_event+0xc8>)
    5f00:	f00d fe4c 	bl	13b9c <k_mem_slab_free>
	} while (ev != NULL);
    5f04:	b144      	cbz	r4, 5f18 <submit_dc_power_event+0x74>
	return z_impl_k_queue_get(queue, timeout);
    5f06:	2200      	movs	r2, #0
    5f08:	2300      	movs	r3, #0
    5f0a:	4819      	ldr	r0, [pc, #100]	; (5f70 <submit_dc_power_event+0xcc>)
    5f0c:	f008 f9ea 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    5f10:	4604      	mov	r4, r0
    5f12:	2800      	cmp	r0, #0
    5f14:	d1f2      	bne.n	5efc <submit_dc_power_event+0x58>
    5f16:	e7f5      	b.n	5f04 <submit_dc_power_event+0x60>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5f18:	2200      	movs	r2, #0
    5f1a:	2300      	movs	r3, #0
    5f1c:	a901      	add	r1, sp, #4
    5f1e:	4813      	ldr	r0, [pc, #76]	; (5f6c <submit_dc_power_event+0xc8>)
    5f20:	f007 ffd8 	bl	ded4 <k_mem_slab_alloc>
    5f24:	b180      	cbz	r0, 5f48 <submit_dc_power_event+0xa4>
    5f26:	4b14      	ldr	r3, [pc, #80]	; (5f78 <submit_dc_power_event+0xd4>)
    5f28:	4a14      	ldr	r2, [pc, #80]	; (5f7c <submit_dc_power_event+0xd8>)
    5f2a:	1a9b      	subs	r3, r3, r2
    5f2c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5f2e:	f04f 0100 	mov.w	r1, #0
    5f32:	2201      	movs	r2, #1
    5f34:	f362 0102 	bfi	r1, r2, #0, #3
    5f38:	f36f 01c5 	bfc	r1, #3, #3
    5f3c:	f363 118f 	bfi	r1, r3, #6, #10
    5f40:	4810      	ldr	r0, [pc, #64]	; (5f84 <submit_dc_power_event+0xe0>)
    5f42:	f7fb ffc9 	bl	1ed8 <log_0>
			return NULL;
    5f46:	e7b9      	b.n	5ebc <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
    5f48:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5f4a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5f4c:	2304      	movs	r3, #4
    5f4e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5f50:	4807      	ldr	r0, [pc, #28]	; (5f70 <submit_dc_power_event+0xcc>)
    5f52:	f00d ff46 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5f56:	490c      	ldr	r1, [pc, #48]	; (5f88 <submit_dc_power_event+0xe4>)
    5f58:	480c      	ldr	r0, [pc, #48]	; (5f8c <submit_dc_power_event+0xe8>)
    5f5a:	f00d ff63 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    5f5e:	e7ad      	b.n	5ebc <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5f60:	4909      	ldr	r1, [pc, #36]	; (5f88 <submit_dc_power_event+0xe4>)
    5f62:	480a      	ldr	r0, [pc, #40]	; (5f8c <submit_dc_power_event+0xe8>)
    5f64:	f00d ff5e 	bl	13e24 <k_work_submit_to_queue>
}
    5f68:	e7b5      	b.n	5ed6 <submit_dc_power_event+0x32>
    5f6a:	bf00      	nop
    5f6c:	200002e8 	.word	0x200002e8
    5f70:	200003ec 	.word	0x200003ec
    5f74:	2000238c 	.word	0x2000238c
    5f78:	000146f0 	.word	0x000146f0
    5f7c:	00014688 	.word	0x00014688
    5f80:	00015758 	.word	0x00015758
    5f84:	00015778 	.word	0x00015778
    5f88:	200023b4 	.word	0x200023b4
    5f8c:	20000698 	.word	0x20000698

00005f90 <usb_dc_power_event_handler>:
{
    5f90:	b508      	push	{r3, lr}
	switch (event) {
    5f92:	2801      	cmp	r0, #1
    5f94:	d014      	beq.n	5fc0 <usb_dc_power_event_handler+0x30>
    5f96:	2802      	cmp	r0, #2
    5f98:	d015      	beq.n	5fc6 <usb_dc_power_event_handler+0x36>
    5f9a:	b198      	cbz	r0, 5fc4 <usb_dc_power_event_handler+0x34>
    5f9c:	4b0b      	ldr	r3, [pc, #44]	; (5fcc <usb_dc_power_event_handler+0x3c>)
    5f9e:	4a0c      	ldr	r2, [pc, #48]	; (5fd0 <usb_dc_power_event_handler+0x40>)
    5fa0:	1a9b      	subs	r3, r3, r2
    5fa2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown USB power event %d", event);
    5fa4:	f04f 0200 	mov.w	r2, #0
    5fa8:	2101      	movs	r1, #1
    5faa:	f361 0202 	bfi	r2, r1, #0, #3
    5fae:	f36f 02c5 	bfc	r2, #3, #3
    5fb2:	f363 128f 	bfi	r2, r3, #6, #10
    5fb6:	4601      	mov	r1, r0
    5fb8:	4806      	ldr	r0, [pc, #24]	; (5fd4 <usb_dc_power_event_handler+0x44>)
    5fba:	f7fb fef9 	bl	1db0 <log_1>
    5fbe:	e004      	b.n	5fca <usb_dc_power_event_handler+0x3a>
		new_state = USBD_DETACHED;
    5fc0:	2000      	movs	r0, #0
    5fc2:	e000      	b.n	5fc6 <usb_dc_power_event_handler+0x36>
	switch (event) {
    5fc4:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
    5fc6:	f7ff ff6d 	bl	5ea4 <submit_dc_power_event>
}
    5fca:	bd08      	pop	{r3, pc}
    5fcc:	000146f0 	.word	0x000146f0
    5fd0:	00014688 	.word	0x00014688
    5fd4:	00015794 	.word	0x00015794

00005fd8 <usbd_sof_trigger_iso_read>:
{
    5fd8:	b530      	push	{r4, r5, lr}
    5fda:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    5fdc:	2008      	movs	r0, #8
    5fde:	f7ff fed5 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    5fe2:	b120      	cbz	r0, 5fee <usbd_sof_trigger_iso_read+0x16>
    5fe4:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
    5fe6:	7a03      	ldrb	r3, [r0, #8]
    5fe8:	b993      	cbnz	r3, 6010 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x10>
}
    5fea:	b003      	add	sp, #12
    5fec:	bd30      	pop	{r4, r5, pc}
    5fee:	4b40      	ldr	r3, [pc, #256]	; (60f0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf0>)
    5ff0:	4a40      	ldr	r2, [pc, #256]	; (60f4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf4>)
    5ff2:	1a9b      	subs	r3, r3, r2
    5ff4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("There is no ISO ep");
    5ff6:	f04f 0100 	mov.w	r1, #0
    5ffa:	2201      	movs	r2, #1
    5ffc:	f362 0102 	bfi	r1, r2, #0, #3
    6000:	f36f 01c5 	bfc	r1, #3, #3
    6004:	f363 118f 	bfi	r1, r3, #6, #10
    6008:	483b      	ldr	r0, [pc, #236]	; (60f8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf8>)
    600a:	f7fb ff65 	bl	1ed8 <log_0>
		return;
    600e:	e7ec      	b.n	5fea <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
    6010:	2301      	movs	r3, #1
    6012:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    6014:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6016:	2200      	movs	r2, #0
    6018:	2300      	movs	r3, #0
    601a:	a901      	add	r1, sp, #4
    601c:	4837      	ldr	r0, [pc, #220]	; (60fc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xfc>)
    601e:	f007 ff59 	bl	ded4 <k_mem_slab_alloc>
    6022:	b980      	cbnz	r0, 6046 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x46>
	ev = (struct usbd_event *)block.data;
    6024:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    6026:	6064      	str	r4, [r4, #4]
		if (!ev) {
    6028:	2c00      	cmp	r4, #0
    602a:	d04f      	beq.n	60cc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xcc>
		ev->evt_type = USBD_EVT_EP;
    602c:	2301      	movs	r3, #1
    602e:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6030:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    6032:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    6034:	4621      	mov	r1, r4
    6036:	4832      	ldr	r0, [pc, #200]	; (6100 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x100>)
    6038:	f00d fed3 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    603c:	4931      	ldr	r1, [pc, #196]	; (6104 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x104>)
    603e:	4832      	ldr	r0, [pc, #200]	; (6108 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x108>)
    6040:	f00d fef0 	bl	13e24 <k_work_submit_to_queue>
}
    6044:	e7d1      	b.n	5fea <usbd_sof_trigger_iso_read+0x12>
    6046:	4b2a      	ldr	r3, [pc, #168]	; (60f0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf0>)
    6048:	4a2a      	ldr	r2, [pc, #168]	; (60f4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf4>)
    604a:	1a9b      	subs	r3, r3, r2
    604c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    604e:	f04f 0100 	mov.w	r1, #0
    6052:	2201      	movs	r2, #1
    6054:	f362 0102 	bfi	r1, r2, #0, #3
    6058:	f36f 01c5 	bfc	r1, #3, #3
    605c:	f363 118f 	bfi	r1, r3, #6, #10
    6060:	482a      	ldr	r0, [pc, #168]	; (610c <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x10c>)
    6062:	f7fb ff39 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    6066:	e000      	b.n	606a <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x6a>
	} while (ev != NULL);
    6068:	b164      	cbz	r4, 6084 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x84>
    606a:	2200      	movs	r2, #0
    606c:	2300      	movs	r3, #0
    606e:	4824      	ldr	r0, [pc, #144]	; (6100 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x100>)
    6070:	f008 f938 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    6074:	4604      	mov	r4, r0
    6076:	2800      	cmp	r0, #0
    6078:	d0f6      	beq.n	6068 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x68>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    607a:	1d01      	adds	r1, r0, #4
    607c:	481f      	ldr	r0, [pc, #124]	; (60fc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xfc>)
    607e:	f00d fd8d 	bl	13b9c <k_mem_slab_free>
}
    6082:	e7f1      	b.n	6068 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x68>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6084:	2200      	movs	r2, #0
    6086:	2300      	movs	r3, #0
    6088:	a901      	add	r1, sp, #4
    608a:	481c      	ldr	r0, [pc, #112]	; (60fc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xfc>)
    608c:	f007 ff22 	bl	ded4 <k_mem_slab_alloc>
    6090:	b180      	cbz	r0, 60b4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xb4>
    6092:	4b17      	ldr	r3, [pc, #92]	; (60f0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf0>)
    6094:	4a17      	ldr	r2, [pc, #92]	; (60f4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf4>)
    6096:	1a9b      	subs	r3, r3, r2
    6098:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    609a:	f04f 0100 	mov.w	r1, #0
    609e:	2201      	movs	r2, #1
    60a0:	f362 0102 	bfi	r1, r2, #0, #3
    60a4:	f36f 01c5 	bfc	r1, #3, #3
    60a8:	f363 118f 	bfi	r1, r3, #6, #10
    60ac:	4818      	ldr	r0, [pc, #96]	; (6110 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x110>)
    60ae:	f7fb ff13 	bl	1ed8 <log_0>
			return NULL;
    60b2:	e7b9      	b.n	6028 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x28>
		ev = (struct usbd_event *)block.data;
    60b4:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    60b6:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    60b8:	2304      	movs	r3, #4
    60ba:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    60bc:	4810      	ldr	r0, [pc, #64]	; (6100 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x100>)
    60be:	f00d fe90 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    60c2:	4910      	ldr	r1, [pc, #64]	; (6104 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x104>)
    60c4:	4810      	ldr	r0, [pc, #64]	; (6108 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x108>)
    60c6:	f00d fead 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    60ca:	e7ad      	b.n	6028 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x28>
    60cc:	4b08      	ldr	r3, [pc, #32]	; (60f0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf0>)
    60ce:	4a09      	ldr	r2, [pc, #36]	; (60f4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf4>)
    60d0:	1a9b      	subs	r3, r3, r2
    60d2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to alloc evt");
    60d4:	f04f 0100 	mov.w	r1, #0
    60d8:	2201      	movs	r2, #1
    60da:	f362 0102 	bfi	r1, r2, #0, #3
    60de:	f36f 01c5 	bfc	r1, #3, #3
    60e2:	f363 118f 	bfi	r1, r3, #6, #10
    60e6:	480b      	ldr	r0, [pc, #44]	; (6114 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x114>)
    60e8:	f7fb fef6 	bl	1ed8 <log_0>
			return;
    60ec:	e77d      	b.n	5fea <usbd_sof_trigger_iso_read+0x12>
    60ee:	bf00      	nop
    60f0:	000146f0 	.word	0x000146f0
    60f4:	00014688 	.word	0x00014688
    60f8:	000157b0 	.word	0x000157b0
    60fc:	200002e8 	.word	0x200002e8
    6100:	200003ec 	.word	0x200003ec
    6104:	200023b4 	.word	0x200023b4
    6108:	20000698 	.word	0x20000698
    610c:	00015758 	.word	0x00015758
    6110:	00015778 	.word	0x00015778
    6114:	000157c4 	.word	0x000157c4

00006118 <usbd_work_handler>:
{
    6118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    611c:	b085      	sub	sp, #20
    611e:	4605      	mov	r5, r0
	while ((ev = usbd_evt_get()) != NULL) {
    6120:	e18f      	b.n	6442 <usbd_work_handler+0x32a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6122:	1d21      	adds	r1, r4, #4
    6124:	48b5      	ldr	r0, [pc, #724]	; (63fc <usbd_work_handler+0x2e4>)
    6126:	f00d fd39 	bl	13b9c <k_mem_slab_free>
			continue;
    612a:	e18a      	b.n	6442 <usbd_work_handler+0x32a>
			if (!ctx->attached) {
    612c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    6130:	b14b      	cbz	r3, 6146 <usbd_work_handler+0x2e>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    6132:	f8d4 a008 	ldr.w	sl, [r4, #8]
	switch (ep_evt->evt_type) {
    6136:	7b23      	ldrb	r3, [r4, #12]
    6138:	2b03      	cmp	r3, #3
    613a:	f200 817e 	bhi.w	643a <usbd_work_handler+0x322>
    613e:	e8df f003 	tbb	[pc, r3]
    6142:	6114      	.short	0x6114
    6144:	a49d      	.short	0xa49d
    6146:	4bae      	ldr	r3, [pc, #696]	; (6400 <usbd_work_handler+0x2e8>)
    6148:	4aae      	ldr	r2, [pc, #696]	; (6404 <usbd_work_handler+0x2ec>)
    614a:	1a9b      	subs	r3, r3, r2
    614c:	08db      	lsrs	r3, r3, #3
				LOG_ERR("not attached, EP 0x%02x event dropped",
    614e:	2201      	movs	r2, #1
    6150:	f362 0702 	bfi	r7, r2, #0, #3
    6154:	f36f 07c5 	bfc	r7, #3, #3
    6158:	f363 178f 	bfi	r7, r3, #6, #10
    615c:	68a3      	ldr	r3, [r4, #8]
    615e:	463a      	mov	r2, r7
    6160:	7a59      	ldrb	r1, [r3, #9]
    6162:	48a9      	ldr	r0, [pc, #676]	; (6408 <usbd_work_handler+0x2f0>)
    6164:	f7fb fe24 	bl	1db0 <log_1>
    6168:	e7e3      	b.n	6132 <usbd_work_handler+0x1a>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    616a:	f8da b014 	ldr.w	fp, [sl, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    616e:	2208      	movs	r2, #8
    6170:	2100      	movs	r1, #0
    6172:	4658      	mov	r0, fp
    6174:	f00b fa16 	bl	115a4 <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    6178:	4ba4      	ldr	r3, [pc, #656]	; (640c <usbd_work_handler+0x2f4>)
    617a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    617e:	f88b 2000 	strb.w	r2, [fp]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    6182:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    6186:	f88b 2001 	strb.w	r2, [fp, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    618a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    618e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    6190:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    6194:	0209      	lsls	r1, r1, #8
    6196:	b289      	uxth	r1, r1
    6198:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    619a:	f8ab 2002 	strh.w	r2, [fp, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    619e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    61a2:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    61a4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    61a8:	0209      	lsls	r1, r1, #8
    61aa:	b289      	uxth	r1, r1
    61ac:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    61ae:	f8ab 2004 	strh.w	r2, [fp, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    61b2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    61b6:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    61b8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    61bc:	021b      	lsls	r3, r3, #8
    61be:	b29b      	uxth	r3, r3
    61c0:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    61c2:	f8ab 3006 	strh.w	r3, [fp, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    61c6:	2208      	movs	r2, #8
    61c8:	f8ca 200c 	str.w	r2, [sl, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    61cc:	4659      	mov	r1, fp
    61ce:	4890      	ldr	r0, [pc, #576]	; (6410 <usbd_work_handler+0x2f8>)
    61d0:	f00b f9c4 	bl	1155c <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    61d4:	f8da 3000 	ldr.w	r3, [sl]
    61d8:	2100      	movs	r1, #0
    61da:	f89a 0009 	ldrb.w	r0, [sl, #9]
    61de:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    61e0:	f99b 3000 	ldrsb.w	r3, [fp]
    61e4:	2b00      	cmp	r3, #0
    61e6:	db02      	blt.n	61ee <usbd_work_handler+0xd6>
    61e8:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    61ec:	b923      	cbnz	r3, 61f8 <usbd_work_handler+0xe0>
		ctx->ctrl_read_len = 0U;
    61ee:	4b89      	ldr	r3, [pc, #548]	; (6414 <usbd_work_handler+0x2fc>)
    61f0:	2200      	movs	r2, #0
    61f2:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    61f6:	e120      	b.n	643a <usbd_work_handler+0x322>
		ctx->ctrl_read_len = usbd_setup->wLength;
    61f8:	4a86      	ldr	r2, [pc, #536]	; (6414 <usbd_work_handler+0x2fc>)
    61fa:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    61fe:	f004 fa09 	bl	a614 <nrfx_usbd_setup_data_clear>
    6202:	e11a      	b.n	643a <usbd_work_handler+0x322>
	if (!ep_ctx->read_pending) {
    6204:	f89a 301d 	ldrb.w	r3, [sl, #29]
    6208:	2b00      	cmp	r3, #0
    620a:	f000 8116 	beq.w	643a <usbd_work_handler+0x322>
	if (!ep_ctx->read_complete) {
    620e:	f89a 301c 	ldrb.w	r3, [sl, #28]
    6212:	2b00      	cmp	r3, #0
    6214:	f000 8111 	beq.w	643a <usbd_work_handler+0x322>
	ep_ctx->read_pending = false;
    6218:	f04f 0b00 	mov.w	fp, #0
    621c:	f88a b01d 	strb.w	fp, [sl, #29]
	ep_ctx->read_complete = false;
    6220:	f88a b01c 	strb.w	fp, [sl, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
    6224:	f04f 32ff 	mov.w	r2, #4294967295
    6228:	f04f 33ff 	mov.w	r3, #4294967295
    622c:	487a      	ldr	r0, [pc, #488]	; (6418 <usbd_work_handler+0x300>)
    622e:	f007 ff8b 	bl	e148 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    6232:	f8da 3014 	ldr.w	r3, [sl, #20]
    6236:	9301      	str	r3, [sp, #4]
    6238:	f8da 3004 	ldr.w	r3, [sl, #4]
    623c:	9302      	str	r3, [sp, #8]
    623e:	f8cd b00c 	str.w	fp, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    6242:	a901      	add	r1, sp, #4
    6244:	f89a 0009 	ldrb.w	r0, [sl, #9]
    6248:	f003 fd98 	bl	9d7c <nrfx_usbd_ep_transfer>
    624c:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    624e:	4b73      	ldr	r3, [pc, #460]	; (641c <usbd_work_handler+0x304>)
    6250:	4298      	cmp	r0, r3
    6252:	d103      	bne.n	625c <usbd_work_handler+0x144>
	return z_impl_k_mutex_unlock(mutex);
    6254:	4870      	ldr	r0, [pc, #448]	; (6418 <usbd_work_handler+0x300>)
    6256:	f008 f801 	bl	e25c <z_impl_k_mutex_unlock>
    625a:	e0ee      	b.n	643a <usbd_work_handler+0x322>
    625c:	4b68      	ldr	r3, [pc, #416]	; (6400 <usbd_work_handler+0x2e8>)
    625e:	4a69      	ldr	r2, [pc, #420]	; (6404 <usbd_work_handler+0x2ec>)
    6260:	1a9b      	subs	r3, r3, r2
    6262:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    6264:	2201      	movs	r2, #1
    6266:	f362 0802 	bfi	r8, r2, #0, #3
    626a:	f36f 08c5 	bfc	r8, #3, #3
    626e:	f363 188f 	bfi	r8, r3, #6, #10
    6272:	4642      	mov	r2, r8
    6274:	486a      	ldr	r0, [pc, #424]	; (6420 <usbd_work_handler+0x308>)
    6276:	f7fb fd9b 	bl	1db0 <log_1>
    627a:	e7eb      	b.n	6254 <usbd_work_handler+0x13c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    627c:	f8da 3000 	ldr.w	r3, [sl]
    6280:	2101      	movs	r1, #1
    6282:	f89a 0009 	ldrb.w	r0, [sl, #9]
    6286:	4798      	blx	r3
		break;
    6288:	e0d7      	b.n	643a <usbd_work_handler+0x322>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    628a:	f89a 300a 	ldrb.w	r3, [sl, #10]
    628e:	b913      	cbnz	r3, 6296 <usbd_work_handler+0x17e>
		    !ep_ctx->trans_zlp) {
    6290:	f89a 301f 	ldrb.w	r3, [sl, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    6294:	b133      	cbz	r3, 62a4 <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6296:	f8da 3000 	ldr.w	r3, [sl]
    629a:	2102      	movs	r1, #2
    629c:	f89a 0009 	ldrb.w	r0, [sl, #9]
    62a0:	4798      	blx	r3
}
    62a2:	e0ca      	b.n	643a <usbd_work_handler+0x322>
	return z_impl_k_mutex_lock(mutex, timeout);
    62a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 6418 <usbd_work_handler+0x300>
    62a8:	f04f 32ff 	mov.w	r2, #4294967295
    62ac:	f04f 33ff 	mov.w	r3, #4294967295
    62b0:	4658      	mov	r0, fp
    62b2:	f007 ff49 	bl	e148 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    62b6:	f004 f9ff 	bl	a6b8 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    62ba:	4658      	mov	r0, fp
    62bc:	f007 ffce 	bl	e25c <z_impl_k_mutex_unlock>
    62c0:	e7e9      	b.n	6296 <usbd_work_handler+0x17e>
	switch (pwr_evt->state) {
    62c2:	7a23      	ldrb	r3, [r4, #8]
    62c4:	2b04      	cmp	r3, #4
    62c6:	f200 80b8 	bhi.w	643a <usbd_work_handler+0x322>
    62ca:	e8df f003 	tbb	[pc, r3]
    62ce:	0322      	.short	0x0322
    62d0:	350e      	.short	0x350e
    62d2:	44          	.byte	0x44
    62d3:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    62d4:	f003 fce0 	bl	9c98 <nrfx_usbd_is_enabled>
    62d8:	2800      	cmp	r0, #0
    62da:	f040 80ae 	bne.w	643a <usbd_work_handler+0x322>
			nrfx_usbd_enable();
    62de:	f003 fc25 	bl	9b2c <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    62e2:	484c      	ldr	r0, [pc, #304]	; (6414 <usbd_work_handler+0x2fc>)
    62e4:	f00b fcc6 	bl	11c74 <hfxo_start>
    62e8:	e0a7      	b.n	643a <usbd_work_handler+0x322>
		usbd_enable_endpoints(ctx);
    62ea:	f8df a128 	ldr.w	sl, [pc, #296]	; 6414 <usbd_work_handler+0x2fc>
    62ee:	4650      	mov	r0, sl
    62f0:	f00b fc8e 	bl	11c10 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    62f4:	2001      	movs	r0, #1
    62f6:	f003 fcb3 	bl	9c60 <nrfx_usbd_start>
		ctx->ready = true;
    62fa:	2301      	movs	r3, #1
    62fc:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		if (ctx->status_cb) {
    6300:	f8da 3000 	ldr.w	r3, [sl]
    6304:	2b00      	cmp	r3, #0
    6306:	f000 8098 	beq.w	643a <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    630a:	2100      	movs	r1, #0
    630c:	2002      	movs	r0, #2
    630e:	4798      	blx	r3
    6310:	e093      	b.n	643a <usbd_work_handler+0x322>
		ctx->ready = false;
    6312:	f8df a100 	ldr.w	sl, [pc, #256]	; 6414 <usbd_work_handler+0x2fc>
    6316:	2300      	movs	r3, #0
    6318:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		nrfx_usbd_disable();
    631c:	f004 fc82 	bl	ac24 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    6320:	4650      	mov	r0, sl
    6322:	f00b fc54 	bl	11bce <hfxo_stop>
		if (ctx->status_cb) {
    6326:	f8da 3000 	ldr.w	r3, [sl]
    632a:	2b00      	cmp	r3, #0
    632c:	f000 8085 	beq.w	643a <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    6330:	2100      	movs	r1, #0
    6332:	2004      	movs	r0, #4
    6334:	4798      	blx	r3
    6336:	e080      	b.n	643a <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    6338:	4b36      	ldr	r3, [pc, #216]	; (6414 <usbd_work_handler+0x2fc>)
    633a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    633e:	2b00      	cmp	r3, #0
    6340:	d07b      	beq.n	643a <usbd_work_handler+0x322>
			nrfx_usbd_suspend();
    6342:	f004 fc91 	bl	ac68 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    6346:	4b33      	ldr	r3, [pc, #204]	; (6414 <usbd_work_handler+0x2fc>)
    6348:	681b      	ldr	r3, [r3, #0]
    634a:	2b00      	cmp	r3, #0
    634c:	d075      	beq.n	643a <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    634e:	2100      	movs	r1, #0
    6350:	2005      	movs	r0, #5
    6352:	4798      	blx	r3
    6354:	e071      	b.n	643a <usbd_work_handler+0x322>
		if (ctx->status_cb && dev_ready()) {
    6356:	4b2f      	ldr	r3, [pc, #188]	; (6414 <usbd_work_handler+0x2fc>)
    6358:	681b      	ldr	r3, [r3, #0]
    635a:	2b00      	cmp	r3, #0
    635c:	d06d      	beq.n	643a <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    635e:	4a2d      	ldr	r2, [pc, #180]	; (6414 <usbd_work_handler+0x2fc>)
    6360:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    6364:	2a00      	cmp	r2, #0
    6366:	d068      	beq.n	643a <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_RESUME, NULL);
    6368:	2100      	movs	r1, #0
    636a:	2006      	movs	r0, #6
    636c:	4798      	blx	r3
}
    636e:	e064      	b.n	643a <usbd_work_handler+0x322>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6370:	f105 0a10 	add.w	sl, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    6374:	f04f 32ff 	mov.w	r2, #4294967295
    6378:	f04f 33ff 	mov.w	r3, #4294967295
    637c:	4650      	mov	r0, sl
    637e:	f007 fee3 	bl	e148 <z_impl_k_mutex_lock>
			eps_ctx_init();
    6382:	f7ff fd37 	bl	5df4 <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    6386:	4650      	mov	r0, sl
    6388:	f007 ff68 	bl	e25c <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    638c:	f855 3c28 	ldr.w	r3, [r5, #-40]
    6390:	2b00      	cmp	r3, #0
    6392:	d052      	beq.n	643a <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_RESET, NULL);
    6394:	2100      	movs	r1, #0
    6396:	2001      	movs	r0, #1
    6398:	4798      	blx	r3
    639a:	e04e      	b.n	643a <usbd_work_handler+0x322>
			usbd_sof_trigger_iso_read();
    639c:	f7ff fe1c 	bl	5fd8 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
    63a0:	f855 3c28 	ldr.w	r3, [r5, #-40]
    63a4:	2b00      	cmp	r3, #0
    63a6:	d048      	beq.n	643a <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SOF, NULL);
    63a8:	2100      	movs	r1, #0
    63aa:	200a      	movs	r0, #10
    63ac:	4798      	blx	r3
    63ae:	e044      	b.n	643a <usbd_work_handler+0x322>
    63b0:	4b13      	ldr	r3, [pc, #76]	; (6400 <usbd_work_handler+0x2e8>)
    63b2:	4a14      	ldr	r2, [pc, #80]	; (6404 <usbd_work_handler+0x2ec>)
    63b4:	1a9b      	subs	r3, r3, r2
    63b6:	08db      	lsrs	r3, r3, #3
				LOG_ERR("USBD event queue full!");
    63b8:	2201      	movs	r2, #1
    63ba:	f362 0602 	bfi	r6, r2, #0, #3
    63be:	f36f 06c5 	bfc	r6, #3, #3
    63c2:	f363 168f 	bfi	r6, r3, #6, #10
    63c6:	4631      	mov	r1, r6
    63c8:	4816      	ldr	r0, [pc, #88]	; (6424 <usbd_work_handler+0x30c>)
    63ca:	f7fb fd85 	bl	1ed8 <log_0>
	nrfx_power_usbevt_disable();
    63ce:	f00c f963 	bl	12698 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    63d2:	f004 fc27 	bl	ac24 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    63d6:	f003 fb9f 	bl	9b18 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    63da:	e006      	b.n	63ea <usbd_work_handler+0x2d2>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    63dc:	1d01      	adds	r1, r0, #4
    63de:	4807      	ldr	r0, [pc, #28]	; (63fc <usbd_work_handler+0x2e4>)
    63e0:	f00d fbdc 	bl	13b9c <k_mem_slab_free>
	} while (ev != NULL);
    63e4:	f1ba 0f00 	cmp.w	sl, #0
    63e8:	d020      	beq.n	642c <usbd_work_handler+0x314>
	return z_impl_k_queue_get(queue, timeout);
    63ea:	2200      	movs	r2, #0
    63ec:	2300      	movs	r3, #0
    63ee:	480e      	ldr	r0, [pc, #56]	; (6428 <usbd_work_handler+0x310>)
    63f0:	f007 ff78 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    63f4:	4682      	mov	sl, r0
    63f6:	2800      	cmp	r0, #0
    63f8:	d1f0      	bne.n	63dc <usbd_work_handler+0x2c4>
    63fa:	e7f3      	b.n	63e4 <usbd_work_handler+0x2cc>
    63fc:	200002e8 	.word	0x200002e8
    6400:	000146f0 	.word	0x000146f0
    6404:	00014688 	.word	0x00014688
    6408:	000157d8 	.word	0x000157d8
    640c:	40027000 	.word	0x40027000
    6410:	20002390 	.word	0x20002390
    6414:	2000238c 	.word	0x2000238c
    6418:	200023c4 	.word	0x200023c4
    641c:	0bad0000 	.word	0x0bad0000
    6420:	00015800 	.word	0x00015800
    6424:	00015828 	.word	0x00015828
    6428:	200003ec 	.word	0x200003ec
	ret = eps_ctx_init();
    642c:	f7ff fce2 	bl	5df4 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    6430:	f00c f92b 	bl	1268a <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    6434:	481c      	ldr	r0, [pc, #112]	; (64a8 <usbd_work_handler+0x390>)
    6436:	f003 fc49 	bl	9ccc <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    643a:	1d21      	adds	r1, r4, #4
    643c:	481b      	ldr	r0, [pc, #108]	; (64ac <usbd_work_handler+0x394>)
    643e:	f00d fbad 	bl	13b9c <k_mem_slab_free>
    6442:	2200      	movs	r2, #0
    6444:	2300      	movs	r3, #0
    6446:	481a      	ldr	r0, [pc, #104]	; (64b0 <usbd_work_handler+0x398>)
    6448:	f007 ff4c 	bl	e2e4 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    644c:	4604      	mov	r4, r0
    644e:	b338      	cbz	r0, 64a0 <usbd_work_handler+0x388>
	return get_usbd_ctx()->ready;
    6450:	4b18      	ldr	r3, [pc, #96]	; (64b4 <usbd_work_handler+0x39c>)
    6452:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    6456:	b91b      	cbnz	r3, 6460 <usbd_work_handler+0x348>
    6458:	7c23      	ldrb	r3, [r4, #16]
    645a:	2b00      	cmp	r3, #0
    645c:	f47f ae61 	bne.w	6122 <usbd_work_handler+0xa>
		switch (ev->evt_type) {
    6460:	7c21      	ldrb	r1, [r4, #16]
    6462:	2904      	cmp	r1, #4
    6464:	d80c      	bhi.n	6480 <usbd_work_handler+0x368>
    6466:	a301      	add	r3, pc, #4	; (adr r3, 646c <usbd_work_handler+0x354>)
    6468:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    646c:	000062c3 	.word	0x000062c3
    6470:	0000612d 	.word	0x0000612d
    6474:	00006371 	.word	0x00006371
    6478:	0000639d 	.word	0x0000639d
    647c:	000063b1 	.word	0x000063b1
    6480:	4b0d      	ldr	r3, [pc, #52]	; (64b8 <usbd_work_handler+0x3a0>)
    6482:	4a0e      	ldr	r2, [pc, #56]	; (64bc <usbd_work_handler+0x3a4>)
    6484:	1a9b      	subs	r3, r3, r2
    6486:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6488:	2201      	movs	r2, #1
    648a:	f362 0902 	bfi	r9, r2, #0, #3
    648e:	f36f 09c5 	bfc	r9, #3, #3
    6492:	f363 198f 	bfi	r9, r3, #6, #10
    6496:	464a      	mov	r2, r9
    6498:	4809      	ldr	r0, [pc, #36]	; (64c0 <usbd_work_handler+0x3a8>)
    649a:	f7fb fc89 	bl	1db0 <log_1>
    649e:	e7cc      	b.n	643a <usbd_work_handler+0x322>
}
    64a0:	b005      	add	sp, #20
    64a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    64a6:	bf00      	nop
    64a8:	00006b21 	.word	0x00006b21
    64ac:	200002e8 	.word	0x200002e8
    64b0:	200003ec 	.word	0x200003ec
    64b4:	2000238c 	.word	0x2000238c
    64b8:	000146f0 	.word	0x000146f0
    64bc:	00014688 	.word	0x00014688
    64c0:	00015840 	.word	0x00015840

000064c4 <usbd_event_transfer_ctrl>:
{
    64c4:	b570      	push	{r4, r5, r6, lr}
    64c6:	b082      	sub	sp, #8
    64c8:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    64ca:	7886      	ldrb	r6, [r0, #2]
    64cc:	4630      	mov	r0, r6
    64ce:	f7ff fc5d 	bl	5d8c <endpoint_ctx>
    64d2:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    64d4:	f016 0f80 	tst.w	r6, #128	; 0x80
    64d8:	d122      	bne.n	6520 <usbd_event_transfer_ctrl+0x5c>
		switch (p_event->data.eptransfer.status) {
    64da:	78e1      	ldrb	r1, [r4, #3]
    64dc:	2900      	cmp	r1, #0
    64de:	f000 80d8 	beq.w	6692 <usbd_event_transfer_ctrl+0x1ce>
    64e2:	2901      	cmp	r1, #1
    64e4:	f040 815c 	bne.w	67a0 <usbd_event_transfer_ctrl+0x2dc>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    64e8:	2200      	movs	r2, #0
    64ea:	2300      	movs	r3, #0
    64ec:	a901      	add	r1, sp, #4
    64ee:	48b6      	ldr	r0, [pc, #728]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    64f0:	f007 fcf0 	bl	ded4 <k_mem_slab_alloc>
    64f4:	2800      	cmp	r0, #0
    64f6:	f040 8089 	bne.w	660c <usbd_event_transfer_ctrl+0x148>
	ev = (struct usbd_event *)block.data;
    64fa:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    64fc:	6064      	str	r4, [r4, #4]
			if (!ev) {
    64fe:	2c00      	cmp	r4, #0
    6500:	f000 815f 	beq.w	67c2 <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->read_pending = true;
    6504:	2301      	movs	r3, #1
    6506:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    6508:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    650a:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    650c:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    650e:	4621      	mov	r1, r4
    6510:	48ae      	ldr	r0, [pc, #696]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    6512:	f00d fc66 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6516:	49ae      	ldr	r1, [pc, #696]	; (67d0 <usbd_event_transfer_ctrl+0x30c>)
    6518:	48ae      	ldr	r0, [pc, #696]	; (67d4 <usbd_event_transfer_ctrl+0x310>)
    651a:	f00d fc83 	bl	13e24 <k_work_submit_to_queue>
}
    651e:	e150      	b.n	67c2 <usbd_event_transfer_ctrl+0x2fe>
		switch (p_event->data.eptransfer.status) {
    6520:	78e1      	ldrb	r1, [r4, #3]
    6522:	b1a1      	cbz	r1, 654e <usbd_event_transfer_ctrl+0x8a>
    6524:	2903      	cmp	r1, #3
    6526:	f000 814c 	beq.w	67c2 <usbd_event_transfer_ctrl+0x2fe>
    652a:	4aab      	ldr	r2, [pc, #684]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    652c:	4bab      	ldr	r3, [pc, #684]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    652e:	1ad2      	subs	r2, r2, r3
    6530:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6532:	f04f 0300 	mov.w	r3, #0
    6536:	2001      	movs	r0, #1
    6538:	f360 0302 	bfi	r3, r0, #0, #3
    653c:	f36f 03c5 	bfc	r3, #3, #3
    6540:	f362 138f 	bfi	r3, r2, #6, #10
    6544:	4632      	mov	r2, r6
    6546:	48a6      	ldr	r0, [pc, #664]	; (67e0 <usbd_event_transfer_ctrl+0x31c>)
    6548:	f7fb fc68 	bl	1e1c <log_2>
    654c:	e139      	b.n	67c2 <usbd_event_transfer_ctrl+0x2fe>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    654e:	2200      	movs	r2, #0
    6550:	2300      	movs	r3, #0
    6552:	a901      	add	r1, sp, #4
    6554:	489c      	ldr	r0, [pc, #624]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    6556:	f007 fcbd 	bl	ded4 <k_mem_slab_alloc>
    655a:	b9a0      	cbnz	r0, 6586 <usbd_event_transfer_ctrl+0xc2>
	ev = (struct usbd_event *)block.data;
    655c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    655e:	6064      	str	r4, [r4, #4]
			if (!ev) {
    6560:	2c00      	cmp	r4, #0
    6562:	f000 812e 	beq.w	67c2 <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->write_in_progress = false;
    6566:	2300      	movs	r3, #0
    6568:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    656a:	2301      	movs	r3, #1
    656c:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    656e:	2303      	movs	r3, #3
    6570:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6572:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    6574:	4621      	mov	r1, r4
    6576:	4895      	ldr	r0, [pc, #596]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    6578:	f00d fc33 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    657c:	4994      	ldr	r1, [pc, #592]	; (67d0 <usbd_event_transfer_ctrl+0x30c>)
    657e:	4895      	ldr	r0, [pc, #596]	; (67d4 <usbd_event_transfer_ctrl+0x310>)
    6580:	f00d fc50 	bl	13e24 <k_work_submit_to_queue>
}
    6584:	e11d      	b.n	67c2 <usbd_event_transfer_ctrl+0x2fe>
    6586:	4b94      	ldr	r3, [pc, #592]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    6588:	4a94      	ldr	r2, [pc, #592]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    658a:	1a9b      	subs	r3, r3, r2
    658c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    658e:	f04f 0100 	mov.w	r1, #0
    6592:	2201      	movs	r2, #1
    6594:	f362 0102 	bfi	r1, r2, #0, #3
    6598:	f36f 01c5 	bfc	r1, #3, #3
    659c:	f363 118f 	bfi	r1, r3, #6, #10
    65a0:	4890      	ldr	r0, [pc, #576]	; (67e4 <usbd_event_transfer_ctrl+0x320>)
    65a2:	f7fb fc99 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    65a6:	e000      	b.n	65aa <usbd_event_transfer_ctrl+0xe6>
	} while (ev != NULL);
    65a8:	b164      	cbz	r4, 65c4 <usbd_event_transfer_ctrl+0x100>
    65aa:	2200      	movs	r2, #0
    65ac:	2300      	movs	r3, #0
    65ae:	4887      	ldr	r0, [pc, #540]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    65b0:	f007 fe98 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    65b4:	4604      	mov	r4, r0
    65b6:	2800      	cmp	r0, #0
    65b8:	d0f6      	beq.n	65a8 <usbd_event_transfer_ctrl+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    65ba:	1d01      	adds	r1, r0, #4
    65bc:	4882      	ldr	r0, [pc, #520]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    65be:	f00d faed 	bl	13b9c <k_mem_slab_free>
}
    65c2:	e7f1      	b.n	65a8 <usbd_event_transfer_ctrl+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    65c4:	2200      	movs	r2, #0
    65c6:	2300      	movs	r3, #0
    65c8:	a901      	add	r1, sp, #4
    65ca:	487f      	ldr	r0, [pc, #508]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    65cc:	f007 fc82 	bl	ded4 <k_mem_slab_alloc>
    65d0:	b180      	cbz	r0, 65f4 <usbd_event_transfer_ctrl+0x130>
    65d2:	4b81      	ldr	r3, [pc, #516]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    65d4:	4a81      	ldr	r2, [pc, #516]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    65d6:	1a9b      	subs	r3, r3, r2
    65d8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    65da:	f04f 0100 	mov.w	r1, #0
    65de:	2201      	movs	r2, #1
    65e0:	f362 0102 	bfi	r1, r2, #0, #3
    65e4:	f36f 01c5 	bfc	r1, #3, #3
    65e8:	f363 118f 	bfi	r1, r3, #6, #10
    65ec:	487e      	ldr	r0, [pc, #504]	; (67e8 <usbd_event_transfer_ctrl+0x324>)
    65ee:	f7fb fc73 	bl	1ed8 <log_0>
			return NULL;
    65f2:	e7b5      	b.n	6560 <usbd_event_transfer_ctrl+0x9c>
		ev = (struct usbd_event *)block.data;
    65f4:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    65f6:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    65f8:	2304      	movs	r3, #4
    65fa:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    65fc:	4873      	ldr	r0, [pc, #460]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    65fe:	f00d fbf0 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6602:	4973      	ldr	r1, [pc, #460]	; (67d0 <usbd_event_transfer_ctrl+0x30c>)
    6604:	4873      	ldr	r0, [pc, #460]	; (67d4 <usbd_event_transfer_ctrl+0x310>)
    6606:	f00d fc0d 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    660a:	e7a9      	b.n	6560 <usbd_event_transfer_ctrl+0x9c>
    660c:	4b72      	ldr	r3, [pc, #456]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    660e:	4a73      	ldr	r2, [pc, #460]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    6610:	1a9b      	subs	r3, r3, r2
    6612:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    6614:	f04f 0100 	mov.w	r1, #0
    6618:	2201      	movs	r2, #1
    661a:	f362 0102 	bfi	r1, r2, #0, #3
    661e:	f36f 01c5 	bfc	r1, #3, #3
    6622:	f363 118f 	bfi	r1, r3, #6, #10
    6626:	486f      	ldr	r0, [pc, #444]	; (67e4 <usbd_event_transfer_ctrl+0x320>)
    6628:	f7fb fc56 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    662c:	e004      	b.n	6638 <usbd_event_transfer_ctrl+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    662e:	1d01      	adds	r1, r0, #4
    6630:	4865      	ldr	r0, [pc, #404]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    6632:	f00d fab3 	bl	13b9c <k_mem_slab_free>
	} while (ev != NULL);
    6636:	b144      	cbz	r4, 664a <usbd_event_transfer_ctrl+0x186>
    6638:	2200      	movs	r2, #0
    663a:	2300      	movs	r3, #0
    663c:	4863      	ldr	r0, [pc, #396]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    663e:	f007 fe51 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    6642:	4604      	mov	r4, r0
    6644:	2800      	cmp	r0, #0
    6646:	d1f2      	bne.n	662e <usbd_event_transfer_ctrl+0x16a>
    6648:	e7f5      	b.n	6636 <usbd_event_transfer_ctrl+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    664a:	2200      	movs	r2, #0
    664c:	2300      	movs	r3, #0
    664e:	a901      	add	r1, sp, #4
    6650:	485d      	ldr	r0, [pc, #372]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    6652:	f007 fc3f 	bl	ded4 <k_mem_slab_alloc>
    6656:	b180      	cbz	r0, 667a <usbd_event_transfer_ctrl+0x1b6>
    6658:	4b5f      	ldr	r3, [pc, #380]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    665a:	4a60      	ldr	r2, [pc, #384]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    665c:	1a9b      	subs	r3, r3, r2
    665e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    6660:	f04f 0100 	mov.w	r1, #0
    6664:	2201      	movs	r2, #1
    6666:	f362 0102 	bfi	r1, r2, #0, #3
    666a:	f36f 01c5 	bfc	r1, #3, #3
    666e:	f363 118f 	bfi	r1, r3, #6, #10
    6672:	485d      	ldr	r0, [pc, #372]	; (67e8 <usbd_event_transfer_ctrl+0x324>)
    6674:	f7fb fc30 	bl	1ed8 <log_0>
			return NULL;
    6678:	e741      	b.n	64fe <usbd_event_transfer_ctrl+0x3a>
		ev = (struct usbd_event *)block.data;
    667a:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    667c:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    667e:	2304      	movs	r3, #4
    6680:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6682:	4852      	ldr	r0, [pc, #328]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    6684:	f00d fbad 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6688:	4951      	ldr	r1, [pc, #324]	; (67d0 <usbd_event_transfer_ctrl+0x30c>)
    668a:	4852      	ldr	r0, [pc, #328]	; (67d4 <usbd_event_transfer_ctrl+0x310>)
    668c:	f00d fbca 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    6690:	e735      	b.n	64fe <usbd_event_transfer_ctrl+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6692:	2200      	movs	r2, #0
    6694:	2300      	movs	r3, #0
    6696:	a901      	add	r1, sp, #4
    6698:	484b      	ldr	r0, [pc, #300]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    669a:	f007 fc1b 	bl	ded4 <k_mem_slab_alloc>
    669e:	bb20      	cbnz	r0, 66ea <usbd_event_transfer_ctrl+0x226>
	ev = (struct usbd_event *)block.data;
    66a0:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    66a2:	6076      	str	r6, [r6, #4]
			if (!ev) {
    66a4:	2e00      	cmp	r6, #0
    66a6:	f000 808c 	beq.w	67c2 <usbd_event_transfer_ctrl+0x2fe>
			ev->evt_type = USBD_EVT_EP;
    66aa:	2301      	movs	r3, #1
    66ac:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    66ae:	2302      	movs	r3, #2
    66b0:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    66b2:	60b5      	str	r5, [r6, #8]
			err_code = nrfx_usbd_ep_status_get(
    66b4:	f105 010c 	add.w	r1, r5, #12
    66b8:	78a0      	ldrb	r0, [r4, #2]
    66ba:	f003 fbf5 	bl	9ea8 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    66be:	4601      	mov	r1, r0
    66c0:	2800      	cmp	r0, #0
    66c2:	d155      	bne.n	6770 <usbd_event_transfer_ctrl+0x2ac>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    66c4:	4b49      	ldr	r3, [pc, #292]	; (67ec <usbd_event_transfer_ctrl+0x328>)
    66c6:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    66ca:	68ea      	ldr	r2, [r5, #12]
    66cc:	4293      	cmp	r3, r2
    66ce:	d860      	bhi.n	6792 <usbd_event_transfer_ctrl+0x2ce>
				ctx->ctrl_read_len = 0U;
    66d0:	4b46      	ldr	r3, [pc, #280]	; (67ec <usbd_event_transfer_ctrl+0x328>)
    66d2:	2200      	movs	r2, #0
    66d4:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    66d8:	4631      	mov	r1, r6
    66da:	483c      	ldr	r0, [pc, #240]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    66dc:	f00d fb81 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    66e0:	493b      	ldr	r1, [pc, #236]	; (67d0 <usbd_event_transfer_ctrl+0x30c>)
    66e2:	483c      	ldr	r0, [pc, #240]	; (67d4 <usbd_event_transfer_ctrl+0x310>)
    66e4:	f00d fb9e 	bl	13e24 <k_work_submit_to_queue>
}
    66e8:	e06b      	b.n	67c2 <usbd_event_transfer_ctrl+0x2fe>
    66ea:	4b3b      	ldr	r3, [pc, #236]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    66ec:	4a3b      	ldr	r2, [pc, #236]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    66ee:	1a9b      	subs	r3, r3, r2
    66f0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    66f2:	f04f 0100 	mov.w	r1, #0
    66f6:	2201      	movs	r2, #1
    66f8:	f362 0102 	bfi	r1, r2, #0, #3
    66fc:	f36f 01c5 	bfc	r1, #3, #3
    6700:	f363 118f 	bfi	r1, r3, #6, #10
    6704:	4837      	ldr	r0, [pc, #220]	; (67e4 <usbd_event_transfer_ctrl+0x320>)
    6706:	f7fb fbe7 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    670a:	e004      	b.n	6716 <usbd_event_transfer_ctrl+0x252>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    670c:	1d01      	adds	r1, r0, #4
    670e:	482e      	ldr	r0, [pc, #184]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    6710:	f00d fa44 	bl	13b9c <k_mem_slab_free>
	} while (ev != NULL);
    6714:	b146      	cbz	r6, 6728 <usbd_event_transfer_ctrl+0x264>
    6716:	2200      	movs	r2, #0
    6718:	2300      	movs	r3, #0
    671a:	482c      	ldr	r0, [pc, #176]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    671c:	f007 fde2 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    6720:	4606      	mov	r6, r0
    6722:	2800      	cmp	r0, #0
    6724:	d1f2      	bne.n	670c <usbd_event_transfer_ctrl+0x248>
    6726:	e7f5      	b.n	6714 <usbd_event_transfer_ctrl+0x250>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6728:	2200      	movs	r2, #0
    672a:	2300      	movs	r3, #0
    672c:	a901      	add	r1, sp, #4
    672e:	4826      	ldr	r0, [pc, #152]	; (67c8 <usbd_event_transfer_ctrl+0x304>)
    6730:	f007 fbd0 	bl	ded4 <k_mem_slab_alloc>
    6734:	b180      	cbz	r0, 6758 <usbd_event_transfer_ctrl+0x294>
    6736:	4b28      	ldr	r3, [pc, #160]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    6738:	4a28      	ldr	r2, [pc, #160]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    673a:	1a9b      	subs	r3, r3, r2
    673c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    673e:	f04f 0100 	mov.w	r1, #0
    6742:	2201      	movs	r2, #1
    6744:	f362 0102 	bfi	r1, r2, #0, #3
    6748:	f36f 01c5 	bfc	r1, #3, #3
    674c:	f363 118f 	bfi	r1, r3, #6, #10
    6750:	4825      	ldr	r0, [pc, #148]	; (67e8 <usbd_event_transfer_ctrl+0x324>)
    6752:	f7fb fbc1 	bl	1ed8 <log_0>
			return NULL;
    6756:	e7a5      	b.n	66a4 <usbd_event_transfer_ctrl+0x1e0>
		ev = (struct usbd_event *)block.data;
    6758:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    675a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    675c:	2304      	movs	r3, #4
    675e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6760:	481a      	ldr	r0, [pc, #104]	; (67cc <usbd_event_transfer_ctrl+0x308>)
    6762:	f00d fb3e 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6766:	491a      	ldr	r1, [pc, #104]	; (67d0 <usbd_event_transfer_ctrl+0x30c>)
    6768:	481a      	ldr	r0, [pc, #104]	; (67d4 <usbd_event_transfer_ctrl+0x310>)
    676a:	f00d fb5b 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    676e:	e799      	b.n	66a4 <usbd_event_transfer_ctrl+0x1e0>
    6770:	4b19      	ldr	r3, [pc, #100]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    6772:	4a1a      	ldr	r2, [pc, #104]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    6774:	1a9b      	subs	r3, r3, r2
    6776:	08db      	lsrs	r3, r3, #3
				LOG_ERR("_ep_status_get failed! Code: %d",
    6778:	f04f 0200 	mov.w	r2, #0
    677c:	2001      	movs	r0, #1
    677e:	f360 0202 	bfi	r2, r0, #0, #3
    6782:	f36f 02c5 	bfc	r2, #3, #3
    6786:	f363 128f 	bfi	r2, r3, #6, #10
    678a:	4819      	ldr	r0, [pc, #100]	; (67f0 <usbd_event_transfer_ctrl+0x32c>)
    678c:	f7fb fb10 	bl	1db0 <log_1>
    6790:	e798      	b.n	66c4 <usbd_event_transfer_ctrl+0x200>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    6792:	1a9b      	subs	r3, r3, r2
    6794:	4a15      	ldr	r2, [pc, #84]	; (67ec <usbd_event_transfer_ctrl+0x328>)
    6796:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    679a:	f003 ff3b 	bl	a614 <nrfx_usbd_setup_data_clear>
    679e:	e79b      	b.n	66d8 <usbd_event_transfer_ctrl+0x214>
    67a0:	4a0d      	ldr	r2, [pc, #52]	; (67d8 <usbd_event_transfer_ctrl+0x314>)
    67a2:	4b0e      	ldr	r3, [pc, #56]	; (67dc <usbd_event_transfer_ctrl+0x318>)
    67a4:	1ad2      	subs	r2, r2, r3
    67a6:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    67a8:	f04f 0300 	mov.w	r3, #0
    67ac:	2001      	movs	r0, #1
    67ae:	f360 0302 	bfi	r3, r0, #0, #3
    67b2:	f36f 03c5 	bfc	r3, #3, #3
    67b6:	f362 138f 	bfi	r3, r2, #6, #10
    67ba:	4632      	mov	r2, r6
    67bc:	4808      	ldr	r0, [pc, #32]	; (67e0 <usbd_event_transfer_ctrl+0x31c>)
    67be:	f7fb fb2d 	bl	1e1c <log_2>
}
    67c2:	b002      	add	sp, #8
    67c4:	bd70      	pop	{r4, r5, r6, pc}
    67c6:	bf00      	nop
    67c8:	200002e8 	.word	0x200002e8
    67cc:	200003ec 	.word	0x200003ec
    67d0:	200023b4 	.word	0x200023b4
    67d4:	20000698 	.word	0x20000698
    67d8:	000146f0 	.word	0x000146f0
    67dc:	00014688 	.word	0x00014688
    67e0:	00015858 	.word	0x00015858
    67e4:	00015758 	.word	0x00015758
    67e8:	00015778 	.word	0x00015778
    67ec:	2000238c 	.word	0x2000238c
    67f0:	00015884 	.word	0x00015884

000067f4 <usbd_event_transfer_data>:
{
    67f4:	b570      	push	{r4, r5, r6, lr}
    67f6:	b082      	sub	sp, #8
    67f8:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    67fa:	7886      	ldrb	r6, [r0, #2]
    67fc:	4630      	mov	r0, r6
    67fe:	f7ff fac5 	bl	5d8c <endpoint_ctx>
    6802:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6804:	f016 0f80 	tst.w	r6, #128	; 0x80
    6808:	d122      	bne.n	6850 <usbd_event_transfer_data+0x5c>
		switch (p_event->data.eptransfer.status) {
    680a:	78e1      	ldrb	r1, [r4, #3]
    680c:	2900      	cmp	r1, #0
    680e:	f000 80d8 	beq.w	69c2 <usbd_event_transfer_data+0x1ce>
    6812:	2901      	cmp	r1, #1
    6814:	f040 815d 	bne.w	6ad2 <usbd_event_transfer_data+0x2de>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6818:	2200      	movs	r2, #0
    681a:	2300      	movs	r3, #0
    681c:	a901      	add	r1, sp, #4
    681e:	48b6      	ldr	r0, [pc, #728]	; (6af8 <usbd_event_transfer_data+0x304>)
    6820:	f007 fb58 	bl	ded4 <k_mem_slab_alloc>
    6824:	2800      	cmp	r0, #0
    6826:	f040 8089 	bne.w	693c <usbd_event_transfer_data+0x148>
	ev = (struct usbd_event *)block.data;
    682a:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    682c:	6064      	str	r4, [r4, #4]
			if (!ev) {
    682e:	2c00      	cmp	r4, #0
    6830:	f000 8160 	beq.w	6af4 <usbd_event_transfer_data+0x300>
			ep_ctx->read_pending = true;
    6834:	2301      	movs	r3, #1
    6836:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    6838:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    683a:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    683c:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    683e:	4621      	mov	r1, r4
    6840:	48ae      	ldr	r0, [pc, #696]	; (6afc <usbd_event_transfer_data+0x308>)
    6842:	f00d face 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6846:	49ae      	ldr	r1, [pc, #696]	; (6b00 <usbd_event_transfer_data+0x30c>)
    6848:	48ae      	ldr	r0, [pc, #696]	; (6b04 <usbd_event_transfer_data+0x310>)
    684a:	f00d faeb 	bl	13e24 <k_work_submit_to_queue>
}
    684e:	e151      	b.n	6af4 <usbd_event_transfer_data+0x300>
		switch (p_event->data.eptransfer.status) {
    6850:	78e1      	ldrb	r1, [r4, #3]
    6852:	b1a1      	cbz	r1, 687e <usbd_event_transfer_data+0x8a>
    6854:	2903      	cmp	r1, #3
    6856:	f000 814d 	beq.w	6af4 <usbd_event_transfer_data+0x300>
    685a:	4aab      	ldr	r2, [pc, #684]	; (6b08 <usbd_event_transfer_data+0x314>)
    685c:	4bab      	ldr	r3, [pc, #684]	; (6b0c <usbd_event_transfer_data+0x318>)
    685e:	1ad2      	subs	r2, r2, r3
    6860:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6862:	f04f 0300 	mov.w	r3, #0
    6866:	2001      	movs	r0, #1
    6868:	f360 0302 	bfi	r3, r0, #0, #3
    686c:	f36f 03c5 	bfc	r3, #3, #3
    6870:	f362 138f 	bfi	r3, r2, #6, #10
    6874:	4632      	mov	r2, r6
    6876:	48a6      	ldr	r0, [pc, #664]	; (6b10 <usbd_event_transfer_data+0x31c>)
    6878:	f7fb fad0 	bl	1e1c <log_2>
    687c:	e13a      	b.n	6af4 <usbd_event_transfer_data+0x300>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    687e:	2200      	movs	r2, #0
    6880:	2300      	movs	r3, #0
    6882:	a901      	add	r1, sp, #4
    6884:	489c      	ldr	r0, [pc, #624]	; (6af8 <usbd_event_transfer_data+0x304>)
    6886:	f007 fb25 	bl	ded4 <k_mem_slab_alloc>
    688a:	b9a0      	cbnz	r0, 68b6 <usbd_event_transfer_data+0xc2>
	ev = (struct usbd_event *)block.data;
    688c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    688e:	6064      	str	r4, [r4, #4]
			if (!ev) {
    6890:	2c00      	cmp	r4, #0
    6892:	f000 812f 	beq.w	6af4 <usbd_event_transfer_data+0x300>
			ep_ctx->write_in_progress = false;
    6896:	2300      	movs	r3, #0
    6898:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    689a:	2301      	movs	r3, #1
    689c:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    689e:	2303      	movs	r3, #3
    68a0:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    68a2:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    68a4:	4621      	mov	r1, r4
    68a6:	4895      	ldr	r0, [pc, #596]	; (6afc <usbd_event_transfer_data+0x308>)
    68a8:	f00d fa9b 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    68ac:	4994      	ldr	r1, [pc, #592]	; (6b00 <usbd_event_transfer_data+0x30c>)
    68ae:	4895      	ldr	r0, [pc, #596]	; (6b04 <usbd_event_transfer_data+0x310>)
    68b0:	f00d fab8 	bl	13e24 <k_work_submit_to_queue>
}
    68b4:	e11e      	b.n	6af4 <usbd_event_transfer_data+0x300>
    68b6:	4b94      	ldr	r3, [pc, #592]	; (6b08 <usbd_event_transfer_data+0x314>)
    68b8:	4a94      	ldr	r2, [pc, #592]	; (6b0c <usbd_event_transfer_data+0x318>)
    68ba:	1a9b      	subs	r3, r3, r2
    68bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    68be:	f04f 0100 	mov.w	r1, #0
    68c2:	2201      	movs	r2, #1
    68c4:	f362 0102 	bfi	r1, r2, #0, #3
    68c8:	f36f 01c5 	bfc	r1, #3, #3
    68cc:	f363 118f 	bfi	r1, r3, #6, #10
    68d0:	4890      	ldr	r0, [pc, #576]	; (6b14 <usbd_event_transfer_data+0x320>)
    68d2:	f7fb fb01 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    68d6:	e000      	b.n	68da <usbd_event_transfer_data+0xe6>
	} while (ev != NULL);
    68d8:	b164      	cbz	r4, 68f4 <usbd_event_transfer_data+0x100>
    68da:	2200      	movs	r2, #0
    68dc:	2300      	movs	r3, #0
    68de:	4887      	ldr	r0, [pc, #540]	; (6afc <usbd_event_transfer_data+0x308>)
    68e0:	f007 fd00 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    68e4:	4604      	mov	r4, r0
    68e6:	2800      	cmp	r0, #0
    68e8:	d0f6      	beq.n	68d8 <usbd_event_transfer_data+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    68ea:	1d01      	adds	r1, r0, #4
    68ec:	4882      	ldr	r0, [pc, #520]	; (6af8 <usbd_event_transfer_data+0x304>)
    68ee:	f00d f955 	bl	13b9c <k_mem_slab_free>
}
    68f2:	e7f1      	b.n	68d8 <usbd_event_transfer_data+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    68f4:	2200      	movs	r2, #0
    68f6:	2300      	movs	r3, #0
    68f8:	a901      	add	r1, sp, #4
    68fa:	487f      	ldr	r0, [pc, #508]	; (6af8 <usbd_event_transfer_data+0x304>)
    68fc:	f007 faea 	bl	ded4 <k_mem_slab_alloc>
    6900:	b180      	cbz	r0, 6924 <usbd_event_transfer_data+0x130>
    6902:	4b81      	ldr	r3, [pc, #516]	; (6b08 <usbd_event_transfer_data+0x314>)
    6904:	4a81      	ldr	r2, [pc, #516]	; (6b0c <usbd_event_transfer_data+0x318>)
    6906:	1a9b      	subs	r3, r3, r2
    6908:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    690a:	f04f 0100 	mov.w	r1, #0
    690e:	2201      	movs	r2, #1
    6910:	f362 0102 	bfi	r1, r2, #0, #3
    6914:	f36f 01c5 	bfc	r1, #3, #3
    6918:	f363 118f 	bfi	r1, r3, #6, #10
    691c:	487e      	ldr	r0, [pc, #504]	; (6b18 <usbd_event_transfer_data+0x324>)
    691e:	f7fb fadb 	bl	1ed8 <log_0>
			return NULL;
    6922:	e7b5      	b.n	6890 <usbd_event_transfer_data+0x9c>
		ev = (struct usbd_event *)block.data;
    6924:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    6926:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6928:	2304      	movs	r3, #4
    692a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    692c:	4873      	ldr	r0, [pc, #460]	; (6afc <usbd_event_transfer_data+0x308>)
    692e:	f00d fa58 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6932:	4973      	ldr	r1, [pc, #460]	; (6b00 <usbd_event_transfer_data+0x30c>)
    6934:	4873      	ldr	r0, [pc, #460]	; (6b04 <usbd_event_transfer_data+0x310>)
    6936:	f00d fa75 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    693a:	e7a9      	b.n	6890 <usbd_event_transfer_data+0x9c>
    693c:	4b72      	ldr	r3, [pc, #456]	; (6b08 <usbd_event_transfer_data+0x314>)
    693e:	4a73      	ldr	r2, [pc, #460]	; (6b0c <usbd_event_transfer_data+0x318>)
    6940:	1a9b      	subs	r3, r3, r2
    6942:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    6944:	f04f 0100 	mov.w	r1, #0
    6948:	2201      	movs	r2, #1
    694a:	f362 0102 	bfi	r1, r2, #0, #3
    694e:	f36f 01c5 	bfc	r1, #3, #3
    6952:	f363 118f 	bfi	r1, r3, #6, #10
    6956:	486f      	ldr	r0, [pc, #444]	; (6b14 <usbd_event_transfer_data+0x320>)
    6958:	f7fb fabe 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    695c:	e004      	b.n	6968 <usbd_event_transfer_data+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    695e:	1d01      	adds	r1, r0, #4
    6960:	4865      	ldr	r0, [pc, #404]	; (6af8 <usbd_event_transfer_data+0x304>)
    6962:	f00d f91b 	bl	13b9c <k_mem_slab_free>
	} while (ev != NULL);
    6966:	b144      	cbz	r4, 697a <usbd_event_transfer_data+0x186>
    6968:	2200      	movs	r2, #0
    696a:	2300      	movs	r3, #0
    696c:	4863      	ldr	r0, [pc, #396]	; (6afc <usbd_event_transfer_data+0x308>)
    696e:	f007 fcb9 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    6972:	4604      	mov	r4, r0
    6974:	2800      	cmp	r0, #0
    6976:	d1f2      	bne.n	695e <usbd_event_transfer_data+0x16a>
    6978:	e7f5      	b.n	6966 <usbd_event_transfer_data+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    697a:	2200      	movs	r2, #0
    697c:	2300      	movs	r3, #0
    697e:	a901      	add	r1, sp, #4
    6980:	485d      	ldr	r0, [pc, #372]	; (6af8 <usbd_event_transfer_data+0x304>)
    6982:	f007 faa7 	bl	ded4 <k_mem_slab_alloc>
    6986:	b180      	cbz	r0, 69aa <usbd_event_transfer_data+0x1b6>
    6988:	4b5f      	ldr	r3, [pc, #380]	; (6b08 <usbd_event_transfer_data+0x314>)
    698a:	4a60      	ldr	r2, [pc, #384]	; (6b0c <usbd_event_transfer_data+0x318>)
    698c:	1a9b      	subs	r3, r3, r2
    698e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    6990:	f04f 0100 	mov.w	r1, #0
    6994:	2201      	movs	r2, #1
    6996:	f362 0102 	bfi	r1, r2, #0, #3
    699a:	f36f 01c5 	bfc	r1, #3, #3
    699e:	f363 118f 	bfi	r1, r3, #6, #10
    69a2:	485d      	ldr	r0, [pc, #372]	; (6b18 <usbd_event_transfer_data+0x324>)
    69a4:	f7fb fa98 	bl	1ed8 <log_0>
			return NULL;
    69a8:	e741      	b.n	682e <usbd_event_transfer_data+0x3a>
		ev = (struct usbd_event *)block.data;
    69aa:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    69ac:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    69ae:	2304      	movs	r3, #4
    69b0:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    69b2:	4852      	ldr	r0, [pc, #328]	; (6afc <usbd_event_transfer_data+0x308>)
    69b4:	f00d fa15 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    69b8:	4951      	ldr	r1, [pc, #324]	; (6b00 <usbd_event_transfer_data+0x30c>)
    69ba:	4852      	ldr	r0, [pc, #328]	; (6b04 <usbd_event_transfer_data+0x310>)
    69bc:	f00d fa32 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    69c0:	e735      	b.n	682e <usbd_event_transfer_data+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    69c2:	2200      	movs	r2, #0
    69c4:	2300      	movs	r3, #0
    69c6:	a901      	add	r1, sp, #4
    69c8:	484b      	ldr	r0, [pc, #300]	; (6af8 <usbd_event_transfer_data+0x304>)
    69ca:	f007 fa83 	bl	ded4 <k_mem_slab_alloc>
    69ce:	b9f0      	cbnz	r0, 6a0e <usbd_event_transfer_data+0x21a>
	ev = (struct usbd_event *)block.data;
    69d0:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    69d2:	6076      	str	r6, [r6, #4]
			if (!ev) {
    69d4:	2e00      	cmp	r6, #0
    69d6:	f000 808d 	beq.w	6af4 <usbd_event_transfer_data+0x300>
				p_event->data.eptransfer.ep);
    69da:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    69dc:	f994 2002 	ldrsb.w	r2, [r4, #2]
    69e0:	2a00      	cmp	r2, #0
    69e2:	db57      	blt.n	6a94 <usbd_event_transfer_data+0x2a0>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    69e4:	f013 0f08 	tst.w	r3, #8
    69e8:	d067      	beq.n	6aba <usbd_event_transfer_data+0x2c6>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    69ea:	4b4c      	ldr	r3, [pc, #304]	; (6b1c <usbd_event_transfer_data+0x328>)
    69ec:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    69f0:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    69f2:	2301      	movs	r3, #1
    69f4:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    69f6:	2302      	movs	r3, #2
    69f8:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    69fa:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    69fc:	4631      	mov	r1, r6
    69fe:	483f      	ldr	r0, [pc, #252]	; (6afc <usbd_event_transfer_data+0x308>)
    6a00:	f00d f9ef 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6a04:	493e      	ldr	r1, [pc, #248]	; (6b00 <usbd_event_transfer_data+0x30c>)
    6a06:	483f      	ldr	r0, [pc, #252]	; (6b04 <usbd_event_transfer_data+0x310>)
    6a08:	f00d fa0c 	bl	13e24 <k_work_submit_to_queue>
}
    6a0c:	e072      	b.n	6af4 <usbd_event_transfer_data+0x300>
    6a0e:	4b3e      	ldr	r3, [pc, #248]	; (6b08 <usbd_event_transfer_data+0x314>)
    6a10:	4a3e      	ldr	r2, [pc, #248]	; (6b0c <usbd_event_transfer_data+0x318>)
    6a12:	1a9b      	subs	r3, r3, r2
    6a14:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    6a16:	f04f 0100 	mov.w	r1, #0
    6a1a:	2201      	movs	r2, #1
    6a1c:	f362 0102 	bfi	r1, r2, #0, #3
    6a20:	f36f 01c5 	bfc	r1, #3, #3
    6a24:	f363 118f 	bfi	r1, r3, #6, #10
    6a28:	483a      	ldr	r0, [pc, #232]	; (6b14 <usbd_event_transfer_data+0x320>)
    6a2a:	f7fb fa55 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    6a2e:	e004      	b.n	6a3a <usbd_event_transfer_data+0x246>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6a30:	1d01      	adds	r1, r0, #4
    6a32:	4831      	ldr	r0, [pc, #196]	; (6af8 <usbd_event_transfer_data+0x304>)
    6a34:	f00d f8b2 	bl	13b9c <k_mem_slab_free>
	} while (ev != NULL);
    6a38:	b146      	cbz	r6, 6a4c <usbd_event_transfer_data+0x258>
    6a3a:	2200      	movs	r2, #0
    6a3c:	2300      	movs	r3, #0
    6a3e:	482f      	ldr	r0, [pc, #188]	; (6afc <usbd_event_transfer_data+0x308>)
    6a40:	f007 fc50 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    6a44:	4606      	mov	r6, r0
    6a46:	2800      	cmp	r0, #0
    6a48:	d1f2      	bne.n	6a30 <usbd_event_transfer_data+0x23c>
    6a4a:	e7f5      	b.n	6a38 <usbd_event_transfer_data+0x244>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6a4c:	2200      	movs	r2, #0
    6a4e:	2300      	movs	r3, #0
    6a50:	a901      	add	r1, sp, #4
    6a52:	4829      	ldr	r0, [pc, #164]	; (6af8 <usbd_event_transfer_data+0x304>)
    6a54:	f007 fa3e 	bl	ded4 <k_mem_slab_alloc>
    6a58:	b180      	cbz	r0, 6a7c <usbd_event_transfer_data+0x288>
    6a5a:	4b2b      	ldr	r3, [pc, #172]	; (6b08 <usbd_event_transfer_data+0x314>)
    6a5c:	4a2b      	ldr	r2, [pc, #172]	; (6b0c <usbd_event_transfer_data+0x318>)
    6a5e:	1a9b      	subs	r3, r3, r2
    6a60:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    6a62:	f04f 0100 	mov.w	r1, #0
    6a66:	2201      	movs	r2, #1
    6a68:	f362 0102 	bfi	r1, r2, #0, #3
    6a6c:	f36f 01c5 	bfc	r1, #3, #3
    6a70:	f363 118f 	bfi	r1, r3, #6, #10
    6a74:	4828      	ldr	r0, [pc, #160]	; (6b18 <usbd_event_transfer_data+0x324>)
    6a76:	f7fb fa2f 	bl	1ed8 <log_0>
			return NULL;
    6a7a:	e7ab      	b.n	69d4 <usbd_event_transfer_data+0x1e0>
		ev = (struct usbd_event *)block.data;
    6a7c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    6a7e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6a80:	2304      	movs	r3, #4
    6a82:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6a84:	481d      	ldr	r0, [pc, #116]	; (6afc <usbd_event_transfer_data+0x308>)
    6a86:	f00d f9ac 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6a8a:	491d      	ldr	r1, [pc, #116]	; (6b00 <usbd_event_transfer_data+0x30c>)
    6a8c:	481d      	ldr	r0, [pc, #116]	; (6b04 <usbd_event_transfer_data+0x310>)
    6a8e:	f00d f9c9 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    6a92:	e79f      	b.n	69d4 <usbd_event_transfer_data+0x1e0>
        if (NRF_USBD_EPISO_CHECK(ep))
    6a94:	f013 0f08 	tst.w	r3, #8
    6a98:	d003      	beq.n	6aa2 <usbd_event_transfer_data+0x2ae>
            ret = p_reg->ISOIN.AMOUNT;
    6a9a:	4b20      	ldr	r3, [pc, #128]	; (6b1c <usbd_event_transfer_data+0x328>)
    6a9c:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    6aa0:	e7a6      	b.n	69f0 <usbd_event_transfer_data+0x1fc>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6aa2:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    6aa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6aaa:	009b      	lsls	r3, r3, #2
    6aac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6ab0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    6ab4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    6ab8:	e79a      	b.n	69f0 <usbd_event_transfer_data+0x1fc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6aba:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    6abe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6ac2:	009b      	lsls	r3, r3, #2
    6ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6ac8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    6acc:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    6ad0:	e78e      	b.n	69f0 <usbd_event_transfer_data+0x1fc>
    6ad2:	4a0d      	ldr	r2, [pc, #52]	; (6b08 <usbd_event_transfer_data+0x314>)
    6ad4:	4b0d      	ldr	r3, [pc, #52]	; (6b0c <usbd_event_transfer_data+0x318>)
    6ad6:	1ad2      	subs	r2, r2, r3
    6ad8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6ada:	f04f 0300 	mov.w	r3, #0
    6ade:	2001      	movs	r0, #1
    6ae0:	f360 0302 	bfi	r3, r0, #0, #3
    6ae4:	f36f 03c5 	bfc	r3, #3, #3
    6ae8:	f362 138f 	bfi	r3, r2, #6, #10
    6aec:	4632      	mov	r2, r6
    6aee:	4808      	ldr	r0, [pc, #32]	; (6b10 <usbd_event_transfer_data+0x31c>)
    6af0:	f7fb f994 	bl	1e1c <log_2>
}
    6af4:	b002      	add	sp, #8
    6af6:	bd70      	pop	{r4, r5, r6, pc}
    6af8:	200002e8 	.word	0x200002e8
    6afc:	200003ec 	.word	0x200003ec
    6b00:	200023b4 	.word	0x200023b4
    6b04:	20000698 	.word	0x20000698
    6b08:	000146f0 	.word	0x000146f0
    6b0c:	00014688 	.word	0x00014688
    6b10:	00015858 	.word	0x00015858
    6b14:	00015758 	.word	0x00015758
    6b18:	00015778 	.word	0x00015778
    6b1c:	40027000 	.word	0x40027000

00006b20 <usbd_event_handler>:
{
    6b20:	b510      	push	{r4, lr}
    6b22:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    6b24:	2300      	movs	r3, #0
    6b26:	9303      	str	r3, [sp, #12]
    6b28:	9304      	str	r3, [sp, #16]
    6b2a:	9305      	str	r3, [sp, #20]
    6b2c:	9306      	str	r3, [sp, #24]
    6b2e:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    6b30:	7803      	ldrb	r3, [r0, #0]
    6b32:	3b01      	subs	r3, #1
    6b34:	2b05      	cmp	r3, #5
    6b36:	d826      	bhi.n	6b86 <usbd_event_handler+0x66>
    6b38:	e8df f003 	tbb	[pc, r3]
    6b3c:	2e270335 	.word	0x2e270335
    6b40:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
    6b42:	2300      	movs	r3, #0
    6b44:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    6b48:	2303      	movs	r3, #3
    6b4a:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6b4e:	2200      	movs	r2, #0
    6b50:	2300      	movs	r3, #0
    6b52:	a901      	add	r1, sp, #4
    6b54:	4850      	ldr	r0, [pc, #320]	; (6c98 <usbd_event_handler+0x178>)
    6b56:	f007 f9bd 	bl	ded4 <k_mem_slab_alloc>
    6b5a:	2800      	cmp	r0, #0
    6b5c:	d159      	bne.n	6c12 <usbd_event_handler+0xf2>
	ev = (struct usbd_event *)block.data;
    6b5e:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    6b60:	6064      	str	r4, [r4, #4]
		if (!ev) {
    6b62:	b184      	cbz	r4, 6b86 <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    6b64:	f89d 301c 	ldrb.w	r3, [sp, #28]
    6b68:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
    6b6a:	f104 0308 	add.w	r3, r4, #8
    6b6e:	9906      	ldr	r1, [sp, #24]
    6b70:	9805      	ldr	r0, [sp, #20]
    6b72:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    6b76:	4621      	mov	r1, r4
    6b78:	4848      	ldr	r0, [pc, #288]	; (6c9c <usbd_event_handler+0x17c>)
    6b7a:	f00d f932 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6b7e:	4948      	ldr	r1, [pc, #288]	; (6ca0 <usbd_event_handler+0x180>)
    6b80:	4848      	ldr	r0, [pc, #288]	; (6ca4 <usbd_event_handler+0x184>)
    6b82:	f00d f94f 	bl	13e24 <k_work_submit_to_queue>
}
    6b86:	b008      	add	sp, #32
    6b88:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
    6b8a:	2300      	movs	r3, #0
    6b8c:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    6b90:	2304      	movs	r3, #4
    6b92:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    6b96:	e7da      	b.n	6b4e <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
    6b98:	2300      	movs	r3, #0
    6b9a:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    6b9e:	2304      	movs	r3, #4
    6ba0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    6ba4:	e7d3      	b.n	6b4e <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    6ba6:	2302      	movs	r3, #2
    6ba8:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    6bac:	e7cf      	b.n	6b4e <usbd_event_handler+0x2e>
    6bae:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    6bb0:	7880      	ldrb	r0, [r0, #2]
    6bb2:	f7ff f8eb 	bl	5d8c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    6bb6:	7a83      	ldrb	r3, [r0, #10]
    6bb8:	2b01      	cmp	r3, #1
    6bba:	d00e      	beq.n	6bda <usbd_event_handler+0xba>
    6bbc:	d805      	bhi.n	6bca <usbd_event_handler+0xaa>
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d1e1      	bne.n	6b86 <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
    6bc2:	4620      	mov	r0, r4
    6bc4:	f7ff fc7e 	bl	64c4 <usbd_event_transfer_ctrl>
	if (put_evt) {
    6bc8:	e7dd      	b.n	6b86 <usbd_event_handler+0x66>
    6bca:	3b02      	subs	r3, #2
    6bcc:	b2db      	uxtb	r3, r3
    6bce:	2b01      	cmp	r3, #1
    6bd0:	d8d9      	bhi.n	6b86 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    6bd2:	4620      	mov	r0, r4
    6bd4:	f7ff fe0e 	bl	67f4 <usbd_event_transfer_data>
	if (put_evt) {
    6bd8:	e7d5      	b.n	6b86 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    6bda:	4620      	mov	r0, r4
    6bdc:	f7ff fe0a 	bl	67f4 <usbd_event_transfer_data>
	if (put_evt) {
    6be0:	e7d1      	b.n	6b86 <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    6be2:	a801      	add	r0, sp, #4
    6be4:	f003 fcea 	bl	a5bc <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    6be8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6bec:	2b05      	cmp	r3, #5
    6bee:	d00a      	beq.n	6c06 <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    6bf0:	2000      	movs	r0, #0
    6bf2:	f7ff f8cb 	bl	5d8c <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    6bf6:	2301      	movs	r3, #1
    6bf8:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    6bfc:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
    6bfe:	2300      	movs	r3, #0
    6c00:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
    6c04:	e7a3      	b.n	6b4e <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    6c06:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6c0a:	f013 0f60 	tst.w	r3, #96	; 0x60
    6c0e:	d0ba      	beq.n	6b86 <usbd_event_handler+0x66>
    6c10:	e7ee      	b.n	6bf0 <usbd_event_handler+0xd0>
    6c12:	4b25      	ldr	r3, [pc, #148]	; (6ca8 <usbd_event_handler+0x188>)
    6c14:	4a25      	ldr	r2, [pc, #148]	; (6cac <usbd_event_handler+0x18c>)
    6c16:	1a9b      	subs	r3, r3, r2
    6c18:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    6c1a:	f04f 0100 	mov.w	r1, #0
    6c1e:	2201      	movs	r2, #1
    6c20:	f362 0102 	bfi	r1, r2, #0, #3
    6c24:	f36f 01c5 	bfc	r1, #3, #3
    6c28:	f363 118f 	bfi	r1, r3, #6, #10
    6c2c:	4820      	ldr	r0, [pc, #128]	; (6cb0 <usbd_event_handler+0x190>)
    6c2e:	f7fb f953 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    6c32:	e004      	b.n	6c3e <usbd_event_handler+0x11e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6c34:	1d01      	adds	r1, r0, #4
    6c36:	4818      	ldr	r0, [pc, #96]	; (6c98 <usbd_event_handler+0x178>)
    6c38:	f00c ffb0 	bl	13b9c <k_mem_slab_free>
	} while (ev != NULL);
    6c3c:	b144      	cbz	r4, 6c50 <usbd_event_handler+0x130>
    6c3e:	2200      	movs	r2, #0
    6c40:	2300      	movs	r3, #0
    6c42:	4816      	ldr	r0, [pc, #88]	; (6c9c <usbd_event_handler+0x17c>)
    6c44:	f007 fb4e 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    6c48:	4604      	mov	r4, r0
    6c4a:	2800      	cmp	r0, #0
    6c4c:	d1f2      	bne.n	6c34 <usbd_event_handler+0x114>
    6c4e:	e7f5      	b.n	6c3c <usbd_event_handler+0x11c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6c50:	2200      	movs	r2, #0
    6c52:	2300      	movs	r3, #0
    6c54:	a901      	add	r1, sp, #4
    6c56:	4810      	ldr	r0, [pc, #64]	; (6c98 <usbd_event_handler+0x178>)
    6c58:	f007 f93c 	bl	ded4 <k_mem_slab_alloc>
    6c5c:	b180      	cbz	r0, 6c80 <usbd_event_handler+0x160>
    6c5e:	4b12      	ldr	r3, [pc, #72]	; (6ca8 <usbd_event_handler+0x188>)
    6c60:	4a12      	ldr	r2, [pc, #72]	; (6cac <usbd_event_handler+0x18c>)
    6c62:	1a9b      	subs	r3, r3, r2
    6c64:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    6c66:	f04f 0100 	mov.w	r1, #0
    6c6a:	2201      	movs	r2, #1
    6c6c:	f362 0102 	bfi	r1, r2, #0, #3
    6c70:	f36f 01c5 	bfc	r1, #3, #3
    6c74:	f363 118f 	bfi	r1, r3, #6, #10
    6c78:	480e      	ldr	r0, [pc, #56]	; (6cb4 <usbd_event_handler+0x194>)
    6c7a:	f7fb f92d 	bl	1ed8 <log_0>
			return NULL;
    6c7e:	e770      	b.n	6b62 <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
    6c80:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    6c82:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6c84:	2304      	movs	r3, #4
    6c86:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6c88:	4804      	ldr	r0, [pc, #16]	; (6c9c <usbd_event_handler+0x17c>)
    6c8a:	f00d f8aa 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6c8e:	4904      	ldr	r1, [pc, #16]	; (6ca0 <usbd_event_handler+0x180>)
    6c90:	4804      	ldr	r0, [pc, #16]	; (6ca4 <usbd_event_handler+0x184>)
    6c92:	f00d f8c7 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    6c96:	e764      	b.n	6b62 <usbd_event_handler+0x42>
    6c98:	200002e8 	.word	0x200002e8
    6c9c:	200003ec 	.word	0x200003ec
    6ca0:	200023b4 	.word	0x200023b4
    6ca4:	20000698 	.word	0x20000698
    6ca8:	000146f0 	.word	0x000146f0
    6cac:	00014688 	.word	0x00014688
    6cb0:	00015758 	.word	0x00015758
    6cb4:	00015778 	.word	0x00015778

00006cb8 <usb_dc_attach>:
{
    6cb8:	b510      	push	{r4, lr}
	if (ctx->attached) {
    6cba:	4b1d      	ldr	r3, [pc, #116]	; (6d30 <usb_dc_attach+0x78>)
    6cbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6cc0:	b113      	cbz	r3, 6cc8 <usb_dc_attach+0x10>
		return 0;
    6cc2:	2400      	movs	r4, #0
}
    6cc4:	4620      	mov	r0, r4
    6cc6:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    6cc8:	4c19      	ldr	r4, [pc, #100]	; (6d30 <usb_dc_attach+0x78>)
    6cca:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6cce:	f00d f804 	bl	13cda <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    6cd2:	2000      	movs	r0, #0
    6cd4:	f000 fd36 	bl	7744 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    6cd8:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6cda:	2200      	movs	r2, #0
    6cdc:	2101      	movs	r1, #1
    6cde:	2027      	movs	r0, #39	; 0x27
    6ce0:	f7fd fb38 	bl	4354 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    6ce4:	4813      	ldr	r0, [pc, #76]	; (6d34 <usb_dc_attach+0x7c>)
    6ce6:	f002 fff1 	bl	9ccc <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    6cea:	4b13      	ldr	r3, [pc, #76]	; (6d38 <usb_dc_attach+0x80>)
    6cec:	4298      	cmp	r0, r3
    6cee:	d11b      	bne.n	6d28 <usb_dc_attach+0x70>
	nrfx_power_usbevt_enable();
    6cf0:	f00b fccb 	bl	1268a <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6cf4:	f7ff f87e 	bl	5df4 <eps_ctx_init>
	if (ret == 0) {
    6cf8:	4604      	mov	r4, r0
    6cfa:	b918      	cbnz	r0, 6d04 <usb_dc_attach+0x4c>
		ctx->attached = true;
    6cfc:	4b0c      	ldr	r3, [pc, #48]	; (6d30 <usb_dc_attach+0x78>)
    6cfe:	2201      	movs	r2, #1
    6d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    6d04:	4b0d      	ldr	r3, [pc, #52]	; (6d3c <usb_dc_attach+0x84>)
    6d06:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    6d08:	b11b      	cbz	r3, 6d12 <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6d0a:	490d      	ldr	r1, [pc, #52]	; (6d40 <usb_dc_attach+0x88>)
    6d0c:	480d      	ldr	r0, [pc, #52]	; (6d44 <usb_dc_attach+0x8c>)
    6d0e:	f00d f889 	bl	13e24 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    6d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d16:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    6d1a:	f013 0f01 	tst.w	r3, #1
    6d1e:	d0d1      	beq.n	6cc4 <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    6d20:	2000      	movs	r0, #0
    6d22:	f7ff f935 	bl	5f90 <usb_dc_power_event_handler>
    6d26:	e7cd      	b.n	6cc4 <usb_dc_attach+0xc>
		return -EIO;
    6d28:	f06f 0404 	mvn.w	r4, #4
    6d2c:	e7ca      	b.n	6cc4 <usb_dc_attach+0xc>
    6d2e:	bf00      	nop
    6d30:	2000238c 	.word	0x2000238c
    6d34:	00006b21 	.word	0x00006b21
    6d38:	0bad0000 	.word	0x0bad0000
    6d3c:	200003ec 	.word	0x200003ec
    6d40:	200023b4 	.word	0x200023b4
    6d44:	20000698 	.word	0x20000698

00006d48 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    6d48:	4b07      	ldr	r3, [pc, #28]	; (6d68 <usb_dc_set_address+0x20>)
    6d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6d4e:	b12b      	cbz	r3, 6d5c <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    6d50:	4b05      	ldr	r3, [pc, #20]	; (6d68 <usb_dc_set_address+0x20>)
    6d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6d56:	b123      	cbz	r3, 6d62 <usb_dc_set_address+0x1a>
	return 0;
    6d58:	2000      	movs	r0, #0
    6d5a:	4770      	bx	lr
		return -ENODEV;
    6d5c:	f06f 0012 	mvn.w	r0, #18
    6d60:	4770      	bx	lr
    6d62:	f06f 0012 	mvn.w	r0, #18
}
    6d66:	4770      	bx	lr
    6d68:	2000238c 	.word	0x2000238c

00006d6c <usb_dc_ep_check_cap>:
{
    6d6c:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    6d6e:	7801      	ldrb	r1, [r0, #0]
    6d70:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6d74:	7903      	ldrb	r3, [r0, #4]
    6d76:	b903      	cbnz	r3, 6d7a <usb_dc_ep_check_cap+0xe>
    6d78:	b92a      	cbnz	r2, 6d86 <usb_dc_ep_check_cap+0x1a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    6d7a:	2a08      	cmp	r2, #8
    6d7c:	d816      	bhi.n	6dac <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6d7e:	2b01      	cmp	r3, #1
    6d80:	d027      	beq.n	6dd2 <usb_dc_ep_check_cap+0x66>
	return 0;
    6d82:	2000      	movs	r0, #0
}
    6d84:	bd08      	pop	{r3, pc}
    6d86:	4b17      	ldr	r3, [pc, #92]	; (6de4 <usb_dc_ep_check_cap+0x78>)
    6d88:	4a17      	ldr	r2, [pc, #92]	; (6de8 <usb_dc_ep_check_cap+0x7c>)
    6d8a:	1a9b      	subs	r3, r3, r2
    6d8c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint configuration");
    6d8e:	f04f 0100 	mov.w	r1, #0
    6d92:	2201      	movs	r2, #1
    6d94:	f362 0102 	bfi	r1, r2, #0, #3
    6d98:	f36f 01c5 	bfc	r1, #3, #3
    6d9c:	f363 118f 	bfi	r1, r3, #6, #10
    6da0:	4812      	ldr	r0, [pc, #72]	; (6dec <usb_dc_ep_check_cap+0x80>)
    6da2:	f7fb f899 	bl	1ed8 <log_0>
		return -1;
    6da6:	f04f 30ff 	mov.w	r0, #4294967295
    6daa:	e7eb      	b.n	6d84 <usb_dc_ep_check_cap+0x18>
    6dac:	4b0d      	ldr	r3, [pc, #52]	; (6de4 <usb_dc_ep_check_cap+0x78>)
    6dae:	4a0e      	ldr	r2, [pc, #56]	; (6de8 <usb_dc_ep_check_cap+0x7c>)
    6db0:	1a9b      	subs	r3, r3, r2
    6db2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint index/address");
    6db4:	f04f 0100 	mov.w	r1, #0
    6db8:	2201      	movs	r2, #1
    6dba:	f362 0102 	bfi	r1, r2, #0, #3
    6dbe:	f36f 01c5 	bfc	r1, #3, #3
    6dc2:	f363 118f 	bfi	r1, r3, #6, #10
    6dc6:	480a      	ldr	r0, [pc, #40]	; (6df0 <usb_dc_ep_check_cap+0x84>)
    6dc8:	f7fb f886 	bl	1ed8 <log_0>
		return -1;
    6dcc:	f04f 30ff 	mov.w	r0, #4294967295
    6dd0:	e7d8      	b.n	6d84 <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6dd2:	f011 0f08 	tst.w	r1, #8
    6dd6:	d001      	beq.n	6ddc <usb_dc_ep_check_cap+0x70>
	return 0;
    6dd8:	2000      	movs	r0, #0
    6dda:	e7d3      	b.n	6d84 <usb_dc_ep_check_cap+0x18>
		return -1;
    6ddc:	f04f 30ff 	mov.w	r0, #4294967295
    6de0:	e7d0      	b.n	6d84 <usb_dc_ep_check_cap+0x18>
    6de2:	bf00      	nop
    6de4:	000146f0 	.word	0x000146f0
    6de8:	00014688 	.word	0x00014688
    6dec:	000158a4 	.word	0x000158a4
    6df0:	000158c4 	.word	0x000158c4

00006df4 <usb_dc_ep_configure>:
{
    6df4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6df6:	4b1a      	ldr	r3, [pc, #104]	; (6e60 <usb_dc_ep_configure+0x6c>)
    6df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    6dfc:	b353      	cbz	r3, 6e54 <usb_dc_ep_configure+0x60>
    6dfe:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    6e00:	7805      	ldrb	r5, [r0, #0]
    6e02:	4628      	mov	r0, r5
    6e04:	f7fe ffc2 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    6e08:	b338      	cbz	r0, 6e5a <usb_dc_ep_configure+0x66>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    6e0a:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    6e0c:	7922      	ldrb	r2, [r4, #4]
    6e0e:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6e10:	8862      	ldrh	r2, [r4, #2]
    6e12:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    6e14:	7820      	ldrb	r0, [r4, #0]
    6e16:	f010 0f08 	tst.w	r0, #8
    6e1a:	d103      	bne.n	6e24 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6e1c:	8863      	ldrh	r3, [r4, #2]
    6e1e:	1e5a      	subs	r2, r3, #1
    6e20:	4213      	tst	r3, r2
    6e22:	d104      	bne.n	6e2e <usb_dc_ep_configure+0x3a>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6e24:	8861      	ldrh	r1, [r4, #2]
    6e26:	f002 ff41 	bl	9cac <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    6e2a:	2000      	movs	r0, #0
}
    6e2c:	bd38      	pop	{r3, r4, r5, pc}
    6e2e:	4b0d      	ldr	r3, [pc, #52]	; (6e64 <usb_dc_ep_configure+0x70>)
    6e30:	4a0d      	ldr	r2, [pc, #52]	; (6e68 <usb_dc_ep_configure+0x74>)
    6e32:	1a9b      	subs	r3, r3, r2
    6e34:	08db      	lsrs	r3, r3, #3
			LOG_ERR("EP max packet size must be a power of 2");
    6e36:	f04f 0100 	mov.w	r1, #0
    6e3a:	2201      	movs	r2, #1
    6e3c:	f362 0102 	bfi	r1, r2, #0, #3
    6e40:	f36f 01c5 	bfc	r1, #3, #3
    6e44:	f363 118f 	bfi	r1, r3, #6, #10
    6e48:	4808      	ldr	r0, [pc, #32]	; (6e6c <usb_dc_ep_configure+0x78>)
    6e4a:	f7fb f845 	bl	1ed8 <log_0>
			return -EINVAL;
    6e4e:	f06f 0015 	mvn.w	r0, #21
    6e52:	e7eb      	b.n	6e2c <usb_dc_ep_configure+0x38>
		return -ENODEV;
    6e54:	f06f 0012 	mvn.w	r0, #18
    6e58:	e7e8      	b.n	6e2c <usb_dc_ep_configure+0x38>
		return -EINVAL;
    6e5a:	f06f 0015 	mvn.w	r0, #21
    6e5e:	e7e5      	b.n	6e2c <usb_dc_ep_configure+0x38>
    6e60:	2000238c 	.word	0x2000238c
    6e64:	000146f0 	.word	0x000146f0
    6e68:	00014688 	.word	0x00014688
    6e6c:	000158e4 	.word	0x000158e4

00006e70 <usb_dc_ep_set_stall>:
{
    6e70:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6e72:	4b1e      	ldr	r3, [pc, #120]	; (6eec <usb_dc_ep_set_stall+0x7c>)
    6e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6e78:	b37b      	cbz	r3, 6eda <usb_dc_ep_set_stall+0x6a>
    6e7a:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    6e7c:	4b1b      	ldr	r3, [pc, #108]	; (6eec <usb_dc_ep_set_stall+0x7c>)
    6e7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6e82:	b36b      	cbz	r3, 6ee0 <usb_dc_ep_set_stall+0x70>
	ep_ctx = endpoint_ctx(ep);
    6e84:	f7fe ff82 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    6e88:	4605      	mov	r5, r0
    6e8a:	b360      	cbz	r0, 6ee6 <usb_dc_ep_set_stall+0x76>
	switch (ep_ctx->cfg.type) {
    6e8c:	7a83      	ldrb	r3, [r0, #10]
    6e8e:	2b01      	cmp	r3, #1
    6e90:	d010      	beq.n	6eb4 <usb_dc_ep_set_stall+0x44>
    6e92:	d807      	bhi.n	6ea4 <usb_dc_ep_set_stall+0x34>
    6e94:	b90b      	cbnz	r3, 6e9a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
    6e96:	f003 fc17 	bl	a6c8 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    6e9a:	2000      	movs	r0, #0
    6e9c:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    6e9e:	696b      	ldr	r3, [r5, #20]
    6ea0:	61ab      	str	r3, [r5, #24]
}
    6ea2:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    6ea4:	3b02      	subs	r3, #2
    6ea6:	b2db      	uxtb	r3, r3
    6ea8:	2b01      	cmp	r3, #1
    6eaa:	d8f6      	bhi.n	6e9a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    6eac:	4620      	mov	r0, r4
    6eae:	f003 fb51 	bl	a554 <nrfx_usbd_ep_stall>
		break;
    6eb2:	e7f2      	b.n	6e9a <usb_dc_ep_set_stall+0x2a>
    6eb4:	4b0e      	ldr	r3, [pc, #56]	; (6ef0 <usb_dc_ep_set_stall+0x80>)
    6eb6:	4a0f      	ldr	r2, [pc, #60]	; (6ef4 <usb_dc_ep_set_stall+0x84>)
    6eb8:	1a9b      	subs	r3, r3, r2
    6eba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("STALL unsupported on ISO endpoint");
    6ebc:	f04f 0100 	mov.w	r1, #0
    6ec0:	2201      	movs	r2, #1
    6ec2:	f362 0102 	bfi	r1, r2, #0, #3
    6ec6:	f36f 01c5 	bfc	r1, #3, #3
    6eca:	f363 118f 	bfi	r1, r3, #6, #10
    6ece:	480a      	ldr	r0, [pc, #40]	; (6ef8 <usb_dc_ep_set_stall+0x88>)
    6ed0:	f7fb f802 	bl	1ed8 <log_0>
		return -EINVAL;
    6ed4:	f06f 0015 	mvn.w	r0, #21
    6ed8:	e7e3      	b.n	6ea2 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    6eda:	f06f 0012 	mvn.w	r0, #18
    6ede:	e7e0      	b.n	6ea2 <usb_dc_ep_set_stall+0x32>
    6ee0:	f06f 0012 	mvn.w	r0, #18
    6ee4:	e7dd      	b.n	6ea2 <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    6ee6:	f06f 0015 	mvn.w	r0, #21
    6eea:	e7da      	b.n	6ea2 <usb_dc_ep_set_stall+0x32>
    6eec:	2000238c 	.word	0x2000238c
    6ef0:	000146f0 	.word	0x000146f0
    6ef4:	00014688 	.word	0x00014688
    6ef8:	0001590c 	.word	0x0001590c

00006efc <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    6efc:	4b11      	ldr	r3, [pc, #68]	; (6f44 <usb_dc_ep_clear_stall+0x48>)
    6efe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6f02:	b19b      	cbz	r3, 6f2c <usb_dc_ep_clear_stall+0x30>
{
    6f04:	b510      	push	{r4, lr}
    6f06:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    6f08:	4b0e      	ldr	r3, [pc, #56]	; (6f44 <usb_dc_ep_clear_stall+0x48>)
    6f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6f0e:	b183      	cbz	r3, 6f32 <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    6f10:	f7fe ff3c 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    6f14:	b180      	cbz	r0, 6f38 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    6f16:	f014 0f08 	tst.w	r4, #8
    6f1a:	d110      	bne.n	6f3e <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6f1c:	4620      	mov	r0, r4
    6f1e:	f003 fb41 	bl	a5a4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6f22:	4620      	mov	r0, r4
    6f24:	f003 fd88 	bl	aa38 <nrfx_usbd_ep_stall_clear>
	return 0;
    6f28:	2000      	movs	r0, #0
}
    6f2a:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6f2c:	f06f 0012 	mvn.w	r0, #18
}
    6f30:	4770      	bx	lr
		return -ENODEV;
    6f32:	f06f 0012 	mvn.w	r0, #18
    6f36:	e7f8      	b.n	6f2a <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    6f38:	f06f 0015 	mvn.w	r0, #21
    6f3c:	e7f5      	b.n	6f2a <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    6f3e:	f06f 0015 	mvn.w	r0, #21
    6f42:	e7f2      	b.n	6f2a <usb_dc_ep_clear_stall+0x2e>
    6f44:	2000238c 	.word	0x2000238c

00006f48 <usb_dc_ep_is_stalled>:
{
    6f48:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6f4a:	4b10      	ldr	r3, [pc, #64]	; (6f8c <usb_dc_ep_is_stalled+0x44>)
    6f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6f50:	b17b      	cbz	r3, 6f72 <usb_dc_ep_is_stalled+0x2a>
    6f52:	4604      	mov	r4, r0
    6f54:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    6f56:	4b0d      	ldr	r3, [pc, #52]	; (6f8c <usb_dc_ep_is_stalled+0x44>)
    6f58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6f5c:	b163      	cbz	r3, 6f78 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    6f5e:	f7fe ff15 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    6f62:	b160      	cbz	r0, 6f7e <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    6f64:	b175      	cbz	r5, 6f84 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    6f66:	4620      	mov	r0, r4
    6f68:	f003 fafc 	bl	a564 <nrfx_usbd_ep_stall_check>
    6f6c:	7028      	strb	r0, [r5, #0]
	return 0;
    6f6e:	2000      	movs	r0, #0
}
    6f70:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6f72:	f06f 0012 	mvn.w	r0, #18
    6f76:	e7fb      	b.n	6f70 <usb_dc_ep_is_stalled+0x28>
    6f78:	f06f 0012 	mvn.w	r0, #18
    6f7c:	e7f8      	b.n	6f70 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    6f7e:	f06f 0015 	mvn.w	r0, #21
    6f82:	e7f5      	b.n	6f70 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    6f84:	f06f 0015 	mvn.w	r0, #21
    6f88:	e7f2      	b.n	6f70 <usb_dc_ep_is_stalled+0x28>
    6f8a:	bf00      	nop
    6f8c:	2000238c 	.word	0x2000238c

00006f90 <usb_dc_ep_enable>:
{
    6f90:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6f92:	4b15      	ldr	r3, [pc, #84]	; (6fe8 <usb_dc_ep_enable+0x58>)
    6f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    6f98:	b1eb      	cbz	r3, 6fd6 <usb_dc_ep_enable+0x46>
    6f9a:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    6f9c:	f7fe fef6 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    6fa0:	4605      	mov	r5, r0
    6fa2:	b1d8      	cbz	r0, 6fdc <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    6fa4:	f014 0f08 	tst.w	r4, #8
    6fa8:	d009      	beq.n	6fbe <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    6faa:	7a2b      	ldrb	r3, [r5, #8]
    6fac:	b9cb      	cbnz	r3, 6fe2 <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    6fae:	2301      	movs	r3, #1
    6fb0:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    6fb2:	4b0d      	ldr	r3, [pc, #52]	; (6fe8 <usb_dc_ep_enable+0x58>)
    6fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    6fb8:	b943      	cbnz	r3, 6fcc <usb_dc_ep_enable+0x3c>
	return 0;
    6fba:	2000      	movs	r0, #0
}
    6fbc:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6fbe:	4620      	mov	r0, r4
    6fc0:	f003 faf0 	bl	a5a4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6fc4:	4620      	mov	r0, r4
    6fc6:	f003 fd37 	bl	aa38 <nrfx_usbd_ep_stall_clear>
    6fca:	e7ee      	b.n	6faa <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    6fcc:	4620      	mov	r0, r4
    6fce:	f003 fcd9 	bl	a984 <nrfx_usbd_ep_enable>
	return 0;
    6fd2:	2000      	movs	r0, #0
    6fd4:	e7f2      	b.n	6fbc <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    6fd6:	f06f 0012 	mvn.w	r0, #18
    6fda:	e7ef      	b.n	6fbc <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    6fdc:	f06f 0015 	mvn.w	r0, #21
    6fe0:	e7ec      	b.n	6fbc <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    6fe2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6fe6:	e7e9      	b.n	6fbc <usb_dc_ep_enable+0x2c>
    6fe8:	2000238c 	.word	0x2000238c

00006fec <usb_dc_ep_disable>:
{
    6fec:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6fee:	4b13      	ldr	r3, [pc, #76]	; (703c <usb_dc_ep_disable+0x50>)
    6ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6ff4:	b1ab      	cbz	r3, 7022 <usb_dc_ep_disable+0x36>
    6ff6:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    6ff8:	4b10      	ldr	r3, [pc, #64]	; (703c <usb_dc_ep_disable+0x50>)
    6ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6ffe:	b19b      	cbz	r3, 7028 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    7000:	f7fe fec4 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    7004:	4605      	mov	r5, r0
    7006:	b190      	cbz	r0, 702e <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
    7008:	7a03      	ldrb	r3, [r0, #8]
    700a:	b19b      	cbz	r3, 7034 <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    700c:	4620      	mov	r0, r4
    700e:	f003 feed 	bl	adec <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    7012:	2400      	movs	r4, #0
    7014:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    7016:	4628      	mov	r0, r5
    7018:	f00a fdc5 	bl	11ba6 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    701c:	722c      	strb	r4, [r5, #8]
	return 0;
    701e:	4620      	mov	r0, r4
}
    7020:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    7022:	f06f 0012 	mvn.w	r0, #18
    7026:	e7fb      	b.n	7020 <usb_dc_ep_disable+0x34>
    7028:	f06f 0012 	mvn.w	r0, #18
    702c:	e7f8      	b.n	7020 <usb_dc_ep_disable+0x34>
		return -EINVAL;
    702e:	f06f 0015 	mvn.w	r0, #21
    7032:	e7f5      	b.n	7020 <usb_dc_ep_disable+0x34>
		return -EALREADY;
    7034:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7038:	e7f2      	b.n	7020 <usb_dc_ep_disable+0x34>
    703a:	bf00      	nop
    703c:	2000238c 	.word	0x2000238c

00007040 <usb_dc_ep_write>:
{
    7040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7044:	b084      	sub	sp, #16
    7046:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    7048:	4b4e      	ldr	r3, [pc, #312]	; (7184 <usb_dc_ep_write+0x144>)
    704a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    704e:	2b00      	cmp	r3, #0
    7050:	f000 808c 	beq.w	716c <usb_dc_ep_write+0x12c>
    7054:	4604      	mov	r4, r0
    7056:	4688      	mov	r8, r1
    7058:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    705a:	4b4a      	ldr	r3, [pc, #296]	; (7184 <usb_dc_ep_write+0x144>)
    705c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    7060:	2b00      	cmp	r3, #0
    7062:	f000 8086 	beq.w	7172 <usb_dc_ep_write+0x132>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    7066:	f010 0f80 	tst.w	r0, #128	; 0x80
    706a:	f000 8085 	beq.w	7178 <usb_dc_ep_write+0x138>
	ep_ctx = endpoint_ctx(ep);
    706e:	f7fe fe8d 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    7072:	4605      	mov	r5, r0
    7074:	2800      	cmp	r0, #0
    7076:	f000 8082 	beq.w	717e <usb_dc_ep_write+0x13e>
	if (!ep_ctx->cfg.en) {
    707a:	7a03      	ldrb	r3, [r0, #8]
    707c:	2b00      	cmp	r3, #0
    707e:	d04e      	beq.n	711e <usb_dc_ep_write+0xde>
	return z_impl_k_mutex_lock(mutex, timeout);
    7080:	f04f 32ff 	mov.w	r2, #4294967295
    7084:	f04f 33ff 	mov.w	r3, #4294967295
    7088:	483f      	ldr	r0, [pc, #252]	; (7188 <usb_dc_ep_write+0x148>)
    708a:	f007 f85d 	bl	e148 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    708e:	7fab      	ldrb	r3, [r5, #30]
    7090:	2b00      	cmp	r3, #0
    7092:	d158      	bne.n	7146 <usb_dc_ep_write+0x106>
	if (!data_len && ep_ctx->trans_zlp) {
    7094:	b91e      	cbnz	r6, 709e <usb_dc_ep_write+0x5e>
    7096:	7feb      	ldrb	r3, [r5, #31]
    7098:	b10b      	cbz	r3, 709e <usb_dc_ep_write+0x5e>
		ep_ctx->trans_zlp = false;
    709a:	2300      	movs	r3, #0
    709c:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    709e:	7aab      	ldrb	r3, [r5, #10]
    70a0:	b963      	cbnz	r3, 70bc <usb_dc_ep_write+0x7c>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    70a2:	b15e      	cbz	r6, 70bc <usb_dc_ep_write+0x7c>
    70a4:	4a37      	ldr	r2, [pc, #220]	; (7184 <usb_dc_ep_write+0x144>)
    70a6:	8952      	ldrh	r2, [r2, #10]
    70a8:	42b2      	cmp	r2, r6
    70aa:	d907      	bls.n	70bc <usb_dc_ep_write+0x7c>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    70ac:	6869      	ldr	r1, [r5, #4]
    70ae:	fbb6 f2f1 	udiv	r2, r6, r1
    70b2:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    70b6:	b90a      	cbnz	r2, 70bc <usb_dc_ep_write+0x7c>
			ep_ctx->trans_zlp = true;
    70b8:	2201      	movs	r2, #1
    70ba:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    70bc:	b91b      	cbnz	r3, 70c6 <usb_dc_ep_write+0x86>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    70be:	f003 fb0b 	bl	a6d8 <nrfx_usbd_last_setup_dir_get>
    70c2:	42a0      	cmp	r0, r4
    70c4:	d145      	bne.n	7152 <usb_dc_ep_write+0x112>
	ep_ctx->write_in_progress = true;
    70c6:	2301      	movs	r3, #1
    70c8:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    70ca:	f8cd 8004 	str.w	r8, [sp, #4]
    70ce:	9602      	str	r6, [sp, #8]
    70d0:	2300      	movs	r3, #0
    70d2:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    70d4:	a901      	add	r1, sp, #4
    70d6:	4620      	mov	r0, r4
    70d8:	f002 fe50 	bl	9d7c <nrfx_usbd_ep_transfer>
    70dc:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    70de:	4b2b      	ldr	r3, [pc, #172]	; (718c <usb_dc_ep_write+0x14c>)
    70e0:	4298      	cmp	r0, r3
    70e2:	d03d      	beq.n	7160 <usb_dc_ep_write+0x120>
		ep_ctx->write_in_progress = false;
    70e4:	2300      	movs	r3, #0
    70e6:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    70e8:	b107      	cbz	r7, 70ec <usb_dc_ep_write+0xac>
			*ret_bytes = 0;
    70ea:	603b      	str	r3, [r7, #0]
    70ec:	4b28      	ldr	r3, [pc, #160]	; (7190 <usb_dc_ep_write+0x150>)
    70ee:	4a29      	ldr	r2, [pc, #164]	; (7194 <usb_dc_ep_write+0x154>)
    70f0:	1a9b      	subs	r3, r3, r2
    70f2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    70f4:	f04f 0200 	mov.w	r2, #0
    70f8:	2001      	movs	r0, #1
    70fa:	f360 0202 	bfi	r2, r0, #0, #3
    70fe:	f36f 02c5 	bfc	r2, #3, #3
    7102:	f363 128f 	bfi	r2, r3, #6, #10
    7106:	4824      	ldr	r0, [pc, #144]	; (7198 <usb_dc_ep_write+0x158>)
    7108:	f7fa fe52 	bl	1db0 <log_1>
		result = -EIO;
    710c:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    7110:	481d      	ldr	r0, [pc, #116]	; (7188 <usb_dc_ep_write+0x148>)
    7112:	f007 f8a3 	bl	e25c <z_impl_k_mutex_unlock>
}
    7116:	4620      	mov	r0, r4
    7118:	b004      	add	sp, #16
    711a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    711e:	4b1c      	ldr	r3, [pc, #112]	; (7190 <usb_dc_ep_write+0x150>)
    7120:	4a1c      	ldr	r2, [pc, #112]	; (7194 <usb_dc_ep_write+0x154>)
    7122:	1a9b      	subs	r3, r3, r2
    7124:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    7126:	f04f 0200 	mov.w	r2, #0
    712a:	2101      	movs	r1, #1
    712c:	f361 0202 	bfi	r2, r1, #0, #3
    7130:	f36f 02c5 	bfc	r2, #3, #3
    7134:	f363 128f 	bfi	r2, r3, #6, #10
    7138:	4621      	mov	r1, r4
    713a:	4818      	ldr	r0, [pc, #96]	; (719c <usb_dc_ep_write+0x15c>)
    713c:	f7fa fe38 	bl	1db0 <log_1>
		return -EINVAL;
    7140:	f06f 0415 	mvn.w	r4, #21
    7144:	e7e7      	b.n	7116 <usb_dc_ep_write+0xd6>
    7146:	4810      	ldr	r0, [pc, #64]	; (7188 <usb_dc_ep_write+0x148>)
    7148:	f007 f888 	bl	e25c <z_impl_k_mutex_unlock>
		return -EAGAIN;
    714c:	f06f 040a 	mvn.w	r4, #10
    7150:	e7e1      	b.n	7116 <usb_dc_ep_write+0xd6>
		nrfx_usbd_setup_clear();
    7152:	f003 fab1 	bl	a6b8 <nrfx_usbd_setup_clear>
    7156:	480c      	ldr	r0, [pc, #48]	; (7188 <usb_dc_ep_write+0x148>)
    7158:	f007 f880 	bl	e25c <z_impl_k_mutex_unlock>
		return 0;
    715c:	2400      	movs	r4, #0
    715e:	e7da      	b.n	7116 <usb_dc_ep_write+0xd6>
		if (ret_bytes) {
    7160:	b117      	cbz	r7, 7168 <usb_dc_ep_write+0x128>
			*ret_bytes = data_len;
    7162:	603e      	str	r6, [r7, #0]
	int result = 0;
    7164:	2400      	movs	r4, #0
    7166:	e7d3      	b.n	7110 <usb_dc_ep_write+0xd0>
    7168:	2400      	movs	r4, #0
    716a:	e7d1      	b.n	7110 <usb_dc_ep_write+0xd0>
		return -ENODEV;
    716c:	f06f 0412 	mvn.w	r4, #18
    7170:	e7d1      	b.n	7116 <usb_dc_ep_write+0xd6>
    7172:	f06f 0412 	mvn.w	r4, #18
    7176:	e7ce      	b.n	7116 <usb_dc_ep_write+0xd6>
		return -EINVAL;
    7178:	f06f 0415 	mvn.w	r4, #21
    717c:	e7cb      	b.n	7116 <usb_dc_ep_write+0xd6>
		return -EINVAL;
    717e:	f06f 0415 	mvn.w	r4, #21
    7182:	e7c8      	b.n	7116 <usb_dc_ep_write+0xd6>
    7184:	2000238c 	.word	0x2000238c
    7188:	200023c4 	.word	0x200023c4
    718c:	0bad0000 	.word	0x0bad0000
    7190:	000146f0 	.word	0x000146f0
    7194:	00014688 	.word	0x00014688
    7198:	00015950 	.word	0x00015950
    719c:	00015930 	.word	0x00015930

000071a0 <usb_dc_ep_read_wait>:
{
    71a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71a4:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
    71a6:	4b36      	ldr	r3, [pc, #216]	; (7280 <usb_dc_ep_read_wait+0xe0>)
    71a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    71ac:	2b00      	cmp	r3, #0
    71ae:	d05b      	beq.n	7268 <usb_dc_ep_read_wait+0xc8>
    71b0:	4606      	mov	r6, r0
    71b2:	460d      	mov	r5, r1
    71b4:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
    71b6:	4b32      	ldr	r3, [pc, #200]	; (7280 <usb_dc_ep_read_wait+0xe0>)
    71b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    71bc:	2b00      	cmp	r3, #0
    71be:	d056      	beq.n	726e <usb_dc_ep_read_wait+0xce>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    71c0:	f010 0f80 	tst.w	r0, #128	; 0x80
    71c4:	d156      	bne.n	7274 <usb_dc_ep_read_wait+0xd4>
	if (!data && max_data_len) {
    71c6:	b351      	cbz	r1, 721e <usb_dc_ep_read_wait+0x7e>
	ep_ctx = endpoint_ctx(ep);
    71c8:	4630      	mov	r0, r6
    71ca:	f7fe fddf 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    71ce:	4604      	mov	r4, r0
    71d0:	2800      	cmp	r0, #0
    71d2:	d052      	beq.n	727a <usb_dc_ep_read_wait+0xda>
	if (!ep_ctx->cfg.en) {
    71d4:	7a03      	ldrb	r3, [r0, #8]
    71d6:	b33b      	cbz	r3, 7228 <usb_dc_ep_read_wait+0x88>
	return z_impl_k_mutex_lock(mutex, timeout);
    71d8:	f04f 32ff 	mov.w	r2, #4294967295
    71dc:	f04f 33ff 	mov.w	r3, #4294967295
    71e0:	4828      	ldr	r0, [pc, #160]	; (7284 <usb_dc_ep_read_wait+0xe4>)
    71e2:	f006 ffb1 	bl	e148 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    71e6:	68e3      	ldr	r3, [r4, #12]
    71e8:	463e      	mov	r6, r7
    71ea:	429f      	cmp	r7, r3
    71ec:	bf28      	it	cs
    71ee:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
    71f0:	b375      	cbz	r5, 7250 <usb_dc_ep_read_wait+0xb0>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    71f2:	4632      	mov	r2, r6
    71f4:	69a1      	ldr	r1, [r4, #24]
    71f6:	4628      	mov	r0, r5
    71f8:	f00a f9b0 	bl	1155c <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    71fc:	69a3      	ldr	r3, [r4, #24]
    71fe:	4433      	add	r3, r6
    7200:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    7202:	68e3      	ldr	r3, [r4, #12]
    7204:	1b9b      	subs	r3, r3, r6
    7206:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    7208:	f1b8 0f00 	cmp.w	r8, #0
    720c:	d001      	beq.n	7212 <usb_dc_ep_read_wait+0x72>
		*read_bytes = bytes_to_copy;
    720e:	f8c8 6000 	str.w	r6, [r8]
	return z_impl_k_mutex_unlock(mutex);
    7212:	481c      	ldr	r0, [pc, #112]	; (7284 <usb_dc_ep_read_wait+0xe4>)
    7214:	f007 f822 	bl	e25c <z_impl_k_mutex_unlock>
	return 0;
    7218:	2000      	movs	r0, #0
}
    721a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    721e:	2a00      	cmp	r2, #0
    7220:	d0d2      	beq.n	71c8 <usb_dc_ep_read_wait+0x28>
		return -EINVAL;
    7222:	f06f 0015 	mvn.w	r0, #21
    7226:	e7f8      	b.n	721a <usb_dc_ep_read_wait+0x7a>
    7228:	4b17      	ldr	r3, [pc, #92]	; (7288 <usb_dc_ep_read_wait+0xe8>)
    722a:	4a18      	ldr	r2, [pc, #96]	; (728c <usb_dc_ep_read_wait+0xec>)
    722c:	1a9b      	subs	r3, r3, r2
    722e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    7230:	f04f 0200 	mov.w	r2, #0
    7234:	2101      	movs	r1, #1
    7236:	f361 0202 	bfi	r2, r1, #0, #3
    723a:	f36f 02c5 	bfc	r2, #3, #3
    723e:	f363 128f 	bfi	r2, r3, #6, #10
    7242:	4631      	mov	r1, r6
    7244:	4812      	ldr	r0, [pc, #72]	; (7290 <usb_dc_ep_read_wait+0xf0>)
    7246:	f7fa fdb3 	bl	1db0 <log_1>
		return -EINVAL;
    724a:	f06f 0015 	mvn.w	r0, #21
    724e:	e7e4      	b.n	721a <usb_dc_ep_read_wait+0x7a>
	if (!data && !max_data_len) {
    7250:	2f00      	cmp	r7, #0
    7252:	d1ce      	bne.n	71f2 <usb_dc_ep_read_wait+0x52>
		if (read_bytes) {
    7254:	f1b8 0f00 	cmp.w	r8, #0
    7258:	d001      	beq.n	725e <usb_dc_ep_read_wait+0xbe>
			*read_bytes = ep_ctx->buf.len;
    725a:	f8c8 3000 	str.w	r3, [r8]
    725e:	4809      	ldr	r0, [pc, #36]	; (7284 <usb_dc_ep_read_wait+0xe4>)
    7260:	f006 fffc 	bl	e25c <z_impl_k_mutex_unlock>
		return 0;
    7264:	2000      	movs	r0, #0
    7266:	e7d8      	b.n	721a <usb_dc_ep_read_wait+0x7a>
		return -ENODEV;
    7268:	f06f 0012 	mvn.w	r0, #18
    726c:	e7d5      	b.n	721a <usb_dc_ep_read_wait+0x7a>
    726e:	f06f 0012 	mvn.w	r0, #18
    7272:	e7d2      	b.n	721a <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    7274:	f06f 0015 	mvn.w	r0, #21
    7278:	e7cf      	b.n	721a <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    727a:	f06f 0015 	mvn.w	r0, #21
    727e:	e7cc      	b.n	721a <usb_dc_ep_read_wait+0x7a>
    7280:	2000238c 	.word	0x2000238c
    7284:	200023c4 	.word	0x200023c4
    7288:	000146f0 	.word	0x000146f0
    728c:	00014688 	.word	0x00014688
    7290:	00015930 	.word	0x00015930

00007294 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    7294:	4b58      	ldr	r3, [pc, #352]	; (73f8 <usb_dc_ep_read_continue+0x164>)
    7296:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    729a:	2b00      	cmp	r3, #0
    729c:	f000 809f 	beq.w	73de <usb_dc_ep_read_continue+0x14a>
{
    72a0:	b530      	push	{r4, r5, lr}
    72a2:	b083      	sub	sp, #12
    72a4:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
    72a6:	4b54      	ldr	r3, [pc, #336]	; (73f8 <usb_dc_ep_read_continue+0x164>)
    72a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    72ac:	2b00      	cmp	r3, #0
    72ae:	f000 8099 	beq.w	73e4 <usb_dc_ep_read_continue+0x150>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    72b2:	f010 0f80 	tst.w	r0, #128	; 0x80
    72b6:	f040 8098 	bne.w	73ea <usb_dc_ep_read_continue+0x156>
	ep_ctx = endpoint_ctx(ep);
    72ba:	f7fe fd67 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    72be:	4604      	mov	r4, r0
    72c0:	2800      	cmp	r0, #0
    72c2:	f000 8095 	beq.w	73f0 <usb_dc_ep_read_continue+0x15c>
	if (!ep_ctx->cfg.en) {
    72c6:	7a03      	ldrb	r3, [r0, #8]
    72c8:	b1a3      	cbz	r3, 72f4 <usb_dc_ep_read_continue+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
    72ca:	f04f 32ff 	mov.w	r2, #4294967295
    72ce:	f04f 33ff 	mov.w	r3, #4294967295
    72d2:	484a      	ldr	r0, [pc, #296]	; (73fc <usb_dc_ep_read_continue+0x168>)
    72d4:	f006 ff38 	bl	e148 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    72d8:	68e3      	ldr	r3, [r4, #12]
    72da:	b92b      	cbnz	r3, 72e8 <usb_dc_ep_read_continue+0x54>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    72dc:	6963      	ldr	r3, [r4, #20]
    72de:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    72e0:	2301      	movs	r3, #1
    72e2:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    72e4:	7f63      	ldrb	r3, [r4, #29]
    72e6:	b9cb      	cbnz	r3, 731c <usb_dc_ep_read_continue+0x88>
	return z_impl_k_mutex_unlock(mutex);
    72e8:	4844      	ldr	r0, [pc, #272]	; (73fc <usb_dc_ep_read_continue+0x168>)
    72ea:	f006 ffb7 	bl	e25c <z_impl_k_mutex_unlock>
	return 0;
    72ee:	2000      	movs	r0, #0
}
    72f0:	b003      	add	sp, #12
    72f2:	bd30      	pop	{r4, r5, pc}
    72f4:	4b42      	ldr	r3, [pc, #264]	; (7400 <usb_dc_ep_read_continue+0x16c>)
    72f6:	4a43      	ldr	r2, [pc, #268]	; (7404 <usb_dc_ep_read_continue+0x170>)
    72f8:	1a9b      	subs	r3, r3, r2
    72fa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    72fc:	f04f 0200 	mov.w	r2, #0
    7300:	2101      	movs	r1, #1
    7302:	f361 0202 	bfi	r2, r1, #0, #3
    7306:	f36f 02c5 	bfc	r2, #3, #3
    730a:	f363 128f 	bfi	r2, r3, #6, #10
    730e:	4629      	mov	r1, r5
    7310:	483d      	ldr	r0, [pc, #244]	; (7408 <usb_dc_ep_read_continue+0x174>)
    7312:	f7fa fd4d 	bl	1db0 <log_1>
		return -EINVAL;
    7316:	f06f 0015 	mvn.w	r0, #21
    731a:	e7e9      	b.n	72f0 <usb_dc_ep_read_continue+0x5c>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    731c:	2200      	movs	r2, #0
    731e:	2300      	movs	r3, #0
    7320:	a901      	add	r1, sp, #4
    7322:	483a      	ldr	r0, [pc, #232]	; (740c <usb_dc_ep_read_continue+0x178>)
    7324:	f006 fdd6 	bl	ded4 <k_mem_slab_alloc>
    7328:	b980      	cbnz	r0, 734c <usb_dc_ep_read_continue+0xb8>
	ev = (struct usbd_event *)block.data;
    732a:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    732c:	606d      	str	r5, [r5, #4]
			if (!ev) {
    732e:	2d00      	cmp	r5, #0
    7330:	d04f      	beq.n	73d2 <usb_dc_ep_read_continue+0x13e>
			ev->evt_type = USBD_EVT_EP;
    7332:	2301      	movs	r3, #1
    7334:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    7336:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    7338:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    733a:	4629      	mov	r1, r5
    733c:	4834      	ldr	r0, [pc, #208]	; (7410 <usb_dc_ep_read_continue+0x17c>)
    733e:	f00c fd50 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7342:	4934      	ldr	r1, [pc, #208]	; (7414 <usb_dc_ep_read_continue+0x180>)
    7344:	4834      	ldr	r0, [pc, #208]	; (7418 <usb_dc_ep_read_continue+0x184>)
    7346:	f00c fd6d 	bl	13e24 <k_work_submit_to_queue>
}
    734a:	e7cd      	b.n	72e8 <usb_dc_ep_read_continue+0x54>
    734c:	4b2c      	ldr	r3, [pc, #176]	; (7400 <usb_dc_ep_read_continue+0x16c>)
    734e:	4a2d      	ldr	r2, [pc, #180]	; (7404 <usb_dc_ep_read_continue+0x170>)
    7350:	1a9b      	subs	r3, r3, r2
    7352:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7354:	f04f 0100 	mov.w	r1, #0
    7358:	2201      	movs	r2, #1
    735a:	f362 0102 	bfi	r1, r2, #0, #3
    735e:	f36f 01c5 	bfc	r1, #3, #3
    7362:	f363 118f 	bfi	r1, r3, #6, #10
    7366:	482d      	ldr	r0, [pc, #180]	; (741c <usb_dc_ep_read_continue+0x188>)
    7368:	f7fa fdb6 	bl	1ed8 <log_0>
static inline void usbd_evt_flush(void)
    736c:	e004      	b.n	7378 <usb_dc_ep_read_continue+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    736e:	1d01      	adds	r1, r0, #4
    7370:	4826      	ldr	r0, [pc, #152]	; (740c <usb_dc_ep_read_continue+0x178>)
    7372:	f00c fc13 	bl	13b9c <k_mem_slab_free>
	} while (ev != NULL);
    7376:	b145      	cbz	r5, 738a <usb_dc_ep_read_continue+0xf6>
	return z_impl_k_queue_get(queue, timeout);
    7378:	2200      	movs	r2, #0
    737a:	2300      	movs	r3, #0
    737c:	4824      	ldr	r0, [pc, #144]	; (7410 <usb_dc_ep_read_continue+0x17c>)
    737e:	f006 ffb1 	bl	e2e4 <z_impl_k_queue_get>
		if (ev) {
    7382:	4605      	mov	r5, r0
    7384:	2800      	cmp	r0, #0
    7386:	d1f2      	bne.n	736e <usb_dc_ep_read_continue+0xda>
    7388:	e7f5      	b.n	7376 <usb_dc_ep_read_continue+0xe2>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    738a:	2200      	movs	r2, #0
    738c:	2300      	movs	r3, #0
    738e:	a901      	add	r1, sp, #4
    7390:	481e      	ldr	r0, [pc, #120]	; (740c <usb_dc_ep_read_continue+0x178>)
    7392:	f006 fd9f 	bl	ded4 <k_mem_slab_alloc>
    7396:	b180      	cbz	r0, 73ba <usb_dc_ep_read_continue+0x126>
    7398:	4b19      	ldr	r3, [pc, #100]	; (7400 <usb_dc_ep_read_continue+0x16c>)
    739a:	4a1a      	ldr	r2, [pc, #104]	; (7404 <usb_dc_ep_read_continue+0x170>)
    739c:	1a9b      	subs	r3, r3, r2
    739e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    73a0:	f04f 0100 	mov.w	r1, #0
    73a4:	2201      	movs	r2, #1
    73a6:	f362 0102 	bfi	r1, r2, #0, #3
    73aa:	f36f 01c5 	bfc	r1, #3, #3
    73ae:	f363 118f 	bfi	r1, r3, #6, #10
    73b2:	481b      	ldr	r0, [pc, #108]	; (7420 <usb_dc_ep_read_continue+0x18c>)
    73b4:	f7fa fd90 	bl	1ed8 <log_0>
			return NULL;
    73b8:	e7b9      	b.n	732e <usb_dc_ep_read_continue+0x9a>
		ev = (struct usbd_event *)block.data;
    73ba:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    73bc:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    73be:	2304      	movs	r3, #4
    73c0:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    73c2:	4813      	ldr	r0, [pc, #76]	; (7410 <usb_dc_ep_read_continue+0x17c>)
    73c4:	f00c fd0d 	bl	13de2 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    73c8:	4912      	ldr	r1, [pc, #72]	; (7414 <usb_dc_ep_read_continue+0x180>)
    73ca:	4813      	ldr	r0, [pc, #76]	; (7418 <usb_dc_ep_read_continue+0x184>)
    73cc:	f00c fd2a 	bl	13e24 <k_work_submit_to_queue>
		return NULL;
    73d0:	e7ad      	b.n	732e <usb_dc_ep_read_continue+0x9a>
	return z_impl_k_mutex_unlock(mutex);
    73d2:	480a      	ldr	r0, [pc, #40]	; (73fc <usb_dc_ep_read_continue+0x168>)
    73d4:	f006 ff42 	bl	e25c <z_impl_k_mutex_unlock>
				return -ENOMEM;
    73d8:	f06f 000b 	mvn.w	r0, #11
    73dc:	e788      	b.n	72f0 <usb_dc_ep_read_continue+0x5c>
		return -ENODEV;
    73de:	f06f 0012 	mvn.w	r0, #18
}
    73e2:	4770      	bx	lr
		return -ENODEV;
    73e4:	f06f 0012 	mvn.w	r0, #18
    73e8:	e782      	b.n	72f0 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    73ea:	f06f 0015 	mvn.w	r0, #21
    73ee:	e77f      	b.n	72f0 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    73f0:	f06f 0015 	mvn.w	r0, #21
    73f4:	e77c      	b.n	72f0 <usb_dc_ep_read_continue+0x5c>
    73f6:	bf00      	nop
    73f8:	2000238c 	.word	0x2000238c
    73fc:	200023c4 	.word	0x200023c4
    7400:	000146f0 	.word	0x000146f0
    7404:	00014688 	.word	0x00014688
    7408:	00015930 	.word	0x00015930
    740c:	200002e8 	.word	0x200002e8
    7410:	200003ec 	.word	0x200003ec
    7414:	200023b4 	.word	0x200023b4
    7418:	20000698 	.word	0x20000698
    741c:	00015758 	.word	0x00015758
    7420:	00015778 	.word	0x00015778

00007424 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    7424:	4b08      	ldr	r3, [pc, #32]	; (7448 <usb_dc_ep_set_callback+0x24>)
    7426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    742a:	b13b      	cbz	r3, 743c <usb_dc_ep_set_callback+0x18>
{
    742c:	b510      	push	{r4, lr}
    742e:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    7430:	f7fe fcac 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    7434:	b128      	cbz	r0, 7442 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    7436:	6004      	str	r4, [r0, #0]
	return 0;
    7438:	2000      	movs	r0, #0
}
    743a:	bd10      	pop	{r4, pc}
		return -ENODEV;
    743c:	f06f 0012 	mvn.w	r0, #18
}
    7440:	4770      	bx	lr
		return -EINVAL;
    7442:	f06f 0015 	mvn.w	r0, #21
    7446:	e7f8      	b.n	743a <usb_dc_ep_set_callback+0x16>
    7448:	2000238c 	.word	0x2000238c

0000744c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    744c:	4b01      	ldr	r3, [pc, #4]	; (7454 <usb_dc_set_status_callback+0x8>)
    744e:	6018      	str	r0, [r3, #0]
}
    7450:	4770      	bx	lr
    7452:	bf00      	nop
    7454:	2000238c 	.word	0x2000238c

00007458 <usb_dc_ep_mps>:
{
    7458:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    745a:	4b07      	ldr	r3, [pc, #28]	; (7478 <usb_dc_ep_mps+0x20>)
    745c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    7460:	b123      	cbz	r3, 746c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    7462:	f7fe fc93 	bl	5d8c <endpoint_ctx>
	if (!ep_ctx) {
    7466:	b120      	cbz	r0, 7472 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    7468:	6840      	ldr	r0, [r0, #4]
}
    746a:	bd08      	pop	{r3, pc}
		return -ENODEV;
    746c:	f06f 0012 	mvn.w	r0, #18
    7470:	e7fb      	b.n	746a <usb_dc_ep_mps+0x12>
		return -EINVAL;
    7472:	f06f 0015 	mvn.w	r0, #21
    7476:	e7f8      	b.n	746a <usb_dc_ep_mps+0x12>
    7478:	2000238c 	.word	0x2000238c

0000747c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    747c:	4800      	ldr	r0, [pc, #0]	; (7480 <get_hf_flags+0x4>)
    747e:	4770      	bx	lr
    7480:	2000266c 	.word	0x2000266c

00007484 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    7484:	4b03      	ldr	r3, [pc, #12]	; (7494 <get_subsys+0x10>)
    7486:	1ac0      	subs	r0, r0, r3
    7488:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    748a:	4b03      	ldr	r3, [pc, #12]	; (7498 <get_subsys+0x14>)
    748c:	fb03 f000 	mul.w	r0, r3, r0
    7490:	4770      	bx	lr
    7492:	bf00      	nop
    7494:	2000262c 	.word	0x2000262c
    7498:	b6db6db7 	.word	0xb6db6db7

0000749c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    749c:	b538      	push	{r3, r4, r5, lr}
    749e:	4605      	mov	r5, r0
    74a0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    74a2:	f7ff ffef 	bl	7484 <get_subsys>
    74a6:	4601      	mov	r1, r0
    74a8:	2240      	movs	r2, #64	; 0x40
    74aa:	4803      	ldr	r0, [pc, #12]	; (74b8 <onoff_stop+0x1c>)
    74ac:	f00a fc89 	bl	11dc2 <stop>
    74b0:	4601      	mov	r1, r0
	notify(mgr, res);
    74b2:	4628      	mov	r0, r5
    74b4:	47a0      	blx	r4
}
    74b6:	bd38      	pop	{r3, r4, r5, pc}
    74b8:	00014478 	.word	0x00014478

000074bc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    74bc:	b530      	push	{r4, r5, lr}
    74be:	b083      	sub	sp, #12
    74c0:	4605      	mov	r5, r0
    74c2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    74c4:	f7ff ffde 	bl	7484 <get_subsys>
    74c8:	4601      	mov	r1, r0
    74ca:	2340      	movs	r3, #64	; 0x40
    74cc:	9300      	str	r3, [sp, #0]
    74ce:	4623      	mov	r3, r4
    74d0:	4a05      	ldr	r2, [pc, #20]	; (74e8 <onoff_start+0x2c>)
    74d2:	4806      	ldr	r0, [pc, #24]	; (74ec <onoff_start+0x30>)
    74d4:	f00a fc8f 	bl	11df6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    74d8:	1e01      	subs	r1, r0, #0
    74da:	db01      	blt.n	74e0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    74dc:	b003      	add	sp, #12
    74de:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    74e0:	4628      	mov	r0, r5
    74e2:	47a0      	blx	r4
}
    74e4:	e7fa      	b.n	74dc <onoff_start+0x20>
    74e6:	bf00      	nop
    74e8:	00011e3f 	.word	0x00011e3f
    74ec:	00014478 	.word	0x00014478

000074f0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    74f0:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    74f2:	b110      	cbz	r0, 74fa <clock_event_handler+0xa>
    74f4:	2801      	cmp	r0, #1
    74f6:	d00d      	beq.n	7514 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    74f8:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    74fa:	2100      	movs	r1, #0
    74fc:	4808      	ldr	r0, [pc, #32]	; (7520 <clock_event_handler+0x30>)
    74fe:	f00a fbe7 	bl	11cd0 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    7502:	6883      	ldr	r3, [r0, #8]
    7504:	f013 0f07 	tst.w	r3, #7
    7508:	d1f6      	bne.n	74f8 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    750a:	2100      	movs	r1, #0
    750c:	4804      	ldr	r0, [pc, #16]	; (7520 <clock_event_handler+0x30>)
    750e:	f00a fc46 	bl	11d9e <clkstarted_handle>
    7512:	e7f1      	b.n	74f8 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    7514:	2101      	movs	r1, #1
    7516:	4802      	ldr	r0, [pc, #8]	; (7520 <clock_event_handler+0x30>)
    7518:	f00a fc41 	bl	11d9e <clkstarted_handle>
}
    751c:	e7ec      	b.n	74f8 <clock_event_handler+0x8>
    751e:	bf00      	nop
    7520:	00014478 	.word	0x00014478

00007524 <generic_hfclk_start>:
{
    7524:	b510      	push	{r4, lr}
	__asm__ volatile(
    7526:	f04f 0320 	mov.w	r3, #32
    752a:	f3ef 8411 	mrs	r4, BASEPRI
    752e:	f383 8812 	msr	BASEPRI_MAX, r3
    7532:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    7536:	4a13      	ldr	r2, [pc, #76]	; (7584 <generic_hfclk_start+0x60>)
    7538:	6813      	ldr	r3, [r2, #0]
    753a:	f043 0302 	orr.w	r3, r3, #2
    753e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    7540:	f013 0f01 	tst.w	r3, #1
    7544:	d108      	bne.n	7558 <generic_hfclk_start+0x34>
	bool already_started = false;
    7546:	2300      	movs	r3, #0
	__asm__ volatile(
    7548:	f384 8811 	msr	BASEPRI, r4
    754c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    7550:	b99b      	cbnz	r3, 757a <generic_hfclk_start+0x56>
	hfclk_start();
    7552:	f00a fc7c 	bl	11e4e <hfclk_start>
}
    7556:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    755c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7560:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    7564:	f012 0f01 	tst.w	r2, #1
    7568:	d101      	bne.n	756e <generic_hfclk_start+0x4a>
	bool already_started = false;
    756a:	2300      	movs	r3, #0
    756c:	e7ec      	b.n	7548 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    756e:	f7ff ff85 	bl	747c <get_hf_flags>
    7572:	f00a fc01 	bl	11d78 <set_on_state>
			already_started = true;
    7576:	2301      	movs	r3, #1
    7578:	e7e6      	b.n	7548 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    757a:	2100      	movs	r1, #0
    757c:	4802      	ldr	r0, [pc, #8]	; (7588 <generic_hfclk_start+0x64>)
    757e:	f00a fc0e 	bl	11d9e <clkstarted_handle>
		return;
    7582:	e7e8      	b.n	7556 <generic_hfclk_start+0x32>
    7584:	2000267c 	.word	0x2000267c
    7588:	00014478 	.word	0x00014478

0000758c <generic_hfclk_stop>:
{
    758c:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    758e:	4b0a      	ldr	r3, [pc, #40]	; (75b8 <generic_hfclk_stop+0x2c>)
    7590:	f3bf 8f5b 	dmb	ish
    7594:	e853 2f00 	ldrex	r2, [r3]
    7598:	f022 0102 	bic.w	r1, r2, #2
    759c:	e843 1000 	strex	r0, r1, [r3]
    75a0:	2800      	cmp	r0, #0
    75a2:	d1f7      	bne.n	7594 <generic_hfclk_stop+0x8>
    75a4:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    75a8:	f012 0f01 	tst.w	r2, #1
    75ac:	d000      	beq.n	75b0 <generic_hfclk_stop+0x24>
}
    75ae:	bd08      	pop	{r3, pc}
	hfclk_stop();
    75b0:	f00a fc57 	bl	11e62 <hfclk_stop>
    75b4:	e7fb      	b.n	75ae <generic_hfclk_stop+0x22>
    75b6:	bf00      	nop
    75b8:	2000267c 	.word	0x2000267c

000075bc <api_blocking_start>:
{
    75bc:	b500      	push	{lr}
    75be:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    75c0:	f8cd d000 	str.w	sp, [sp]
    75c4:	f8cd d004 	str.w	sp, [sp, #4]
    75c8:	2300      	movs	r3, #0
    75ca:	9302      	str	r3, [sp, #8]
    75cc:	2301      	movs	r3, #1
    75ce:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    75d0:	466b      	mov	r3, sp
    75d2:	4a07      	ldr	r2, [pc, #28]	; (75f0 <api_blocking_start+0x34>)
    75d4:	f00a fc2b 	bl	11e2e <api_start>
	if (err < 0) {
    75d8:	2800      	cmp	r0, #0
    75da:	db05      	blt.n	75e8 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    75dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    75e0:	2300      	movs	r3, #0
    75e2:	4668      	mov	r0, sp
    75e4:	f006 fede 	bl	e3a4 <z_impl_k_sem_take>
}
    75e8:	b005      	add	sp, #20
    75ea:	f85d fb04 	ldr.w	pc, [sp], #4
    75ee:	bf00      	nop
    75f0:	00011e77 	.word	0x00011e77

000075f4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    75f4:	b570      	push	{r4, r5, r6, lr}
    75f6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    75f8:	2200      	movs	r2, #0
    75fa:	2101      	movs	r1, #1
    75fc:	4610      	mov	r0, r2
    75fe:	f7fc fea9 	bl	4354 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    7602:	2000      	movs	r0, #0
    7604:	f7fc fe74 	bl	42f0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7608:	4811      	ldr	r0, [pc, #68]	; (7650 <clk_init+0x5c>)
    760a:	f001 faf7 	bl	8bfc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    760e:	4b11      	ldr	r3, [pc, #68]	; (7654 <clk_init+0x60>)
    7610:	4298      	cmp	r0, r3
    7612:	d11a      	bne.n	764a <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    7614:	f001 fb06 	bl	8c24 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    7618:	2400      	movs	r4, #0
    761a:	e003      	b.n	7624 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    761c:	2301      	movs	r3, #1
    761e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    7620:	441c      	add	r4, r3
    7622:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    7624:	2c01      	cmp	r4, #1
    7626:	d80e      	bhi.n	7646 <clk_init+0x52>
						get_sub_data(dev, i);
    7628:	4621      	mov	r1, r4
    762a:	4630      	mov	r0, r6
    762c:	f00a fb50 	bl	11cd0 <get_sub_data>
    7630:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7632:	4621      	mov	r1, r4
    7634:	4630      	mov	r0, r6
    7636:	f00a fb58 	bl	11cea <get_onoff_manager>
    763a:	4907      	ldr	r1, [pc, #28]	; (7658 <clk_init+0x64>)
    763c:	f008 fa0b 	bl	fa56 <onoff_manager_init>
		if (err < 0) {
    7640:	2800      	cmp	r0, #0
    7642:	daeb      	bge.n	761c <clk_init+0x28>
    7644:	e000      	b.n	7648 <clk_init+0x54>
	}

	return 0;
    7646:	2000      	movs	r0, #0
}
    7648:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    764a:	f06f 0004 	mvn.w	r0, #4
    764e:	e7fb      	b.n	7648 <clk_init+0x54>
    7650:	000074f1 	.word	0x000074f1
    7654:	0bad0000 	.word	0x0bad0000
    7658:	000159d4 	.word	0x000159d4

0000765c <lfclk_spinwait>:
{
    765c:	b570      	push	{r4, r5, r6, lr}
    765e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7660:	2801      	cmp	r0, #1
    7662:	d107      	bne.n	7674 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7668:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    766c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7670:	2b01      	cmp	r3, #1
    7672:	d058      	beq.n	7726 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7674:	f00c fad0 	bl	13c18 <k_is_in_isr>
    7678:	b928      	cbnz	r0, 7686 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    767a:	4b2e      	ldr	r3, [pc, #184]	; (7734 <lfclk_spinwait+0xd8>)
    767c:	781b      	ldrb	r3, [r3, #0]
    767e:	2b00      	cmp	r3, #0
    7680:	d041      	beq.n	7706 <lfclk_spinwait+0xaa>
    7682:	2300      	movs	r3, #0
    7684:	e000      	b.n	7688 <lfclk_spinwait+0x2c>
    7686:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    7688:	461c      	mov	r4, r3
    768a:	2b00      	cmp	r3, #0
    768c:	d03d      	beq.n	770a <lfclk_spinwait+0xae>
	__asm__ volatile(
    768e:	f04f 0320 	mov.w	r3, #32
    7692:	f3ef 8611 	mrs	r6, BASEPRI
    7696:	f383 8812 	msr	BASEPRI_MAX, r3
    769a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    769e:	b924      	cbnz	r4, 76aa <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    76a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76a4:	2202      	movs	r2, #2
    76a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    76aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    76ae:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    76b2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    76b6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    76ba:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    76be:	d12b      	bne.n	7718 <lfclk_spinwait+0xbc>
    return false;
    76c0:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    76c2:	b11a      	cbz	r2, 76cc <lfclk_spinwait+0x70>
    76c4:	2b01      	cmp	r3, #1
    76c6:	d029      	beq.n	771c <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    76c8:	2d01      	cmp	r5, #1
    76ca:	d027      	beq.n	771c <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    76cc:	b1fc      	cbz	r4, 770e <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    76ce:	4630      	mov	r0, r6
    76d0:	f7fc fdb6 	bl	4240 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    76d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76d8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    76dc:	2b00      	cmp	r3, #0
    76de:	d1e4      	bne.n	76aa <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    76e0:	4b15      	ldr	r3, [pc, #84]	; (7738 <lfclk_spinwait+0xdc>)
    76e2:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    76e4:	2b00      	cmp	r3, #0
    76e6:	d0e0      	beq.n	76aa <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76e8:	4b13      	ldr	r3, [pc, #76]	; (7738 <lfclk_spinwait+0xdc>)
    76ea:	2200      	movs	r2, #0
    76ec:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    76ee:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    76f0:	2301      	movs	r3, #1
    76f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    76f6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76fa:	4a10      	ldr	r2, [pc, #64]	; (773c <lfclk_spinwait+0xe0>)
    76fc:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7700:	4a0f      	ldr	r2, [pc, #60]	; (7740 <lfclk_spinwait+0xe4>)
    7702:	6013      	str	r3, [r2, #0]
}
    7704:	e7d1      	b.n	76aa <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7706:	2301      	movs	r3, #1
    7708:	e7be      	b.n	7688 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    770a:	2600      	movs	r6, #0
    770c:	e7c7      	b.n	769e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    770e:	2021      	movs	r0, #33	; 0x21
    7710:	2100      	movs	r1, #0
    7712:	f007 fb61 	bl	edd8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7716:	e7dd      	b.n	76d4 <lfclk_spinwait+0x78>
                return true;
    7718:	2201      	movs	r2, #1
    771a:	e7d2      	b.n	76c2 <lfclk_spinwait+0x66>
	if (isr_mode) {
    771c:	b124      	cbz	r4, 7728 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    771e:	f386 8811 	msr	BASEPRI, r6
    7722:	f3bf 8f6f 	isb	sy
}
    7726:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    7728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    772c:	2202      	movs	r2, #2
    772e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7732:	e7f8      	b.n	7726 <lfclk_spinwait+0xca>
    7734:	20002ee3 	.word	0x20002ee3
    7738:	40000104 	.word	0x40000104
    773c:	e000e100 	.word	0xe000e100
    7740:	40000008 	.word	0x40000008

00007744 <z_nrf_clock_control_get_onoff>:
{
    7744:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    7746:	b2c1      	uxtb	r1, r0
    7748:	4801      	ldr	r0, [pc, #4]	; (7750 <z_nrf_clock_control_get_onoff+0xc>)
    774a:	f00a face 	bl	11cea <get_onoff_manager>
}
    774e:	bd08      	pop	{r3, pc}
    7750:	00014478 	.word	0x00014478

00007754 <z_nrf_clock_control_lf_on>:
{
    7754:	b510      	push	{r4, lr}
    7756:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7758:	4b10      	ldr	r3, [pc, #64]	; (779c <z_nrf_clock_control_lf_on+0x48>)
    775a:	2101      	movs	r1, #1
    775c:	f3bf 8f5b 	dmb	ish
    7760:	e853 2f00 	ldrex	r2, [r3]
    7764:	e843 1000 	strex	r0, r1, [r3]
    7768:	2800      	cmp	r0, #0
    776a:	d1f9      	bne.n	7760 <z_nrf_clock_control_lf_on+0xc>
    776c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    7770:	b11a      	cbz	r2, 777a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    7772:	1e63      	subs	r3, r4, #1
    7774:	2b01      	cmp	r3, #1
    7776:	d90c      	bls.n	7792 <z_nrf_clock_control_lf_on+0x3e>
}
    7778:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    777a:	4809      	ldr	r0, [pc, #36]	; (77a0 <z_nrf_clock_control_lf_on+0x4c>)
    777c:	f00a fab5 	bl	11cea <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    7780:	4908      	ldr	r1, [pc, #32]	; (77a4 <z_nrf_clock_control_lf_on+0x50>)
    7782:	2300      	movs	r3, #0
    7784:	604b      	str	r3, [r1, #4]
    7786:	60cb      	str	r3, [r1, #12]
    7788:	2301      	movs	r3, #1
    778a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    778c:	f008 f97f 	bl	fa8e <onoff_request>
    7790:	e7ef      	b.n	7772 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    7792:	4620      	mov	r0, r4
    7794:	f7ff ff62 	bl	765c <lfclk_spinwait>
		break;
    7798:	e7ee      	b.n	7778 <z_nrf_clock_control_lf_on+0x24>
    779a:	bf00      	nop
    779c:	20002680 	.word	0x20002680
    77a0:	00014478 	.word	0x00014478
    77a4:	2000261c 	.word	0x2000261c

000077a8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    77a8:	b510      	push	{r4, lr}
    77aa:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    77ac:	280a      	cmp	r0, #10
    77ae:	d007      	beq.n	77c0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    77b0:	4b07      	ldr	r3, [pc, #28]	; (77d0 <console_out+0x28>)
    77b2:	6818      	ldr	r0, [r3, #0]
    77b4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    77b6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    77b8:	685b      	ldr	r3, [r3, #4]
    77ba:	4798      	blx	r3

	return c;
}
    77bc:	4620      	mov	r0, r4
    77be:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    77c0:	4b03      	ldr	r3, [pc, #12]	; (77d0 <console_out+0x28>)
    77c2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    77c4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    77c6:	685b      	ldr	r3, [r3, #4]
    77c8:	210d      	movs	r1, #13
    77ca:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    77cc:	e7f0      	b.n	77b0 <console_out+0x8>
    77ce:	bf00      	nop
    77d0:	20002684 	.word	0x20002684

000077d4 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    77d4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    77d6:	4c04      	ldr	r4, [pc, #16]	; (77e8 <uart_console_hook_install+0x14>)
    77d8:	4620      	mov	r0, r4
    77da:	f7fd fc3b 	bl	5054 <__stdout_hook_install>
	__printk_hook_install(console_out);
    77de:	4620      	mov	r0, r4
    77e0:	f7f9 fa68 	bl	cb4 <__printk_hook_install>
}
    77e4:	bd10      	pop	{r4, pc}
    77e6:	bf00      	nop
    77e8:	000077a9 	.word	0x000077a9

000077ec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    77ec:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    77ee:	4806      	ldr	r0, [pc, #24]	; (7808 <uart_console_init+0x1c>)
    77f0:	4b06      	ldr	r3, [pc, #24]	; (780c <uart_console_init+0x20>)
    77f2:	6018      	str	r0, [r3, #0]
    77f4:	f00c f91c 	bl	13a30 <z_device_ready>
    77f8:	b118      	cbz	r0, 7802 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    77fa:	f7ff ffeb 	bl	77d4 <uart_console_hook_install>

	return 0;
    77fe:	2000      	movs	r0, #0
}
    7800:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7802:	f06f 0012 	mvn.w	r0, #18
    7806:	e7fb      	b.n	7800 <uart_console_init+0x14>
    7808:	00014490 	.word	0x00014490
    780c:	20002684 	.word	0x20002684

00007810 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    7810:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    7812:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7814:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7816:	4b37      	ldr	r3, [pc, #220]	; (78f4 <gpio_nrfx_config+0xe4>)
    7818:	4013      	ands	r3, r2
    781a:	4c37      	ldr	r4, [pc, #220]	; (78f8 <gpio_nrfx_config+0xe8>)
    781c:	42a3      	cmp	r3, r4
    781e:	d027      	beq.n	7870 <gpio_nrfx_config+0x60>
    7820:	d812      	bhi.n	7848 <gpio_nrfx_config+0x38>
    7822:	2b06      	cmp	r3, #6
    7824:	d026      	beq.n	7874 <gpio_nrfx_config+0x64>
    7826:	d904      	bls.n	7832 <gpio_nrfx_config+0x22>
    7828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    782c:	d109      	bne.n	7842 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    782e:	2401      	movs	r4, #1
    7830:	e016      	b.n	7860 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7832:	b30b      	cbz	r3, 7878 <gpio_nrfx_config+0x68>
    7834:	2b02      	cmp	r3, #2
    7836:	d101      	bne.n	783c <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    7838:	2404      	movs	r4, #4
    783a:	e011      	b.n	7860 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    783c:	f06f 0015 	mvn.w	r0, #21
    7840:	e046      	b.n	78d0 <gpio_nrfx_config+0xc0>
    7842:	f06f 0015 	mvn.w	r0, #21
    7846:	e043      	b.n	78d0 <gpio_nrfx_config+0xc0>
    7848:	4c2c      	ldr	r4, [pc, #176]	; (78fc <gpio_nrfx_config+0xec>)
    784a:	42a3      	cmp	r3, r4
    784c:	d016      	beq.n	787c <gpio_nrfx_config+0x6c>
    784e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    7852:	d101      	bne.n	7858 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    7854:	2403      	movs	r4, #3
    7856:	e003      	b.n	7860 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    785c:	d146      	bne.n	78ec <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
    785e:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    7860:	f012 0f10 	tst.w	r2, #16
    7864:	d10c      	bne.n	7880 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    7866:	f012 0f20 	tst.w	r2, #32
    786a:	d033      	beq.n	78d4 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    786c:	2501      	movs	r5, #1
    786e:	e008      	b.n	7882 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    7870:	2407      	movs	r4, #7
    7872:	e7f5      	b.n	7860 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    7874:	2406      	movs	r4, #6
    7876:	e7f3      	b.n	7860 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7878:	2400      	movs	r4, #0
    787a:	e7f1      	b.n	7860 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    787c:	2405      	movs	r4, #5
    787e:	e7ef      	b.n	7860 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    7880:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    7882:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    7886:	f412 7f80 	tst.w	r2, #256	; 0x100
    788a:	bf0c      	ite	eq
    788c:	2601      	moveq	r6, #1
    788e:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    7890:	f412 7f00 	tst.w	r2, #512	; 0x200
    7894:	d006      	beq.n	78a4 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    7896:	f412 6f00 	tst.w	r2, #2048	; 0x800
    789a:	d01d      	beq.n	78d8 <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    789c:	2201      	movs	r2, #1
    789e:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    78a0:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
    78a4:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    78a6:	7a12      	ldrb	r2, [r2, #8]
    78a8:	f001 011f 	and.w	r1, r1, #31
    78ac:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    78b0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    78b2:	2a01      	cmp	r2, #1
    78b4:	d018      	beq.n	78e8 <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
    78b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    78ba:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    78be:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    78c2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    78c6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    78ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    78ce:	2000      	movs	r0, #0
}
    78d0:	bcf0      	pop	{r4, r5, r6, r7}
    78d2:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    78d4:	2500      	movs	r5, #0
    78d6:	e7d4      	b.n	7882 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    78d8:	f412 6f80 	tst.w	r2, #1024	; 0x400
    78dc:	d0e2      	beq.n	78a4 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    78de:	2201      	movs	r2, #1
    78e0:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    78e2:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    78e6:	e7dd      	b.n	78a4 <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
    78e8:	4a05      	ldr	r2, [pc, #20]	; (7900 <gpio_nrfx_config+0xf0>)
    78ea:	e7e6      	b.n	78ba <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    78ec:	f06f 0015 	mvn.w	r0, #21
    78f0:	e7ee      	b.n	78d0 <gpio_nrfx_config+0xc0>
    78f2:	bf00      	nop
    78f4:	00f00006 	.word	0x00f00006
    78f8:	00100006 	.word	0x00100006
    78fc:	00400002 	.word	0x00400002
    7900:	50000300 	.word	0x50000300

00007904 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    7904:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    7906:	6905      	ldr	r5, [r0, #16]
	return port->config;
    7908:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    790a:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    790c:	696a      	ldr	r2, [r5, #20]
    790e:	69ab      	ldr	r3, [r5, #24]
    7910:	4313      	orrs	r3, r2
    7912:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    7916:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    7918:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    791a:	e011      	b.n	7940 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    791c:	f04f 0c02 	mov.w	ip, #2
    7920:	e01d      	b.n	795e <cfg_level_pins+0x5a>
    7922:	4f14      	ldr	r7, [pc, #80]	; (7974 <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    7924:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    7928:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    792c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    7930:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    7934:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    7938:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    793c:	3001      	adds	r0, #1
		bit <<= 1;
    793e:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    7940:	b1a9      	cbz	r1, 796e <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    7942:	420b      	tst	r3, r1
    7944:	d0fa      	beq.n	793c <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7946:	7a34      	ldrb	r4, [r6, #8]
    7948:	f000 021f 	and.w	r2, r0, #31
    794c:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    7950:	692c      	ldr	r4, [r5, #16]
    7952:	40c4      	lsrs	r4, r0
    7954:	f014 0f01 	tst.w	r4, #1
    7958:	d1e0      	bne.n	791c <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    795a:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    795e:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    7962:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7964:	2a01      	cmp	r2, #1
    7966:	d0dc      	beq.n	7922 <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    7968:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    796c:	e7da      	b.n	7924 <cfg_level_pins+0x20>
	}
}
    796e:	bcf0      	pop	{r4, r5, r6, r7}
    7970:	4770      	bx	lr
    7972:	bf00      	nop
    7974:	50000300 	.word	0x50000300

00007978 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    7978:	b5f0      	push	{r4, r5, r6, r7, lr}
    797a:	468c      	mov	ip, r1
	return port->data;
    797c:	6903      	ldr	r3, [r0, #16]
	return port->config;
    797e:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    7980:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    7982:	695a      	ldr	r2, [r3, #20]
    7984:	6998      	ldr	r0, [r3, #24]
    7986:	4302      	orrs	r2, r0
    7988:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    798c:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    798e:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    7992:	6918      	ldr	r0, [r3, #16]
    7994:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    7996:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    799a:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    799c:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    799e:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    79a0:	e015      	b.n	79ce <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
    79a2:	f8df e074 	ldr.w	lr, [pc, #116]	; 7a18 <check_level_trigger_pins+0xa0>
    79a6:	e025      	b.n	79f4 <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
    79a8:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    79ac:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    79ae:	2a01      	cmp	r2, #1
    79b0:	d02e      	beq.n	7a10 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
    79b2:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    79b6:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    79ba:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    79be:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    79c2:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    79c6:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    79ca:	3501      	adds	r5, #1
		bit <<= 1;
    79cc:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    79ce:	b314      	cbz	r4, 7a16 <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
    79d0:	4223      	tst	r3, r4
    79d2:	d0fa      	beq.n	79ca <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    79d4:	7a0e      	ldrb	r6, [r1, #8]
    79d6:	f005 021f 	and.w	r2, r5, #31
    79da:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    79de:	423b      	tst	r3, r7
    79e0:	d1e2      	bne.n	79a8 <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
    79e2:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    79e6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    79ea:	f1be 0f01 	cmp.w	lr, #1
    79ee:	d0d8      	beq.n	79a2 <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
    79f0:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    79f4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    79f8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    79fc:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    7a00:	2e02      	cmp	r6, #2
    7a02:	d1d1      	bne.n	79a8 <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
    7a04:	f8dc 6000 	ldr.w	r6, [ip]
    7a08:	431e      	orrs	r6, r3
    7a0a:	f8cc 6000 	str.w	r6, [ip]
    7a0e:	e7cb      	b.n	79a8 <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
    7a10:	f8df e004 	ldr.w	lr, [pc, #4]	; 7a18 <check_level_trigger_pins+0xa0>
    7a14:	e7cf      	b.n	79b6 <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    7a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a18:	50000300 	.word	0x50000300

00007a1c <gpiote_pin_cleanup>:
{
    7a1c:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    7a1e:	4b14      	ldr	r3, [pc, #80]	; (7a70 <gpiote_pin_cleanup+0x54>)
    7a20:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    7a24:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    7a26:	2300      	movs	r3, #0
    7a28:	e000      	b.n	7a2c <gpiote_pin_cleanup+0x10>
    7a2a:	3301      	adds	r3, #1
    7a2c:	2b07      	cmp	r3, #7
    7a2e:	d81d      	bhi.n	7a6c <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7a30:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    7a34:	490e      	ldr	r1, [pc, #56]	; (7a70 <gpiote_pin_cleanup+0x54>)
    7a36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    7a3a:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    7a3e:	4290      	cmp	r0, r2
    7a40:	d1f3      	bne.n	7a2a <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    7a42:	fa24 f203 	lsr.w	r2, r4, r3
    7a46:	f012 0f01 	tst.w	r2, #1
    7a4a:	d0ee      	beq.n	7a2a <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    7a4c:	460a      	mov	r2, r1
    7a4e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    7a52:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    7a56:	f021 0101 	bic.w	r1, r1, #1
    7a5a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    7a5e:	2101      	movs	r1, #1
    7a60:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    7a62:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    7a66:	b2d8      	uxtb	r0, r3
    7a68:	f001 fa0e 	bl	8e88 <nrfx_gpiote_channel_free>
}
    7a6c:	bd10      	pop	{r4, pc}
    7a6e:	bf00      	nop
    7a70:	40006000 	.word	0x40006000

00007a74 <gpiote_channel_alloc>:
{
    7a74:	b570      	push	{r4, r5, r6, lr}
    7a76:	b082      	sub	sp, #8
    7a78:	4604      	mov	r4, r0
    7a7a:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    7a7c:	f10d 0007 	add.w	r0, sp, #7
    7a80:	f001 fa1e 	bl	8ec0 <nrfx_gpiote_channel_alloc>
    7a84:	4b1c      	ldr	r3, [pc, #112]	; (7af8 <gpiote_channel_alloc+0x84>)
    7a86:	4298      	cmp	r0, r3
    7a88:	d132      	bne.n	7af0 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    7a8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a8e:	f103 0240 	add.w	r2, r3, #64	; 0x40
    7a92:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7a94:	4e19      	ldr	r6, [pc, #100]	; (7afc <gpiote_channel_alloc+0x88>)
    7a96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7a9a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    7a9e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    7aa2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    7aa6:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7aaa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    7aae:	0224      	lsls	r4, r4, #8
    7ab0:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    7ab4:	042d      	lsls	r5, r5, #16
    7ab6:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7aba:	432c      	orrs	r4, r5
    7abc:	430c      	orrs	r4, r1
    7abe:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    7ac2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    7ac6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7aca:	2000      	movs	r0, #0
    7acc:	6018      	str	r0, [r3, #0]
    7ace:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    7ad0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7ad4:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    7ad8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    7adc:	f042 0201 	orr.w	r2, r2, #1
    7ae0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    7ae4:	2301      	movs	r3, #1
    7ae6:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    7ae8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    7aec:	b002      	add	sp, #8
    7aee:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    7af0:	f06f 0012 	mvn.w	r0, #18
    7af4:	e7fa      	b.n	7aec <gpiote_channel_alloc+0x78>
    7af6:	bf00      	nop
    7af8:	0bad0000 	.word	0x0bad0000
    7afc:	40006000 	.word	0x40006000

00007b00 <gpiote_pin_int_cfg>:
{
    7b00:	b570      	push	{r4, r5, r6, lr}
    7b02:	460d      	mov	r5, r1
	return port->data;
    7b04:	6906      	ldr	r6, [r0, #16]
	return port->config;
    7b06:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7b08:	7a1b      	ldrb	r3, [r3, #8]
    7b0a:	f001 041f 	and.w	r4, r1, #31
    7b0e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    7b12:	4620      	mov	r0, r4
    7b14:	f7ff ff82 	bl	7a1c <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    7b18:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    7b1c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7b1e:	2b01      	cmp	r3, #1
    7b20:	d020      	beq.n	7b64 <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
    7b22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    7b26:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    7b2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7b2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    7b32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    7b36:	68f3      	ldr	r3, [r6, #12]
    7b38:	40eb      	lsrs	r3, r5
    7b3a:	f013 0f01 	tst.w	r3, #1
    7b3e:	d02f      	beq.n	7ba0 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
    7b40:	6973      	ldr	r3, [r6, #20]
    7b42:	40eb      	lsrs	r3, r5
    7b44:	f013 0f01 	tst.w	r3, #1
    7b48:	d015      	beq.n	7b76 <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
    7b4a:	69b3      	ldr	r3, [r6, #24]
    7b4c:	40eb      	lsrs	r3, r5
    7b4e:	f013 0f01 	tst.w	r3, #1
    7b52:	d109      	bne.n	7b68 <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    7b54:	6931      	ldr	r1, [r6, #16]
    7b56:	fa21 f505 	lsr.w	r5, r1, r5
    7b5a:	f015 0f01 	tst.w	r5, #1
    7b5e:	d008      	beq.n	7b72 <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    7b60:	2101      	movs	r1, #1
    7b62:	e002      	b.n	7b6a <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
    7b64:	4a0f      	ldr	r2, [pc, #60]	; (7ba4 <gpiote_pin_int_cfg+0xa4>)
    7b66:	e7de      	b.n	7b26 <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    7b68:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    7b6a:	4620      	mov	r0, r4
    7b6c:	f7ff ff82 	bl	7a74 <gpiote_channel_alloc>
    7b70:	e017      	b.n	7ba2 <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    7b72:	2102      	movs	r1, #2
    7b74:	e7f9      	b.n	7b6a <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    7b76:	6931      	ldr	r1, [r6, #16]
    7b78:	fa21 f505 	lsr.w	r5, r1, r5
    7b7c:	f015 0f01 	tst.w	r5, #1
    7b80:	d10c      	bne.n	7b9c <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    7b82:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    7b84:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    7b88:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    7b8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    7b90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    7b94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    7b98:	2000      	movs	r0, #0
}
    7b9a:	e002      	b.n	7ba2 <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    7b9c:	2102      	movs	r1, #2
    7b9e:	e7f1      	b.n	7b84 <gpiote_pin_int_cfg+0x84>
	int res = 0;
    7ba0:	2000      	movs	r0, #0
}
    7ba2:	bd70      	pop	{r4, r5, r6, pc}
    7ba4:	50000300 	.word	0x50000300

00007ba8 <gpio_nrfx_pin_interrupt_configure>:
{
    7ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    7baa:	6904      	ldr	r4, [r0, #16]
	return port->config;
    7bac:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7bae:	7a2e      	ldrb	r6, [r5, #8]
    7bb0:	f001 051f 	and.w	r5, r1, #31
    7bb4:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    7bb8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    7bbc:	d025      	beq.n	7c0a <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    7bbe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    7bc2:	d035      	beq.n	7c30 <gpio_nrfx_pin_interrupt_configure+0x88>
    7bc4:	68e5      	ldr	r5, [r4, #12]
    7bc6:	2601      	movs	r6, #1
    7bc8:	408e      	lsls	r6, r1
    7bca:	4335      	orrs	r5, r6
    7bcc:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    7bce:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    7bd2:	d033      	beq.n	7c3c <gpio_nrfx_pin_interrupt_configure+0x94>
    7bd4:	6962      	ldr	r2, [r4, #20]
    7bd6:	2501      	movs	r5, #1
    7bd8:	408d      	lsls	r5, r1
    7bda:	ea22 0205 	bic.w	r2, r2, r5
    7bde:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    7be0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    7be4:	d02f      	beq.n	7c46 <gpio_nrfx_pin_interrupt_configure+0x9e>
    7be6:	69a2      	ldr	r2, [r4, #24]
    7be8:	2501      	movs	r5, #1
    7bea:	408d      	lsls	r5, r1
    7bec:	ea22 0205 	bic.w	r2, r2, r5
    7bf0:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    7bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    7bf6:	d02b      	beq.n	7c50 <gpio_nrfx_pin_interrupt_configure+0xa8>
    7bf8:	6923      	ldr	r3, [r4, #16]
    7bfa:	2201      	movs	r2, #1
    7bfc:	408a      	lsls	r2, r1
    7bfe:	ea23 0302 	bic.w	r3, r3, r2
    7c02:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    7c04:	f7ff ff7c 	bl	7b00 <gpiote_pin_int_cfg>
}
    7c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    7c0a:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    7c0e:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c10:	2d01      	cmp	r5, #1
    7c12:	d00b      	beq.n	7c2c <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
    7c14:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7c18:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
    7c1c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    7c20:	f015 0f01 	tst.w	r5, #1
    7c24:	d0cb      	beq.n	7bbe <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    7c26:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7c2a:	e7ed      	b.n	7c08 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    7c2c:	4f0b      	ldr	r7, [pc, #44]	; (7c5c <gpio_nrfx_pin_interrupt_configure+0xb4>)
    7c2e:	e7f3      	b.n	7c18 <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    7c30:	68e5      	ldr	r5, [r4, #12]
    7c32:	2601      	movs	r6, #1
    7c34:	408e      	lsls	r6, r1
    7c36:	ea25 0506 	bic.w	r5, r5, r6
    7c3a:	e7c7      	b.n	7bcc <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    7c3c:	6962      	ldr	r2, [r4, #20]
    7c3e:	2501      	movs	r5, #1
    7c40:	408d      	lsls	r5, r1
    7c42:	432a      	orrs	r2, r5
    7c44:	e7cb      	b.n	7bde <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    7c46:	69a2      	ldr	r2, [r4, #24]
    7c48:	2501      	movs	r5, #1
    7c4a:	408d      	lsls	r5, r1
    7c4c:	432a      	orrs	r2, r5
    7c4e:	e7cf      	b.n	7bf0 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    7c50:	6923      	ldr	r3, [r4, #16]
    7c52:	2201      	movs	r2, #1
    7c54:	408a      	lsls	r2, r1
    7c56:	4313      	orrs	r3, r2
    7c58:	e7d3      	b.n	7c02 <gpio_nrfx_pin_interrupt_configure+0x5a>
    7c5a:	bf00      	nop
    7c5c:	50000300 	.word	0x50000300

00007c60 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    7c60:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    7c62:	4b0b      	ldr	r3, [pc, #44]	; (7c90 <gpio_nrfx_init+0x30>)
    7c64:	781b      	ldrb	r3, [r3, #0]
    7c66:	b10b      	cbz	r3, 7c6c <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    7c68:	2000      	movs	r0, #0
    7c6a:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    7c6c:	4b08      	ldr	r3, [pc, #32]	; (7c90 <gpio_nrfx_init+0x30>)
    7c6e:	2201      	movs	r2, #1
    7c70:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    7c72:	2200      	movs	r2, #0
    7c74:	2105      	movs	r1, #5
    7c76:	2006      	movs	r0, #6
    7c78:	f7fc fb6c 	bl	4354 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    7c7c:	2006      	movs	r0, #6
    7c7e:	f7fc fb37 	bl	42f0 <arch_irq_enable>
    7c82:	4b04      	ldr	r3, [pc, #16]	; (7c94 <gpio_nrfx_init+0x34>)
    7c84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7c88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7c8c:	e7ec      	b.n	7c68 <gpio_nrfx_init+0x8>
    7c8e:	bf00      	nop
    7c90:	20002edb 	.word	0x20002edb
    7c94:	40006000 	.word	0x40006000

00007c98 <gpiote_event_handler>:
{
    7c98:	b570      	push	{r4, r5, r6, lr}
    7c9a:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    7c9c:	2300      	movs	r3, #0
    7c9e:	9302      	str	r3, [sp, #8]
    7ca0:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    7ca2:	9300      	str	r3, [sp, #0]
    7ca4:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ca6:	4b46      	ldr	r3, [pc, #280]	; (7dc0 <gpiote_event_handler+0x128>)
    7ca8:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    7caa:	b90c      	cbnz	r4, 7cb0 <gpiote_event_handler+0x18>
{
    7cac:	2100      	movs	r1, #0
    7cae:	e011      	b.n	7cd4 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    7cb0:	4d44      	ldr	r5, [pc, #272]	; (7dc4 <gpiote_event_handler+0x12c>)
    7cb2:	4669      	mov	r1, sp
    7cb4:	4628      	mov	r0, r5
    7cb6:	f7ff fe5f 	bl	7978 <check_level_trigger_pins>
		fired_triggers[0] =
    7cba:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    7cbc:	a901      	add	r1, sp, #4
    7cbe:	f105 0018 	add.w	r0, r5, #24
    7cc2:	f7ff fe59 	bl	7978 <check_level_trigger_pins>
		fired_triggers[1] =
    7cc6:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7cc8:	4b3d      	ldr	r3, [pc, #244]	; (7dc0 <gpiote_event_handler+0x128>)
    7cca:	2200      	movs	r2, #0
    7ccc:	601a      	str	r2, [r3, #0]
    7cce:	681b      	ldr	r3, [r3, #0]
}
    7cd0:	e7ec      	b.n	7cac <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    7cd2:	3101      	adds	r1, #1
    7cd4:	2907      	cmp	r1, #7
    7cd6:	d82d      	bhi.n	7d34 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    7cd8:	f101 0340 	add.w	r3, r1, #64	; 0x40
    7cdc:	009b      	lsls	r3, r3, #2
    7cde:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    7ce0:	2301      	movs	r3, #1
    7ce2:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    7ce4:	4838      	ldr	r0, [pc, #224]	; (7dc8 <gpiote_event_handler+0x130>)
    7ce6:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    7cea:	4203      	tst	r3, r0
    7cec:	d0f1      	beq.n	7cd2 <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7cee:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    7cf2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7cf6:	681b      	ldr	r3, [r3, #0]
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	d0ea      	beq.n	7cd2 <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7cfc:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    7d00:	4831      	ldr	r0, [pc, #196]	; (7dc8 <gpiote_event_handler+0x130>)
    7d02:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    7d06:	f3c0 3340 	ubfx	r3, r0, #13, #1
    7d0a:	f3c0 2004 	ubfx	r0, r0, #8, #5
    7d0e:	2501      	movs	r5, #1
    7d10:	fa05 f000 	lsl.w	r0, r5, r0
    7d14:	ad04      	add	r5, sp, #16
    7d16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    7d1a:	f853 5c08 	ldr.w	r5, [r3, #-8]
    7d1e:	4305      	orrs	r5, r0
    7d20:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    7d24:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    7d28:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7d2c:	2200      	movs	r2, #0
    7d2e:	601a      	str	r2, [r3, #0]
    7d30:	681b      	ldr	r3, [r3, #0]
}
    7d32:	e7ce      	b.n	7cd2 <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    7d34:	9e02      	ldr	r6, [sp, #8]
    7d36:	b92e      	cbnz	r6, 7d44 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    7d38:	9e03      	ldr	r6, [sp, #12]
    7d3a:	b9ee      	cbnz	r6, 7d78 <gpiote_event_handler+0xe0>
	if (port_event) {
    7d3c:	2c00      	cmp	r4, #0
    7d3e:	d135      	bne.n	7dac <gpiote_event_handler+0x114>
}
    7d40:	b004      	add	sp, #16
    7d42:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    7d44:	4b21      	ldr	r3, [pc, #132]	; (7dcc <gpiote_event_handler+0x134>)
    7d46:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7d48:	b119      	cbz	r1, 7d52 <gpiote_event_handler+0xba>
    7d4a:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d4c:	b149      	cbz	r1, 7d62 <gpiote_event_handler+0xca>
	return node->next;
    7d4e:	680d      	ldr	r5, [r1, #0]
    7d50:	e007      	b.n	7d62 <gpiote_event_handler+0xca>
    7d52:	460d      	mov	r5, r1
    7d54:	e005      	b.n	7d62 <gpiote_event_handler+0xca>
    7d56:	b16d      	cbz	r5, 7d74 <gpiote_event_handler+0xdc>
    7d58:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d5a:	b105      	cbz	r5, 7d5e <gpiote_event_handler+0xc6>
	return node->next;
    7d5c:	682b      	ldr	r3, [r5, #0]
    7d5e:	4629      	mov	r1, r5
    7d60:	461d      	mov	r5, r3
    7d62:	2900      	cmp	r1, #0
    7d64:	d0e8      	beq.n	7d38 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    7d66:	688a      	ldr	r2, [r1, #8]
    7d68:	4032      	ands	r2, r6
    7d6a:	d0f4      	beq.n	7d56 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7d6c:	684b      	ldr	r3, [r1, #4]
    7d6e:	4815      	ldr	r0, [pc, #84]	; (7dc4 <gpiote_event_handler+0x12c>)
    7d70:	4798      	blx	r3
    7d72:	e7f0      	b.n	7d56 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7d74:	462b      	mov	r3, r5
    7d76:	e7f2      	b.n	7d5e <gpiote_event_handler+0xc6>
	return list->head;
    7d78:	4b15      	ldr	r3, [pc, #84]	; (7dd0 <gpiote_event_handler+0x138>)
    7d7a:	6859      	ldr	r1, [r3, #4]
    7d7c:	b119      	cbz	r1, 7d86 <gpiote_event_handler+0xee>
    7d7e:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d80:	b149      	cbz	r1, 7d96 <gpiote_event_handler+0xfe>
	return node->next;
    7d82:	680d      	ldr	r5, [r1, #0]
    7d84:	e007      	b.n	7d96 <gpiote_event_handler+0xfe>
    7d86:	460d      	mov	r5, r1
    7d88:	e005      	b.n	7d96 <gpiote_event_handler+0xfe>
    7d8a:	b16d      	cbz	r5, 7da8 <gpiote_event_handler+0x110>
    7d8c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d8e:	b105      	cbz	r5, 7d92 <gpiote_event_handler+0xfa>
	return node->next;
    7d90:	682b      	ldr	r3, [r5, #0]
    7d92:	4629      	mov	r1, r5
    7d94:	461d      	mov	r5, r3
    7d96:	2900      	cmp	r1, #0
    7d98:	d0d0      	beq.n	7d3c <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    7d9a:	688a      	ldr	r2, [r1, #8]
    7d9c:	4032      	ands	r2, r6
    7d9e:	d0f4      	beq.n	7d8a <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    7da0:	684b      	ldr	r3, [r1, #4]
    7da2:	480c      	ldr	r0, [pc, #48]	; (7dd4 <gpiote_event_handler+0x13c>)
    7da4:	4798      	blx	r3
    7da6:	e7f0      	b.n	7d8a <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7da8:	462b      	mov	r3, r5
    7daa:	e7f2      	b.n	7d92 <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    7dac:	4c05      	ldr	r4, [pc, #20]	; (7dc4 <gpiote_event_handler+0x12c>)
    7dae:	4620      	mov	r0, r4
    7db0:	f7ff fda8 	bl	7904 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    7db4:	f104 0018 	add.w	r0, r4, #24
    7db8:	f7ff fda4 	bl	7904 <cfg_level_pins>
}
    7dbc:	e7c0      	b.n	7d40 <gpiote_event_handler+0xa8>
    7dbe:	bf00      	nop
    7dc0:	4000617c 	.word	0x4000617c
    7dc4:	000144c0 	.word	0x000144c0
    7dc8:	40006000 	.word	0x40006000
    7dcc:	20002688 	.word	0x20002688
    7dd0:	200026a4 	.word	0x200026a4
    7dd4:	000144d8 	.word	0x000144d8

00007dd8 <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7dd8:	4b03      	ldr	r3, [pc, #12]	; (7de8 <nrf52_errata_242+0x10>)
    7dda:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7ddc:	2b08      	cmp	r3, #8
    7dde:	d001      	beq.n	7de4 <nrf52_errata_242+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7de0:	2000      	movs	r0, #0
    7de2:	4770      	bx	lr
                        return true;
    7de4:	2001      	movs	r0, #1
    #endif
}
    7de6:	4770      	bx	lr
    7de8:	10000130 	.word	0x10000130

00007dec <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    7dec:	4b03      	ldr	r3, [pc, #12]	; (7dfc <nvmc_wait_ready+0x10>)
    7dee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    7df2:	f013 0f01 	tst.w	r3, #1
    7df6:	d0f9      	beq.n	7dec <nvmc_wait_ready>
	}
}
    7df8:	4770      	bx	lr
    7dfa:	bf00      	nop
    7dfc:	4001e000 	.word	0x4001e000

00007e00 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    7e00:	4b02      	ldr	r3, [pc, #8]	; (7e0c <flash_nrf_pages_layout+0xc>)
    7e02:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    7e04:	2301      	movs	r3, #1
    7e06:	6013      	str	r3, [r2, #0]
}
    7e08:	4770      	bx	lr
    7e0a:	bf00      	nop
    7e0c:	200026c0 	.word	0x200026c0

00007e10 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    7e10:	4800      	ldr	r0, [pc, #0]	; (7e14 <flash_nrf_get_parameters+0x4>)
    7e12:	4770      	bx	lr
    7e14:	00015ab0 	.word	0x00015ab0

00007e18 <suspend_pofwarn>:
 * Do not attempt to write or erase if EVENTS_POFWARN is already asserted.
 */
static bool pofcon_enabled;

static int suspend_pofwarn(void)
{
    7e18:	b508      	push	{r3, lr}
	if (!nrf52_errata_242()) {
    7e1a:	f7ff ffdd 	bl	7dd8 <nrf52_errata_242>
    7e1e:	b328      	cbz	r0, 7e6c <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
    7e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7e24:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
    7e28:	f013 0201 	ands.w	r2, r3, #1
    7e2c:	b2d2      	uxtb	r2, r2
	bool enabled;
	nrf_power_pof_thr_t pof_thr;

	pof_thr = nrf_power_pofcon_get(NRF_POWER, &enabled);

	if (enabled) {
    7e2e:	d01f      	beq.n	7e70 <suspend_pofwarn+0x58>
    uint32_t pofcon = p_reg->POFCON;
    7e30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7e34:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    7e38:	f021 011f 	bic.w	r1, r1, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    7e3c:	f003 031e 	and.w	r3, r3, #30
    pofcon |=
    7e40:	4319      	orrs	r1, r3
    p_reg->POFCON = pofcon;
    7e42:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7e46:	490b      	ldr	r1, [pc, #44]	; (7e74 <suspend_pofwarn+0x5c>)
    7e48:	6809      	ldr	r1, [r1, #0]
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);

		/* This check need to be reworked once POFWARN event will be
		 * served by zephyr.
		 */
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    7e4a:	b919      	cbnz	r1, 7e54 <suspend_pofwarn+0x3c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
			return -ECANCELED;
		}

		pofcon_enabled = enabled;
    7e4c:	4b0a      	ldr	r3, [pc, #40]	; (7e78 <suspend_pofwarn+0x60>)
    7e4e:	701a      	strb	r2, [r3, #0]
	}

	return 0;
    7e50:	2000      	movs	r0, #0
    7e52:	e00c      	b.n	7e6e <suspend_pofwarn+0x56>
    uint32_t pofcon = p_reg->POFCON;
    7e54:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    7e58:	f022 021f 	bic.w	r2, r2, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    7e5c:	f043 0301 	orr.w	r3, r3, #1
    pofcon |=
    7e60:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
    7e62:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
			return -ECANCELED;
    7e66:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    7e6a:	e000      	b.n	7e6e <suspend_pofwarn+0x56>
		return 0;
    7e6c:	2000      	movs	r0, #0
}
    7e6e:	bd08      	pop	{r3, pc}
	return 0;
    7e70:	2000      	movs	r0, #0
    7e72:	e7fc      	b.n	7e6e <suspend_pofwarn+0x56>
    7e74:	40000108 	.word	0x40000108
    7e78:	20002edc 	.word	0x20002edc

00007e7c <restore_pofwarn>:

static void restore_pofwarn(void)
{
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
    7e7c:	4b0a      	ldr	r3, [pc, #40]	; (7ea8 <restore_pofwarn+0x2c>)
    7e7e:	781b      	ldrb	r3, [r3, #0]
    7e80:	b18b      	cbz	r3, 7ea6 <restore_pofwarn+0x2a>
    uint32_t pofcon = p_reg->POFCON;
    7e82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7e86:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    7e8a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    7e8e:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    7e92:	f002 021e 	and.w	r2, r2, #30
    7e96:	f042 0201 	orr.w	r2, r2, #1
    pofcon |=
    7e9a:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
    7e9c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    7ea0:	4b01      	ldr	r3, [pc, #4]	; (7ea8 <restore_pofwarn+0x2c>)
    7ea2:	2200      	movs	r2, #0
    7ea4:	701a      	strb	r2, [r3, #0]
	}
}
    7ea6:	4770      	bx	lr
    7ea8:	20002edc 	.word	0x20002edc

00007eac <flash_nrf_erase>:
{
    7eac:	b570      	push	{r4, r5, r6, lr}
    7eae:	460c      	mov	r4, r1
    7eb0:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    7eb2:	f00a fbe2 	bl	1267a <nrfx_nvmc_flash_page_size_get>
    7eb6:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    7eb8:	f00a fbdb 	bl	12672 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    7ebc:	42a0      	cmp	r0, r4
    7ebe:	d914      	bls.n	7eea <flash_nrf_erase+0x3e>
    7ec0:	2c00      	cmp	r4, #0
    7ec2:	db12      	blt.n	7eea <flash_nrf_erase+0x3e>
	    addr < 0 ||
    7ec4:	42a8      	cmp	r0, r5
    7ec6:	d310      	bcc.n	7eea <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
    7ec8:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    7eca:	4283      	cmp	r3, r0
    7ecc:	d80d      	bhi.n	7eea <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    7ece:	fbb4 f3f6 	udiv	r3, r4, r6
    7ed2:	fb06 4313 	mls	r3, r6, r3, r4
    7ed6:	b9f3      	cbnz	r3, 7f16 <flash_nrf_erase+0x6a>
    7ed8:	fbb5 f3f6 	udiv	r3, r5, r6
    7edc:	fb06 5313 	mls	r3, r6, r3, r5
    7ee0:	b9cb      	cbnz	r3, 7f16 <flash_nrf_erase+0x6a>
		if (!n_pages) {
    7ee2:	42b5      	cmp	r5, r6
    7ee4:	d22c      	bcs.n	7f40 <flash_nrf_erase+0x94>
			return 0;
    7ee6:	2400      	movs	r4, #0
    7ee8:	e013      	b.n	7f12 <flash_nrf_erase+0x66>
    7eea:	4a1e      	ldr	r2, [pc, #120]	; (7f64 <flash_nrf_erase+0xb8>)
    7eec:	4b1e      	ldr	r3, [pc, #120]	; (7f68 <flash_nrf_erase+0xbc>)
    7eee:	1ad2      	subs	r2, r2, r3
    7ef0:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7ef2:	f04f 0300 	mov.w	r3, #0
    7ef6:	2101      	movs	r1, #1
    7ef8:	f361 0302 	bfi	r3, r1, #0, #3
    7efc:	f36f 03c5 	bfc	r3, #3, #3
    7f00:	f362 138f 	bfi	r3, r2, #6, #10
    7f04:	462a      	mov	r2, r5
    7f06:	4621      	mov	r1, r4
    7f08:	4818      	ldr	r0, [pc, #96]	; (7f6c <flash_nrf_erase+0xc0>)
    7f0a:	f7f9 ff87 	bl	1e1c <log_2>
		return -EINVAL;
    7f0e:	f06f 0415 	mvn.w	r4, #21
}
    7f12:	4620      	mov	r0, r4
    7f14:	bd70      	pop	{r4, r5, r6, pc}
    7f16:	4a13      	ldr	r2, [pc, #76]	; (7f64 <flash_nrf_erase+0xb8>)
    7f18:	4b13      	ldr	r3, [pc, #76]	; (7f68 <flash_nrf_erase+0xbc>)
    7f1a:	1ad2      	subs	r2, r2, r3
    7f1c:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    7f1e:	f04f 0300 	mov.w	r3, #0
    7f22:	2101      	movs	r1, #1
    7f24:	f361 0302 	bfi	r3, r1, #0, #3
    7f28:	f36f 03c5 	bfc	r3, #3, #3
    7f2c:	f362 138f 	bfi	r3, r2, #6, #10
    7f30:	462a      	mov	r2, r5
    7f32:	4621      	mov	r1, r4
    7f34:	480e      	ldr	r0, [pc, #56]	; (7f70 <flash_nrf_erase+0xc4>)
    7f36:	f7f9 ff71 	bl	1e1c <log_2>
			return -EINVAL;
    7f3a:	f06f 0415 	mvn.w	r4, #21
    7f3e:	e7e8      	b.n	7f12 <flash_nrf_erase+0x66>
	return z_impl_k_sem_take(sem, timeout);
    7f40:	4e0c      	ldr	r6, [pc, #48]	; (7f74 <flash_nrf_erase+0xc8>)
    7f42:	f04f 32ff 	mov.w	r2, #4294967295
    7f46:	f04f 33ff 	mov.w	r3, #4294967295
    7f4a:	4630      	mov	r0, r6
    7f4c:	f006 fa2a 	bl	e3a4 <z_impl_k_sem_take>
		ret = erase(addr, size);
    7f50:	4629      	mov	r1, r5
    7f52:	4620      	mov	r0, r4
    7f54:	f00a f842 	bl	11fdc <erase>
    7f58:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    7f5a:	4630      	mov	r0, r6
    7f5c:	f006 f9fe 	bl	e35c <z_impl_k_sem_give>
	return ret;
    7f60:	e7d7      	b.n	7f12 <flash_nrf_erase+0x66>
    7f62:	bf00      	nop
    7f64:	00014690 	.word	0x00014690
    7f68:	00014688 	.word	0x00014688
    7f6c:	00015a2c 	.word	0x00015a2c
    7f70:	00015a4c 	.word	0x00015a4c
    7f74:	200026c8 	.word	0x200026c8

00007f78 <flash_nrf_write>:
{
    7f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f7a:	460c      	mov	r4, r1
    7f7c:	4616      	mov	r6, r2
    7f7e:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    7f80:	f00a fb77 	bl	12672 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    7f84:	42a0      	cmp	r0, r4
    7f86:	d90f      	bls.n	7fa8 <flash_nrf_write+0x30>
    7f88:	2c00      	cmp	r4, #0
    7f8a:	db0d      	blt.n	7fa8 <flash_nrf_write+0x30>
	    addr < 0 ||
    7f8c:	42a8      	cmp	r0, r5
    7f8e:	d30b      	bcc.n	7fa8 <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
    7f90:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    7f92:	4298      	cmp	r0, r3
    7f94:	d308      	bcc.n	7fa8 <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    7f96:	f014 0f03 	tst.w	r4, #3
    7f9a:	d11b      	bne.n	7fd4 <flash_nrf_write+0x5c>
    7f9c:	f015 0f03 	tst.w	r5, #3
    7fa0:	d118      	bne.n	7fd4 <flash_nrf_write+0x5c>
	if (!len) {
    7fa2:	bb65      	cbnz	r5, 7ffe <flash_nrf_write+0x86>
		return 0;
    7fa4:	2400      	movs	r4, #0
    7fa6:	e013      	b.n	7fd0 <flash_nrf_write+0x58>
    7fa8:	4a1e      	ldr	r2, [pc, #120]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7faa:	4b1f      	ldr	r3, [pc, #124]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fac:	1ad2      	subs	r2, r2, r3
    7fae:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7fb0:	f04f 0300 	mov.w	r3, #0
    7fb4:	2101      	movs	r1, #1
    7fb6:	f361 0302 	bfi	r3, r1, #0, #3
    7fba:	f36f 03c5 	bfc	r3, #3, #3
    7fbe:	f362 138f 	bfi	r3, r2, #6, #10
    7fc2:	462a      	mov	r2, r5
    7fc4:	4621      	mov	r1, r4
    7fc6:	4819      	ldr	r0, [pc, #100]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    7fc8:	f7f9 ff28 	bl	1e1c <log_2>
		return -EINVAL;
    7fcc:	f06f 0415 	mvn.w	r4, #21
}
    7fd0:	4620      	mov	r0, r4
    7fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7fd4:	4a13      	ldr	r2, [pc, #76]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fd6:	4b14      	ldr	r3, [pc, #80]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fd8:	1ad2      	subs	r2, r2, r3
    7fda:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    7fdc:	f04f 0300 	mov.w	r3, #0
    7fe0:	2101      	movs	r1, #1
    7fe2:	f361 0302 	bfi	r3, r1, #0, #3
    7fe6:	f36f 03c5 	bfc	r3, #3, #3
    7fea:	f362 138f 	bfi	r3, r2, #6, #10
    7fee:	462a      	mov	r2, r5
    7ff0:	4621      	mov	r1, r4
    7ff2:	480f      	ldr	r0, [pc, #60]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7ff4:	f7f9 ff12 	bl	1e1c <log_2>
		return -EINVAL;
    7ff8:	f06f 0415 	mvn.w	r4, #21
    7ffc:	e7e8      	b.n	7fd0 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
    7ffe:	4f0d      	ldr	r7, [pc, #52]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    8000:	f04f 32ff 	mov.w	r2, #4294967295
    8004:	f04f 33ff 	mov.w	r3, #4294967295
    8008:	4638      	mov	r0, r7
    800a:	f006 f9cb 	bl	e3a4 <z_impl_k_sem_take>
		ret = write(addr, data, len);
    800e:	462a      	mov	r2, r5
    8010:	4631      	mov	r1, r6
    8012:	4620      	mov	r0, r4
    8014:	f00a f809 	bl	1202a <write>
    8018:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    801a:	4638      	mov	r0, r7
    801c:	f006 f99e 	bl	e35c <z_impl_k_sem_give>
	return ret;
    8020:	e7d6      	b.n	7fd0 <flash_nrf_write+0x58>
    8022:	bf00      	nop
    8024:	00014690 	.word	0x00014690
    8028:	00014688 	.word	0x00014688
    802c:	00015a2c 	.word	0x00015a2c
    8030:	00015a6c 	.word	0x00015a6c
    8034:	200026c8 	.word	0x200026c8

00008038 <flash_nrf_read>:
{
    8038:	b570      	push	{r4, r5, r6, lr}
    803a:	460c      	mov	r4, r1
    803c:	4616      	mov	r6, r2
    803e:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    8040:	f00a fb17 	bl	12672 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    8044:	4284      	cmp	r4, r0
    8046:	d209      	bcs.n	805c <flash_nrf_read+0x24>
    8048:	2c00      	cmp	r4, #0
    804a:	db07      	blt.n	805c <flash_nrf_read+0x24>
	    addr < 0 ||
    804c:	42a8      	cmp	r0, r5
    804e:	d305      	bcc.n	805c <flash_nrf_read+0x24>
	    (addr) + len > flash_size) {
    8050:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    8052:	4283      	cmp	r3, r0
    8054:	d802      	bhi.n	805c <flash_nrf_read+0x24>
	if (!len) {
    8056:	b9b5      	cbnz	r5, 8086 <flash_nrf_read+0x4e>
		return 0;
    8058:	2000      	movs	r0, #0
    805a:	e013      	b.n	8084 <flash_nrf_read+0x4c>
    805c:	4a0d      	ldr	r2, [pc, #52]	; (8094 <flash_nrf_read+0x5c>)
    805e:	4b0e      	ldr	r3, [pc, #56]	; (8098 <flash_nrf_read+0x60>)
    8060:	1ad2      	subs	r2, r2, r3
    8062:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    8064:	f04f 0300 	mov.w	r3, #0
    8068:	2101      	movs	r1, #1
    806a:	f361 0302 	bfi	r3, r1, #0, #3
    806e:	f36f 03c5 	bfc	r3, #3, #3
    8072:	f362 138f 	bfi	r3, r2, #6, #10
    8076:	462a      	mov	r2, r5
    8078:	4621      	mov	r1, r4
    807a:	4808      	ldr	r0, [pc, #32]	; (809c <flash_nrf_read+0x64>)
    807c:	f7f9 fece 	bl	1e1c <log_2>
		return -EINVAL;
    8080:	f06f 0015 	mvn.w	r0, #21
}
    8084:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (void *)addr, len);
    8086:	462a      	mov	r2, r5
    8088:	4621      	mov	r1, r4
    808a:	4630      	mov	r0, r6
    808c:	f009 fa66 	bl	1155c <memcpy>
	return 0;
    8090:	2000      	movs	r0, #0
    8092:	e7f7      	b.n	8084 <flash_nrf_read+0x4c>
    8094:	00014690 	.word	0x00014690
    8098:	00014688 	.word	0x00014688
    809c:	00015a2c 	.word	0x00015a2c

000080a0 <nrf_flash_init>:
{
    80a0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    80a2:	2201      	movs	r2, #1
    80a4:	4611      	mov	r1, r2
    80a6:	4806      	ldr	r0, [pc, #24]	; (80c0 <nrf_flash_init+0x20>)
    80a8:	f00b fea7 	bl	13dfa <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    80ac:	f00a fae9 	bl	12682 <nrfx_nvmc_flash_page_count_get>
    80b0:	4c04      	ldr	r4, [pc, #16]	; (80c4 <nrf_flash_init+0x24>)
    80b2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    80b4:	f00a fae1 	bl	1267a <nrfx_nvmc_flash_page_size_get>
    80b8:	6060      	str	r0, [r4, #4]
}
    80ba:	2000      	movs	r0, #0
    80bc:	bd10      	pop	{r4, pc}
    80be:	bf00      	nop
    80c0:	200026c8 	.word	0x200026c8
    80c4:	200026c0 	.word	0x200026c0

000080c8 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    80c8:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    80ca:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    80cc:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    80d0:	d06f      	beq.n	81b2 <baudrate_set+0xea>
    80d2:	d83a      	bhi.n	814a <baudrate_set+0x82>
    80d4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    80d8:	d06e      	beq.n	81b8 <baudrate_set+0xf0>
    80da:	d90a      	bls.n	80f2 <baudrate_set+0x2a>
    80dc:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    80e0:	d075      	beq.n	81ce <baudrate_set+0x106>
    80e2:	d924      	bls.n	812e <baudrate_set+0x66>
    80e4:	f647 2312 	movw	r3, #31250	; 0x7a12
    80e8:	4299      	cmp	r1, r3
    80ea:	d12b      	bne.n	8144 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    80ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    80f0:	e013      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    80f2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    80f6:	d061      	beq.n	81bc <baudrate_set+0xf4>
    80f8:	d907      	bls.n	810a <baudrate_set+0x42>
    80fa:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    80fe:	d063      	beq.n	81c8 <baudrate_set+0x100>
    8100:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    8104:	d110      	bne.n	8128 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    8106:	4b3c      	ldr	r3, [pc, #240]	; (81f8 <baudrate_set+0x130>)
    8108:	e007      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    810a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    810e:	d058      	beq.n	81c2 <baudrate_set+0xfa>
    8110:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    8114:	d105      	bne.n	8122 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    8116:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    811a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    811e:	2000      	movs	r0, #0
    8120:	4770      	bx	lr
	switch (baudrate) {
    8122:	f06f 0015 	mvn.w	r0, #21
    8126:	4770      	bx	lr
    8128:	f06f 0015 	mvn.w	r0, #21
    812c:	4770      	bx	lr
    812e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    8132:	d04e      	beq.n	81d2 <baudrate_set+0x10a>
    8134:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    8138:	d101      	bne.n	813e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    813a:	4b30      	ldr	r3, [pc, #192]	; (81fc <baudrate_set+0x134>)
    813c:	e7ed      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    813e:	f06f 0015 	mvn.w	r0, #21
    8142:	4770      	bx	lr
    8144:	f06f 0015 	mvn.w	r0, #21
    8148:	4770      	bx	lr
    814a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    814e:	d042      	beq.n	81d6 <baudrate_set+0x10e>
    8150:	d909      	bls.n	8166 <baudrate_set+0x9e>
    8152:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    8156:	d046      	beq.n	81e6 <baudrate_set+0x11e>
    8158:	d91f      	bls.n	819a <baudrate_set+0xd2>
    815a:	4b29      	ldr	r3, [pc, #164]	; (8200 <baudrate_set+0x138>)
    815c:	4299      	cmp	r1, r3
    815e:	d148      	bne.n	81f2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    8160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8164:	e7d9      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    8166:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    816a:	d037      	beq.n	81dc <baudrate_set+0x114>
    816c:	d905      	bls.n	817a <baudrate_set+0xb2>
    816e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    8172:	d10f      	bne.n	8194 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    8174:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    8178:	e7cf      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    817a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    817e:	4299      	cmp	r1, r3
    8180:	d02e      	beq.n	81e0 <baudrate_set+0x118>
    8182:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    8186:	d102      	bne.n	818e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    8188:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    818c:	e7c5      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    818e:	f06f 0015 	mvn.w	r0, #21
    8192:	4770      	bx	lr
    8194:	f06f 0015 	mvn.w	r0, #21
    8198:	4770      	bx	lr
    819a:	4b1a      	ldr	r3, [pc, #104]	; (8204 <baudrate_set+0x13c>)
    819c:	4299      	cmp	r1, r3
    819e:	d025      	beq.n	81ec <baudrate_set+0x124>
    81a0:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    81a4:	d102      	bne.n	81ac <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    81a6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    81aa:	e7b6      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    81ac:	f06f 0015 	mvn.w	r0, #21
    81b0:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    81b2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    81b6:	e7b0      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    81b8:	4b13      	ldr	r3, [pc, #76]	; (8208 <baudrate_set+0x140>)
    81ba:	e7ae      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    81bc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    81c0:	e7ab      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    81c2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    81c6:	e7a8      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    81c8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    81cc:	e7a5      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    81ce:	4b0f      	ldr	r3, [pc, #60]	; (820c <baudrate_set+0x144>)
    81d0:	e7a3      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    81d2:	4b0f      	ldr	r3, [pc, #60]	; (8210 <baudrate_set+0x148>)
    81d4:	e7a1      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    81d6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    81da:	e79e      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    81dc:	4b0d      	ldr	r3, [pc, #52]	; (8214 <baudrate_set+0x14c>)
    81de:	e79c      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    81e0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    81e4:	e799      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    81e6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    81ea:	e796      	b.n	811a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    81ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    81f0:	e793      	b.n	811a <baudrate_set+0x52>
	switch (baudrate) {
    81f2:	f06f 0015 	mvn.w	r0, #21
}
    81f6:	4770      	bx	lr
    81f8:	0013b000 	.word	0x0013b000
    81fc:	004ea000 	.word	0x004ea000
    8200:	000f4240 	.word	0x000f4240
    8204:	0003d090 	.word	0x0003d090
    8208:	00275000 	.word	0x00275000
    820c:	0075c000 	.word	0x0075c000
    8210:	003af000 	.word	0x003af000
    8214:	013a9000 	.word	0x013a9000

00008218 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    8218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    821c:	4605      	mov	r5, r0
    821e:	460f      	mov	r7, r1
	return dev->data;
    8220:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    8224:	f00b fcf8 	bl	13c18 <k_is_in_isr>
    8228:	b920      	cbnz	r0, 8234 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    822a:	4b16      	ldr	r3, [pc, #88]	; (8284 <uarte_nrfx_poll_out+0x6c>)
    822c:	781b      	ldrb	r3, [r3, #0]
    822e:	b1ab      	cbz	r3, 825c <uarte_nrfx_poll_out+0x44>
    8230:	2300      	movs	r3, #0
    8232:	e000      	b.n	8236 <uarte_nrfx_poll_out+0x1e>
    8234:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    8236:	b19b      	cbz	r3, 8260 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    8238:	f04f 0320 	mov.w	r3, #32
    823c:	f3ef 8411 	mrs	r4, BASEPRI
    8240:	f383 8812 	msr	BASEPRI_MAX, r3
    8244:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    8248:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    824a:	4628      	mov	r0, r5
    824c:	f009 fff9 	bl	12242 <is_tx_ready>
    8250:	b950      	cbnz	r0, 8268 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    8252:	f384 8811 	msr	BASEPRI, r4
    8256:	f3bf 8f6f 	isb	sy
}
    825a:	e7ed      	b.n	8238 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    825c:	2301      	movs	r3, #1
    825e:	e7ea      	b.n	8236 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    8260:	4628      	mov	r0, r5
    8262:	f00a f90f 	bl	12484 <wait_tx_ready>
    8266:	4606      	mov	r6, r0
	}

	data->char_out = c;
    8268:	4641      	mov	r1, r8
    826a:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    826e:	2201      	movs	r2, #1
    8270:	4628      	mov	r0, r5
    8272:	f00a f800 	bl	12276 <tx_start>
	__asm__ volatile(
    8276:	f386 8811 	msr	BASEPRI, r6
    827a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    827e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8282:	bf00      	nop
    8284:	20002ee3 	.word	0x20002ee3

00008288 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    8288:	b538      	push	{r3, r4, r5, lr}
    828a:	4604      	mov	r4, r0
    828c:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    828e:	f101 0016 	add.w	r0, r1, #22
    8292:	f000 ff77 	bl	9184 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    8296:	4b14      	ldr	r3, [pc, #80]	; (82e8 <endtx_stoptx_ppi_init+0x60>)
    8298:	4298      	cmp	r0, r3
    829a:	d111      	bne.n	82c0 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    829c:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    829e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    82a2:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    82a4:	4a11      	ldr	r2, [pc, #68]	; (82ec <endtx_stoptx_ppi_init+0x64>)
    82a6:	33a2      	adds	r3, #162	; 0xa2
    82a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    82ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    82b0:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    82b2:	7da9      	ldrb	r1, [r5, #22]
    82b4:	2301      	movs	r3, #1
    82b6:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    82b8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    82bc:	2000      	movs	r0, #0
}
    82be:	bd38      	pop	{r3, r4, r5, pc}
    82c0:	4b0b      	ldr	r3, [pc, #44]	; (82f0 <endtx_stoptx_ppi_init+0x68>)
    82c2:	4a0c      	ldr	r2, [pc, #48]	; (82f4 <endtx_stoptx_ppi_init+0x6c>)
    82c4:	1a9b      	subs	r3, r3, r2
    82c6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    82c8:	f04f 0100 	mov.w	r1, #0
    82cc:	2201      	movs	r2, #1
    82ce:	f362 0102 	bfi	r1, r2, #0, #3
    82d2:	f36f 01c5 	bfc	r1, #3, #3
    82d6:	f363 118f 	bfi	r1, r3, #6, #10
    82da:	4807      	ldr	r0, [pc, #28]	; (82f8 <endtx_stoptx_ppi_init+0x70>)
    82dc:	f7f9 fdfc 	bl	1ed8 <log_0>
		return -EIO;
    82e0:	f06f 0004 	mvn.w	r0, #4
    82e4:	e7eb      	b.n	82be <endtx_stoptx_ppi_init+0x36>
    82e6:	bf00      	nop
    82e8:	0bad0000 	.word	0x0bad0000
    82ec:	4001f000 	.word	0x4001f000
    82f0:	000146d0 	.word	0x000146d0
    82f4:	00014688 	.word	0x00014688
    82f8:	00015ab8 	.word	0x00015ab8

000082fc <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    82fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    82fe:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    8300:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    8302:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8304:	2300      	movs	r3, #0
    8306:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    830a:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    830c:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    830e:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    8312:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8314:	2b01      	cmp	r3, #1
    8316:	f000 8097 	beq.w	8448 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
    831a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    831e:	2301      	movs	r3, #1
    8320:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    8322:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    8326:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    8328:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    832c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    832e:	2b01      	cmp	r3, #1
    8330:	f000 808c 	beq.w	844c <uarte_instance_init+0x150>
        case 0: return NRF_P0;
    8334:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    8338:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    833c:	2203      	movs	r2, #3
    833e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    8342:	68e3      	ldr	r3, [r4, #12]
    8344:	f1b3 3fff 	cmp.w	r3, #4294967295
    8348:	d00c      	beq.n	8364 <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    834a:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
    834c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    8350:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8352:	2b01      	cmp	r3, #1
    8354:	d07c      	beq.n	8450 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
    8356:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    835a:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    835c:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    8360:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    8364:	68a2      	ldr	r2, [r4, #8]
    8366:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    8368:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    836c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    8370:	6923      	ldr	r3, [r4, #16]
    8372:	f1b3 3fff 	cmp.w	r3, #4294967295
    8376:	d00c      	beq.n	8392 <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    8378:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
    837a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    837e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8380:	2b01      	cmp	r3, #1
    8382:	d067      	beq.n	8454 <uarte_instance_init+0x158>
        case 0: return NRF_P0;
    8384:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8388:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    838a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    838e:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    8392:	6963      	ldr	r3, [r4, #20]
    8394:	f1b3 3fff 	cmp.w	r3, #4294967295
    8398:	d017      	beq.n	83ca <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
    839a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    839e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    83a0:	2b01      	cmp	r3, #1
    83a2:	d059      	beq.n	8458 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
    83a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    83a8:	2301      	movs	r3, #1
    83aa:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    83ac:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    83b0:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    83b2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    83b6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    83b8:	2b01      	cmp	r3, #1
    83ba:	d04f      	beq.n	845c <uarte_instance_init+0x160>
        case 0: return NRF_P0;
    83bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    83c0:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    83c4:	2203      	movs	r2, #3
    83c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    83ca:	6962      	ldr	r2, [r4, #20]
    83cc:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    83ce:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    83d2:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    83d6:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    83d8:	3104      	adds	r1, #4
    83da:	f009 fec5 	bl	12168 <uarte_nrfx_configure>
	if (err) {
    83de:	4607      	mov	r7, r0
    83e0:	bb80      	cbnz	r0, 8444 <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    83e2:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    83e4:	f013 0f08 	tst.w	r3, #8
    83e8:	d13a      	bne.n	8460 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    83ea:	2308      	movs	r3, #8
    83ec:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    83f0:	68e3      	ldr	r3, [r4, #12]
    83f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    83f6:	d00c      	beq.n	8412 <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    83f8:	2300      	movs	r3, #0
    83fa:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    83fe:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8402:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8406:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    840a:	2301      	movs	r3, #1
    840c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8410:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8412:	6863      	ldr	r3, [r4, #4]
    8414:	f013 0f08 	tst.w	r3, #8
    8418:	d103      	bne.n	8422 <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
    841a:	f44f 7380 	mov.w	r3, #256	; 0x100
    841e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8422:	6863      	ldr	r3, [r4, #4]
    8424:	f013 0f10 	tst.w	r3, #16
    8428:	d003      	beq.n	8432 <uarte_instance_init+0x136>
    842a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    842e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    8432:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8434:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8438:	2300      	movs	r3, #0
    843a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    843e:	2301      	movs	r3, #1
    8440:	60ab      	str	r3, [r5, #8]
    8442:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    8444:	4638      	mov	r0, r7
    8446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    8448:	4a09      	ldr	r2, [pc, #36]	; (8470 <uarte_instance_init+0x174>)
    844a:	e768      	b.n	831e <uarte_instance_init+0x22>
    844c:	4908      	ldr	r1, [pc, #32]	; (8470 <uarte_instance_init+0x174>)
    844e:	e773      	b.n	8338 <uarte_instance_init+0x3c>
    8450:	4f07      	ldr	r7, [pc, #28]	; (8470 <uarte_instance_init+0x174>)
    8452:	e782      	b.n	835a <uarte_instance_init+0x5e>
    8454:	4f06      	ldr	r7, [pc, #24]	; (8470 <uarte_instance_init+0x174>)
    8456:	e797      	b.n	8388 <uarte_instance_init+0x8c>
    8458:	4905      	ldr	r1, [pc, #20]	; (8470 <uarte_instance_init+0x174>)
    845a:	e7a5      	b.n	83a8 <uarte_instance_init+0xac>
    845c:	4904      	ldr	r1, [pc, #16]	; (8470 <uarte_instance_init+0x174>)
    845e:	e7af      	b.n	83c0 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
    8460:	4631      	mov	r1, r6
    8462:	4628      	mov	r0, r5
    8464:	f7ff ff10 	bl	8288 <endtx_stoptx_ppi_init>
		if (err < 0) {
    8468:	2800      	cmp	r0, #0
    846a:	dabe      	bge.n	83ea <uarte_instance_init+0xee>
			return err;
    846c:	4607      	mov	r7, r0
    846e:	e7e9      	b.n	8444 <uarte_instance_init+0x148>
    8470:	50000300 	.word	0x50000300

00008474 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    8474:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    8478:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    847c:	4b01      	ldr	r3, [pc, #4]	; (8484 <set_comparator+0x10>)
    847e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    8482:	4770      	bx	lr
    8484:	40011000 	.word	0x40011000

00008488 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    8488:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    848c:	4b01      	ldr	r3, [pc, #4]	; (8494 <get_comparator+0xc>)
    848e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    8492:	4770      	bx	lr
    8494:	40011000 	.word	0x40011000

00008498 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    849c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    849e:	4a02      	ldr	r2, [pc, #8]	; (84a8 <event_enable+0x10>)
    84a0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    84a4:	4770      	bx	lr
    84a6:	bf00      	nop
    84a8:	40011000 	.word	0x40011000

000084ac <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    84ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    84b0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    84b2:	4a02      	ldr	r2, [pc, #8]	; (84bc <event_disable+0x10>)
    84b4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    84b8:	4770      	bx	lr
    84ba:	bf00      	nop
    84bc:	40011000 	.word	0x40011000

000084c0 <counter>:
     return p_reg->COUNTER;
    84c0:	4b01      	ldr	r3, [pc, #4]	; (84c8 <counter+0x8>)
    84c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    84c6:	4770      	bx	lr
    84c8:	40011000 	.word	0x40011000

000084cc <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    84cc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    84ce:	2301      	movs	r3, #1
    84d0:	4083      	lsls	r3, r0
    84d2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    84d4:	4a10      	ldr	r2, [pc, #64]	; (8518 <compare_int_lock+0x4c>)
    84d6:	f3bf 8f5b 	dmb	ish
    84da:	e852 1f00 	ldrex	r1, [r2]
    84de:	ea01 0c04 	and.w	ip, r1, r4
    84e2:	e842 ce00 	strex	lr, ip, [r2]
    84e6:	f1be 0f00 	cmp.w	lr, #0
    84ea:	d1f6      	bne.n	84da <compare_int_lock+0xe>
    84ec:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    84f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    84f4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    84f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    84fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    8500:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    8504:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8508:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    850c:	420b      	tst	r3, r1
}
    850e:	bf14      	ite	ne
    8510:	2001      	movne	r0, #1
    8512:	2000      	moveq	r0, #0
    8514:	bd10      	pop	{r4, pc}
    8516:	bf00      	nop
    8518:	200026fc 	.word	0x200026fc

0000851c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    851c:	b570      	push	{r4, r5, r6, lr}
    851e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    8520:	f009 fffb 	bl	1251a <full_int_lock>
    8524:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    8526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    852a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    852c:	4a17      	ldr	r2, [pc, #92]	; (858c <channel_processing_check_and_clear+0x70>)
    852e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8532:	4213      	tst	r3, r2
    8534:	d105      	bne.n	8542 <channel_processing_check_and_clear+0x26>
	bool result = false;
    8536:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    8538:	4628      	mov	r0, r5
    853a:	f009 fff7 	bl	1252c <full_int_unlock>

	return result;
}
    853e:	4630      	mov	r0, r6
    8540:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8542:	2301      	movs	r3, #1
    8544:	40a3      	lsls	r3, r4
    8546:	43db      	mvns	r3, r3
    8548:	4a11      	ldr	r2, [pc, #68]	; (8590 <channel_processing_check_and_clear+0x74>)
    854a:	f3bf 8f5b 	dmb	ish
    854e:	e852 1f00 	ldrex	r1, [r2]
    8552:	ea01 0003 	and.w	r0, r1, r3
    8556:	e842 0600 	strex	r6, r0, [r2]
    855a:	2e00      	cmp	r6, #0
    855c:	d1f7      	bne.n	854e <channel_processing_check_and_clear+0x32>
    855e:	f3bf 8f5b 	dmb	ish
    8562:	b959      	cbnz	r1, 857c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8564:	f104 0350 	add.w	r3, r4, #80	; 0x50
    8568:	009b      	lsls	r3, r3, #2
    856a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    856c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8570:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    8574:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8576:	b113      	cbz	r3, 857e <channel_processing_check_and_clear+0x62>
    8578:	2301      	movs	r3, #1
    857a:	e000      	b.n	857e <channel_processing_check_and_clear+0x62>
    857c:	2301      	movs	r3, #1
		if (result) {
    857e:	461e      	mov	r6, r3
    8580:	2b00      	cmp	r3, #0
    8582:	d0d9      	beq.n	8538 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    8584:	4620      	mov	r0, r4
    8586:	f009 ffb9 	bl	124fc <event_clear>
    858a:	e7d5      	b.n	8538 <channel_processing_check_and_clear+0x1c>
    858c:	40011000 	.word	0x40011000
    8590:	200026f8 	.word	0x200026f8

00008594 <compare_int_unlock>:
	if (key) {
    8594:	b901      	cbnz	r1, 8598 <compare_int_unlock+0x4>
}
    8596:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    8598:	2301      	movs	r3, #1
    859a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    859c:	4a11      	ldr	r2, [pc, #68]	; (85e4 <compare_int_unlock+0x50>)
    859e:	f3bf 8f5b 	dmb	ish
    85a2:	e852 1f00 	ldrex	r1, [r2]
    85a6:	4319      	orrs	r1, r3
    85a8:	e842 1c00 	strex	ip, r1, [r2]
    85ac:	f1bc 0f00 	cmp.w	ip, #0
    85b0:	d1f7      	bne.n	85a2 <compare_int_unlock+0xe>
    85b2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    85b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    85ba:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    85bc:	4a0a      	ldr	r2, [pc, #40]	; (85e8 <compare_int_unlock+0x54>)
    85be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    85c2:	f3bf 8f5b 	dmb	ish
    85c6:	4b09      	ldr	r3, [pc, #36]	; (85ec <compare_int_unlock+0x58>)
    85c8:	681b      	ldr	r3, [r3, #0]
    85ca:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    85ce:	fa23 f000 	lsr.w	r0, r3, r0
    85d2:	f010 0f01 	tst.w	r0, #1
    85d6:	d0de      	beq.n	8596 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    85d8:	4b05      	ldr	r3, [pc, #20]	; (85f0 <compare_int_unlock+0x5c>)
    85da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    85de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    85e2:	e7d8      	b.n	8596 <compare_int_unlock+0x2>
    85e4:	200026fc 	.word	0x200026fc
    85e8:	40011000 	.word	0x40011000
    85ec:	200026f8 	.word	0x200026f8
    85f0:	e000e100 	.word	0xe000e100

000085f4 <sys_clock_timeout_handler>:
{
    85f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85f6:	4607      	mov	r7, r0
    85f8:	4614      	mov	r4, r2
    85fa:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    85fc:	4610      	mov	r0, r2
    85fe:	4619      	mov	r1, r3
    8600:	f009 ff88 	bl	12514 <absolute_time_to_cc>
    8604:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8606:	4b15      	ldr	r3, [pc, #84]	; (865c <sys_clock_timeout_handler+0x68>)
    8608:	681a      	ldr	r2, [r3, #0]
    860a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    860c:	601c      	str	r4, [r3, #0]
    860e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    8610:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    8614:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    8618:	d308      	bcc.n	862c <sys_clock_timeout_handler+0x38>
	return false;
    861a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    861c:	f006 fd64 	bl	f0e8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    8620:	4638      	mov	r0, r7
    8622:	f7ff ff31 	bl	8488 <get_comparator>
    8626:	42a8      	cmp	r0, r5
    8628:	d00c      	beq.n	8644 <sys_clock_timeout_handler+0x50>
}
    862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    862c:	4b0c      	ldr	r3, [pc, #48]	; (8660 <sys_clock_timeout_handler+0x6c>)
    862e:	6819      	ldr	r1, [r3, #0]
    8630:	0a0b      	lsrs	r3, r1, #8
    8632:	060a      	lsls	r2, r1, #24
    8634:	1952      	adds	r2, r2, r5
    8636:	f143 0300 	adc.w	r3, r3, #0
    863a:	490a      	ldr	r1, [pc, #40]	; (8664 <sys_clock_timeout_handler+0x70>)
    863c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    8640:	2401      	movs	r4, #1
    8642:	e7eb      	b.n	861c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    8644:	b11c      	cbz	r4, 864e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    8646:	4638      	mov	r0, r7
    8648:	f7ff ff26 	bl	8498 <event_enable>
}
    864c:	e7ed      	b.n	862a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    864e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    8652:	4638      	mov	r0, r7
    8654:	f7ff ff0e 	bl	8474 <set_comparator>
    8658:	e7f5      	b.n	8646 <sys_clock_timeout_handler+0x52>
    865a:	bf00      	nop
    865c:	20000780 	.word	0x20000780
    8660:	20002700 	.word	0x20002700
    8664:	20000768 	.word	0x20000768

00008668 <z_nrf_rtc_timer_read>:
{
    8668:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    866a:	4b0d      	ldr	r3, [pc, #52]	; (86a0 <z_nrf_rtc_timer_read+0x38>)
    866c:	681b      	ldr	r3, [r3, #0]
    866e:	0a1d      	lsrs	r5, r3, #8
    8670:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    8672:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    8676:	f7ff ff23 	bl	84c0 <counter>
    867a:	4603      	mov	r3, r0
	val += cntr;
    867c:	1820      	adds	r0, r4, r0
    867e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    8682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8686:	d20a      	bcs.n	869e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    8688:	4b06      	ldr	r3, [pc, #24]	; (86a4 <z_nrf_rtc_timer_read+0x3c>)
    868a:	e9d3 2300 	ldrd	r2, r3, [r3]
    868e:	4299      	cmp	r1, r3
    8690:	bf08      	it	eq
    8692:	4290      	cmpeq	r0, r2
    8694:	d203      	bcs.n	869e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    8696:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    869a:	f141 0100 	adc.w	r1, r1, #0
}
    869e:	bd38      	pop	{r3, r4, r5, pc}
    86a0:	20002700 	.word	0x20002700
    86a4:	20000768 	.word	0x20000768

000086a8 <compare_set_nolocks>:
{
    86a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    86ac:	4606      	mov	r6, r0
    86ae:	4614      	mov	r4, r2
    86b0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    86b2:	4610      	mov	r0, r2
    86b4:	4619      	mov	r1, r3
    86b6:	f009 ff2d 	bl	12514 <absolute_time_to_cc>
    86ba:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    86bc:	f7ff ffd4 	bl	8668 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    86c0:	42a9      	cmp	r1, r5
    86c2:	bf08      	it	eq
    86c4:	42a0      	cmpeq	r0, r4
    86c6:	d21e      	bcs.n	8706 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    86c8:	ebb4 0800 	subs.w	r8, r4, r0
    86cc:	eb65 0901 	sbc.w	r9, r5, r1
    86d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    86d4:	2300      	movs	r3, #0
    86d6:	454b      	cmp	r3, r9
    86d8:	bf08      	it	eq
    86da:	4542      	cmpeq	r2, r8
    86dc:	d32e      	bcc.n	873c <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    86de:	4b19      	ldr	r3, [pc, #100]	; (8744 <compare_set_nolocks+0x9c>)
    86e0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    86e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    86e8:	42ab      	cmp	r3, r5
    86ea:	bf08      	it	eq
    86ec:	42a2      	cmpeq	r2, r4
    86ee:	d018      	beq.n	8722 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    86f0:	4639      	mov	r1, r7
    86f2:	4630      	mov	r0, r6
    86f4:	f009 ff1f 	bl	12536 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    86f8:	4639      	mov	r1, r7
    86fa:	f009 fefb 	bl	124f4 <counter_sub>
    86fe:	1824      	adds	r4, r4, r0
    8700:	f145 0500 	adc.w	r5, r5, #0
    8704:	e00d      	b.n	8722 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    8706:	2301      	movs	r3, #1
    8708:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    870a:	4a0f      	ldr	r2, [pc, #60]	; (8748 <compare_set_nolocks+0xa0>)
    870c:	f3bf 8f5b 	dmb	ish
    8710:	e852 1f00 	ldrex	r1, [r2]
    8714:	4319      	orrs	r1, r3
    8716:	e842 1000 	strex	r0, r1, [r2]
    871a:	2800      	cmp	r0, #0
    871c:	d1f8      	bne.n	8710 <compare_set_nolocks+0x68>
    871e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    8722:	4b08      	ldr	r3, [pc, #32]	; (8744 <compare_set_nolocks+0x9c>)
    8724:	0132      	lsls	r2, r6, #4
    8726:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    872a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    872e:	9908      	ldr	r1, [sp, #32]
    8730:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    8732:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8734:	6073      	str	r3, [r6, #4]
	return ret;
    8736:	2000      	movs	r0, #0
}
    8738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    873c:	f06f 0015 	mvn.w	r0, #21
    8740:	e7fa      	b.n	8738 <compare_set_nolocks+0x90>
    8742:	bf00      	nop
    8744:	20000770 	.word	0x20000770
    8748:	200026f8 	.word	0x200026f8

0000874c <process_channel>:

static void process_channel(int32_t chan)
{
    874c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8750:	b082      	sub	sp, #8
    8752:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    8754:	f7ff fee2 	bl	851c <channel_processing_check_and_clear>
    8758:	b910      	cbnz	r0, 8760 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    875a:	b002      	add	sp, #8
    875c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    8760:	f7ff ff82 	bl	8668 <z_nrf_rtc_timer_read>
    8764:	4606      	mov	r6, r0
    8766:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    8768:	f009 fed7 	bl	1251a <full_int_lock>
    876c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    876e:	4b13      	ldr	r3, [pc, #76]	; (87bc <process_channel+0x70>)
    8770:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    8774:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    8778:	454f      	cmp	r7, r9
    877a:	bf08      	it	eq
    877c:	4546      	cmpeq	r6, r8
    877e:	d20b      	bcs.n	8798 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    8780:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    8782:	4650      	mov	r0, sl
    8784:	f009 fed2 	bl	1252c <full_int_unlock>
		if (handler) {
    8788:	2e00      	cmp	r6, #0
    878a:	d0e6      	beq.n	875a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    878c:	9500      	str	r5, [sp, #0]
    878e:	4642      	mov	r2, r8
    8790:	464b      	mov	r3, r9
    8792:	4620      	mov	r0, r4
    8794:	47b0      	blx	r6
}
    8796:	e7e0      	b.n	875a <process_channel+0xe>
			handler = cc_data[chan].callback;
    8798:	4a08      	ldr	r2, [pc, #32]	; (87bc <process_channel+0x70>)
    879a:	0123      	lsls	r3, r4, #4
    879c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    87a0:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    87a2:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    87a4:	2000      	movs	r0, #0
    87a6:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    87a8:	f04f 32ff 	mov.w	r2, #4294967295
    87ac:	f04f 33ff 	mov.w	r3, #4294967295
    87b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    87b4:	4620      	mov	r0, r4
    87b6:	f7ff fe79 	bl	84ac <event_disable>
    87ba:	e7e2      	b.n	8782 <process_channel+0x36>
    87bc:	20000770 	.word	0x20000770

000087c0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    87c0:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    87c2:	4b0d      	ldr	r3, [pc, #52]	; (87f8 <rtc_nrf_isr+0x38>)
    87c4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    87c8:	f013 0f02 	tst.w	r3, #2
    87cc:	d00a      	beq.n	87e4 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    87ce:	4b0b      	ldr	r3, [pc, #44]	; (87fc <rtc_nrf_isr+0x3c>)
    87d0:	681b      	ldr	r3, [r3, #0]
    87d2:	b13b      	cbz	r3, 87e4 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    87d4:	4b09      	ldr	r3, [pc, #36]	; (87fc <rtc_nrf_isr+0x3c>)
    87d6:	2200      	movs	r2, #0
    87d8:	601a      	str	r2, [r3, #0]
    87da:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    87dc:	4a08      	ldr	r2, [pc, #32]	; (8800 <rtc_nrf_isr+0x40>)
    87de:	6813      	ldr	r3, [r2, #0]
    87e0:	3301      	adds	r3, #1
    87e2:	6013      	str	r3, [r2, #0]
{
    87e4:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    87e6:	2c00      	cmp	r4, #0
    87e8:	dd00      	ble.n	87ec <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    87ea:	bd10      	pop	{r4, pc}
		process_channel(chan);
    87ec:	4620      	mov	r0, r4
    87ee:	f7ff ffad 	bl	874c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    87f2:	3401      	adds	r4, #1
    87f4:	e7f7      	b.n	87e6 <rtc_nrf_isr+0x26>
    87f6:	bf00      	nop
    87f8:	40011000 	.word	0x40011000
    87fc:	40011104 	.word	0x40011104
    8800:	20002700 	.word	0x20002700

00008804 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    8804:	b530      	push	{r4, r5, lr}
    8806:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    8808:	2300      	movs	r3, #0
    880a:	4a1f      	ldr	r2, [pc, #124]	; (8888 <sys_clock_driver_init+0x84>)
    880c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8810:	2b00      	cmp	r3, #0
    8812:	dd27      	ble.n	8864 <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    8814:	4c1c      	ldr	r4, [pc, #112]	; (8888 <sys_clock_driver_init+0x84>)
    8816:	2502      	movs	r5, #2
    8818:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    881c:	4b1b      	ldr	r3, [pc, #108]	; (888c <sys_clock_driver_init+0x88>)
    881e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8822:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    8826:	2200      	movs	r2, #0
    8828:	2101      	movs	r1, #1
    882a:	2011      	movs	r0, #17
    882c:	f7fb fd92 	bl	4354 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    8830:	2011      	movs	r0, #17
    8832:	f7fb fd5d 	bl	42f0 <arch_irq_enable>
    8836:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    883a:	2301      	movs	r3, #1
    883c:	4a14      	ldr	r2, [pc, #80]	; (8890 <sys_clock_driver_init+0x8c>)
    883e:	6013      	str	r3, [r2, #0]
    8840:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    8842:	4a14      	ldr	r2, [pc, #80]	; (8894 <sys_clock_driver_init+0x90>)
    8844:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    8846:	2400      	movs	r4, #0
    8848:	9401      	str	r4, [sp, #4]
    884a:	4b13      	ldr	r3, [pc, #76]	; (8898 <sys_clock_driver_init+0x94>)
    884c:	9300      	str	r3, [sp, #0]
    884e:	4a13      	ldr	r2, [pc, #76]	; (889c <sys_clock_driver_init+0x98>)
    8850:	2300      	movs	r3, #0
    8852:	4620      	mov	r0, r4
    8854:	f009 feaa 	bl	125ac <compare_set>

	z_nrf_clock_control_lf_on(mode);
    8858:	4628      	mov	r0, r5
    885a:	f7fe ff7b 	bl	7754 <z_nrf_clock_control_lf_on>

	return 0;
}
    885e:	4620      	mov	r0, r4
    8860:	b003      	add	sp, #12
    8862:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    8864:	4a0e      	ldr	r2, [pc, #56]	; (88a0 <sys_clock_driver_init+0x9c>)
    8866:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    886a:	f04f 30ff 	mov.w	r0, #4294967295
    886e:	f04f 31ff 	mov.w	r1, #4294967295
    8872:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    887a:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    887c:	4902      	ldr	r1, [pc, #8]	; (8888 <sys_clock_driver_init+0x84>)
    887e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8882:	3301      	adds	r3, #1
    8884:	e7c4      	b.n	8810 <sys_clock_driver_init+0xc>
    8886:	bf00      	nop
    8888:	40011000 	.word	0x40011000
    888c:	e000e100 	.word	0xe000e100
    8890:	40011008 	.word	0x40011008
    8894:	200026fc 	.word	0x200026fc
    8898:	000085f5 	.word	0x000085f5
    889c:	007fffff 	.word	0x007fffff
    88a0:	20000770 	.word	0x20000770

000088a4 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    88a4:	b510      	push	{r4, lr}
    88a6:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    88a8:	f1b0 3fff 	cmp.w	r0, #4294967295
    88ac:	d007      	beq.n	88be <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    88ae:	1e44      	subs	r4, r0, #1
    88b0:	2c00      	cmp	r4, #0
    88b2:	dd07      	ble.n	88c4 <sys_clock_set_timeout+0x20>
    88b4:	4b11      	ldr	r3, [pc, #68]	; (88fc <sys_clock_set_timeout+0x58>)
    88b6:	429c      	cmp	r4, r3
    88b8:	dd05      	ble.n	88c6 <sys_clock_set_timeout+0x22>
    88ba:	4c11      	ldr	r4, [pc, #68]	; (8900 <sys_clock_set_timeout+0x5c>)
    88bc:	e003      	b.n	88c6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    88be:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    88c2:	e7f4      	b.n	88ae <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    88c4:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    88c6:	f7ff fecf 	bl	8668 <z_nrf_rtc_timer_read>
    88ca:	4b0e      	ldr	r3, [pc, #56]	; (8904 <sys_clock_set_timeout+0x60>)
    88cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    88d0:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    88d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    88d6:	d300      	bcc.n	88da <sys_clock_set_timeout+0x36>
		ticks = 0;
    88d8:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    88da:	4404      	add	r4, r0
    88dc:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    88de:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    88e2:	d300      	bcc.n	88e6 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    88e4:	4c06      	ldr	r4, [pc, #24]	; (8900 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    88e6:	2000      	movs	r0, #0
    88e8:	9001      	str	r0, [sp, #4]
    88ea:	4907      	ldr	r1, [pc, #28]	; (8908 <sys_clock_set_timeout+0x64>)
    88ec:	9100      	str	r1, [sp, #0]
    88ee:	1912      	adds	r2, r2, r4
    88f0:	f143 0300 	adc.w	r3, r3, #0
    88f4:	f009 fe5a 	bl	125ac <compare_set>
}
    88f8:	b002      	add	sp, #8
    88fa:	bd10      	pop	{r4, pc}
    88fc:	007ffffe 	.word	0x007ffffe
    8900:	007fffff 	.word	0x007fffff
    8904:	20000780 	.word	0x20000780
    8908:	000085f5 	.word	0x000085f5

0000890c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    890c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    890e:	f7ff feab 	bl	8668 <z_nrf_rtc_timer_read>
    8912:	4b02      	ldr	r3, [pc, #8]	; (891c <sys_clock_elapsed+0x10>)
    8914:	681b      	ldr	r3, [r3, #0]
}
    8916:	1ac0      	subs	r0, r0, r3
    8918:	bd08      	pop	{r3, pc}
    891a:	bf00      	nop
    891c:	20000780 	.word	0x20000780

00008920 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8920:	4b03      	ldr	r3, [pc, #12]	; (8930 <nrf52_errata_36+0x10>)
    8922:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8924:	2b08      	cmp	r3, #8
    8926:	d001      	beq.n	892c <nrf52_errata_36+0xc>
        return false;
    8928:	2000      	movs	r0, #0
    892a:	4770      	bx	lr
                        return true;
    892c:	2001      	movs	r0, #1
}
    892e:	4770      	bx	lr
    8930:	10000130 	.word	0x10000130

00008934 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8934:	4b03      	ldr	r3, [pc, #12]	; (8944 <nrf52_errata_66+0x10>)
    8936:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8938:	2b08      	cmp	r3, #8
    893a:	d001      	beq.n	8940 <nrf52_errata_66+0xc>
        return false;
    893c:	2000      	movs	r0, #0
    893e:	4770      	bx	lr
                        return true;
    8940:	2001      	movs	r0, #1
}
    8942:	4770      	bx	lr
    8944:	10000130 	.word	0x10000130

00008948 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8948:	4b08      	ldr	r3, [pc, #32]	; (896c <nrf52_errata_98+0x24>)
    894a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    894c:	3304      	adds	r3, #4
    894e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8950:	2a08      	cmp	r2, #8
    8952:	d001      	beq.n	8958 <nrf52_errata_98+0x10>
        return false;
    8954:	2000      	movs	r0, #0
    8956:	4770      	bx	lr
                switch(var2)
    8958:	2b00      	cmp	r3, #0
    895a:	d804      	bhi.n	8966 <nrf52_errata_98+0x1e>
    895c:	e8df f003 	tbb	[pc, r3]
    8960:	01          	.byte	0x01
    8961:	00          	.byte	0x00
            if (var1 == 0x08)
    8962:	2001      	movs	r0, #1
    8964:	4770      	bx	lr
                        return false;
    8966:	2000      	movs	r0, #0
}
    8968:	4770      	bx	lr
    896a:	bf00      	nop
    896c:	10000130 	.word	0x10000130

00008970 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8970:	4b08      	ldr	r3, [pc, #32]	; (8994 <nrf52_errata_103+0x24>)
    8972:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8974:	3304      	adds	r3, #4
    8976:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8978:	2a08      	cmp	r2, #8
    897a:	d001      	beq.n	8980 <nrf52_errata_103+0x10>
        return false;
    897c:	2000      	movs	r0, #0
    897e:	4770      	bx	lr
                switch(var2)
    8980:	2b00      	cmp	r3, #0
    8982:	d804      	bhi.n	898e <nrf52_errata_103+0x1e>
    8984:	e8df f003 	tbb	[pc, r3]
    8988:	01          	.byte	0x01
    8989:	00          	.byte	0x00
            if (var1 == 0x08)
    898a:	2001      	movs	r0, #1
    898c:	4770      	bx	lr
                        return false;
    898e:	2000      	movs	r0, #0
}
    8990:	4770      	bx	lr
    8992:	bf00      	nop
    8994:	10000130 	.word	0x10000130

00008998 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8998:	4b08      	ldr	r3, [pc, #32]	; (89bc <nrf52_errata_115+0x24>)
    899a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    899c:	3304      	adds	r3, #4
    899e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    89a0:	2a08      	cmp	r2, #8
    89a2:	d001      	beq.n	89a8 <nrf52_errata_115+0x10>
        return false;
    89a4:	2000      	movs	r0, #0
    89a6:	4770      	bx	lr
                switch(var2)
    89a8:	2b00      	cmp	r3, #0
    89aa:	d804      	bhi.n	89b6 <nrf52_errata_115+0x1e>
    89ac:	e8df f003 	tbb	[pc, r3]
    89b0:	01          	.byte	0x01
    89b1:	00          	.byte	0x00
            if (var1 == 0x08)
    89b2:	2001      	movs	r0, #1
    89b4:	4770      	bx	lr
                        return false;
    89b6:	2000      	movs	r0, #0
}
    89b8:	4770      	bx	lr
    89ba:	bf00      	nop
    89bc:	10000130 	.word	0x10000130

000089c0 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    89c0:	4b08      	ldr	r3, [pc, #32]	; (89e4 <nrf52_errata_120+0x24>)
    89c2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    89c4:	3304      	adds	r3, #4
    89c6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    89c8:	2a08      	cmp	r2, #8
    89ca:	d001      	beq.n	89d0 <nrf52_errata_120+0x10>
        return false;
    89cc:	2000      	movs	r0, #0
    89ce:	4770      	bx	lr
                switch(var2)
    89d0:	2b00      	cmp	r3, #0
    89d2:	d804      	bhi.n	89de <nrf52_errata_120+0x1e>
    89d4:	e8df f003 	tbb	[pc, r3]
    89d8:	01          	.byte	0x01
    89d9:	00          	.byte	0x00
            if (var1 == 0x08)
    89da:	2001      	movs	r0, #1
    89dc:	4770      	bx	lr
                        return false;
    89de:	2000      	movs	r0, #0
}
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop
    89e4:	10000130 	.word	0x10000130

000089e8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    89e8:	4b03      	ldr	r3, [pc, #12]	; (89f8 <nrf52_errata_136+0x10>)
    89ea:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    89ec:	2b08      	cmp	r3, #8
    89ee:	d001      	beq.n	89f4 <nrf52_errata_136+0xc>
        return false;
    89f0:	2000      	movs	r0, #0
    89f2:	4770      	bx	lr
                        return true;
    89f4:	2001      	movs	r0, #1
}
    89f6:	4770      	bx	lr
    89f8:	10000130 	.word	0x10000130

000089fc <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    89fc:	4b06      	ldr	r3, [pc, #24]	; (8a18 <nrf52_errata_249+0x1c>)
    89fe:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8a00:	4a06      	ldr	r2, [pc, #24]	; (8a1c <nrf52_errata_249+0x20>)
    8a02:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    8a04:	2b08      	cmp	r3, #8
    8a06:	d001      	beq.n	8a0c <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    8a08:	2000      	movs	r0, #0
    8a0a:	4770      	bx	lr
                switch(var2)
    8a0c:	2a03      	cmp	r2, #3
    8a0e:	d801      	bhi.n	8a14 <nrf52_errata_249+0x18>
    8a10:	2000      	movs	r0, #0
    8a12:	4770      	bx	lr
                        return true;
    8a14:	2001      	movs	r0, #1
    #endif
}
    8a16:	4770      	bx	lr
    8a18:	10000130 	.word	0x10000130
    8a1c:	10000134 	.word	0x10000134

00008a20 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8a20:	4b02      	ldr	r3, [pc, #8]	; (8a2c <nvmc_wait+0xc>)
    8a22:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8a26:	2b00      	cmp	r3, #0
    8a28:	d0fa      	beq.n	8a20 <nvmc_wait>
}
    8a2a:	4770      	bx	lr
    8a2c:	4001e000 	.word	0x4001e000

00008a30 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    8a30:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8a32:	4b03      	ldr	r3, [pc, #12]	; (8a40 <nvmc_config+0x10>)
    8a34:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    8a38:	f7ff fff2 	bl	8a20 <nvmc_wait>
}
    8a3c:	bd08      	pop	{r3, pc}
    8a3e:	bf00      	nop
    8a40:	4001e000 	.word	0x4001e000

00008a44 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8a44:	4b01      	ldr	r3, [pc, #4]	; (8a4c <SystemCoreClockUpdate+0x8>)
    8a46:	4a02      	ldr	r2, [pc, #8]	; (8a50 <SystemCoreClockUpdate+0xc>)
    8a48:	601a      	str	r2, [r3, #0]
}
    8a4a:	4770      	bx	lr
    8a4c:	2000025c 	.word	0x2000025c
    8a50:	03d09000 	.word	0x03d09000

00008a54 <SystemInit>:

void SystemInit(void)
{
    8a54:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    8a56:	f7ff ff63 	bl	8920 <nrf52_errata_36>
    8a5a:	b140      	cbz	r0, 8a6e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    8a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a60:	2200      	movs	r2, #0
    8a62:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8a66:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8a6a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    8a6e:	f7ff ff61 	bl	8934 <nrf52_errata_66>
    8a72:	2800      	cmp	r0, #0
    8a74:	d046      	beq.n	8b04 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8a7a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    8a7e:	4b56      	ldr	r3, [pc, #344]	; (8bd8 <SystemInit+0x184>)
    8a80:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8a84:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    8a88:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8a8c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8a90:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8a94:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8a98:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8a9c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8aa0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8aa4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8aa8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8aac:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    8ab0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8ab4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8ab8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8abc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    8ac0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8ac4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8ac8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8acc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8ad0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8ad4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8ad8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8adc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8ae0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8ae4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8ae8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8aec:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8af0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8af4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8af8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8afc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8b00:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8b04:	f7ff ff20 	bl	8948 <nrf52_errata_98>
    8b08:	b110      	cbz	r0, 8b10 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    8b0a:	4b34      	ldr	r3, [pc, #208]	; (8bdc <SystemInit+0x188>)
    8b0c:	4a34      	ldr	r2, [pc, #208]	; (8be0 <SystemInit+0x18c>)
    8b0e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    8b10:	f7ff ff2e 	bl	8970 <nrf52_errata_103>
    8b14:	b118      	cbz	r0, 8b1e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    8b16:	4b33      	ldr	r3, [pc, #204]	; (8be4 <SystemInit+0x190>)
    8b18:	22fb      	movs	r2, #251	; 0xfb
    8b1a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    8b1e:	f7ff ff3b 	bl	8998 <nrf52_errata_115>
    8b22:	b148      	cbz	r0, 8b38 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    8b24:	4930      	ldr	r1, [pc, #192]	; (8be8 <SystemInit+0x194>)
    8b26:	680b      	ldr	r3, [r1, #0]
    8b28:	f023 030f 	bic.w	r3, r3, #15
    8b2c:	4a2f      	ldr	r2, [pc, #188]	; (8bec <SystemInit+0x198>)
    8b2e:	6812      	ldr	r2, [r2, #0]
    8b30:	f002 020f 	and.w	r2, r2, #15
    8b34:	4313      	orrs	r3, r2
    8b36:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8b38:	f7ff ff42 	bl	89c0 <nrf52_errata_120>
    8b3c:	b118      	cbz	r0, 8b46 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    8b3e:	4b2c      	ldr	r3, [pc, #176]	; (8bf0 <SystemInit+0x19c>)
    8b40:	f44f 7200 	mov.w	r2, #512	; 0x200
    8b44:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    8b46:	f7ff ff4f 	bl	89e8 <nrf52_errata_136>
    8b4a:	b160      	cbz	r0, 8b66 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8b54:	f013 0f01 	tst.w	r3, #1
    8b58:	d005      	beq.n	8b66 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    8b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b5e:	f06f 0201 	mvn.w	r2, #1
    8b62:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    8b66:	f7ff ff49 	bl	89fc <nrf52_errata_249>
    8b6a:	b138      	cbz	r0, 8b7c <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8b6c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8b70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    8b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b78:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8b7c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8b80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8b84:	2b00      	cmp	r3, #0
    8b86:	db08      	blt.n	8b9a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8b88:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8b8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8b90:	2b00      	cmp	r3, #0
    8b92:	db02      	blt.n	8b9a <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    8b94:	f7ff ff56 	bl	8a44 <SystemCoreClockUpdate>
}
    8b98:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    8b9a:	2001      	movs	r0, #1
    8b9c:	f7ff ff48 	bl	8a30 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8ba0:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    8ba4:	2512      	movs	r5, #18
    8ba6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    8baa:	f7ff ff39 	bl	8a20 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    8bae:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    8bb2:	f7ff ff35 	bl	8a20 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    8bb6:	2000      	movs	r0, #0
    8bb8:	f7ff ff3a 	bl	8a30 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    8bbc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8bc0:	490c      	ldr	r1, [pc, #48]	; (8bf4 <SystemInit+0x1a0>)
    8bc2:	68ca      	ldr	r2, [r1, #12]
    8bc4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8bc8:	4b0b      	ldr	r3, [pc, #44]	; (8bf8 <SystemInit+0x1a4>)
    8bca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8bcc:	60cb      	str	r3, [r1, #12]
    8bce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    8bd2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8bd4:	e7fd      	b.n	8bd2 <SystemInit+0x17e>
    8bd6:	bf00      	nop
    8bd8:	4000c000 	.word	0x4000c000
    8bdc:	4000568c 	.word	0x4000568c
    8be0:	00038148 	.word	0x00038148
    8be4:	4000f000 	.word	0x4000f000
    8be8:	40000ee4 	.word	0x40000ee4
    8bec:	10000258 	.word	0x10000258
    8bf0:	40029640 	.word	0x40029640
    8bf4:	e000ed00 	.word	0xe000ed00
    8bf8:	05fa0004 	.word	0x05fa0004

00008bfc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8bfc:	4b06      	ldr	r3, [pc, #24]	; (8c18 <nrfx_clock_init+0x1c>)
    8bfe:	791b      	ldrb	r3, [r3, #4]
    8c00:	b93b      	cbnz	r3, 8c12 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    8c02:	4b05      	ldr	r3, [pc, #20]	; (8c18 <nrfx_clock_init+0x1c>)
    8c04:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    8c06:	2201      	movs	r2, #1
    8c08:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    8c0a:	2200      	movs	r2, #0
    8c0c:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8c0e:	4803      	ldr	r0, [pc, #12]	; (8c1c <nrfx_clock_init+0x20>)
    8c10:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8c12:	4803      	ldr	r0, [pc, #12]	; (8c20 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8c14:	4770      	bx	lr
    8c16:	bf00      	nop
    8c18:	20002704 	.word	0x20002704
    8c1c:	0bad0000 	.word	0x0bad0000
    8c20:	0bad000c 	.word	0x0bad000c

00008c24 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8c24:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8c26:	2000      	movs	r0, #0
    8c28:	f7fb fb86 	bl	4338 <arch_irq_is_enabled>
    8c2c:	b118      	cbz	r0, 8c36 <nrfx_clock_enable+0x12>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    8c2e:	4b03      	ldr	r3, [pc, #12]	; (8c3c <nrfx_clock_enable+0x18>)
    8c30:	2201      	movs	r2, #1
    8c32:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8c34:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8c36:	f7fb fb5b 	bl	42f0 <arch_irq_enable>
    8c3a:	e7f8      	b.n	8c2e <nrfx_clock_enable+0xa>
    8c3c:	20002edd 	.word	0x20002edd

00008c40 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    8c40:	b110      	cbz	r0, 8c48 <nrfx_clock_start+0x8>
    8c42:	2801      	cmp	r0, #1
    8c44:	d025      	beq.n	8c92 <nrfx_clock_start+0x52>
    8c46:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8c4c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8c50:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8c54:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    8c58:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    8c5c:	d111      	bne.n	8c82 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c62:	2200      	movs	r2, #0
    8c64:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c68:	4b0f      	ldr	r3, [pc, #60]	; (8ca8 <nrfx_clock_start+0x68>)
    8c6a:	2200      	movs	r2, #0
    8c6c:	601a      	str	r2, [r3, #0]
    8c6e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    8c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c74:	2202      	movs	r2, #2
    8c76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c7a:	3308      	adds	r3, #8
    8c7c:	2201      	movs	r2, #1
    8c7e:	601a      	str	r2, [r3, #0]
}
    8c80:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    8c82:	2b01      	cmp	r3, #1
    8c84:	d1eb      	bne.n	8c5e <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c8a:	2201      	movs	r2, #1
    8c8c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    8c90:	e7ea      	b.n	8c68 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c92:	4b06      	ldr	r3, [pc, #24]	; (8cac <nrfx_clock_start+0x6c>)
    8c94:	2200      	movs	r2, #0
    8c96:	601a      	str	r2, [r3, #0]
    8c98:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    8c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c9e:	2201      	movs	r2, #1
    8ca0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ca4:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    8ca6:	4770      	bx	lr
    8ca8:	40000104 	.word	0x40000104
    8cac:	40000100 	.word	0x40000100

00008cb0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    8cb0:	b530      	push	{r4, r5, lr}
    8cb2:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    8cb4:	4604      	mov	r4, r0
    8cb6:	b118      	cbz	r0, 8cc0 <nrfx_clock_stop+0x10>
    8cb8:	2801      	cmp	r0, #1
    8cba:	d013      	beq.n	8ce4 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    8cbc:	b003      	add	sp, #12
    8cbe:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    8cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8cc4:	2202      	movs	r2, #2
    8cc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8cca:	f503 7382 	add.w	r3, r3, #260	; 0x104
    8cce:	2200      	movs	r2, #0
    8cd0:	601a      	str	r2, [r3, #0]
    8cd2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8cd4:	4b39      	ldr	r3, [pc, #228]	; (8dbc <nrfx_clock_stop+0x10c>)
    8cd6:	2201      	movs	r2, #1
    8cd8:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8cda:	2c01      	cmp	r4, #1
    8cdc:	d00f      	beq.n	8cfe <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    8cde:	f242 7510 	movw	r5, #10000	; 0x2710
    8ce2:	e052      	b.n	8d8a <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    8ce4:	2301      	movs	r3, #1
    8ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8cea:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8cee:	f502 7280 	add.w	r2, r2, #256	; 0x100
    8cf2:	2100      	movs	r1, #0
    8cf4:	6011      	str	r1, [r2, #0]
    8cf6:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8cf8:	4a31      	ldr	r2, [pc, #196]	; (8dc0 <nrfx_clock_stop+0x110>)
    8cfa:	6013      	str	r3, [r2, #0]
}
    8cfc:	e7ed      	b.n	8cda <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8cfe:	2301      	movs	r3, #1
    8d00:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    8d04:	f242 7510 	movw	r5, #10000	; 0x2710
    8d08:	e018      	b.n	8d3c <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8d0e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8d12:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8d16:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8d1a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    8d1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8d22:	d120      	bne.n	8d66 <nrfx_clock_stop+0xb6>
    return false;
    8d24:	2300      	movs	r3, #0
    8d26:	2b00      	cmp	r3, #0
    8d28:	d042      	beq.n	8db0 <nrfx_clock_stop+0x100>
    8d2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d2e:	2b01      	cmp	r3, #1
    8d30:	d13e      	bne.n	8db0 <nrfx_clock_stop+0x100>
    8d32:	2001      	movs	r0, #1
    8d34:	f009 fc68 	bl	12608 <nrfx_busy_wait>
    8d38:	3d01      	subs	r5, #1
    8d3a:	d039      	beq.n	8db0 <nrfx_clock_stop+0x100>
    switch (domain)
    8d3c:	2c00      	cmp	r4, #0
    8d3e:	d0e4      	beq.n	8d0a <nrfx_clock_stop+0x5a>
    8d40:	2c01      	cmp	r4, #1
    8d42:	d001      	beq.n	8d48 <nrfx_clock_stop+0x98>
    8d44:	2300      	movs	r3, #0
    8d46:	e7ee      	b.n	8d26 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8d48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8d4c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    8d50:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8d54:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8d58:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    8d5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8d60:	d103      	bne.n	8d6a <nrfx_clock_stop+0xba>
    return false;
    8d62:	2300      	movs	r3, #0
    8d64:	e7df      	b.n	8d26 <nrfx_clock_stop+0x76>
                return true;
    8d66:	2301      	movs	r3, #1
    8d68:	e7dd      	b.n	8d26 <nrfx_clock_stop+0x76>
                return true;
    8d6a:	2301      	movs	r3, #1
    8d6c:	e7db      	b.n	8d26 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d72:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    8d76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8d7a:	d115      	bne.n	8da8 <nrfx_clock_stop+0xf8>
    return false;
    8d7c:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    8d7e:	b1bb      	cbz	r3, 8db0 <nrfx_clock_stop+0x100>
    8d80:	2001      	movs	r0, #1
    8d82:	f009 fc41 	bl	12608 <nrfx_busy_wait>
    8d86:	3d01      	subs	r5, #1
    8d88:	d012      	beq.n	8db0 <nrfx_clock_stop+0x100>
    switch (domain)
    8d8a:	2c00      	cmp	r4, #0
    8d8c:	d0ef      	beq.n	8d6e <nrfx_clock_stop+0xbe>
    8d8e:	2c01      	cmp	r4, #1
    8d90:	d001      	beq.n	8d96 <nrfx_clock_stop+0xe6>
    8d92:	2300      	movs	r3, #0
    8d94:	e7f3      	b.n	8d7e <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d9a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8d9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8da2:	d103      	bne.n	8dac <nrfx_clock_stop+0xfc>
    return false;
    8da4:	2300      	movs	r3, #0
    8da6:	e7ea      	b.n	8d7e <nrfx_clock_stop+0xce>
                return true;
    8da8:	2301      	movs	r3, #1
    8daa:	e7e8      	b.n	8d7e <nrfx_clock_stop+0xce>
                return true;
    8dac:	2301      	movs	r3, #1
    8dae:	e7e6      	b.n	8d7e <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8db0:	2c01      	cmp	r4, #1
    8db2:	d183      	bne.n	8cbc <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    8db4:	4b03      	ldr	r3, [pc, #12]	; (8dc4 <nrfx_clock_stop+0x114>)
    8db6:	2200      	movs	r2, #0
    8db8:	715a      	strb	r2, [r3, #5]
    8dba:	e77f      	b.n	8cbc <nrfx_clock_stop+0xc>
    8dbc:	4000000c 	.word	0x4000000c
    8dc0:	40000004 	.word	0x40000004
    8dc4:	20002704 	.word	0x20002704

00008dc8 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8dc8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8dca:	4b1b      	ldr	r3, [pc, #108]	; (8e38 <nrfx_clock_irq_handler+0x70>)
    8dcc:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8dce:	b183      	cbz	r3, 8df2 <nrfx_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8dd0:	4b19      	ldr	r3, [pc, #100]	; (8e38 <nrfx_clock_irq_handler+0x70>)
    8dd2:	2200      	movs	r2, #0
    8dd4:	601a      	str	r2, [r3, #0]
    8dd6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    8dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ddc:	2201      	movs	r2, #1
    8dde:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    8de2:	4b16      	ldr	r3, [pc, #88]	; (8e3c <nrfx_clock_irq_handler+0x74>)
    8de4:	795b      	ldrb	r3, [r3, #5]
    8de6:	b923      	cbnz	r3, 8df2 <nrfx_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    8de8:	4b14      	ldr	r3, [pc, #80]	; (8e3c <nrfx_clock_irq_handler+0x74>)
    8dea:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    8dec:	681b      	ldr	r3, [r3, #0]
    8dee:	2000      	movs	r0, #0
    8df0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8df2:	4b13      	ldr	r3, [pc, #76]	; (8e40 <nrfx_clock_irq_handler+0x78>)
    8df4:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    8df6:	b19b      	cbz	r3, 8e20 <nrfx_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8df8:	4b11      	ldr	r3, [pc, #68]	; (8e40 <nrfx_clock_irq_handler+0x78>)
    8dfa:	2200      	movs	r2, #0
    8dfc:	601a      	str	r2, [r3, #0]
    8dfe:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e04:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8e08:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    8e0c:	f012 0f03 	tst.w	r2, #3
    8e10:	d107      	bne.n	8e22 <nrfx_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8e12:	2301      	movs	r3, #1
    8e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8e18:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8e1c:	3208      	adds	r2, #8
    8e1e:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    8e20:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    8e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e26:	2202      	movs	r2, #2
    8e28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8e2c:	4b03      	ldr	r3, [pc, #12]	; (8e3c <nrfx_clock_irq_handler+0x74>)
    8e2e:	681b      	ldr	r3, [r3, #0]
    8e30:	2001      	movs	r0, #1
    8e32:	4798      	blx	r3
}
    8e34:	e7f4      	b.n	8e20 <nrfx_clock_irq_handler+0x58>
    8e36:	bf00      	nop
    8e38:	40000100 	.word	0x40000100
    8e3c:	20002704 	.word	0x20002704
    8e40:	40000104 	.word	0x40000104

00008e44 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    8e44:	4b04      	ldr	r3, [pc, #16]	; (8e58 <is_allocated_channel+0x14>)
    8e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    8e48:	2301      	movs	r3, #1
    8e4a:	4083      	lsls	r3, r0
    8e4c:	421a      	tst	r2, r3
}
    8e4e:	bf14      	ite	ne
    8e50:	2001      	movne	r0, #1
    8e52:	2000      	moveq	r0, #0
    8e54:	4770      	bx	lr
    8e56:	bf00      	nop
    8e58:	2000270c 	.word	0x2000270c

00008e5c <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    8e5c:	2301      	movs	r3, #1
    8e5e:	fa03 f000 	lsl.w	r0, r3, r0
    8e62:	4a02      	ldr	r2, [pc, #8]	; (8e6c <channel_allocated_set+0x10>)
    8e64:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    8e66:	4303      	orrs	r3, r0
    8e68:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    8e6a:	4770      	bx	lr
    8e6c:	2000270c 	.word	0x2000270c

00008e70 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    8e70:	2301      	movs	r3, #1
    8e72:	fa03 f000 	lsl.w	r0, r3, r0
    8e76:	4a03      	ldr	r2, [pc, #12]	; (8e84 <channel_allocated_clr+0x14>)
    8e78:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    8e7a:	ea23 0300 	bic.w	r3, r3, r0
    8e7e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    8e80:	4770      	bx	lr
    8e82:	bf00      	nop
    8e84:	2000270c 	.word	0x2000270c

00008e88 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    8e88:	b538      	push	{r3, r4, r5, lr}
    8e8a:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    8e8c:	f009 fbc0 	bl	12610 <is_app_channel>
    8e90:	b908      	cbnz	r0, 8e96 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    8e92:	4809      	ldr	r0, [pc, #36]	; (8eb8 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8e94:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8e96:	f04f 0320 	mov.w	r3, #32
    8e9a:	f3ef 8511 	mrs	r5, BASEPRI
    8e9e:	f383 8812 	msr	BASEPRI_MAX, r3
    8ea2:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    8ea6:	4620      	mov	r0, r4
    8ea8:	f7ff ffe2 	bl	8e70 <channel_allocated_clr>
	__asm__ volatile(
    8eac:	f385 8811 	msr	BASEPRI, r5
    8eb0:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    8eb4:	4801      	ldr	r0, [pc, #4]	; (8ebc <nrfx_gpiote_channel_free+0x34>)
}
    8eb6:	e7ed      	b.n	8e94 <nrfx_gpiote_channel_free+0xc>
    8eb8:	0bad0004 	.word	0x0bad0004
    8ebc:	0bad0000 	.word	0x0bad0000

00008ec0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    8ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ec4:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    8ec6:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    8ec8:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    8eca:	4f17      	ldr	r7, [pc, #92]	; (8f28 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    8ecc:	e013      	b.n	8ef6 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    8ece:	4620      	mov	r0, r4
    8ed0:	f7ff ffc4 	bl	8e5c <channel_allocated_set>
            *p_channel = ch_idx;
    8ed4:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    8ed8:	4f14      	ldr	r7, [pc, #80]	; (8f2c <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    8eda:	f386 8811 	msr	BASEPRI, r6
    8ede:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    8ee2:	4b12      	ldr	r3, [pc, #72]	; (8f2c <nrfx_gpiote_channel_alloc+0x6c>)
    8ee4:	429f      	cmp	r7, r3
    8ee6:	d01b      	beq.n	8f20 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    8ee8:	2301      	movs	r3, #1
    8eea:	fa03 f309 	lsl.w	r3, r3, r9
    8eee:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    8ef2:	3401      	adds	r4, #1
    8ef4:	b2e4      	uxtb	r4, r4
    8ef6:	b19d      	cbz	r5, 8f20 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    8ef8:	f04f 0320 	mov.w	r3, #32
    8efc:	f3ef 8611 	mrs	r6, BASEPRI
    8f00:	f383 8812 	msr	BASEPRI_MAX, r3
    8f04:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    8f08:	46a1      	mov	r9, r4
    8f0a:	fa25 f304 	lsr.w	r3, r5, r4
    8f0e:	f013 0f01 	tst.w	r3, #1
    8f12:	d0e2      	beq.n	8eda <nrfx_gpiote_channel_alloc+0x1a>
    8f14:	4620      	mov	r0, r4
    8f16:	f7ff ff95 	bl	8e44 <is_allocated_channel>
    8f1a:	2800      	cmp	r0, #0
    8f1c:	d1dd      	bne.n	8eda <nrfx_gpiote_channel_alloc+0x1a>
    8f1e:	e7d6      	b.n	8ece <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8f20:	4638      	mov	r0, r7
    8f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8f26:	bf00      	nop
    8f28:	0bad0002 	.word	0x0bad0002
    8f2c:	0bad0000 	.word	0x0bad0000

00008f30 <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    8f30:	4b02      	ldr	r3, [pc, #8]	; (8f3c <nvmc_readonly_mode_set+0xc>)
    8f32:	2200      	movs	r2, #0
    8f34:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    8f38:	4770      	bx	lr
    8f3a:	bf00      	nop
    8f3c:	4001e000 	.word	0x4001e000

00008f40 <nvmc_write_mode_set>:
    8f40:	4b02      	ldr	r3, [pc, #8]	; (8f4c <nvmc_write_mode_set+0xc>)
    8f42:	2201      	movs	r2, #1
    8f44:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    8f48:	4770      	bx	lr
    8f4a:	bf00      	nop
    8f4c:	4001e000 	.word	0x4001e000

00008f50 <nvmc_erase_mode_set>:
    8f50:	4b02      	ldr	r3, [pc, #8]	; (8f5c <nvmc_erase_mode_set+0xc>)
    8f52:	2202      	movs	r2, #2
    8f54:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    8f58:	4770      	bx	lr
    8f5a:	bf00      	nop
    8f5c:	4001e000 	.word	0x4001e000

00008f60 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    8f60:	4b04      	ldr	r3, [pc, #16]	; (8f74 <nvmc_word_write+0x14>)
    8f62:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    8f66:	f013 0f01 	tst.w	r3, #1
    8f6a:	d0f9      	beq.n	8f60 <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    8f6c:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    8f6e:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    8f72:	4770      	bx	lr
    8f74:	4001e000 	.word	0x4001e000

00008f78 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    8f78:	b510      	push	{r4, lr}
    8f7a:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    8f7c:	f009 fb61 	bl	12642 <is_page_aligned_check>
    8f80:	b908      	cbnz	r0, 8f86 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    8f82:	4808      	ldr	r0, [pc, #32]	; (8fa4 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    8f84:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    8f86:	f7ff ffe3 	bl	8f50 <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    8f8a:	4b07      	ldr	r3, [pc, #28]	; (8fa8 <nrfx_nvmc_page_erase+0x30>)
    8f8c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    8f90:	4b05      	ldr	r3, [pc, #20]	; (8fa8 <nrfx_nvmc_page_erase+0x30>)
    8f92:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    8f96:	f013 0f01 	tst.w	r3, #1
    8f9a:	d0f9      	beq.n	8f90 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    8f9c:	f7ff ffc8 	bl	8f30 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    8fa0:	4802      	ldr	r0, [pc, #8]	; (8fac <nrfx_nvmc_page_erase+0x34>)
    8fa2:	e7ef      	b.n	8f84 <nrfx_nvmc_page_erase+0xc>
    8fa4:	0bad000a 	.word	0x0bad000a
    8fa8:	4001e000 	.word	0x4001e000
    8fac:	0bad0000 	.word	0x0bad0000

00008fb0 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8fb0:	4b06      	ldr	r3, [pc, #24]	; (8fcc <nrf52_errata_197+0x1c>)
    8fb2:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8fb4:	4a06      	ldr	r2, [pc, #24]	; (8fd0 <nrf52_errata_197+0x20>)
    8fb6:	6812      	ldr	r2, [r2, #0]
            if (var1 == 0x08)
    8fb8:	2b08      	cmp	r3, #8
    8fba:	d001      	beq.n	8fc0 <nrf52_errata_197+0x10>
        return false;
    8fbc:	2000      	movs	r0, #0
    8fbe:	4770      	bx	lr
                switch(var2)
    8fc0:	2a02      	cmp	r2, #2
    8fc2:	d001      	beq.n	8fc8 <nrf52_errata_197+0x18>
                        return false;
    8fc4:	2000      	movs	r0, #0
    8fc6:	4770      	bx	lr
                        return true;
    8fc8:	2001      	movs	r0, #1
}
    8fca:	4770      	bx	lr
    8fcc:	10000130 	.word	0x10000130
    8fd0:	10000134 	.word	0x10000134

00008fd4 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8fd4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8fd6:	4b18      	ldr	r3, [pc, #96]	; (9038 <nrfx_power_init+0x64>)
    8fd8:	781b      	ldrb	r3, [r3, #0]
    8fda:	bb5b      	cbnz	r3, 9034 <nrfx_power_init+0x60>
    8fdc:	4604      	mov	r4, r0
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    8fde:	7803      	ldrb	r3, [r0, #0]
    8fe0:	f3c3 0540 	ubfx	r5, r3, #1, #1
    if (enable && nrf52_errata_197())
    8fe4:	f013 0f02 	tst.w	r3, #2
    8fe8:	d005      	beq.n	8ff6 <nrfx_power_init+0x22>
    8fea:	f7ff ffe1 	bl	8fb0 <nrf52_errata_197>
    8fee:	b110      	cbz	r0, 8ff6 <nrfx_power_init+0x22>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    8ff0:	4b12      	ldr	r3, [pc, #72]	; (903c <nrfx_power_init+0x68>)
    8ff2:	2201      	movs	r2, #1
    8ff4:	601a      	str	r2, [r3, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    8ff6:	b1b5      	cbz	r5, 9026 <nrfx_power_init+0x52>
    8ff8:	2201      	movs	r2, #1
    8ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ffe:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    9002:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    9004:	f013 0f01 	tst.w	r3, #1
    9008:	d00f      	beq.n	902a <nrfx_power_init+0x56>
    900a:	2201      	movs	r2, #1
    900c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9010:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9014:	2000      	movs	r0, #0
    9016:	f7fb f98f 	bl	4338 <arch_irq_is_enabled>
    901a:	b140      	cbz	r0, 902e <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    901c:	4b06      	ldr	r3, [pc, #24]	; (9038 <nrfx_power_init+0x64>)
    901e:	2201      	movs	r2, #1
    9020:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    9022:	4807      	ldr	r0, [pc, #28]	; (9040 <nrfx_power_init+0x6c>)
}
    9024:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    9026:	2200      	movs	r2, #0
    9028:	e7e7      	b.n	8ffa <nrfx_power_init+0x26>
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    902a:	2200      	movs	r2, #0
    902c:	e7ee      	b.n	900c <nrfx_power_init+0x38>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    902e:	f7fb f95f 	bl	42f0 <arch_irq_enable>
    9032:	e7f3      	b.n	901c <nrfx_power_init+0x48>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    9034:	4803      	ldr	r0, [pc, #12]	; (9044 <nrfx_power_init+0x70>)
    9036:	e7f5      	b.n	9024 <nrfx_power_init+0x50>
    9038:	20002ede 	.word	0x20002ede
    903c:	40000638 	.word	0x40000638
    9040:	0bad0000 	.word	0x0bad0000
    9044:	0bad000c 	.word	0x0bad000c

00009048 <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
    9048:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
    904a:	f009 fb25 	bl	12698 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
    904e:	4b02      	ldr	r3, [pc, #8]	; (9058 <nrfx_power_usbevt_uninit+0x10>)
    9050:	2200      	movs	r2, #0
    9052:	601a      	str	r2, [r3, #0]
}
    9054:	bd08      	pop	{r3, pc}
    9056:	bf00      	nop
    9058:	20002774 	.word	0x20002774

0000905c <nrfx_power_usbevt_init>:
{
    905c:	b510      	push	{r4, lr}
    905e:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
    9060:	f7ff fff2 	bl	9048 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    9064:	6823      	ldr	r3, [r4, #0]
    9066:	b10b      	cbz	r3, 906c <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
    9068:	4a01      	ldr	r2, [pc, #4]	; (9070 <nrfx_power_usbevt_init+0x14>)
    906a:	6013      	str	r3, [r2, #0]
}
    906c:	bd10      	pop	{r4, pc}
    906e:	bf00      	nop
    9070:	20002774 	.word	0x20002774

00009074 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    9074:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    9076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    907a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    907e:	f014 0f04 	tst.w	r4, #4
    9082:	d00b      	beq.n	909c <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9084:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9088:	681b      	ldr	r3, [r3, #0]
    if (ret)
    908a:	b11b      	cbz	r3, 9094 <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    908c:	4a29      	ldr	r2, [pc, #164]	; (9134 <nrfx_power_irq_handler+0xc0>)
    908e:	2100      	movs	r1, #0
    9090:	6011      	str	r1, [r2, #0]
    9092:	6812      	ldr	r2, [r2, #0]
    9094:	b113      	cbz	r3, 909c <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    9096:	4b28      	ldr	r3, [pc, #160]	; (9138 <nrfx_power_irq_handler+0xc4>)
    9098:	681b      	ldr	r3, [r3, #0]
    909a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    909c:	f014 0f20 	tst.w	r4, #32
    90a0:	d00b      	beq.n	90ba <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    90a2:	4b26      	ldr	r3, [pc, #152]	; (913c <nrfx_power_irq_handler+0xc8>)
    90a4:	681b      	ldr	r3, [r3, #0]
    if (ret)
    90a6:	b11b      	cbz	r3, 90b0 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    90a8:	4a24      	ldr	r2, [pc, #144]	; (913c <nrfx_power_irq_handler+0xc8>)
    90aa:	2100      	movs	r1, #0
    90ac:	6011      	str	r1, [r2, #0]
    90ae:	6812      	ldr	r2, [r2, #0]
    90b0:	b11b      	cbz	r3, 90ba <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    90b2:	4b23      	ldr	r3, [pc, #140]	; (9140 <nrfx_power_irq_handler+0xcc>)
    90b4:	681b      	ldr	r3, [r3, #0]
    90b6:	2000      	movs	r0, #0
    90b8:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    90ba:	f014 0f40 	tst.w	r4, #64	; 0x40
    90be:	d00b      	beq.n	90d8 <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    90c0:	4b20      	ldr	r3, [pc, #128]	; (9144 <nrfx_power_irq_handler+0xd0>)
    90c2:	681b      	ldr	r3, [r3, #0]
    if (ret)
    90c4:	b11b      	cbz	r3, 90ce <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    90c6:	4a1f      	ldr	r2, [pc, #124]	; (9144 <nrfx_power_irq_handler+0xd0>)
    90c8:	2100      	movs	r1, #0
    90ca:	6011      	str	r1, [r2, #0]
    90cc:	6812      	ldr	r2, [r2, #0]
    90ce:	b11b      	cbz	r3, 90d8 <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    90d0:	4b1b      	ldr	r3, [pc, #108]	; (9140 <nrfx_power_irq_handler+0xcc>)
    90d2:	681b      	ldr	r3, [r3, #0]
    90d4:	2001      	movs	r0, #1
    90d6:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    90d8:	f014 0f80 	tst.w	r4, #128	; 0x80
    90dc:	d00b      	beq.n	90f6 <nrfx_power_irq_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    90de:	4b1a      	ldr	r3, [pc, #104]	; (9148 <nrfx_power_irq_handler+0xd4>)
    90e0:	681b      	ldr	r3, [r3, #0]
    if (ret)
    90e2:	b11b      	cbz	r3, 90ec <nrfx_power_irq_handler+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    90e4:	4a18      	ldr	r2, [pc, #96]	; (9148 <nrfx_power_irq_handler+0xd4>)
    90e6:	2100      	movs	r1, #0
    90e8:	6011      	str	r1, [r2, #0]
    90ea:	6812      	ldr	r2, [r2, #0]
    90ec:	b11b      	cbz	r3, 90f6 <nrfx_power_irq_handler+0x82>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    90ee:	4b17      	ldr	r3, [pc, #92]	; (914c <nrfx_power_irq_handler+0xd8>)
    90f0:	681b      	ldr	r3, [r3, #0]
    90f2:	2000      	movs	r0, #0
    90f4:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    90f6:	f414 7f80 	tst.w	r4, #256	; 0x100
    90fa:	d00b      	beq.n	9114 <nrfx_power_irq_handler+0xa0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    90fc:	4b14      	ldr	r3, [pc, #80]	; (9150 <nrfx_power_irq_handler+0xdc>)
    90fe:	681b      	ldr	r3, [r3, #0]
    if (ret)
    9100:	b11b      	cbz	r3, 910a <nrfx_power_irq_handler+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9102:	4a13      	ldr	r2, [pc, #76]	; (9150 <nrfx_power_irq_handler+0xdc>)
    9104:	2100      	movs	r1, #0
    9106:	6011      	str	r1, [r2, #0]
    9108:	6812      	ldr	r2, [r2, #0]
    910a:	b11b      	cbz	r3, 9114 <nrfx_power_irq_handler+0xa0>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    910c:	4b0f      	ldr	r3, [pc, #60]	; (914c <nrfx_power_irq_handler+0xd8>)
    910e:	681b      	ldr	r3, [r3, #0]
    9110:	2001      	movs	r0, #1
    9112:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    9114:	f414 7f00 	tst.w	r4, #512	; 0x200
    9118:	d00b      	beq.n	9132 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    911a:	4b0e      	ldr	r3, [pc, #56]	; (9154 <nrfx_power_irq_handler+0xe0>)
    911c:	681b      	ldr	r3, [r3, #0]
    if (ret)
    911e:	b11b      	cbz	r3, 9128 <nrfx_power_irq_handler+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9120:	4a0c      	ldr	r2, [pc, #48]	; (9154 <nrfx_power_irq_handler+0xe0>)
    9122:	2100      	movs	r1, #0
    9124:	6011      	str	r1, [r2, #0]
    9126:	6812      	ldr	r2, [r2, #0]
    9128:	b11b      	cbz	r3, 9132 <nrfx_power_irq_handler+0xbe>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    912a:	4b08      	ldr	r3, [pc, #32]	; (914c <nrfx_power_irq_handler+0xd8>)
    912c:	681b      	ldr	r3, [r3, #0]
    912e:	2002      	movs	r0, #2
    9130:	4798      	blx	r3
    }
#endif
}
    9132:	bd10      	pop	{r4, pc}
    9134:	40000108 	.word	0x40000108
    9138:	2000276c 	.word	0x2000276c
    913c:	40000114 	.word	0x40000114
    9140:	20002770 	.word	0x20002770
    9144:	40000118 	.word	0x40000118
    9148:	4000011c 	.word	0x4000011c
    914c:	20002774 	.word	0x20002774
    9150:	40000120 	.word	0x40000120
    9154:	40000124 	.word	0x40000124

00009158 <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    9158:	2301      	movs	r3, #1
    915a:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    915c:	4a03      	ldr	r2, [pc, #12]	; (916c <is_allocated_channel+0x14>)
    915e:	6812      	ldr	r2, [r2, #0]
    9160:	4213      	tst	r3, r2
}
    9162:	bf14      	ite	ne
    9164:	2001      	movne	r0, #1
    9166:	2000      	moveq	r0, #0
    9168:	4770      	bx	lr
    916a:	bf00      	nop
    916c:	20002778 	.word	0x20002778

00009170 <channel_allocated_set>:
    9170:	2301      	movs	r3, #1
    9172:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    9176:	4a02      	ldr	r2, [pc, #8]	; (9180 <channel_allocated_set+0x10>)
    9178:	6813      	ldr	r3, [r2, #0]
    917a:	4303      	orrs	r3, r0
    917c:	6013      	str	r3, [r2, #0]
}
    917e:	4770      	bx	lr
    9180:	20002778 	.word	0x20002778

00009184 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    9184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9188:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    918a:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    918c:	4e15      	ldr	r6, [pc, #84]	; (91e4 <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    918e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 91ec <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    9192:	e011      	b.n	91b8 <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    9194:	4620      	mov	r0, r4
    9196:	f7ff ffeb 	bl	9170 <channel_allocated_set>
            *p_channel = channel;
    919a:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    919e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 91e8 <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    91a2:	f387 8811 	msr	BASEPRI, r7
    91a6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    91aa:	4b0f      	ldr	r3, [pc, #60]	; (91e8 <nrfx_ppi_channel_alloc+0x64>)
    91ac:	4598      	cmp	r8, r3
    91ae:	d016      	beq.n	91de <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    91b0:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    91b4:	3401      	adds	r4, #1
    91b6:	b2e4      	uxtb	r4, r4
    91b8:	b18e      	cbz	r6, 91de <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    91ba:	f04f 0320 	mov.w	r3, #32
    91be:	f3ef 8711 	mrs	r7, BASEPRI
    91c2:	f383 8812 	msr	BASEPRI_MAX, r3
    91c6:	f3bf 8f6f 	isb	sy
    91ca:	2501      	movs	r5, #1
    91cc:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    91ce:	4235      	tst	r5, r6
    91d0:	d0e7      	beq.n	91a2 <nrfx_ppi_channel_alloc+0x1e>
    91d2:	4620      	mov	r0, r4
    91d4:	f7ff ffc0 	bl	9158 <is_allocated_channel>
    91d8:	2800      	cmp	r0, #0
    91da:	d1e2      	bne.n	91a2 <nrfx_ppi_channel_alloc+0x1e>
    91dc:	e7da      	b.n	9194 <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    91de:	4640      	mov	r0, r8
    91e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    91e4:	000fffff 	.word	0x000fffff
    91e8:	0bad0000 	.word	0x0bad0000
    91ec:	0bad0002 	.word	0x0bad0002

000091f0 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    91f0:	4b03      	ldr	r3, [pc, #12]	; (9200 <nrf52_errata_166+0x10>)
    91f2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    91f4:	2b08      	cmp	r3, #8
    91f6:	d001      	beq.n	91fc <nrf52_errata_166+0xc>
        return false;
    91f8:	2000      	movs	r0, #0
    91fa:	4770      	bx	lr
                        return true;
    91fc:	2001      	movs	r0, #1
}
    91fe:	4770      	bx	lr
    9200:	10000130 	.word	0x10000130

00009204 <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9204:	4b03      	ldr	r3, [pc, #12]	; (9214 <nrf52_errata_171+0x10>)
    9206:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    9208:	2b08      	cmp	r3, #8
    920a:	d001      	beq.n	9210 <nrf52_errata_171+0xc>
        return false;
    920c:	2000      	movs	r0, #0
    920e:	4770      	bx	lr
                        return true;
    9210:	2001      	movs	r0, #1
}
    9212:	4770      	bx	lr
    9214:	10000130 	.word	0x10000130

00009218 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9218:	4b08      	ldr	r3, [pc, #32]	; (923c <nrf52_errata_187+0x24>)
    921a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    921c:	3304      	adds	r3, #4
    921e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    9220:	2a08      	cmp	r2, #8
    9222:	d001      	beq.n	9228 <nrf52_errata_187+0x10>
        return false;
    9224:	2000      	movs	r0, #0
    9226:	4770      	bx	lr
                switch(var2)
    9228:	2b00      	cmp	r3, #0
    922a:	d804      	bhi.n	9236 <nrf52_errata_187+0x1e>
    922c:	e8df f003 	tbb	[pc, r3]
    9230:	01          	.byte	0x01
    9231:	00          	.byte	0x00
            if (var1 == 0x08)
    9232:	2000      	movs	r0, #0
    9234:	4770      	bx	lr
                        return true;
    9236:	2001      	movs	r0, #1
}
    9238:	4770      	bx	lr
    923a:	bf00      	nop
    923c:	10000130 	.word	0x10000130

00009240 <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9240:	4b03      	ldr	r3, [pc, #12]	; (9250 <nrf52_errata_199+0x10>)
    9242:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    9244:	2b08      	cmp	r3, #8
    9246:	d001      	beq.n	924c <nrf52_errata_199+0xc>
        return false;
    9248:	2000      	movs	r0, #0
    924a:	4770      	bx	lr
                        return true;
    924c:	2001      	movs	r0, #1
}
    924e:	4770      	bx	lr
    9250:	10000130 	.word	0x10000130

00009254 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    9254:	b500      	push	{lr}
    9256:	b083      	sub	sp, #12
    m_bus_suspend = false;
    9258:	2300      	movs	r3, #0
    925a:	4a09      	ldr	r2, [pc, #36]	; (9280 <ev_usbreset_handler+0x2c>)
    925c:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    925e:	4a09      	ldr	r2, [pc, #36]	; (9284 <ev_usbreset_handler+0x30>)
    9260:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    9262:	f8ad 3005 	strh.w	r3, [sp, #5]
    9266:	f88d 3007 	strb.w	r3, [sp, #7]
    926a:	2301      	movs	r3, #1
    926c:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    9270:	4b05      	ldr	r3, [pc, #20]	; (9288 <ev_usbreset_handler+0x34>)
    9272:	681b      	ldr	r3, [r3, #0]
    9274:	a801      	add	r0, sp, #4
    9276:	4798      	blx	r3
}
    9278:	b003      	add	sp, #12
    927a:	f85d fb04 	ldr.w	pc, [sp], #4
    927e:	bf00      	nop
    9280:	20002edf 	.word	0x20002edf
    9284:	20002ee2 	.word	0x20002ee2
    9288:	2000297c 	.word	0x2000297c

0000928c <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    928c:	b500      	push	{lr}
    928e:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    9290:	2300      	movs	r3, #0
    9292:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    9296:	4b12      	ldr	r3, [pc, #72]	; (92e0 <ev_sof_handler+0x54>)
    9298:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    929c:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    92a0:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    92a4:	b15b      	cbz	r3, 92be <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    92a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    92aa:	d115      	bne.n	92d8 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    92ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    92b0:	d002      	beq.n	92b8 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    92b2:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    92b6:	e004      	b.n	92c2 <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    92b8:	f44f 7180 	mov.w	r1, #256	; 0x100
    92bc:	e001      	b.n	92c2 <ev_sof_handler+0x36>
    92be:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
    92c2:	4a08      	ldr	r2, [pc, #32]	; (92e4 <ev_sof_handler+0x58>)
    92c4:	6813      	ldr	r3, [r2, #0]
    92c6:	430b      	orrs	r3, r1
    92c8:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    92ca:	4b07      	ldr	r3, [pc, #28]	; (92e8 <ev_sof_handler+0x5c>)
    92cc:	681b      	ldr	r3, [r3, #0]
    92ce:	a801      	add	r0, sp, #4
    92d0:	4798      	blx	r3
}
    92d2:	b003      	add	sp, #12
    92d4:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    92d8:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    92dc:	e7f1      	b.n	92c2 <ev_sof_handler+0x36>
    92de:	bf00      	nop
    92e0:	40027000 	.word	0x40027000
    92e4:	20002858 	.word	0x20002858
    92e8:	2000297c 	.word	0x2000297c

000092ec <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    92ec:	b510      	push	{r4, lr}
    92ee:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    92f0:	4b23      	ldr	r3, [pc, #140]	; (9380 <ev_usbevent_handler+0x94>)
    92f2:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    92f6:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    92fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    92fe:	f414 7f80 	tst.w	r4, #256	; 0x100
    9302:	d00e      	beq.n	9322 <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    9304:	4b1f      	ldr	r3, [pc, #124]	; (9384 <ev_usbevent_handler+0x98>)
    9306:	2201      	movs	r2, #1
    9308:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    930a:	2300      	movs	r3, #0
    930c:	f8ad 3005 	strh.w	r3, [sp, #5]
    9310:	f88d 3007 	strb.w	r3, [sp, #7]
    9314:	2302      	movs	r3, #2
    9316:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    931a:	4b1b      	ldr	r3, [pc, #108]	; (9388 <ev_usbevent_handler+0x9c>)
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	a801      	add	r0, sp, #4
    9320:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9322:	f414 7f00 	tst.w	r4, #512	; 0x200
    9326:	d00d      	beq.n	9344 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    9328:	2300      	movs	r3, #0
    932a:	4a16      	ldr	r2, [pc, #88]	; (9384 <ev_usbevent_handler+0x98>)
    932c:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    932e:	f8ad 3005 	strh.w	r3, [sp, #5]
    9332:	f88d 3007 	strb.w	r3, [sp, #7]
    9336:	2303      	movs	r3, #3
    9338:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    933c:	4b12      	ldr	r3, [pc, #72]	; (9388 <ev_usbevent_handler+0x9c>)
    933e:	681b      	ldr	r3, [r3, #0]
    9340:	a801      	add	r0, sp, #4
    9342:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    9344:	f414 6f80 	tst.w	r4, #1024	; 0x400
    9348:	d017      	beq.n	937a <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    934a:	4b0e      	ldr	r3, [pc, #56]	; (9384 <ev_usbevent_handler+0x98>)
    934c:	781b      	ldrb	r3, [r3, #0]
    934e:	b1a3      	cbz	r3, 937a <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    9350:	2300      	movs	r3, #0
    9352:	4a0c      	ldr	r2, [pc, #48]	; (9384 <ev_usbevent_handler+0x98>)
    9354:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    9356:	2101      	movs	r1, #1
    9358:	4a09      	ldr	r2, [pc, #36]	; (9380 <ev_usbevent_handler+0x94>)
    935a:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    935e:	3258      	adds	r2, #88	; 0x58
    9360:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9362:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    9364:	f8ad 3005 	strh.w	r3, [sp, #5]
    9368:	f88d 3007 	strb.w	r3, [sp, #7]
    936c:	2304      	movs	r3, #4
    936e:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    9372:	4b05      	ldr	r3, [pc, #20]	; (9388 <ev_usbevent_handler+0x9c>)
    9374:	681b      	ldr	r3, [r3, #0]
    9376:	a801      	add	r0, sp, #4
    9378:	4798      	blx	r3
        }
    }
}
    937a:	b002      	add	sp, #8
    937c:	bd10      	pop	{r4, pc}
    937e:	bf00      	nop
    9380:	40027000 	.word	0x40027000
    9384:	20002edf 	.word	0x20002edf
    9388:	2000297c 	.word	0x2000297c

0000938c <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    938c:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    938e:	f7ff ff43 	bl	9218 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    9392:	b1b8      	cbz	r0, 93c4 <usbd_enable+0x38>
    9394:	f04f 0220 	mov.w	r2, #32
    9398:	f3ef 8311 	mrs	r3, BASEPRI
    939c:	f382 8812 	msr	BASEPRI_MAX, r2
    93a0:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    93a4:	4a41      	ldr	r2, [pc, #260]	; (94ac <usbd_enable+0x120>)
    93a6:	6812      	ldr	r2, [r2, #0]
    93a8:	2a00      	cmp	r2, #0
    93aa:	d16f      	bne.n	948c <usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    93ac:	4a3f      	ldr	r2, [pc, #252]	; (94ac <usbd_enable+0x120>)
    93ae:	f249 3175 	movw	r1, #37749	; 0x9375
    93b2:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    93b4:	483e      	ldr	r0, [pc, #248]	; (94b0 <usbd_enable+0x124>)
    93b6:	2403      	movs	r4, #3
    93b8:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    93ba:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    93bc:	f383 8811 	msr	BASEPRI, r3
    93c0:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    93c4:	f7ff ff1e 	bl	9204 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    93c8:	b1b8      	cbz	r0, 93fa <usbd_enable+0x6e>
	__asm__ volatile(
    93ca:	f04f 0220 	mov.w	r2, #32
    93ce:	f3ef 8311 	mrs	r3, BASEPRI
    93d2:	f382 8812 	msr	BASEPRI_MAX, r2
    93d6:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    93da:	4a34      	ldr	r2, [pc, #208]	; (94ac <usbd_enable+0x120>)
    93dc:	6812      	ldr	r2, [r2, #0]
    93de:	2a00      	cmp	r2, #0
    93e0:	d158      	bne.n	9494 <usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    93e2:	4a32      	ldr	r2, [pc, #200]	; (94ac <usbd_enable+0x120>)
    93e4:	f249 3175 	movw	r1, #37749	; 0x9375
    93e8:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    93ea:	4832      	ldr	r0, [pc, #200]	; (94b4 <usbd_enable+0x128>)
    93ec:	24c0      	movs	r4, #192	; 0xc0
    93ee:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    93f0:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    93f2:	f383 8811 	msr	BASEPRI, r3
    93f6:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    93fa:	4b2f      	ldr	r3, [pc, #188]	; (94b8 <usbd_enable+0x12c>)
    93fc:	2201      	movs	r2, #1
    93fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9402:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    9406:	4b2c      	ldr	r3, [pc, #176]	; (94b8 <usbd_enable+0x12c>)
    9408:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    940c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    9410:	d0f9      	beq.n	9406 <usbd_enable+0x7a>
    p_reg->EVENTCAUSE = flags;
    9412:	4b29      	ldr	r3, [pc, #164]	; (94b8 <usbd_enable+0x12c>)
    9414:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9418:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    941c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    9420:	f7ff fef0 	bl	9204 <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    9424:	b1b8      	cbz	r0, 9456 <usbd_enable+0xca>
	__asm__ volatile(
    9426:	f04f 0220 	mov.w	r2, #32
    942a:	f3ef 8311 	mrs	r3, BASEPRI
    942e:	f382 8812 	msr	BASEPRI_MAX, r2
    9432:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9436:	4a1d      	ldr	r2, [pc, #116]	; (94ac <usbd_enable+0x120>)
    9438:	6812      	ldr	r2, [r2, #0]
    943a:	2a00      	cmp	r2, #0
    943c:	d12e      	bne.n	949c <usbd_enable+0x110>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    943e:	4a1b      	ldr	r2, [pc, #108]	; (94ac <usbd_enable+0x120>)
    9440:	f249 3175 	movw	r1, #37749	; 0x9375
    9444:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9446:	481b      	ldr	r0, [pc, #108]	; (94b4 <usbd_enable+0x128>)
    9448:	2400      	movs	r4, #0
    944a:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    944c:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    944e:	f383 8811 	msr	BASEPRI, r3
    9452:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9456:	f7ff fedf 	bl	9218 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    945a:	b1b0      	cbz	r0, 948a <usbd_enable+0xfe>
	__asm__ volatile(
    945c:	f04f 0220 	mov.w	r2, #32
    9460:	f3ef 8311 	mrs	r3, BASEPRI
    9464:	f382 8812 	msr	BASEPRI_MAX, r2
    9468:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    946c:	4a0f      	ldr	r2, [pc, #60]	; (94ac <usbd_enable+0x120>)
    946e:	6812      	ldr	r2, [r2, #0]
    9470:	b9c2      	cbnz	r2, 94a4 <usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9472:	4a0e      	ldr	r2, [pc, #56]	; (94ac <usbd_enable+0x120>)
    9474:	f249 3175 	movw	r1, #37749	; 0x9375
    9478:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    947a:	480d      	ldr	r0, [pc, #52]	; (94b0 <usbd_enable+0x124>)
    947c:	2400      	movs	r4, #0
    947e:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9480:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9482:	f383 8811 	msr	BASEPRI, r3
    9486:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
    948a:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    948c:	4a08      	ldr	r2, [pc, #32]	; (94b0 <usbd_enable+0x124>)
    948e:	2103      	movs	r1, #3
    9490:	6011      	str	r1, [r2, #0]
    9492:	e793      	b.n	93bc <usbd_enable+0x30>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9494:	4a07      	ldr	r2, [pc, #28]	; (94b4 <usbd_enable+0x128>)
    9496:	21c0      	movs	r1, #192	; 0xc0
    9498:	6011      	str	r1, [r2, #0]
    949a:	e7aa      	b.n	93f2 <usbd_enable+0x66>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    949c:	4a05      	ldr	r2, [pc, #20]	; (94b4 <usbd_enable+0x128>)
    949e:	2100      	movs	r1, #0
    94a0:	6011      	str	r1, [r2, #0]
    94a2:	e7d4      	b.n	944e <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    94a4:	4a02      	ldr	r2, [pc, #8]	; (94b0 <usbd_enable+0x124>)
    94a6:	2100      	movs	r1, #0
    94a8:	6011      	str	r1, [r2, #0]
    94aa:	e7ea      	b.n	9482 <usbd_enable+0xf6>
    94ac:	4006ec00 	.word	0x4006ec00
    94b0:	4006ed14 	.word	0x4006ed14
    94b4:	4006ec14 	.word	0x4006ec14
    94b8:	40027000 	.word	0x40027000

000094bc <usbd_ep_data_handler>:
{
    94bc:	b530      	push	{r4, r5, lr}
    94be:	b083      	sub	sp, #12
    94c0:	4604      	mov	r4, r0
    94c2:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
    94c4:	2301      	movs	r3, #1
    94c6:	fa03 f201 	lsl.w	r2, r3, r1
    94ca:	495c      	ldr	r1, [pc, #368]	; (963c <usbd_ep_data_handler+0x180>)
    94cc:	680b      	ldr	r3, [r1, #0]
    94ce:	4313      	orrs	r3, r2
    94d0:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    94d2:	f010 0f80 	tst.w	r0, #128	; 0x80
    94d6:	d114      	bne.n	9502 <usbd_ep_data_handler+0x46>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    94d8:	4b59      	ldr	r3, [pc, #356]	; (9640 <usbd_ep_data_handler+0x184>)
    94da:	6819      	ldr	r1, [r3, #0]
    94dc:	fa21 f505 	lsr.w	r5, r1, r5
    94e0:	f015 0f01 	tst.w	r5, #1
    94e4:	d10b      	bne.n	94fe <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    94e6:	2306      	movs	r3, #6
    94e8:	f88d 3004 	strb.w	r3, [sp, #4]
    94ec:	f88d 0006 	strb.w	r0, [sp, #6]
    94f0:	2301      	movs	r3, #1
    94f2:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    94f6:	4b53      	ldr	r3, [pc, #332]	; (9644 <usbd_ep_data_handler+0x188>)
    94f8:	681b      	ldr	r3, [r3, #0]
    94fa:	a801      	add	r0, sp, #4
    94fc:	4798      	blx	r3
}
    94fe:	b003      	add	sp, #12
    9500:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9502:	f000 030f 	and.w	r3, r0, #15
    9506:	4a50      	ldr	r2, [pc, #320]	; (9648 <usbd_ep_data_handler+0x18c>)
    9508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    950c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9510:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9514:	681a      	ldr	r2, [r3, #0]
    if (ret)
    9516:	b112      	cbz	r2, 951e <usbd_ep_data_handler+0x62>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9518:	2100      	movs	r1, #0
    951a:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    951c:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
    951e:	2a00      	cmp	r2, #0
    9520:	d047      	beq.n	95b2 <usbd_ep_data_handler+0xf6>
            if (ep != NRFX_USBD_EPIN0)
    9522:	2c80      	cmp	r4, #128	; 0x80
    9524:	d05b      	beq.n	95de <usbd_ep_data_handler+0x122>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    9526:	f7ff fe8b 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    952a:	b110      	cbz	r0, 9532 <usbd_ep_data_handler+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    952c:	4b47      	ldr	r3, [pc, #284]	; (964c <usbd_ep_data_handler+0x190>)
    952e:	2200      	movs	r2, #0
    9530:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9532:	4b47      	ldr	r3, [pc, #284]	; (9650 <usbd_ep_data_handler+0x194>)
    9534:	2200      	movs	r2, #0
    9536:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9538:	b263      	sxtb	r3, r4
    953a:	4293      	cmp	r3, r2
    953c:	db21      	blt.n	9582 <usbd_ep_data_handler+0xc6>
    953e:	4945      	ldr	r1, [pc, #276]	; (9654 <usbd_ep_data_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    9540:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9544:	0110      	lsls	r0, r2, #4
    9546:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    954a:	7b92      	ldrb	r2, [r2, #14]
    954c:	2a03      	cmp	r2, #3
    954e:	d01a      	beq.n	9586 <usbd_ep_data_handler+0xca>
    else if (p_state->handler.feeder == NULL)
    9550:	580a      	ldr	r2, [r1, r0]
    9552:	bb72      	cbnz	r2, 95b2 <usbd_ep_data_handler+0xf6>
    return NRFX_USBD_EP_BITPOS(ep);
    9554:	2b00      	cmp	r3, #0
    9556:	db00      	blt.n	955a <usbd_ep_data_handler+0x9e>
    9558:	2210      	movs	r2, #16
    955a:	f003 030f 	and.w	r3, r3, #15
    955e:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9560:	2201      	movs	r2, #1
    9562:	fa02 f303 	lsl.w	r3, r2, r3
    9566:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9568:	4a35      	ldr	r2, [pc, #212]	; (9640 <usbd_ep_data_handler+0x184>)
    956a:	f3bf 8f5b 	dmb	ish
    956e:	e852 1f00 	ldrex	r1, [r2]
    9572:	4019      	ands	r1, r3
    9574:	e842 1000 	strex	r0, r1, [r2]
    9578:	2800      	cmp	r0, #0
    957a:	d1f8      	bne.n	956e <usbd_ep_data_handler+0xb2>
    957c:	f3bf 8f5b 	dmb	ish
}
    9580:	e017      	b.n	95b2 <usbd_ep_data_handler+0xf6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9582:	4935      	ldr	r1, [pc, #212]	; (9658 <usbd_ep_data_handler+0x19c>)
    9584:	e7dc      	b.n	9540 <usbd_ep_data_handler+0x84>
    return NRFX_USBD_EP_BITPOS(ep);
    9586:	2b00      	cmp	r3, #0
    9588:	db27      	blt.n	95da <usbd_ep_data_handler+0x11e>
    958a:	2210      	movs	r2, #16
    958c:	f003 030f 	and.w	r3, r3, #15
    9590:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9592:	2201      	movs	r2, #1
    9594:	fa02 f303 	lsl.w	r3, r2, r3
    9598:	43db      	mvns	r3, r3
    959a:	4a29      	ldr	r2, [pc, #164]	; (9640 <usbd_ep_data_handler+0x184>)
    959c:	f3bf 8f5b 	dmb	ish
    95a0:	e852 1f00 	ldrex	r1, [r2]
    95a4:	4019      	ands	r1, r3
    95a6:	e842 1000 	strex	r0, r1, [r2]
    95aa:	2800      	cmp	r0, #0
    95ac:	d1f8      	bne.n	95a0 <usbd_ep_data_handler+0xe4>
    95ae:	f3bf 8f5b 	dmb	ish
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    95b2:	4b23      	ldr	r3, [pc, #140]	; (9640 <usbd_ep_data_handler+0x184>)
    95b4:	6819      	ldr	r1, [r3, #0]
    95b6:	fa21 f505 	lsr.w	r5, r1, r5
    95ba:	f015 0f01 	tst.w	r5, #1
    95be:	d19e      	bne.n	94fe <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    95c0:	2306      	movs	r3, #6
    95c2:	f88d 3004 	strb.w	r3, [sp, #4]
    95c6:	f88d 4006 	strb.w	r4, [sp, #6]
    95ca:	2300      	movs	r3, #0
    95cc:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    95d0:	4b1c      	ldr	r3, [pc, #112]	; (9644 <usbd_ep_data_handler+0x188>)
    95d2:	681b      	ldr	r3, [r3, #0]
    95d4:	a801      	add	r0, sp, #4
    95d6:	4798      	blx	r3
    95d8:	e791      	b.n	94fe <usbd_ep_data_handler+0x42>
    return NRFX_USBD_EP_BITPOS(ep);
    95da:	2200      	movs	r2, #0
    95dc:	e7d6      	b.n	958c <usbd_ep_data_handler+0xd0>
    95de:	f7ff fe2f 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    95e2:	b110      	cbz	r0, 95ea <usbd_ep_data_handler+0x12e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    95e4:	4b19      	ldr	r3, [pc, #100]	; (964c <usbd_ep_data_handler+0x190>)
    95e6:	2200      	movs	r2, #0
    95e8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    95ea:	4b19      	ldr	r3, [pc, #100]	; (9650 <usbd_ep_data_handler+0x194>)
    95ec:	2200      	movs	r2, #0
    95ee:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    95f0:	4b18      	ldr	r3, [pc, #96]	; (9654 <usbd_ep_data_handler+0x198>)
    95f2:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    95f6:	2b03      	cmp	r3, #3
    95f8:	d012      	beq.n	9620 <usbd_ep_data_handler+0x164>
    else if (p_state->handler.feeder == NULL)
    95fa:	4b16      	ldr	r3, [pc, #88]	; (9654 <usbd_ep_data_handler+0x198>)
    95fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9600:	2b00      	cmp	r3, #0
    9602:	d1d6      	bne.n	95b2 <usbd_ep_data_handler+0xf6>
    9604:	4b0e      	ldr	r3, [pc, #56]	; (9640 <usbd_ep_data_handler+0x184>)
    9606:	f3bf 8f5b 	dmb	ish
    960a:	e853 2f00 	ldrex	r2, [r3]
    960e:	f022 0201 	bic.w	r2, r2, #1
    9612:	e843 2100 	strex	r1, r2, [r3]
    9616:	2900      	cmp	r1, #0
    9618:	d1f7      	bne.n	960a <usbd_ep_data_handler+0x14e>
    961a:	f3bf 8f5b 	dmb	ish
}
    961e:	e7c8      	b.n	95b2 <usbd_ep_data_handler+0xf6>
    9620:	4b07      	ldr	r3, [pc, #28]	; (9640 <usbd_ep_data_handler+0x184>)
    9622:	f3bf 8f5b 	dmb	ish
    9626:	e853 2f00 	ldrex	r2, [r3]
    962a:	f022 0201 	bic.w	r2, r2, #1
    962e:	e843 2100 	strex	r1, r2, [r3]
    9632:	2900      	cmp	r1, #0
    9634:	d1f7      	bne.n	9626 <usbd_ep_data_handler+0x16a>
    9636:	f3bf 8f5b 	dmb	ish
    963a:	e7ba      	b.n	95b2 <usbd_ep_data_handler+0xf6>
    963c:	20002858 	.word	0x20002858
    9640:	200027e8 	.word	0x200027e8
    9644:	2000297c 	.word	0x2000297c
    9648:	00015b78 	.word	0x00015b78
    964c:	40027c1c 	.word	0x40027c1c
    9650:	20002ee0 	.word	0x20002ee0
    9654:	2000285c 	.word	0x2000285c
    9658:	200028ec 	.word	0x200028ec

0000965c <ev_setup_data_handler>:
{
    965c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    965e:	4b07      	ldr	r3, [pc, #28]	; (967c <ev_setup_data_handler+0x20>)
    9660:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    9662:	f993 3000 	ldrsb.w	r3, [r3]
    9666:	2b00      	cmp	r3, #0
    9668:	db06      	blt.n	9678 <ev_setup_data_handler+0x1c>
    966a:	2110      	movs	r1, #16
    966c:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    9670:	4419      	add	r1, r3
    9672:	f7ff ff23 	bl	94bc <usbd_ep_data_handler>
}
    9676:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    9678:	2100      	movs	r1, #0
    967a:	e7f7      	b.n	966c <ev_setup_data_handler+0x10>
    967c:	20002ee2 	.word	0x20002ee2

00009680 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    9680:	b500      	push	{lr}
    9682:	b083      	sub	sp, #12
    9684:	f7ff fddc 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9688:	b110      	cbz	r0, 9690 <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    968a:	4b16      	ldr	r3, [pc, #88]	; (96e4 <ev_dma_epout8_handler+0x64>)
    968c:	2200      	movs	r2, #0
    968e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9690:	4b15      	ldr	r3, [pc, #84]	; (96e8 <ev_dma_epout8_handler+0x68>)
    9692:	2200      	movs	r2, #0
    9694:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9696:	4b15      	ldr	r3, [pc, #84]	; (96ec <ev_dma_epout8_handler+0x6c>)
    9698:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    969c:	2b03      	cmp	r3, #3
    969e:	d01d      	beq.n	96dc <ev_dma_epout8_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    96a0:	4b12      	ldr	r3, [pc, #72]	; (96ec <ev_dma_epout8_handler+0x6c>)
    96a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    96a6:	b9cb      	cbnz	r3, 96dc <ev_dma_epout8_handler+0x5c>
    96a8:	4b11      	ldr	r3, [pc, #68]	; (96f0 <ev_dma_epout8_handler+0x70>)
    96aa:	f3bf 8f5b 	dmb	ish
    96ae:	e853 2f00 	ldrex	r2, [r3]
    96b2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    96b6:	e843 2100 	strex	r1, r2, [r3]
    96ba:	2900      	cmp	r1, #0
    96bc:	d1f7      	bne.n	96ae <ev_dma_epout8_handler+0x2e>
    96be:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    96c2:	2306      	movs	r3, #6
    96c4:	f88d 3004 	strb.w	r3, [sp, #4]
    96c8:	2308      	movs	r3, #8
    96ca:	f88d 3006 	strb.w	r3, [sp, #6]
    96ce:	2300      	movs	r3, #0
    96d0:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    96d4:	4b07      	ldr	r3, [pc, #28]	; (96f4 <ev_dma_epout8_handler+0x74>)
    96d6:	681b      	ldr	r3, [r3, #0]
    96d8:	a801      	add	r0, sp, #4
    96da:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    96dc:	b003      	add	sp, #12
    96de:	f85d fb04 	ldr.w	pc, [sp], #4
    96e2:	bf00      	nop
    96e4:	40027c1c 	.word	0x40027c1c
    96e8:	20002ee0 	.word	0x20002ee0
    96ec:	2000285c 	.word	0x2000285c
    96f0:	200027e8 	.word	0x200027e8
    96f4:	2000297c 	.word	0x2000297c

000096f8 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    96f8:	b500      	push	{lr}
    96fa:	b083      	sub	sp, #12
    96fc:	f7ff fda0 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9700:	b110      	cbz	r0, 9708 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9702:	4b1d      	ldr	r3, [pc, #116]	; (9778 <ev_dma_epin8_handler+0x80>)
    9704:	2200      	movs	r2, #0
    9706:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9708:	4b1c      	ldr	r3, [pc, #112]	; (977c <ev_dma_epin8_handler+0x84>)
    970a:	2200      	movs	r2, #0
    970c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    970e:	4b1c      	ldr	r3, [pc, #112]	; (9780 <ev_dma_epin8_handler+0x88>)
    9710:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    9714:	2b03      	cmp	r3, #3
    9716:	d01e      	beq.n	9756 <ev_dma_epin8_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
    9718:	4b19      	ldr	r3, [pc, #100]	; (9780 <ev_dma_epin8_handler+0x88>)
    971a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    971e:	bb3b      	cbnz	r3, 9770 <ev_dma_epin8_handler+0x78>
    9720:	4b18      	ldr	r3, [pc, #96]	; (9784 <ev_dma_epin8_handler+0x8c>)
    9722:	f3bf 8f5b 	dmb	ish
    9726:	e853 2f00 	ldrex	r2, [r3]
    972a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    972e:	e843 2100 	strex	r1, r2, [r3]
    9732:	2900      	cmp	r1, #0
    9734:	d1f7      	bne.n	9726 <ev_dma_epin8_handler+0x2e>
    9736:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    973a:	2306      	movs	r3, #6
    973c:	f88d 3004 	strb.w	r3, [sp, #4]
    9740:	2388      	movs	r3, #136	; 0x88
    9742:	f88d 3006 	strb.w	r3, [sp, #6]
    9746:	2300      	movs	r3, #0
    9748:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    974c:	4b0e      	ldr	r3, [pc, #56]	; (9788 <ev_dma_epin8_handler+0x90>)
    974e:	681b      	ldr	r3, [r3, #0]
    9750:	a801      	add	r0, sp, #4
    9752:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9754:	e00c      	b.n	9770 <ev_dma_epin8_handler+0x78>
    9756:	4b0b      	ldr	r3, [pc, #44]	; (9784 <ev_dma_epin8_handler+0x8c>)
    9758:	f3bf 8f5b 	dmb	ish
    975c:	e853 2f00 	ldrex	r2, [r3]
    9760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    9764:	e843 2100 	strex	r1, r2, [r3]
    9768:	2900      	cmp	r1, #0
    976a:	d1f7      	bne.n	975c <ev_dma_epin8_handler+0x64>
    976c:	f3bf 8f5b 	dmb	ish
    9770:	b003      	add	sp, #12
    9772:	f85d fb04 	ldr.w	pc, [sp], #4
    9776:	bf00      	nop
    9778:	40027c1c 	.word	0x40027c1c
    977c:	20002ee0 	.word	0x20002ee0
    9780:	2000285c 	.word	0x2000285c
    9784:	200027e8 	.word	0x200027e8
    9788:	2000297c 	.word	0x2000297c

0000978c <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    978c:	b508      	push	{r3, lr}
    978e:	f7ff fd57 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9792:	b110      	cbz	r0, 979a <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9794:	4b15      	ldr	r3, [pc, #84]	; (97ec <ev_dma_epin0_handler+0x60>)
    9796:	2200      	movs	r2, #0
    9798:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    979a:	4b15      	ldr	r3, [pc, #84]	; (97f0 <ev_dma_epin0_handler+0x64>)
    979c:	2200      	movs	r2, #0
    979e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    97a0:	4b14      	ldr	r3, [pc, #80]	; (97f4 <ev_dma_epin0_handler+0x68>)
    97a2:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    97a6:	2b03      	cmp	r3, #3
    97a8:	d004      	beq.n	97b4 <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
    97aa:	4b12      	ldr	r3, [pc, #72]	; (97f4 <ev_dma_epin0_handler+0x68>)
    97ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    97b0:	b173      	cbz	r3, 97d0 <ev_dma_epin0_handler+0x44>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    97b2:	bd08      	pop	{r3, pc}
    97b4:	4b10      	ldr	r3, [pc, #64]	; (97f8 <ev_dma_epin0_handler+0x6c>)
    97b6:	f3bf 8f5b 	dmb	ish
    97ba:	e853 2f00 	ldrex	r2, [r3]
    97be:	f022 0201 	bic.w	r2, r2, #1
    97c2:	e843 2100 	strex	r1, r2, [r3]
    97c6:	2900      	cmp	r1, #0
    97c8:	d1f7      	bne.n	97ba <ev_dma_epin0_handler+0x2e>
    97ca:	f3bf 8f5b 	dmb	ish
    97ce:	e7f0      	b.n	97b2 <ev_dma_epin0_handler+0x26>
    97d0:	4b09      	ldr	r3, [pc, #36]	; (97f8 <ev_dma_epin0_handler+0x6c>)
    97d2:	f3bf 8f5b 	dmb	ish
    97d6:	e853 2f00 	ldrex	r2, [r3]
    97da:	f022 0201 	bic.w	r2, r2, #1
    97de:	e843 2100 	strex	r1, r2, [r3]
    97e2:	2900      	cmp	r1, #0
    97e4:	d1f7      	bne.n	97d6 <ev_dma_epin0_handler+0x4a>
    97e6:	f3bf 8f5b 	dmb	ish
    97ea:	e7e2      	b.n	97b2 <ev_dma_epin0_handler+0x26>
    97ec:	40027c1c 	.word	0x40027c1c
    97f0:	20002ee0 	.word	0x20002ee0
    97f4:	2000285c 	.word	0x2000285c
    97f8:	200027e8 	.word	0x200027e8

000097fc <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    97fc:	b508      	push	{r3, lr}
    97fe:	f7ff fd1f 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9802:	b110      	cbz	r0, 980a <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9804:	4b15      	ldr	r3, [pc, #84]	; (985c <ev_dma_epin7_handler+0x60>)
    9806:	2200      	movs	r2, #0
    9808:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    980a:	4b15      	ldr	r3, [pc, #84]	; (9860 <ev_dma_epin7_handler+0x64>)
    980c:	2200      	movs	r2, #0
    980e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9810:	4b14      	ldr	r3, [pc, #80]	; (9864 <ev_dma_epin7_handler+0x68>)
    9812:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    9816:	2b03      	cmp	r3, #3
    9818:	d011      	beq.n	983e <ev_dma_epin7_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    981a:	4b12      	ldr	r3, [pc, #72]	; (9864 <ev_dma_epin7_handler+0x68>)
    981c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    9820:	b9d3      	cbnz	r3, 9858 <ev_dma_epin7_handler+0x5c>
    9822:	4b11      	ldr	r3, [pc, #68]	; (9868 <ev_dma_epin7_handler+0x6c>)
    9824:	f3bf 8f5b 	dmb	ish
    9828:	e853 2f00 	ldrex	r2, [r3]
    982c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    9830:	e843 2100 	strex	r1, r2, [r3]
    9834:	2900      	cmp	r1, #0
    9836:	d1f7      	bne.n	9828 <ev_dma_epin7_handler+0x2c>
    9838:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    983c:	e00c      	b.n	9858 <ev_dma_epin7_handler+0x5c>
    983e:	4b0a      	ldr	r3, [pc, #40]	; (9868 <ev_dma_epin7_handler+0x6c>)
    9840:	f3bf 8f5b 	dmb	ish
    9844:	e853 2f00 	ldrex	r2, [r3]
    9848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    984c:	e843 2100 	strex	r1, r2, [r3]
    9850:	2900      	cmp	r1, #0
    9852:	d1f7      	bne.n	9844 <ev_dma_epin7_handler+0x48>
    9854:	f3bf 8f5b 	dmb	ish
    9858:	bd08      	pop	{r3, pc}
    985a:	bf00      	nop
    985c:	40027c1c 	.word	0x40027c1c
    9860:	20002ee0 	.word	0x20002ee0
    9864:	2000285c 	.word	0x2000285c
    9868:	200027e8 	.word	0x200027e8

0000986c <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    986c:	b508      	push	{r3, lr}
    986e:	f7ff fce7 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9872:	b110      	cbz	r0, 987a <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9874:	4b15      	ldr	r3, [pc, #84]	; (98cc <ev_dma_epin5_handler+0x60>)
    9876:	2200      	movs	r2, #0
    9878:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    987a:	4b15      	ldr	r3, [pc, #84]	; (98d0 <ev_dma_epin5_handler+0x64>)
    987c:	2200      	movs	r2, #0
    987e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9880:	4b14      	ldr	r3, [pc, #80]	; (98d4 <ev_dma_epin5_handler+0x68>)
    9882:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    9886:	2b03      	cmp	r3, #3
    9888:	d011      	beq.n	98ae <ev_dma_epin5_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    988a:	4b12      	ldr	r3, [pc, #72]	; (98d4 <ev_dma_epin5_handler+0x68>)
    988c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9890:	b9d3      	cbnz	r3, 98c8 <ev_dma_epin5_handler+0x5c>
    9892:	4b11      	ldr	r3, [pc, #68]	; (98d8 <ev_dma_epin5_handler+0x6c>)
    9894:	f3bf 8f5b 	dmb	ish
    9898:	e853 2f00 	ldrex	r2, [r3]
    989c:	f022 0220 	bic.w	r2, r2, #32
    98a0:	e843 2100 	strex	r1, r2, [r3]
    98a4:	2900      	cmp	r1, #0
    98a6:	d1f7      	bne.n	9898 <ev_dma_epin5_handler+0x2c>
    98a8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    98ac:	e00c      	b.n	98c8 <ev_dma_epin5_handler+0x5c>
    98ae:	4b0a      	ldr	r3, [pc, #40]	; (98d8 <ev_dma_epin5_handler+0x6c>)
    98b0:	f3bf 8f5b 	dmb	ish
    98b4:	e853 2f00 	ldrex	r2, [r3]
    98b8:	f022 0220 	bic.w	r2, r2, #32
    98bc:	e843 2100 	strex	r1, r2, [r3]
    98c0:	2900      	cmp	r1, #0
    98c2:	d1f7      	bne.n	98b4 <ev_dma_epin5_handler+0x48>
    98c4:	f3bf 8f5b 	dmb	ish
    98c8:	bd08      	pop	{r3, pc}
    98ca:	bf00      	nop
    98cc:	40027c1c 	.word	0x40027c1c
    98d0:	20002ee0 	.word	0x20002ee0
    98d4:	2000285c 	.word	0x2000285c
    98d8:	200027e8 	.word	0x200027e8

000098dc <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    98dc:	b508      	push	{r3, lr}
    98de:	f7ff fcaf 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    98e2:	b110      	cbz	r0, 98ea <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    98e4:	4b15      	ldr	r3, [pc, #84]	; (993c <ev_dma_epin6_handler+0x60>)
    98e6:	2200      	movs	r2, #0
    98e8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    98ea:	4b15      	ldr	r3, [pc, #84]	; (9940 <ev_dma_epin6_handler+0x64>)
    98ec:	2200      	movs	r2, #0
    98ee:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    98f0:	4b14      	ldr	r3, [pc, #80]	; (9944 <ev_dma_epin6_handler+0x68>)
    98f2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    98f6:	2b03      	cmp	r3, #3
    98f8:	d011      	beq.n	991e <ev_dma_epin6_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    98fa:	4b12      	ldr	r3, [pc, #72]	; (9944 <ev_dma_epin6_handler+0x68>)
    98fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    9900:	b9d3      	cbnz	r3, 9938 <ev_dma_epin6_handler+0x5c>
    9902:	4b11      	ldr	r3, [pc, #68]	; (9948 <ev_dma_epin6_handler+0x6c>)
    9904:	f3bf 8f5b 	dmb	ish
    9908:	e853 2f00 	ldrex	r2, [r3]
    990c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    9910:	e843 2100 	strex	r1, r2, [r3]
    9914:	2900      	cmp	r1, #0
    9916:	d1f7      	bne.n	9908 <ev_dma_epin6_handler+0x2c>
    9918:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    991c:	e00c      	b.n	9938 <ev_dma_epin6_handler+0x5c>
    991e:	4b0a      	ldr	r3, [pc, #40]	; (9948 <ev_dma_epin6_handler+0x6c>)
    9920:	f3bf 8f5b 	dmb	ish
    9924:	e853 2f00 	ldrex	r2, [r3]
    9928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    992c:	e843 2100 	strex	r1, r2, [r3]
    9930:	2900      	cmp	r1, #0
    9932:	d1f7      	bne.n	9924 <ev_dma_epin6_handler+0x48>
    9934:	f3bf 8f5b 	dmb	ish
    9938:	bd08      	pop	{r3, pc}
    993a:	bf00      	nop
    993c:	40027c1c 	.word	0x40027c1c
    9940:	20002ee0 	.word	0x20002ee0
    9944:	2000285c 	.word	0x2000285c
    9948:	200027e8 	.word	0x200027e8

0000994c <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    994c:	b508      	push	{r3, lr}
    994e:	f7ff fc77 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9952:	b110      	cbz	r0, 995a <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9954:	4b15      	ldr	r3, [pc, #84]	; (99ac <ev_dma_epin1_handler+0x60>)
    9956:	2200      	movs	r2, #0
    9958:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    995a:	4b15      	ldr	r3, [pc, #84]	; (99b0 <ev_dma_epin1_handler+0x64>)
    995c:	2200      	movs	r2, #0
    995e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9960:	4b14      	ldr	r3, [pc, #80]	; (99b4 <ev_dma_epin1_handler+0x68>)
    9962:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    9966:	2b03      	cmp	r3, #3
    9968:	d011      	beq.n	998e <ev_dma_epin1_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    996a:	4b12      	ldr	r3, [pc, #72]	; (99b4 <ev_dma_epin1_handler+0x68>)
    996c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    9970:	b9d3      	cbnz	r3, 99a8 <ev_dma_epin1_handler+0x5c>
    9972:	4b11      	ldr	r3, [pc, #68]	; (99b8 <ev_dma_epin1_handler+0x6c>)
    9974:	f3bf 8f5b 	dmb	ish
    9978:	e853 2f00 	ldrex	r2, [r3]
    997c:	f022 0202 	bic.w	r2, r2, #2
    9980:	e843 2100 	strex	r1, r2, [r3]
    9984:	2900      	cmp	r1, #0
    9986:	d1f7      	bne.n	9978 <ev_dma_epin1_handler+0x2c>
    9988:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    998c:	e00c      	b.n	99a8 <ev_dma_epin1_handler+0x5c>
    998e:	4b0a      	ldr	r3, [pc, #40]	; (99b8 <ev_dma_epin1_handler+0x6c>)
    9990:	f3bf 8f5b 	dmb	ish
    9994:	e853 2f00 	ldrex	r2, [r3]
    9998:	f022 0202 	bic.w	r2, r2, #2
    999c:	e843 2100 	strex	r1, r2, [r3]
    99a0:	2900      	cmp	r1, #0
    99a2:	d1f7      	bne.n	9994 <ev_dma_epin1_handler+0x48>
    99a4:	f3bf 8f5b 	dmb	ish
    99a8:	bd08      	pop	{r3, pc}
    99aa:	bf00      	nop
    99ac:	40027c1c 	.word	0x40027c1c
    99b0:	20002ee0 	.word	0x20002ee0
    99b4:	2000285c 	.word	0x2000285c
    99b8:	200027e8 	.word	0x200027e8

000099bc <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    99bc:	b508      	push	{r3, lr}
    99be:	f7ff fc3f 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    99c2:	b110      	cbz	r0, 99ca <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    99c4:	4b15      	ldr	r3, [pc, #84]	; (9a1c <ev_dma_epin2_handler+0x60>)
    99c6:	2200      	movs	r2, #0
    99c8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    99ca:	4b15      	ldr	r3, [pc, #84]	; (9a20 <ev_dma_epin2_handler+0x64>)
    99cc:	2200      	movs	r2, #0
    99ce:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    99d0:	4b14      	ldr	r3, [pc, #80]	; (9a24 <ev_dma_epin2_handler+0x68>)
    99d2:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    99d6:	2b03      	cmp	r3, #3
    99d8:	d011      	beq.n	99fe <ev_dma_epin2_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    99da:	4b12      	ldr	r3, [pc, #72]	; (9a24 <ev_dma_epin2_handler+0x68>)
    99dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    99e0:	b9d3      	cbnz	r3, 9a18 <ev_dma_epin2_handler+0x5c>
    99e2:	4b11      	ldr	r3, [pc, #68]	; (9a28 <ev_dma_epin2_handler+0x6c>)
    99e4:	f3bf 8f5b 	dmb	ish
    99e8:	e853 2f00 	ldrex	r2, [r3]
    99ec:	f022 0204 	bic.w	r2, r2, #4
    99f0:	e843 2100 	strex	r1, r2, [r3]
    99f4:	2900      	cmp	r1, #0
    99f6:	d1f7      	bne.n	99e8 <ev_dma_epin2_handler+0x2c>
    99f8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    99fc:	e00c      	b.n	9a18 <ev_dma_epin2_handler+0x5c>
    99fe:	4b0a      	ldr	r3, [pc, #40]	; (9a28 <ev_dma_epin2_handler+0x6c>)
    9a00:	f3bf 8f5b 	dmb	ish
    9a04:	e853 2f00 	ldrex	r2, [r3]
    9a08:	f022 0204 	bic.w	r2, r2, #4
    9a0c:	e843 2100 	strex	r1, r2, [r3]
    9a10:	2900      	cmp	r1, #0
    9a12:	d1f7      	bne.n	9a04 <ev_dma_epin2_handler+0x48>
    9a14:	f3bf 8f5b 	dmb	ish
    9a18:	bd08      	pop	{r3, pc}
    9a1a:	bf00      	nop
    9a1c:	40027c1c 	.word	0x40027c1c
    9a20:	20002ee0 	.word	0x20002ee0
    9a24:	2000285c 	.word	0x2000285c
    9a28:	200027e8 	.word	0x200027e8

00009a2c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    9a2c:	b508      	push	{r3, lr}
    9a2e:	f7ff fc07 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9a32:	b110      	cbz	r0, 9a3a <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9a34:	4b15      	ldr	r3, [pc, #84]	; (9a8c <ev_dma_epin3_handler+0x60>)
    9a36:	2200      	movs	r2, #0
    9a38:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9a3a:	4b15      	ldr	r3, [pc, #84]	; (9a90 <ev_dma_epin3_handler+0x64>)
    9a3c:	2200      	movs	r2, #0
    9a3e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9a40:	4b14      	ldr	r3, [pc, #80]	; (9a94 <ev_dma_epin3_handler+0x68>)
    9a42:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    9a46:	2b03      	cmp	r3, #3
    9a48:	d011      	beq.n	9a6e <ev_dma_epin3_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    9a4a:	4b12      	ldr	r3, [pc, #72]	; (9a94 <ev_dma_epin3_handler+0x68>)
    9a4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    9a50:	b9d3      	cbnz	r3, 9a88 <ev_dma_epin3_handler+0x5c>
    9a52:	4b11      	ldr	r3, [pc, #68]	; (9a98 <ev_dma_epin3_handler+0x6c>)
    9a54:	f3bf 8f5b 	dmb	ish
    9a58:	e853 2f00 	ldrex	r2, [r3]
    9a5c:	f022 0208 	bic.w	r2, r2, #8
    9a60:	e843 2100 	strex	r1, r2, [r3]
    9a64:	2900      	cmp	r1, #0
    9a66:	d1f7      	bne.n	9a58 <ev_dma_epin3_handler+0x2c>
    9a68:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    9a6c:	e00c      	b.n	9a88 <ev_dma_epin3_handler+0x5c>
    9a6e:	4b0a      	ldr	r3, [pc, #40]	; (9a98 <ev_dma_epin3_handler+0x6c>)
    9a70:	f3bf 8f5b 	dmb	ish
    9a74:	e853 2f00 	ldrex	r2, [r3]
    9a78:	f022 0208 	bic.w	r2, r2, #8
    9a7c:	e843 2100 	strex	r1, r2, [r3]
    9a80:	2900      	cmp	r1, #0
    9a82:	d1f7      	bne.n	9a74 <ev_dma_epin3_handler+0x48>
    9a84:	f3bf 8f5b 	dmb	ish
    9a88:	bd08      	pop	{r3, pc}
    9a8a:	bf00      	nop
    9a8c:	40027c1c 	.word	0x40027c1c
    9a90:	20002ee0 	.word	0x20002ee0
    9a94:	2000285c 	.word	0x2000285c
    9a98:	200027e8 	.word	0x200027e8

00009a9c <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    9a9c:	b508      	push	{r3, lr}
    9a9e:	f7ff fbcf 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9aa2:	b110      	cbz	r0, 9aaa <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9aa4:	4b15      	ldr	r3, [pc, #84]	; (9afc <ev_dma_epin4_handler+0x60>)
    9aa6:	2200      	movs	r2, #0
    9aa8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9aaa:	4b15      	ldr	r3, [pc, #84]	; (9b00 <ev_dma_epin4_handler+0x64>)
    9aac:	2200      	movs	r2, #0
    9aae:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9ab0:	4b14      	ldr	r3, [pc, #80]	; (9b04 <ev_dma_epin4_handler+0x68>)
    9ab2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    9ab6:	2b03      	cmp	r3, #3
    9ab8:	d011      	beq.n	9ade <ev_dma_epin4_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    9aba:	4b12      	ldr	r3, [pc, #72]	; (9b04 <ev_dma_epin4_handler+0x68>)
    9abc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    9ac0:	b9d3      	cbnz	r3, 9af8 <ev_dma_epin4_handler+0x5c>
    9ac2:	4b11      	ldr	r3, [pc, #68]	; (9b08 <ev_dma_epin4_handler+0x6c>)
    9ac4:	f3bf 8f5b 	dmb	ish
    9ac8:	e853 2f00 	ldrex	r2, [r3]
    9acc:	f022 0210 	bic.w	r2, r2, #16
    9ad0:	e843 2100 	strex	r1, r2, [r3]
    9ad4:	2900      	cmp	r1, #0
    9ad6:	d1f7      	bne.n	9ac8 <ev_dma_epin4_handler+0x2c>
    9ad8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    9adc:	e00c      	b.n	9af8 <ev_dma_epin4_handler+0x5c>
    9ade:	4b0a      	ldr	r3, [pc, #40]	; (9b08 <ev_dma_epin4_handler+0x6c>)
    9ae0:	f3bf 8f5b 	dmb	ish
    9ae4:	e853 2f00 	ldrex	r2, [r3]
    9ae8:	f022 0210 	bic.w	r2, r2, #16
    9aec:	e843 2100 	strex	r1, r2, [r3]
    9af0:	2900      	cmp	r1, #0
    9af2:	d1f7      	bne.n	9ae4 <ev_dma_epin4_handler+0x48>
    9af4:	f3bf 8f5b 	dmb	ish
    9af8:	bd08      	pop	{r3, pc}
    9afa:	bf00      	nop
    9afc:	40027c1c 	.word	0x40027c1c
    9b00:	20002ee0 	.word	0x20002ee0
    9b04:	2000285c 	.word	0x2000285c
    9b08:	200027e8 	.word	0x200027e8

00009b0c <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    9b0c:	4b01      	ldr	r3, [pc, #4]	; (9b14 <nrfx_usbd_isoinconfig_set+0x8>)
    9b0e:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    9b12:	4770      	bx	lr
    9b14:	40027000 	.word	0x40027000

00009b18 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    9b18:	2300      	movs	r3, #0
    9b1a:	4a02      	ldr	r2, [pc, #8]	; (9b24 <nrfx_usbd_uninit+0xc>)
    9b1c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    9b1e:	4a02      	ldr	r2, [pc, #8]	; (9b28 <nrfx_usbd_uninit+0x10>)
    9b20:	7013      	strb	r3, [r2, #0]
    return;
}
    9b22:	4770      	bx	lr
    9b24:	2000297c 	.word	0x2000297c
    9b28:	20002ee1 	.word	0x20002ee1

00009b2c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    9b2c:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
    9b2e:	4b41      	ldr	r3, [pc, #260]	; (9c34 <nrfx_usbd_enable+0x108>)
    9b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9b34:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9b38:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    9b3c:	f7ff fc26 	bl	938c <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    9b40:	f008 fdb7 	bl	126b2 <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    9b44:	b118      	cbz	r0, 9b4e <nrfx_usbd_enable+0x22>
    9b46:	4b3c      	ldr	r3, [pc, #240]	; (9c38 <nrfx_usbd_enable+0x10c>)
    9b48:	781b      	ldrb	r3, [r3, #0]
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d15f      	bne.n	9c0e <nrfx_usbd_enable+0xe2>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9b4e:	f7ff fb63 	bl	9218 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9b52:	b1b8      	cbz	r0, 9b84 <nrfx_usbd_enable+0x58>
	__asm__ volatile(
    9b54:	f04f 0220 	mov.w	r2, #32
    9b58:	f3ef 8311 	mrs	r3, BASEPRI
    9b5c:	f382 8812 	msr	BASEPRI_MAX, r2
    9b60:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9b64:	4a35      	ldr	r2, [pc, #212]	; (9c3c <nrfx_usbd_enable+0x110>)
    9b66:	6812      	ldr	r2, [r2, #0]
    9b68:	2a00      	cmp	r2, #0
    9b6a:	d15b      	bne.n	9c24 <nrfx_usbd_enable+0xf8>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9b6c:	4a33      	ldr	r2, [pc, #204]	; (9c3c <nrfx_usbd_enable+0x110>)
    9b6e:	f249 3175 	movw	r1, #37749	; 0x9375
    9b72:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9b74:	4832      	ldr	r0, [pc, #200]	; (9c40 <nrfx_usbd_enable+0x114>)
    9b76:	2403      	movs	r4, #3
    9b78:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9b7a:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9b7c:	f383 8811 	msr	BASEPRI, r3
    9b80:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    9b84:	f7ff fb34 	bl	91f0 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    9b88:	b150      	cbz	r0, 9ba0 <nrfx_usbd_enable+0x74>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    9b8a:	4b2e      	ldr	r3, [pc, #184]	; (9c44 <nrfx_usbd_enable+0x118>)
    9b8c:	f240 72e3 	movw	r2, #2019	; 0x7e3
    9b90:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    9b92:	3304      	adds	r3, #4
    9b94:	2240      	movs	r2, #64	; 0x40
    9b96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    9b98:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    9b9c:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    9ba0:	4b24      	ldr	r3, [pc, #144]	; (9c34 <nrfx_usbd_enable+0x108>)
    9ba2:	2280      	movs	r2, #128	; 0x80
    9ba4:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    9ba8:	2000      	movs	r0, #0
    9baa:	f7ff ffaf 	bl	9b0c <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9bae:	4b26      	ldr	r3, [pc, #152]	; (9c48 <nrfx_usbd_enable+0x11c>)
    9bb0:	f240 12ff 	movw	r2, #511	; 0x1ff
    9bb4:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    9bb6:	4b25      	ldr	r3, [pc, #148]	; (9c4c <nrfx_usbd_enable+0x120>)
    9bb8:	2200      	movs	r2, #0
    9bba:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    9bbc:	f7ff fb40 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9bc0:	b110      	cbz	r0, 9bc8 <nrfx_usbd_enable+0x9c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9bc2:	4b23      	ldr	r3, [pc, #140]	; (9c50 <nrfx_usbd_enable+0x124>)
    9bc4:	2200      	movs	r2, #0
    9bc6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9bc8:	2300      	movs	r3, #0
    9bca:	4a22      	ldr	r2, [pc, #136]	; (9c54 <nrfx_usbd_enable+0x128>)
    9bcc:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9bce:	4a22      	ldr	r2, [pc, #136]	; (9c58 <nrfx_usbd_enable+0x12c>)
    9bd0:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    9bd2:	4b22      	ldr	r3, [pc, #136]	; (9c5c <nrfx_usbd_enable+0x130>)
    9bd4:	2202      	movs	r2, #2
    9bd6:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9bd8:	f7ff fb1e 	bl	9218 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9bdc:	b1b0      	cbz	r0, 9c0c <nrfx_usbd_enable+0xe0>
	__asm__ volatile(
    9bde:	f04f 0220 	mov.w	r2, #32
    9be2:	f3ef 8311 	mrs	r3, BASEPRI
    9be6:	f382 8812 	msr	BASEPRI_MAX, r2
    9bea:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9bee:	4a13      	ldr	r2, [pc, #76]	; (9c3c <nrfx_usbd_enable+0x110>)
    9bf0:	6812      	ldr	r2, [r2, #0]
    9bf2:	b9da      	cbnz	r2, 9c2c <nrfx_usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9bf4:	4a11      	ldr	r2, [pc, #68]	; (9c3c <nrfx_usbd_enable+0x110>)
    9bf6:	f249 3175 	movw	r1, #37749	; 0x9375
    9bfa:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    9bfc:	4810      	ldr	r0, [pc, #64]	; (9c40 <nrfx_usbd_enable+0x114>)
    9bfe:	2400      	movs	r4, #0
    9c00:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9c02:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9c04:	f383 8811 	msr	BASEPRI, r3
    9c08:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
    9c0c:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9c0e:	4b09      	ldr	r3, [pc, #36]	; (9c34 <nrfx_usbd_enable+0x108>)
    9c10:	2400      	movs	r4, #0
    9c12:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9c16:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    9c1a:	f7ff fbb7 	bl	938c <usbd_enable>
         m_first_enable = false;
    9c1e:	4b06      	ldr	r3, [pc, #24]	; (9c38 <nrfx_usbd_enable+0x10c>)
    9c20:	701c      	strb	r4, [r3, #0]
    9c22:	e794      	b.n	9b4e <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9c24:	4a06      	ldr	r2, [pc, #24]	; (9c40 <nrfx_usbd_enable+0x114>)
    9c26:	2103      	movs	r1, #3
    9c28:	6011      	str	r1, [r2, #0]
    9c2a:	e7a7      	b.n	9b7c <nrfx_usbd_enable+0x50>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    9c2c:	4a04      	ldr	r2, [pc, #16]	; (9c40 <nrfx_usbd_enable+0x114>)
    9c2e:	2100      	movs	r1, #0
    9c30:	6011      	str	r1, [r2, #0]
    9c32:	e7e7      	b.n	9c04 <nrfx_usbd_enable+0xd8>
    9c34:	40027000 	.word	0x40027000
    9c38:	200002c8 	.word	0x200002c8
    9c3c:	4006ec00 	.word	0x4006ec00
    9c40:	4006ed14 	.word	0x4006ed14
    9c44:	40027800 	.word	0x40027800
    9c48:	20002858 	.word	0x20002858
    9c4c:	200027e8 	.word	0x200027e8
    9c50:	40027c1c 	.word	0x40027c1c
    9c54:	20002ee0 	.word	0x20002ee0
    9c58:	20002ee2 	.word	0x20002ee2
    9c5c:	20002ee1 	.word	0x20002ee1

00009c60 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    9c60:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    9c62:	4b09      	ldr	r3, [pc, #36]	; (9c88 <nrfx_usbd_start+0x28>)
    9c64:	2200      	movs	r2, #0
    9c66:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    9c68:	b960      	cbnz	r0, 9c84 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    9c6a:	4b08      	ldr	r3, [pc, #32]	; (9c8c <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    9c6c:	4c08      	ldr	r4, [pc, #32]	; (9c90 <nrfx_usbd_start+0x30>)
    9c6e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    9c72:	2027      	movs	r0, #39	; 0x27
    9c74:	f7fa fb3c 	bl	42f0 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    9c78:	2301      	movs	r3, #1
    9c7a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9c7e:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    9c82:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    9c84:	4b03      	ldr	r3, [pc, #12]	; (9c94 <nrfx_usbd_start+0x34>)
    9c86:	e7f1      	b.n	9c6c <nrfx_usbd_start+0xc>
    9c88:	20002edf 	.word	0x20002edf
    9c8c:	01c01407 	.word	0x01c01407
    9c90:	40027000 	.word	0x40027000
    9c94:	01e01407 	.word	0x01e01407

00009c98 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    9c98:	4b03      	ldr	r3, [pc, #12]	; (9ca8 <nrfx_usbd_is_enabled+0x10>)
    9c9a:	7818      	ldrb	r0, [r3, #0]
}
    9c9c:	2801      	cmp	r0, #1
    9c9e:	bf94      	ite	ls
    9ca0:	2000      	movls	r0, #0
    9ca2:	2001      	movhi	r0, #1
    9ca4:	4770      	bx	lr
    9ca6:	bf00      	nop
    9ca8:	20002ee1 	.word	0x20002ee1

00009cac <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9cac:	f010 0f80 	tst.w	r0, #128	; 0x80
    9cb0:	d106      	bne.n	9cc0 <nrfx_usbd_ep_max_packet_size_set+0x14>
    9cb2:	4b04      	ldr	r3, [pc, #16]	; (9cc4 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    9cb4:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9cb8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    9cbc:	8181      	strh	r1, [r0, #12]
}
    9cbe:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9cc0:	4b01      	ldr	r3, [pc, #4]	; (9cc8 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    9cc2:	e7f7      	b.n	9cb4 <nrfx_usbd_ep_max_packet_size_set+0x8>
    9cc4:	2000285c 	.word	0x2000285c
    9cc8:	200028ec 	.word	0x200028ec

00009ccc <nrfx_usbd_init>:
{
    9ccc:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    9cce:	4b25      	ldr	r3, [pc, #148]	; (9d64 <nrfx_usbd_init+0x98>)
    9cd0:	781c      	ldrb	r4, [r3, #0]
    9cd2:	2c00      	cmp	r4, #0
    9cd4:	d144      	bne.n	9d60 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    9cd6:	4b24      	ldr	r3, [pc, #144]	; (9d68 <nrfx_usbd_init+0x9c>)
    9cd8:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9cda:	4b22      	ldr	r3, [pc, #136]	; (9d64 <nrfx_usbd_init+0x98>)
    9cdc:	2201      	movs	r2, #1
    9cde:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9ce0:	4625      	mov	r5, r4
    9ce2:	e012      	b.n	9d0a <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9ce4:	2140      	movs	r1, #64	; 0x40
    9ce6:	4630      	mov	r0, r6
    9ce8:	f7ff ffe0 	bl	9cac <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9cec:	f016 0f80 	tst.w	r6, #128	; 0x80
    9cf0:	d115      	bne.n	9d1e <nrfx_usbd_init+0x52>
    9cf2:	491e      	ldr	r1, [pc, #120]	; (9d6c <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    9cf4:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9cf8:	0118      	lsls	r0, r3, #4
    9cfa:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    9cfe:	2200      	movs	r2, #0
    9d00:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    9d02:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    9d04:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9d06:	3501      	adds	r5, #1
    9d08:	b2ed      	uxtb	r5, r5
    9d0a:	2d08      	cmp	r5, #8
    9d0c:	d81c      	bhi.n	9d48 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    9d0e:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9d12:	f015 0f08 	tst.w	r5, #8
    9d16:	d0e5      	beq.n	9ce4 <nrfx_usbd_init+0x18>
    9d18:	f240 11ff 	movw	r1, #511	; 0x1ff
    9d1c:	e7e3      	b.n	9ce6 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9d1e:	4914      	ldr	r1, [pc, #80]	; (9d70 <nrfx_usbd_init+0xa4>)
    9d20:	e7e8      	b.n	9cf4 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9d22:	2140      	movs	r1, #64	; 0x40
    9d24:	4620      	mov	r0, r4
    9d26:	f7ff ffc1 	bl	9cac <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9d2a:	f014 0f80 	tst.w	r4, #128	; 0x80
    9d2e:	d113      	bne.n	9d58 <nrfx_usbd_init+0x8c>
    9d30:	490e      	ldr	r1, [pc, #56]	; (9d6c <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    9d32:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9d36:	0118      	lsls	r0, r3, #4
    9d38:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    9d3c:	2200      	movs	r2, #0
    9d3e:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    9d40:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    9d42:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9d44:	3401      	adds	r4, #1
    9d46:	b2e4      	uxtb	r4, r4
    9d48:	2c08      	cmp	r4, #8
    9d4a:	d807      	bhi.n	9d5c <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9d4c:	f014 0f08 	tst.w	r4, #8
    9d50:	d0e7      	beq.n	9d22 <nrfx_usbd_init+0x56>
    9d52:	f240 11ff 	movw	r1, #511	; 0x1ff
    9d56:	e7e5      	b.n	9d24 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9d58:	4905      	ldr	r1, [pc, #20]	; (9d70 <nrfx_usbd_init+0xa4>)
    9d5a:	e7ea      	b.n	9d32 <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    9d5c:	4805      	ldr	r0, [pc, #20]	; (9d74 <nrfx_usbd_init+0xa8>)
}
    9d5e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    9d60:	4805      	ldr	r0, [pc, #20]	; (9d78 <nrfx_usbd_init+0xac>)
    9d62:	e7fc      	b.n	9d5e <nrfx_usbd_init+0x92>
    9d64:	20002ee1 	.word	0x20002ee1
    9d68:	2000297c 	.word	0x2000297c
    9d6c:	2000285c 	.word	0x2000285c
    9d70:	200028ec 	.word	0x200028ec
    9d74:	0bad0000 	.word	0x0bad0000
    9d78:	0bad0005 	.word	0x0bad0005

00009d7c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    9d7c:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
    9d7e:	b242      	sxtb	r2, r0
    9d80:	2a00      	cmp	r2, #0
    9d82:	db14      	blt.n	9dae <nrfx_usbd_ep_transfer+0x32>
    9d84:	2410      	movs	r4, #16
    9d86:	f002 030f 	and.w	r3, r2, #15
    9d8a:	441c      	add	r4, r3
	__asm__ volatile(
    9d8c:	f04f 0320 	mov.w	r3, #32
    9d90:	f3ef 8511 	mrs	r5, BASEPRI
    9d94:	f383 8812 	msr	BASEPRI_MAX, r3
    9d98:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    9d9c:	f010 070f 	ands.w	r7, r0, #15
    9da0:	d107      	bne.n	9db2 <nrfx_usbd_ep_transfer+0x36>
    9da2:	4b2f      	ldr	r3, [pc, #188]	; (9e60 <nrfx_usbd_ep_transfer+0xe4>)
    9da4:	781b      	ldrb	r3, [r3, #0]
    9da6:	4283      	cmp	r3, r0
    9da8:	d003      	beq.n	9db2 <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    9daa:	482e      	ldr	r0, [pc, #184]	; (9e64 <nrfx_usbd_ep_transfer+0xe8>)
    9dac:	e051      	b.n	9e52 <nrfx_usbd_ep_transfer+0xd6>
    return NRFX_USBD_EP_BITPOS(ep);
    9dae:	2400      	movs	r4, #0
    9db0:	e7e9      	b.n	9d86 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9db2:	4b2d      	ldr	r3, [pc, #180]	; (9e68 <nrfx_usbd_ep_transfer+0xec>)
    9db4:	681b      	ldr	r3, [r3, #0]
    9db6:	43db      	mvns	r3, r3
    9db8:	b29b      	uxth	r3, r3
    9dba:	482c      	ldr	r0, [pc, #176]	; (9e6c <nrfx_usbd_ep_transfer+0xf0>)
    9dbc:	6800      	ldr	r0, [r0, #0]
    9dbe:	4303      	orrs	r3, r0
    9dc0:	2001      	movs	r0, #1
    9dc2:	fa00 f404 	lsl.w	r4, r0, r4
    9dc6:	4223      	tst	r3, r4
    9dc8:	d142      	bne.n	9e50 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9dca:	2a00      	cmp	r2, #0
    9dcc:	db1f      	blt.n	9e0e <nrfx_usbd_ep_transfer+0x92>
    9dce:	4828      	ldr	r0, [pc, #160]	; (9e70 <nrfx_usbd_ep_transfer+0xf4>)
    9dd0:	ea4f 1c07 	mov.w	ip, r7, lsl #4
    9dd4:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    9dd8:	2a00      	cmp	r2, #0
    9dda:	db1a      	blt.n	9e12 <nrfx_usbd_ep_transfer+0x96>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    9ddc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    9de0:	4a24      	ldr	r2, [pc, #144]	; (9e74 <nrfx_usbd_ep_transfer+0xf8>)
    9de2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    9de6:	4a24      	ldr	r2, [pc, #144]	; (9e78 <nrfx_usbd_ep_transfer+0xfc>)
    9de8:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
    9dec:	c907      	ldmia	r1, {r0, r1, r2}
    9dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    9df2:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
    9df4:	2300      	movs	r3, #0
    9df6:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    9df8:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9dfa:	4a1c      	ldr	r2, [pc, #112]	; (9e6c <nrfx_usbd_ep_transfer+0xf0>)
    9dfc:	6813      	ldr	r3, [r2, #0]
    9dfe:	431c      	orrs	r4, r3
    9e00:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9e02:	4b1e      	ldr	r3, [pc, #120]	; (9e7c <nrfx_usbd_ep_transfer+0x100>)
    9e04:	2280      	movs	r2, #128	; 0x80
    9e06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    9e0a:	481d      	ldr	r0, [pc, #116]	; (9e80 <nrfx_usbd_ep_transfer+0x104>)
}
    9e0c:	e021      	b.n	9e52 <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9e0e:	481d      	ldr	r0, [pc, #116]	; (9e84 <nrfx_usbd_ep_transfer+0x108>)
    9e10:	e7de      	b.n	9dd0 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9e12:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    9e16:	4a1c      	ldr	r2, [pc, #112]	; (9e88 <nrfx_usbd_ep_transfer+0x10c>)
    9e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9e1c:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9e1e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    9e22:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    9e26:	d006      	beq.n	9e36 <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9e28:	688a      	ldr	r2, [r1, #8]
    9e2a:	f012 0f01 	tst.w	r2, #1
    9e2e:	d10c      	bne.n	9e4a <nrfx_usbd_ep_transfer+0xce>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    9e30:	4a16      	ldr	r2, [pc, #88]	; (9e8c <nrfx_usbd_ep_transfer+0x110>)
    9e32:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    9e34:	e7da      	b.n	9dec <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9e36:	688a      	ldr	r2, [r1, #8]
    9e38:	f012 0f01 	tst.w	r2, #1
    9e3c:	d102      	bne.n	9e44 <nrfx_usbd_ep_transfer+0xc8>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    9e3e:	4a14      	ldr	r2, [pc, #80]	; (9e90 <nrfx_usbd_ep_transfer+0x114>)
    9e40:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    9e42:	e7d3      	b.n	9dec <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    9e44:	4a13      	ldr	r2, [pc, #76]	; (9e94 <nrfx_usbd_ep_transfer+0x118>)
    9e46:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    9e48:	e7d0      	b.n	9dec <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    9e4a:	4a13      	ldr	r2, [pc, #76]	; (9e98 <nrfx_usbd_ep_transfer+0x11c>)
    9e4c:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    9e4e:	e7cd      	b.n	9dec <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
    9e50:	4812      	ldr	r0, [pc, #72]	; (9e9c <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
    9e52:	f385 8811 	msr	BASEPRI, r5
    9e56:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9e5a:	bcf0      	pop	{r4, r5, r6, r7}
    9e5c:	4770      	bx	lr
    9e5e:	bf00      	nop
    9e60:	20002ee2 	.word	0x20002ee2
    9e64:	0bad000a 	.word	0x0bad000a
    9e68:	20002858 	.word	0x20002858
    9e6c:	200027e8 	.word	0x200027e8
    9e70:	2000285c 	.word	0x2000285c
    9e74:	2000277c 	.word	0x2000277c
    9e78:	000126b7 	.word	0x000126b7
    9e7c:	e000e100 	.word	0xe000e100
    9e80:	0bad0000 	.word	0x0bad0000
    9e84:	200028ec 	.word	0x200028ec
    9e88:	200027ec 	.word	0x200027ec
    9e8c:	00012749 	.word	0x00012749
    9e90:	000126ed 	.word	0x000126ed
    9e94:	0001270f 	.word	0x0001270f
    9e98:	00012787 	.word	0x00012787
    9e9c:	0bad000b 	.word	0x0bad000b

00009ea0 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    9ea0:	4800      	ldr	r0, [pc, #0]	; (9ea4 <nrfx_usbd_feeder_buffer_get+0x4>)
    9ea2:	4770      	bx	lr
    9ea4:	20002980 	.word	0x20002980

00009ea8 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    9ea8:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9eaa:	f010 0f80 	tst.w	r0, #128	; 0x80
    9eae:	d118      	bne.n	9ee2 <nrfx_usbd_ep_status_get+0x3a>
    9eb0:	4b0e      	ldr	r3, [pc, #56]	; (9eec <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
    9eb2:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9eb6:	0104      	lsls	r4, r0, #4
    9eb8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
    9ebc:	f04f 0520 	mov.w	r5, #32
    9ec0:	f3ef 8211 	mrs	r2, BASEPRI
    9ec4:	f385 8812 	msr	BASEPRI_MAX, r5
    9ec8:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    9ecc:	6885      	ldr	r5, [r0, #8]
    9ece:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    9ed0:	591b      	ldr	r3, [r3, r4]
    9ed2:	b143      	cbz	r3, 9ee6 <nrfx_usbd_ep_status_get+0x3e>
    9ed4:	2004      	movs	r0, #4
	__asm__ volatile(
    9ed6:	f382 8811 	msr	BASEPRI, r2
    9eda:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9ede:	bc30      	pop	{r4, r5}
    9ee0:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9ee2:	4b03      	ldr	r3, [pc, #12]	; (9ef0 <nrfx_usbd_ep_status_get+0x48>)
    9ee4:	e7e5      	b.n	9eb2 <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    9ee6:	7b80      	ldrb	r0, [r0, #14]
    9ee8:	e7f5      	b.n	9ed6 <nrfx_usbd_ep_status_get+0x2e>
    9eea:	bf00      	nop
    9eec:	2000285c 	.word	0x2000285c
    9ef0:	200028ec 	.word	0x200028ec

00009ef4 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9ef4:	f010 0f08 	tst.w	r0, #8
    9ef8:	d107      	bne.n	9f0a <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9efa:	f000 000f 	and.w	r0, r0, #15
    9efe:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9f02:	4b06      	ldr	r3, [pc, #24]	; (9f1c <nrfx_usbd_epout_size_get+0x28>)
    9f04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9f08:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    9f0a:	4b04      	ldr	r3, [pc, #16]	; (9f1c <nrfx_usbd_epout_size_get+0x28>)
    9f0c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    9f10:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    9f14:	d100      	bne.n	9f18 <nrfx_usbd_epout_size_get+0x24>
    9f16:	4770      	bx	lr
            size_isoout = 0;
    9f18:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    9f1a:	4770      	bx	lr
    9f1c:	40027000 	.word	0x40027000

00009f20 <usbd_dmareq_process>:
    if (!m_dma_pending)
    9f20:	4b6d      	ldr	r3, [pc, #436]	; (a0d8 <usbd_dmareq_process+0x1b8>)
    9f22:	781b      	ldrb	r3, [r3, #0]
    9f24:	2b00      	cmp	r3, #0
    9f26:	f040 80d5 	bne.w	a0d4 <usbd_dmareq_process+0x1b4>
{
    9f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f2e:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    9f30:	4b6a      	ldr	r3, [pc, #424]	; (a0dc <usbd_dmareq_process+0x1bc>)
    9f32:	681b      	ldr	r3, [r3, #0]
    9f34:	4a6a      	ldr	r2, [pc, #424]	; (a0e0 <usbd_dmareq_process+0x1c0>)
    9f36:	6810      	ldr	r0, [r2, #0]
    9f38:	4003      	ands	r3, r0
    9f3a:	f000 80c8 	beq.w	a0ce <usbd_dmareq_process+0x1ae>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    9f3e:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    9f42:	d05a      	beq.n	9ffa <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    9f44:	f008 fbf8 	bl	12738 <usbd_dma_scheduler_algorithm>
    9f48:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9f4a:	f1b8 0f0f 	cmp.w	r8, #15
    9f4e:	d959      	bls.n	a004 <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    9f50:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9f54:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9f56:	b274      	sxtb	r4, r6
    9f58:	2c00      	cmp	r4, #0
    9f5a:	db57      	blt.n	a00c <usbd_dmareq_process+0xec>
    9f5c:	f8df a19c 	ldr.w	sl, [pc, #412]	; a0fc <usbd_dmareq_process+0x1dc>
    9f60:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
    9f64:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9f66:	ea4f 1b07 	mov.w	fp, r7, lsl #4
    9f6a:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    9f6e:	2c00      	cmp	r4, #0
    9f70:	db4f      	blt.n	a012 <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9f72:	4630      	mov	r0, r6
    9f74:	f7ff ffbe 	bl	9ef4 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    9f78:	f85a a00b 	ldr.w	sl, [sl, fp]
    9f7c:	4683      	mov	fp, r0
    9f7e:	4603      	mov	r3, r0
    9f80:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    9f84:	f8d9 1004 	ldr.w	r1, [r9, #4]
    9f88:	a802      	add	r0, sp, #8
    9f8a:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    9f8c:	9b02      	ldr	r3, [sp, #8]
    9f8e:	b113      	cbz	r3, 9f96 <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
    9f90:	9b03      	ldr	r3, [sp, #12]
    9f92:	455b      	cmp	r3, fp
    9f94:	d34b      	bcc.n	a02e <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
    9f96:	b910      	cbnz	r0, 9f9e <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
    9f98:	2300      	movs	r3, #0
    9f9a:	f8c9 3000 	str.w	r3, [r9]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    9f9e:	f7ff f94f 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9fa2:	b110      	cbz	r0, 9faa <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    9fa4:	4b4f      	ldr	r3, [pc, #316]	; (a0e4 <usbd_dmareq_process+0x1c4>)
    9fa6:	2282      	movs	r2, #130	; 0x82
    9fa8:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    9faa:	2001      	movs	r0, #1
    9fac:	4b4a      	ldr	r3, [pc, #296]	; (a0d8 <usbd_dmareq_process+0x1b8>)
    9fae:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    9fb0:	fa00 f008 	lsl.w	r0, r0, r8
    9fb4:	4a4a      	ldr	r2, [pc, #296]	; (a0e0 <usbd_dmareq_process+0x1c0>)
    9fb6:	6813      	ldr	r3, [r2, #0]
    9fb8:	ea23 0000 	bic.w	r0, r3, r0
    9fbc:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
    9fbe:	9a03      	ldr	r2, [sp, #12]
    9fc0:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9fc4:	4413      	add	r3, r2
    9fc6:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    9fca:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    9fcc:	2c00      	cmp	r4, #0
    9fce:	db4f      	blt.n	a070 <usbd_dmareq_process+0x150>
        if (NRF_USBD_EPISO_CHECK(ep))
    9fd0:	f016 0f08 	tst.w	r6, #8
    9fd4:	d05f      	beq.n	a096 <usbd_dmareq_process+0x176>
            p_reg->ISOOUT.PTR    = ptr;
    9fd6:	4944      	ldr	r1, [pc, #272]	; (a0e8 <usbd_dmareq_process+0x1c8>)
    9fd8:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    9fdc:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    9fe0:	2c00      	cmp	r4, #0
    9fe2:	db62      	blt.n	a0aa <usbd_dmareq_process+0x18a>
    9fe4:	2328      	movs	r3, #40	; 0x28
    9fe6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9fea:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    9fee:	f507 371c 	add.w	r7, r7, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9ff2:	2301      	movs	r3, #1
    9ff4:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9ff6:	683b      	ldr	r3, [r7, #0]
}
    9ff8:	e065      	b.n	a0c6 <usbd_dmareq_process+0x1a6>
                pos = usbd_dma_scheduler_algorithm(req);
    9ffa:	4618      	mov	r0, r3
    9ffc:	f008 fb9c 	bl	12738 <usbd_dma_scheduler_algorithm>
    a000:	4680      	mov	r8, r0
    a002:	e7a2      	b.n	9f4a <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a004:	f068 067f 	orn	r6, r8, #127	; 0x7f
    a008:	b2f6      	uxtb	r6, r6
    a00a:	e7a4      	b.n	9f56 <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a00c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; a100 <usbd_dmareq_process+0x1e0>
    a010:	e7a6      	b.n	9f60 <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
    a012:	f8d9 3000 	ldr.w	r3, [r9]
    a016:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    a01a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a01e:	a802      	add	r0, sp, #8
    a020:	4798      	blx	r3
                if (!continue_transfer)
    a022:	2800      	cmp	r0, #0
    a024:	d1bb      	bne.n	9f9e <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
    a026:	2300      	movs	r3, #0
    a028:	f8c9 3000 	str.w	r3, [r9]
    a02c:	e7b7      	b.n	9f9e <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a02e:	2202      	movs	r2, #2
    a030:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a034:	2301      	movs	r3, #1
    a036:	fa03 f808 	lsl.w	r8, r3, r8
    a03a:	ea6f 0808 	mvn.w	r8, r8
    a03e:	4b27      	ldr	r3, [pc, #156]	; (a0dc <usbd_dmareq_process+0x1bc>)
    a040:	f3bf 8f5b 	dmb	ish
    a044:	e853 1f00 	ldrex	r1, [r3]
    a048:	ea01 0108 	and.w	r1, r1, r8
    a04c:	e843 1000 	strex	r0, r1, [r3]
    a050:	2800      	cmp	r0, #0
    a052:	d1f7      	bne.n	a044 <usbd_dmareq_process+0x124>
    a054:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a058:	2306      	movs	r3, #6
    a05a:	f88d 3004 	strb.w	r3, [sp, #4]
    a05e:	f88d 6006 	strb.w	r6, [sp, #6]
    a062:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    a066:	4b21      	ldr	r3, [pc, #132]	; (a0ec <usbd_dmareq_process+0x1cc>)
    a068:	681b      	ldr	r3, [r3, #0]
    a06a:	a801      	add	r0, sp, #4
    a06c:	4798      	blx	r3
                    continue;
    a06e:	e75f      	b.n	9f30 <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
    a070:	f016 0f08 	tst.w	r6, #8
    a074:	d005      	beq.n	a082 <usbd_dmareq_process+0x162>
            p_reg->ISOIN.PTR    = ptr;
    a076:	491c      	ldr	r1, [pc, #112]	; (a0e8 <usbd_dmareq_process+0x1c8>)
    a078:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    a07c:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    a080:	e7ae      	b.n	9fe0 <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
    a082:	4919      	ldr	r1, [pc, #100]	; (a0e8 <usbd_dmareq_process+0x1c8>)
    a084:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    a088:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a08c:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    a090:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
    a094:	e7a4      	b.n	9fe0 <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    a096:	4914      	ldr	r1, [pc, #80]	; (a0e8 <usbd_dmareq_process+0x1c8>)
    a098:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    a09c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a0a0:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    a0a4:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
    a0a8:	e79a      	b.n	9fe0 <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
    a0aa:	2304      	movs	r3, #4
    a0ac:	e79b      	b.n	9fe6 <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a0ae:	4b10      	ldr	r3, [pc, #64]	; (a0f0 <usbd_dmareq_process+0x1d0>)
    a0b0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a0b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a0b8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a0bc:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    a0be:	b933      	cbnz	r3, a0ce <usbd_dmareq_process+0x1ae>
    a0c0:	4b0c      	ldr	r3, [pc, #48]	; (a0f4 <usbd_dmareq_process+0x1d4>)
    a0c2:	681b      	ldr	r3, [r3, #0]
    a0c4:	b91b      	cbnz	r3, a0ce <usbd_dmareq_process+0x1ae>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a0c6:	2c00      	cmp	r4, #0
    a0c8:	dbf1      	blt.n	a0ae <usbd_dmareq_process+0x18e>
    a0ca:	4b0b      	ldr	r3, [pc, #44]	; (a0f8 <usbd_dmareq_process+0x1d8>)
    a0cc:	e7f0      	b.n	a0b0 <usbd_dmareq_process+0x190>
}
    a0ce:	b005      	add	sp, #20
    a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0d4:	4770      	bx	lr
    a0d6:	bf00      	nop
    a0d8:	20002ee0 	.word	0x20002ee0
    a0dc:	200027e8 	.word	0x200027e8
    a0e0:	20002858 	.word	0x20002858
    a0e4:	40027c1c 	.word	0x40027c1c
    a0e8:	40027000 	.word	0x40027000
    a0ec:	2000297c 	.word	0x2000297c
    a0f0:	00015b78 	.word	0x00015b78
    a0f4:	40027100 	.word	0x40027100
    a0f8:	00015b98 	.word	0x00015b98
    a0fc:	2000285c 	.word	0x2000285c
    a100:	200028ec 	.word	0x200028ec

0000a104 <ev_epdata_handler>:
{
    a104:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    a106:	4b0f      	ldr	r3, [pc, #60]	; (a144 <ev_epdata_handler+0x40>)
    a108:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    a10c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    a110:	e009      	b.n	a126 <ev_epdata_handler+0x22>
    return 32U;
    a112:	2120      	movs	r1, #32
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    a114:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a118:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    a11a:	2301      	movs	r3, #1
    a11c:	408b      	lsls	r3, r1
    a11e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    a122:	f7ff f9cb 	bl	94bc <usbd_ep_data_handler>
    while (dataepstatus)
    a126:	b154      	cbz	r4, a13e <ev_epdata_handler+0x3a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    a128:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
    a12c:	2900      	cmp	r1, #0
    a12e:	d0f0      	beq.n	a112 <ev_epdata_handler+0xe>
  return __builtin_clz(value);
    a130:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a134:	290f      	cmp	r1, #15
    a136:	d8ed      	bhi.n	a114 <ev_epdata_handler+0x10>
    a138:	f041 0080 	orr.w	r0, r1, #128	; 0x80
    a13c:	e7ed      	b.n	a11a <ev_epdata_handler+0x16>
        usbd_dmareq_process();
    a13e:	f7ff feef 	bl	9f20 <usbd_dmareq_process>
}
    a142:	bd10      	pop	{r4, pc}
    a144:	40027000 	.word	0x40027000

0000a148 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    a148:	b500      	push	{lr}
    a14a:	b083      	sub	sp, #12
    a14c:	f7ff f878 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a150:	b110      	cbz	r0, a158 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a152:	4b1d      	ldr	r3, [pc, #116]	; (a1c8 <ev_dma_epout7_handler+0x80>)
    a154:	2200      	movs	r2, #0
    a156:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a158:	4b1c      	ldr	r3, [pc, #112]	; (a1cc <ev_dma_epout7_handler+0x84>)
    a15a:	2200      	movs	r2, #0
    a15c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a15e:	4b1c      	ldr	r3, [pc, #112]	; (a1d0 <ev_dma_epout7_handler+0x88>)
    a160:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    a164:	2b03      	cmp	r3, #3
    a166:	d01d      	beq.n	a1a4 <ev_dma_epout7_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    a168:	4b19      	ldr	r3, [pc, #100]	; (a1d0 <ev_dma_epout7_handler+0x88>)
    a16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    a16c:	bb3b      	cbnz	r3, a1be <ev_dma_epout7_handler+0x76>
    a16e:	4b19      	ldr	r3, [pc, #100]	; (a1d4 <ev_dma_epout7_handler+0x8c>)
    a170:	f3bf 8f5b 	dmb	ish
    a174:	e853 2f00 	ldrex	r2, [r3]
    a178:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    a17c:	e843 2100 	strex	r1, r2, [r3]
    a180:	2900      	cmp	r1, #0
    a182:	d1f7      	bne.n	a174 <ev_dma_epout7_handler+0x2c>
    a184:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a188:	2306      	movs	r3, #6
    a18a:	f88d 3004 	strb.w	r3, [sp, #4]
    a18e:	2307      	movs	r3, #7
    a190:	f88d 3006 	strb.w	r3, [sp, #6]
    a194:	2300      	movs	r3, #0
    a196:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a19a:	4b0f      	ldr	r3, [pc, #60]	; (a1d8 <ev_dma_epout7_handler+0x90>)
    a19c:	681b      	ldr	r3, [r3, #0]
    a19e:	a801      	add	r0, sp, #4
    a1a0:	4798      	blx	r3
    a1a2:	e00c      	b.n	a1be <ev_dma_epout7_handler+0x76>
    a1a4:	4b0b      	ldr	r3, [pc, #44]	; (a1d4 <ev_dma_epout7_handler+0x8c>)
    a1a6:	f3bf 8f5b 	dmb	ish
    a1aa:	e853 2f00 	ldrex	r2, [r3]
    a1ae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    a1b2:	e843 2100 	strex	r1, r2, [r3]
    a1b6:	2900      	cmp	r1, #0
    a1b8:	d1f7      	bne.n	a1aa <ev_dma_epout7_handler+0x62>
    a1ba:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a1be:	f7ff feaf 	bl	9f20 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    a1c2:	b003      	add	sp, #12
    a1c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a1c8:	40027c1c 	.word	0x40027c1c
    a1cc:	20002ee0 	.word	0x20002ee0
    a1d0:	2000285c 	.word	0x2000285c
    a1d4:	200027e8 	.word	0x200027e8
    a1d8:	2000297c 	.word	0x2000297c

0000a1dc <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    a1dc:	b500      	push	{lr}
    a1de:	b083      	sub	sp, #12
    a1e0:	f7ff f82e 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a1e4:	b110      	cbz	r0, a1ec <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a1e6:	4b1d      	ldr	r3, [pc, #116]	; (a25c <ev_dma_epout1_handler+0x80>)
    a1e8:	2200      	movs	r2, #0
    a1ea:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a1ec:	4b1c      	ldr	r3, [pc, #112]	; (a260 <ev_dma_epout1_handler+0x84>)
    a1ee:	2200      	movs	r2, #0
    a1f0:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a1f2:	4b1c      	ldr	r3, [pc, #112]	; (a264 <ev_dma_epout1_handler+0x88>)
    a1f4:	7f9b      	ldrb	r3, [r3, #30]
    a1f6:	2b03      	cmp	r3, #3
    a1f8:	d01d      	beq.n	a236 <ev_dma_epout1_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    a1fa:	4b1a      	ldr	r3, [pc, #104]	; (a264 <ev_dma_epout1_handler+0x88>)
    a1fc:	691b      	ldr	r3, [r3, #16]
    a1fe:	bb3b      	cbnz	r3, a250 <ev_dma_epout1_handler+0x74>
    a200:	4b19      	ldr	r3, [pc, #100]	; (a268 <ev_dma_epout1_handler+0x8c>)
    a202:	f3bf 8f5b 	dmb	ish
    a206:	e853 2f00 	ldrex	r2, [r3]
    a20a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    a20e:	e843 2100 	strex	r1, r2, [r3]
    a212:	2900      	cmp	r1, #0
    a214:	d1f7      	bne.n	a206 <ev_dma_epout1_handler+0x2a>
    a216:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a21a:	2306      	movs	r3, #6
    a21c:	f88d 3004 	strb.w	r3, [sp, #4]
    a220:	2301      	movs	r3, #1
    a222:	f88d 3006 	strb.w	r3, [sp, #6]
    a226:	2300      	movs	r3, #0
    a228:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a22c:	4b0f      	ldr	r3, [pc, #60]	; (a26c <ev_dma_epout1_handler+0x90>)
    a22e:	681b      	ldr	r3, [r3, #0]
    a230:	a801      	add	r0, sp, #4
    a232:	4798      	blx	r3
    a234:	e00c      	b.n	a250 <ev_dma_epout1_handler+0x74>
    a236:	4b0c      	ldr	r3, [pc, #48]	; (a268 <ev_dma_epout1_handler+0x8c>)
    a238:	f3bf 8f5b 	dmb	ish
    a23c:	e853 2f00 	ldrex	r2, [r3]
    a240:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    a244:	e843 2100 	strex	r1, r2, [r3]
    a248:	2900      	cmp	r1, #0
    a24a:	d1f7      	bne.n	a23c <ev_dma_epout1_handler+0x60>
    a24c:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a250:	f7ff fe66 	bl	9f20 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    a254:	b003      	add	sp, #12
    a256:	f85d fb04 	ldr.w	pc, [sp], #4
    a25a:	bf00      	nop
    a25c:	40027c1c 	.word	0x40027c1c
    a260:	20002ee0 	.word	0x20002ee0
    a264:	2000285c 	.word	0x2000285c
    a268:	200027e8 	.word	0x200027e8
    a26c:	2000297c 	.word	0x2000297c

0000a270 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    a270:	b500      	push	{lr}
    a272:	b083      	sub	sp, #12
    a274:	f7fe ffe4 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a278:	b110      	cbz	r0, a280 <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a27a:	4b1d      	ldr	r3, [pc, #116]	; (a2f0 <ev_dma_epout2_handler+0x80>)
    a27c:	2200      	movs	r2, #0
    a27e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a280:	4b1c      	ldr	r3, [pc, #112]	; (a2f4 <ev_dma_epout2_handler+0x84>)
    a282:	2200      	movs	r2, #0
    a284:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a286:	4b1c      	ldr	r3, [pc, #112]	; (a2f8 <ev_dma_epout2_handler+0x88>)
    a288:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    a28c:	2b03      	cmp	r3, #3
    a28e:	d01d      	beq.n	a2cc <ev_dma_epout2_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    a290:	4b19      	ldr	r3, [pc, #100]	; (a2f8 <ev_dma_epout2_handler+0x88>)
    a292:	6a1b      	ldr	r3, [r3, #32]
    a294:	bb3b      	cbnz	r3, a2e6 <ev_dma_epout2_handler+0x76>
    a296:	4b19      	ldr	r3, [pc, #100]	; (a2fc <ev_dma_epout2_handler+0x8c>)
    a298:	f3bf 8f5b 	dmb	ish
    a29c:	e853 2f00 	ldrex	r2, [r3]
    a2a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    a2a4:	e843 2100 	strex	r1, r2, [r3]
    a2a8:	2900      	cmp	r1, #0
    a2aa:	d1f7      	bne.n	a29c <ev_dma_epout2_handler+0x2c>
    a2ac:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a2b0:	2306      	movs	r3, #6
    a2b2:	f88d 3004 	strb.w	r3, [sp, #4]
    a2b6:	2302      	movs	r3, #2
    a2b8:	f88d 3006 	strb.w	r3, [sp, #6]
    a2bc:	2300      	movs	r3, #0
    a2be:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a2c2:	4b0f      	ldr	r3, [pc, #60]	; (a300 <ev_dma_epout2_handler+0x90>)
    a2c4:	681b      	ldr	r3, [r3, #0]
    a2c6:	a801      	add	r0, sp, #4
    a2c8:	4798      	blx	r3
    a2ca:	e00c      	b.n	a2e6 <ev_dma_epout2_handler+0x76>
    a2cc:	4b0b      	ldr	r3, [pc, #44]	; (a2fc <ev_dma_epout2_handler+0x8c>)
    a2ce:	f3bf 8f5b 	dmb	ish
    a2d2:	e853 2f00 	ldrex	r2, [r3]
    a2d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    a2da:	e843 2100 	strex	r1, r2, [r3]
    a2de:	2900      	cmp	r1, #0
    a2e0:	d1f7      	bne.n	a2d2 <ev_dma_epout2_handler+0x62>
    a2e2:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a2e6:	f7ff fe1b 	bl	9f20 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    a2ea:	b003      	add	sp, #12
    a2ec:	f85d fb04 	ldr.w	pc, [sp], #4
    a2f0:	40027c1c 	.word	0x40027c1c
    a2f4:	20002ee0 	.word	0x20002ee0
    a2f8:	2000285c 	.word	0x2000285c
    a2fc:	200027e8 	.word	0x200027e8
    a300:	2000297c 	.word	0x2000297c

0000a304 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    a304:	b500      	push	{lr}
    a306:	b083      	sub	sp, #12
    a308:	f7fe ff9a 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a30c:	b110      	cbz	r0, a314 <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a30e:	4b1d      	ldr	r3, [pc, #116]	; (a384 <ev_dma_epout3_handler+0x80>)
    a310:	2200      	movs	r2, #0
    a312:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a314:	4b1c      	ldr	r3, [pc, #112]	; (a388 <ev_dma_epout3_handler+0x84>)
    a316:	2200      	movs	r2, #0
    a318:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a31a:	4b1c      	ldr	r3, [pc, #112]	; (a38c <ev_dma_epout3_handler+0x88>)
    a31c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    a320:	2b03      	cmp	r3, #3
    a322:	d01d      	beq.n	a360 <ev_dma_epout3_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    a324:	4b19      	ldr	r3, [pc, #100]	; (a38c <ev_dma_epout3_handler+0x88>)
    a326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a328:	bb3b      	cbnz	r3, a37a <ev_dma_epout3_handler+0x76>
    a32a:	4b19      	ldr	r3, [pc, #100]	; (a390 <ev_dma_epout3_handler+0x8c>)
    a32c:	f3bf 8f5b 	dmb	ish
    a330:	e853 2f00 	ldrex	r2, [r3]
    a334:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    a338:	e843 2100 	strex	r1, r2, [r3]
    a33c:	2900      	cmp	r1, #0
    a33e:	d1f7      	bne.n	a330 <ev_dma_epout3_handler+0x2c>
    a340:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a344:	2306      	movs	r3, #6
    a346:	f88d 3004 	strb.w	r3, [sp, #4]
    a34a:	2303      	movs	r3, #3
    a34c:	f88d 3006 	strb.w	r3, [sp, #6]
    a350:	2300      	movs	r3, #0
    a352:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a356:	4b0f      	ldr	r3, [pc, #60]	; (a394 <ev_dma_epout3_handler+0x90>)
    a358:	681b      	ldr	r3, [r3, #0]
    a35a:	a801      	add	r0, sp, #4
    a35c:	4798      	blx	r3
    a35e:	e00c      	b.n	a37a <ev_dma_epout3_handler+0x76>
    a360:	4b0b      	ldr	r3, [pc, #44]	; (a390 <ev_dma_epout3_handler+0x8c>)
    a362:	f3bf 8f5b 	dmb	ish
    a366:	e853 2f00 	ldrex	r2, [r3]
    a36a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    a36e:	e843 2100 	strex	r1, r2, [r3]
    a372:	2900      	cmp	r1, #0
    a374:	d1f7      	bne.n	a366 <ev_dma_epout3_handler+0x62>
    a376:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a37a:	f7ff fdd1 	bl	9f20 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    a37e:	b003      	add	sp, #12
    a380:	f85d fb04 	ldr.w	pc, [sp], #4
    a384:	40027c1c 	.word	0x40027c1c
    a388:	20002ee0 	.word	0x20002ee0
    a38c:	2000285c 	.word	0x2000285c
    a390:	200027e8 	.word	0x200027e8
    a394:	2000297c 	.word	0x2000297c

0000a398 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    a398:	b500      	push	{lr}
    a39a:	b083      	sub	sp, #12
    a39c:	f7fe ff50 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a3a0:	b110      	cbz	r0, a3a8 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a3a2:	4b1d      	ldr	r3, [pc, #116]	; (a418 <ev_dma_epout4_handler+0x80>)
    a3a4:	2200      	movs	r2, #0
    a3a6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a3a8:	4b1c      	ldr	r3, [pc, #112]	; (a41c <ev_dma_epout4_handler+0x84>)
    a3aa:	2200      	movs	r2, #0
    a3ac:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a3ae:	4b1c      	ldr	r3, [pc, #112]	; (a420 <ev_dma_epout4_handler+0x88>)
    a3b0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    a3b4:	2b03      	cmp	r3, #3
    a3b6:	d01d      	beq.n	a3f4 <ev_dma_epout4_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    a3b8:	4b19      	ldr	r3, [pc, #100]	; (a420 <ev_dma_epout4_handler+0x88>)
    a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a3bc:	bb3b      	cbnz	r3, a40e <ev_dma_epout4_handler+0x76>
    a3be:	4b19      	ldr	r3, [pc, #100]	; (a424 <ev_dma_epout4_handler+0x8c>)
    a3c0:	f3bf 8f5b 	dmb	ish
    a3c4:	e853 2f00 	ldrex	r2, [r3]
    a3c8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    a3cc:	e843 2100 	strex	r1, r2, [r3]
    a3d0:	2900      	cmp	r1, #0
    a3d2:	d1f7      	bne.n	a3c4 <ev_dma_epout4_handler+0x2c>
    a3d4:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a3d8:	2306      	movs	r3, #6
    a3da:	f88d 3004 	strb.w	r3, [sp, #4]
    a3de:	2304      	movs	r3, #4
    a3e0:	f88d 3006 	strb.w	r3, [sp, #6]
    a3e4:	2300      	movs	r3, #0
    a3e6:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a3ea:	4b0f      	ldr	r3, [pc, #60]	; (a428 <ev_dma_epout4_handler+0x90>)
    a3ec:	681b      	ldr	r3, [r3, #0]
    a3ee:	a801      	add	r0, sp, #4
    a3f0:	4798      	blx	r3
    a3f2:	e00c      	b.n	a40e <ev_dma_epout4_handler+0x76>
    a3f4:	4b0b      	ldr	r3, [pc, #44]	; (a424 <ev_dma_epout4_handler+0x8c>)
    a3f6:	f3bf 8f5b 	dmb	ish
    a3fa:	e853 2f00 	ldrex	r2, [r3]
    a3fe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    a402:	e843 2100 	strex	r1, r2, [r3]
    a406:	2900      	cmp	r1, #0
    a408:	d1f7      	bne.n	a3fa <ev_dma_epout4_handler+0x62>
    a40a:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a40e:	f7ff fd87 	bl	9f20 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    a412:	b003      	add	sp, #12
    a414:	f85d fb04 	ldr.w	pc, [sp], #4
    a418:	40027c1c 	.word	0x40027c1c
    a41c:	20002ee0 	.word	0x20002ee0
    a420:	2000285c 	.word	0x2000285c
    a424:	200027e8 	.word	0x200027e8
    a428:	2000297c 	.word	0x2000297c

0000a42c <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    a42c:	b500      	push	{lr}
    a42e:	b083      	sub	sp, #12
    a430:	f7fe ff06 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a434:	b110      	cbz	r0, a43c <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a436:	4b1d      	ldr	r3, [pc, #116]	; (a4ac <ev_dma_epout5_handler+0x80>)
    a438:	2200      	movs	r2, #0
    a43a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a43c:	4b1c      	ldr	r3, [pc, #112]	; (a4b0 <ev_dma_epout5_handler+0x84>)
    a43e:	2200      	movs	r2, #0
    a440:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a442:	4b1c      	ldr	r3, [pc, #112]	; (a4b4 <ev_dma_epout5_handler+0x88>)
    a444:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    a448:	2b03      	cmp	r3, #3
    a44a:	d01d      	beq.n	a488 <ev_dma_epout5_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    a44c:	4b19      	ldr	r3, [pc, #100]	; (a4b4 <ev_dma_epout5_handler+0x88>)
    a44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    a450:	bb3b      	cbnz	r3, a4a2 <ev_dma_epout5_handler+0x76>
    a452:	4b19      	ldr	r3, [pc, #100]	; (a4b8 <ev_dma_epout5_handler+0x8c>)
    a454:	f3bf 8f5b 	dmb	ish
    a458:	e853 2f00 	ldrex	r2, [r3]
    a45c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    a460:	e843 2100 	strex	r1, r2, [r3]
    a464:	2900      	cmp	r1, #0
    a466:	d1f7      	bne.n	a458 <ev_dma_epout5_handler+0x2c>
    a468:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a46c:	2306      	movs	r3, #6
    a46e:	f88d 3004 	strb.w	r3, [sp, #4]
    a472:	2305      	movs	r3, #5
    a474:	f88d 3006 	strb.w	r3, [sp, #6]
    a478:	2300      	movs	r3, #0
    a47a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a47e:	4b0f      	ldr	r3, [pc, #60]	; (a4bc <ev_dma_epout5_handler+0x90>)
    a480:	681b      	ldr	r3, [r3, #0]
    a482:	a801      	add	r0, sp, #4
    a484:	4798      	blx	r3
    a486:	e00c      	b.n	a4a2 <ev_dma_epout5_handler+0x76>
    a488:	4b0b      	ldr	r3, [pc, #44]	; (a4b8 <ev_dma_epout5_handler+0x8c>)
    a48a:	f3bf 8f5b 	dmb	ish
    a48e:	e853 2f00 	ldrex	r2, [r3]
    a492:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    a496:	e843 2100 	strex	r1, r2, [r3]
    a49a:	2900      	cmp	r1, #0
    a49c:	d1f7      	bne.n	a48e <ev_dma_epout5_handler+0x62>
    a49e:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a4a2:	f7ff fd3d 	bl	9f20 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    a4a6:	b003      	add	sp, #12
    a4a8:	f85d fb04 	ldr.w	pc, [sp], #4
    a4ac:	40027c1c 	.word	0x40027c1c
    a4b0:	20002ee0 	.word	0x20002ee0
    a4b4:	2000285c 	.word	0x2000285c
    a4b8:	200027e8 	.word	0x200027e8
    a4bc:	2000297c 	.word	0x2000297c

0000a4c0 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    a4c0:	b500      	push	{lr}
    a4c2:	b083      	sub	sp, #12
    a4c4:	f7fe febc 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a4c8:	b110      	cbz	r0, a4d0 <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a4ca:	4b1d      	ldr	r3, [pc, #116]	; (a540 <ev_dma_epout6_handler+0x80>)
    a4cc:	2200      	movs	r2, #0
    a4ce:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a4d0:	4b1c      	ldr	r3, [pc, #112]	; (a544 <ev_dma_epout6_handler+0x84>)
    a4d2:	2200      	movs	r2, #0
    a4d4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a4d6:	4b1c      	ldr	r3, [pc, #112]	; (a548 <ev_dma_epout6_handler+0x88>)
    a4d8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    a4dc:	2b03      	cmp	r3, #3
    a4de:	d01c      	beq.n	a51a <ev_dma_epout6_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    a4e0:	4b19      	ldr	r3, [pc, #100]	; (a548 <ev_dma_epout6_handler+0x88>)
    a4e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a4e4:	bb33      	cbnz	r3, a534 <ev_dma_epout6_handler+0x74>
    a4e6:	4b19      	ldr	r3, [pc, #100]	; (a54c <ev_dma_epout6_handler+0x8c>)
    a4e8:	f3bf 8f5b 	dmb	ish
    a4ec:	e853 2f00 	ldrex	r2, [r3]
    a4f0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    a4f4:	e843 2100 	strex	r1, r2, [r3]
    a4f8:	2900      	cmp	r1, #0
    a4fa:	d1f7      	bne.n	a4ec <ev_dma_epout6_handler+0x2c>
    a4fc:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a500:	2306      	movs	r3, #6
    a502:	f88d 3004 	strb.w	r3, [sp, #4]
    a506:	f88d 3006 	strb.w	r3, [sp, #6]
    a50a:	2300      	movs	r3, #0
    a50c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a510:	4b0f      	ldr	r3, [pc, #60]	; (a550 <ev_dma_epout6_handler+0x90>)
    a512:	681b      	ldr	r3, [r3, #0]
    a514:	a801      	add	r0, sp, #4
    a516:	4798      	blx	r3
    a518:	e00c      	b.n	a534 <ev_dma_epout6_handler+0x74>
    a51a:	4b0c      	ldr	r3, [pc, #48]	; (a54c <ev_dma_epout6_handler+0x8c>)
    a51c:	f3bf 8f5b 	dmb	ish
    a520:	e853 2f00 	ldrex	r2, [r3]
    a524:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    a528:	e843 2100 	strex	r1, r2, [r3]
    a52c:	2900      	cmp	r1, #0
    a52e:	d1f7      	bne.n	a520 <ev_dma_epout6_handler+0x60>
    a530:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a534:	f7ff fcf4 	bl	9f20 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    a538:	b003      	add	sp, #12
    a53a:	f85d fb04 	ldr.w	pc, [sp], #4
    a53e:	bf00      	nop
    a540:	40027c1c 	.word	0x40027c1c
    a544:	20002ee0 	.word	0x20002ee0
    a548:	2000285c 	.word	0x2000285c
    a54c:	200027e8 	.word	0x200027e8
    a550:	2000297c 	.word	0x2000297c

0000a554 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    a554:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a558:	4b01      	ldr	r3, [pc, #4]	; (a560 <nrfx_usbd_ep_stall+0xc>)
    a55a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    a55e:	4770      	bx	lr
    a560:	40027000 	.word	0x40027000

0000a564 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    a564:	f010 0f08 	tst.w	r0, #8
    a568:	d117      	bne.n	a59a <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a56a:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a56e:	f010 0f80 	tst.w	r0, #128	; 0x80
    a572:	d10c      	bne.n	a58e <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    a574:	f503 7388 	add.w	r3, r3, #272	; 0x110
    a578:	009b      	lsls	r3, r3, #2
    a57a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a57e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    a582:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    a584:	2801      	cmp	r0, #1
    a586:	bf14      	ite	ne
    a588:	2000      	movne	r0, #0
    a58a:	2001      	moveq	r0, #1
    a58c:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    a58e:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a592:	4a03      	ldr	r2, [pc, #12]	; (a5a0 <nrfx_usbd_ep_stall_check+0x3c>)
    a594:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    a598:	e7f4      	b.n	a584 <nrfx_usbd_ep_stall_check+0x20>
        return false;
    a59a:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    a59c:	4770      	bx	lr
    a59e:	bf00      	nop
    a5a0:	40027000 	.word	0x40027000

0000a5a4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    a5a4:	4b04      	ldr	r3, [pc, #16]	; (a5b8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    a5a6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    a5aa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a5ae:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    a5b2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    a5b6:	4770      	bx	lr
    a5b8:	40027000 	.word	0x40027000

0000a5bc <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    a5bc:	b510      	push	{r4, lr}
    a5be:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    a5c0:	2208      	movs	r2, #8
    a5c2:	2100      	movs	r1, #0
    a5c4:	f006 ffee 	bl	115a4 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a5c8:	4b11      	ldr	r3, [pc, #68]	; (a610 <nrfx_usbd_setup_get+0x54>)
    a5ca:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    a5ce:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    a5d0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    a5d4:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    a5d6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    a5da:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    a5dc:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    a5e0:	0209      	lsls	r1, r1, #8
    a5e2:	b289      	uxth	r1, r1
    a5e4:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    a5e6:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    a5e8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    a5ec:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    a5ee:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    a5f2:	0209      	lsls	r1, r1, #8
    a5f4:	b289      	uxth	r1, r1
    a5f6:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    a5f8:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    a5fa:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    a5fe:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    a600:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    a604:	021b      	lsls	r3, r3, #8
    a606:	b29b      	uxth	r3, r3
    a608:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    a60a:	80e3      	strh	r3, [r4, #6]
}
    a60c:	bd10      	pop	{r4, pc}
    a60e:	bf00      	nop
    a610:	40027000 	.word	0x40027000

0000a614 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a614:	4b02      	ldr	r3, [pc, #8]	; (a620 <nrfx_usbd_setup_data_clear+0xc>)
    a616:	2201      	movs	r2, #1
    a618:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a61a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    a61c:	4770      	bx	lr
    a61e:	bf00      	nop
    a620:	4002704c 	.word	0x4002704c

0000a624 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a624:	b500      	push	{lr}
    a626:	b083      	sub	sp, #12
    a628:	f7fe fe0a 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a62c:	b110      	cbz	r0, a634 <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a62e:	4b1d      	ldr	r3, [pc, #116]	; (a6a4 <ev_dma_epout0_handler+0x80>)
    a630:	2200      	movs	r2, #0
    a632:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a634:	4b1c      	ldr	r3, [pc, #112]	; (a6a8 <ev_dma_epout0_handler+0x84>)
    a636:	2200      	movs	r2, #0
    a638:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a63a:	4b1c      	ldr	r3, [pc, #112]	; (a6ac <ev_dma_epout0_handler+0x88>)
    a63c:	7b9b      	ldrb	r3, [r3, #14]
    a63e:	2b03      	cmp	r3, #3
    a640:	d005      	beq.n	a64e <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
    a642:	4b1a      	ldr	r3, [pc, #104]	; (a6ac <ev_dma_epout0_handler+0x88>)
    a644:	681b      	ldr	r3, [r3, #0]
    a646:	b183      	cbz	r3, a66a <ev_dma_epout0_handler+0x46>
        nrfx_usbd_setup_data_clear();
    a648:	f7ff ffe4 	bl	a614 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a64c:	e026      	b.n	a69c <ev_dma_epout0_handler+0x78>
    a64e:	4b18      	ldr	r3, [pc, #96]	; (a6b0 <ev_dma_epout0_handler+0x8c>)
    a650:	f3bf 8f5b 	dmb	ish
    a654:	e853 2f00 	ldrex	r2, [r3]
    a658:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    a65c:	e843 2100 	strex	r1, r2, [r3]
    a660:	2900      	cmp	r1, #0
    a662:	d1f7      	bne.n	a654 <ev_dma_epout0_handler+0x30>
    a664:	f3bf 8f5b 	dmb	ish
    a668:	e018      	b.n	a69c <ev_dma_epout0_handler+0x78>
    a66a:	4b11      	ldr	r3, [pc, #68]	; (a6b0 <ev_dma_epout0_handler+0x8c>)
    a66c:	f3bf 8f5b 	dmb	ish
    a670:	e853 2f00 	ldrex	r2, [r3]
    a674:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    a678:	e843 2100 	strex	r1, r2, [r3]
    a67c:	2900      	cmp	r1, #0
    a67e:	d1f7      	bne.n	a670 <ev_dma_epout0_handler+0x4c>
    a680:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a684:	2306      	movs	r3, #6
    a686:	f88d 3004 	strb.w	r3, [sp, #4]
    a68a:	2300      	movs	r3, #0
    a68c:	f88d 3006 	strb.w	r3, [sp, #6]
    a690:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a694:	4b07      	ldr	r3, [pc, #28]	; (a6b4 <ev_dma_epout0_handler+0x90>)
    a696:	681b      	ldr	r3, [r3, #0]
    a698:	a801      	add	r0, sp, #4
    a69a:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a69c:	b003      	add	sp, #12
    a69e:	f85d fb04 	ldr.w	pc, [sp], #4
    a6a2:	bf00      	nop
    a6a4:	40027c1c 	.word	0x40027c1c
    a6a8:	20002ee0 	.word	0x20002ee0
    a6ac:	2000285c 	.word	0x2000285c
    a6b0:	200027e8 	.word	0x200027e8
    a6b4:	2000297c 	.word	0x2000297c

0000a6b8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a6b8:	4b02      	ldr	r3, [pc, #8]	; (a6c4 <nrfx_usbd_setup_clear+0xc>)
    a6ba:	2201      	movs	r2, #1
    a6bc:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a6be:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    a6c0:	4770      	bx	lr
    a6c2:	bf00      	nop
    a6c4:	40027050 	.word	0x40027050

0000a6c8 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a6c8:	4b02      	ldr	r3, [pc, #8]	; (a6d4 <nrfx_usbd_setup_stall+0xc>)
    a6ca:	2201      	movs	r2, #1
    a6cc:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a6ce:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    a6d0:	4770      	bx	lr
    a6d2:	bf00      	nop
    a6d4:	40027054 	.word	0x40027054

0000a6d8 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    a6d8:	4b01      	ldr	r3, [pc, #4]	; (a6e0 <nrfx_usbd_last_setup_dir_get+0x8>)
    a6da:	7818      	ldrb	r0, [r3, #0]
    a6dc:	4770      	bx	lr
    a6de:	bf00      	nop
    a6e0:	20002ee2 	.word	0x20002ee2

0000a6e4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    a6e4:	b410      	push	{r4}
	__asm__ volatile(
    a6e6:	f04f 0320 	mov.w	r3, #32
    a6ea:	f3ef 8411 	mrs	r4, BASEPRI
    a6ee:	f383 8812 	msr	BASEPRI_MAX, r3
    a6f2:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    a6f6:	b243      	sxtb	r3, r0
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	db1e      	blt.n	a73a <nrfx_usbd_transfer_out_drop+0x56>
    a6fc:	2210      	movs	r2, #16
    a6fe:	f003 030f 	and.w	r3, r3, #15
    a702:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    a704:	2201      	movs	r2, #1
    a706:	fa02 f303 	lsl.w	r3, r2, r3
    a70a:	490d      	ldr	r1, [pc, #52]	; (a740 <nrfx_usbd_transfer_out_drop+0x5c>)
    a70c:	680a      	ldr	r2, [r1, #0]
    a70e:	ea22 0203 	bic.w	r2, r2, r3
    a712:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    a714:	f010 0f08 	tst.w	r0, #8
    a718:	d109      	bne.n	a72e <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    a71a:	f000 000f 	and.w	r0, r0, #15
    a71e:	4b09      	ldr	r3, [pc, #36]	; (a744 <nrfx_usbd_transfer_out_drop+0x60>)
    a720:	f500 7094 	add.w	r0, r0, #296	; 0x128
    a724:	2200      	movs	r2, #0
    a726:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a72a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
    a72e:	f384 8811 	msr	BASEPRI, r4
    a732:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a736:	bc10      	pop	{r4}
    a738:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    a73a:	2200      	movs	r2, #0
    a73c:	e7df      	b.n	a6fe <nrfx_usbd_transfer_out_drop+0x1a>
    a73e:	bf00      	nop
    a740:	20002858 	.word	0x20002858
    a744:	40027000 	.word	0x40027000

0000a748 <ev_setup_handler>:
{
    a748:	b5f0      	push	{r4, r5, r6, r7, lr}
    a74a:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a74c:	4b5f      	ldr	r3, [pc, #380]	; (a8cc <ev_setup_handler+0x184>)
    a74e:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a752:	4b5f      	ldr	r3, [pc, #380]	; (a8d0 <ev_setup_handler+0x188>)
    a754:	681b      	ldr	r3, [r3, #0]
    a756:	43db      	mvns	r3, r3
    a758:	b29b      	uxth	r3, r3
    a75a:	4a5e      	ldr	r2, [pc, #376]	; (a8d4 <ev_setup_handler+0x18c>)
    a75c:	6812      	ldr	r2, [r2, #0]
    a75e:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    a760:	4a5d      	ldr	r2, [pc, #372]	; (a8d8 <ev_setup_handler+0x190>)
    a762:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    a764:	f992 2000 	ldrsb.w	r2, [r2]
    a768:	2a00      	cmp	r2, #0
    a76a:	db2e      	blt.n	a7ca <ev_setup_handler+0x82>
    a76c:	2110      	movs	r1, #16
    a76e:	f002 020f 	and.w	r2, r2, #15
    a772:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    a774:	2201      	movs	r2, #1
    a776:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a778:	4213      	tst	r3, r2
    a77a:	d128      	bne.n	a7ce <ev_setup_handler+0x86>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    a77c:	f014 0f80 	tst.w	r4, #128	; 0x80
    a780:	f040 80a2 	bne.w	a8c8 <ev_setup_handler+0x180>
    a784:	2200      	movs	r2, #0
    m_last_setup_dir =
    a786:	4b54      	ldr	r3, [pc, #336]	; (a8d8 <ev_setup_handler+0x190>)
    a788:	701a      	strb	r2, [r3, #0]
    a78a:	4b52      	ldr	r3, [pc, #328]	; (a8d4 <ev_setup_handler+0x18c>)
    a78c:	f3bf 8f5b 	dmb	ish
    a790:	e853 2f00 	ldrex	r2, [r3]
    a794:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    a798:	e843 2100 	strex	r1, r2, [r3]
    a79c:	2900      	cmp	r1, #0
    a79e:	d1f7      	bne.n	a790 <ev_setup_handler+0x48>
    a7a0:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    a7a4:	4a4a      	ldr	r2, [pc, #296]	; (a8d0 <ev_setup_handler+0x188>)
    a7a6:	6813      	ldr	r3, [r2, #0]
    a7a8:	f043 0301 	orr.w	r3, r3, #1
    a7ac:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    a7ae:	2300      	movs	r3, #0
    a7b0:	f8ad 3005 	strh.w	r3, [sp, #5]
    a7b4:	f88d 3007 	strb.w	r3, [sp, #7]
    a7b8:	2305      	movs	r3, #5
    a7ba:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    a7be:	4b47      	ldr	r3, [pc, #284]	; (a8dc <ev_setup_handler+0x194>)
    a7c0:	681b      	ldr	r3, [r3, #0]
    a7c2:	a801      	add	r0, sp, #4
    a7c4:	4798      	blx	r3
}
    a7c6:	b003      	add	sp, #12
    a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    a7ca:	2100      	movs	r1, #0
    a7cc:	e7cf      	b.n	a76e <ev_setup_handler+0x26>
	__asm__ volatile(
    a7ce:	f04f 0320 	mov.w	r3, #32
    a7d2:	f3ef 8611 	mrs	r6, BASEPRI
    a7d6:	f383 8812 	msr	BASEPRI_MAX, r3
    a7da:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a7de:	b243      	sxtb	r3, r0
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	db26      	blt.n	a832 <ev_setup_handler+0xea>
    a7e4:	4d3e      	ldr	r5, [pc, #248]	; (a8e0 <ev_setup_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    a7e6:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a7ea:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	db24      	blt.n	a83c <ev_setup_handler+0xf4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a7f2:	4a38      	ldr	r2, [pc, #224]	; (a8d4 <ev_setup_handler+0x18c>)
    a7f4:	6812      	ldr	r2, [r2, #0]
    a7f6:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    a7f8:	f003 030f 	and.w	r3, r3, #15
    a7fc:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a7fe:	40da      	lsrs	r2, r3
    a800:	f012 0f01 	tst.w	r2, #1
    a804:	d117      	bne.n	a836 <ev_setup_handler+0xee>
            p_state->handler.consumer = NULL;
    a806:	2200      	movs	r2, #0
    a808:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a80a:	2201      	movs	r2, #1
    a80c:	fa02 f303 	lsl.w	r3, r2, r3
    a810:	4930      	ldr	r1, [pc, #192]	; (a8d4 <ev_setup_handler+0x18c>)
    a812:	680a      	ldr	r2, [r1, #0]
    a814:	ea22 0203 	bic.w	r2, r2, r3
    a818:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a81a:	492d      	ldr	r1, [pc, #180]	; (a8d0 <ev_setup_handler+0x188>)
    a81c:	680a      	ldr	r2, [r1, #0]
    a81e:	ea22 0303 	bic.w	r3, r2, r3
    a822:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    a824:	2303      	movs	r3, #3
    a826:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    a828:	f386 8811 	msr	BASEPRI, r6
    a82c:	f3bf 8f6f 	isb	sy
}
    a830:	e7a4      	b.n	a77c <ev_setup_handler+0x34>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a832:	4d2c      	ldr	r5, [pc, #176]	; (a8e4 <ev_setup_handler+0x19c>)
    a834:	e7d7      	b.n	a7e6 <ev_setup_handler+0x9e>
            nrfx_usbd_transfer_out_drop(ep);
    a836:	f7ff ff55 	bl	a6e4 <nrfx_usbd_transfer_out_drop>
    a83a:	e7f3      	b.n	a824 <ev_setup_handler+0xdc>
        if(!NRF_USBD_EPISO_CHECK(ep))
    a83c:	f010 0f08 	tst.w	r0, #8
    a840:	d10f      	bne.n	a862 <ev_setup_handler+0x11a>
            if(ep != NRFX_USBD_EPIN0)
    a842:	2880      	cmp	r0, #128	; 0x80
    a844:	d032      	beq.n	a8ac <ev_setup_handler+0x164>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    a846:	f202 32da 	addw	r2, r2, #986	; 0x3da
    a84a:	0052      	lsls	r2, r2, #1
    a84c:	4926      	ldr	r1, [pc, #152]	; (a8e8 <ev_setup_handler+0x1a0>)
    a84e:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a850:	3104      	adds	r1, #4
    a852:	680a      	ldr	r2, [r1, #0]
    a854:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    a856:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a85a:	680f      	ldr	r7, [r1, #0]
    a85c:	433a      	orrs	r2, r7
    a85e:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a860:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a862:	4a1b      	ldr	r2, [pc, #108]	; (a8d0 <ev_setup_handler+0x188>)
    a864:	6811      	ldr	r1, [r2, #0]
    a866:	4a1b      	ldr	r2, [pc, #108]	; (a8d4 <ev_setup_handler+0x18c>)
    a868:	6817      	ldr	r7, [r2, #0]
    a86a:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
    a86e:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a872:	2201      	movs	r2, #1
    a874:	fa02 f303 	lsl.w	r3, r2, r3
    a878:	ea1c 0f03 	tst.w	ip, r3
    a87c:	d0d4      	beq.n	a828 <ev_setup_handler+0xe0>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a87e:	ea27 0703 	bic.w	r7, r7, r3
    a882:	4a14      	ldr	r2, [pc, #80]	; (a8d4 <ev_setup_handler+0x18c>)
    a884:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a886:	430b      	orrs	r3, r1
    a888:	4a11      	ldr	r2, [pc, #68]	; (a8d0 <ev_setup_handler+0x188>)
    a88a:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    a88c:	2300      	movs	r3, #0
    a88e:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    a890:	2303      	movs	r3, #3
    a892:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a894:	2206      	movs	r2, #6
    a896:	f88d 2000 	strb.w	r2, [sp]
    a89a:	f88d 0002 	strb.w	r0, [sp, #2]
    a89e:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    a8a2:	4b0e      	ldr	r3, [pc, #56]	; (a8dc <ev_setup_handler+0x194>)
    a8a4:	681b      	ldr	r3, [r3, #0]
    a8a6:	4668      	mov	r0, sp
    a8a8:	4798      	blx	r3
    a8aa:	e7bd      	b.n	a828 <ev_setup_handler+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    a8ac:	4a0e      	ldr	r2, [pc, #56]	; (a8e8 <ev_setup_handler+0x1a0>)
    a8ae:	f240 71b4 	movw	r1, #1972	; 0x7b4
    a8b2:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a8b4:	490d      	ldr	r1, [pc, #52]	; (a8ec <ev_setup_handler+0x1a4>)
    a8b6:	680a      	ldr	r2, [r1, #0]
    a8b8:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    a8ba:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a8be:	680f      	ldr	r7, [r1, #0]
    a8c0:	433a      	orrs	r2, r7
    a8c2:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a8c4:	680a      	ldr	r2, [r1, #0]
    a8c6:	e7cc      	b.n	a862 <ev_setup_handler+0x11a>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    a8c8:	2280      	movs	r2, #128	; 0x80
    a8ca:	e75c      	b.n	a786 <ev_setup_handler+0x3e>
    a8cc:	40027000 	.word	0x40027000
    a8d0:	20002858 	.word	0x20002858
    a8d4:	200027e8 	.word	0x200027e8
    a8d8:	20002ee2 	.word	0x20002ee2
    a8dc:	2000297c 	.word	0x2000297c
    a8e0:	2000285c 	.word	0x2000285c
    a8e4:	200028ec 	.word	0x200028ec
    a8e8:	40027800 	.word	0x40027800
    a8ec:	40027804 	.word	0x40027804

0000a8f0 <nrfx_usbd_irq_handler>:
{
    a8f0:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    a8f2:	4b22      	ldr	r3, [pc, #136]	; (a97c <nrfx_usbd_irq_handler+0x8c>)
    a8f4:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    uint32_t active = 0;
    a8f8:	2500      	movs	r5, #0
    while (to_process)
    a8fa:	e006      	b.n	a90a <nrfx_usbd_irq_handler+0x1a>
    return 32U;
    a8fc:	2220      	movs	r2, #32
    a8fe:	e00b      	b.n	a918 <nrfx_usbd_irq_handler+0x28>
        to_process &= ~(1UL << event_nr);
    a900:	2301      	movs	r3, #1
    a902:	fa03 f202 	lsl.w	r2, r3, r2
    a906:	ea21 0102 	bic.w	r1, r1, r2
    while (to_process)
    a90a:	b1c1      	cbz	r1, a93e <nrfx_usbd_irq_handler+0x4e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    a90c:	fa91 f2a1 	rbit	r2, r1
  if (value == 0U)
    a910:	2a00      	cmp	r2, #0
    a912:	d0f3      	beq.n	a8fc <nrfx_usbd_irq_handler+0xc>
  return __builtin_clz(value);
    a914:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    a918:	f102 0340 	add.w	r3, r2, #64	; 0x40
    a91c:	009b      	lsls	r3, r3, #2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a91e:	b29b      	uxth	r3, r3
    a920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a924:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a928:	6818      	ldr	r0, [r3, #0]
    if (ret)
    a92a:	b110      	cbz	r0, a932 <nrfx_usbd_irq_handler+0x42>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a92c:	2400      	movs	r4, #0
    a92e:	601c      	str	r4, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a930:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    a932:	2800      	cmp	r0, #0
    a934:	d0e4      	beq.n	a900 <nrfx_usbd_irq_handler+0x10>
            active |= 1UL << event_nr;
    a936:	2301      	movs	r3, #1
    a938:	4093      	lsls	r3, r2
    a93a:	431d      	orrs	r5, r3
    a93c:	e7e0      	b.n	a900 <nrfx_usbd_irq_handler+0x10>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    a93e:	f405 0600 	and.w	r6, r5, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    a942:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
    while (active)
    a946:	e00a      	b.n	a95e <nrfx_usbd_irq_handler+0x6e>
    a948:	fab4 f484 	clz	r4, r4
        m_isr[event_nr]();
    a94c:	4b0c      	ldr	r3, [pc, #48]	; (a980 <nrfx_usbd_irq_handler+0x90>)
    a94e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    a952:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    a954:	2301      	movs	r3, #1
    a956:	fa03 f404 	lsl.w	r4, r3, r4
    a95a:	ea25 0504 	bic.w	r5, r5, r4
    while (active)
    a95e:	b12d      	cbz	r5, a96c <nrfx_usbd_irq_handler+0x7c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    a960:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    a964:	2c00      	cmp	r4, #0
    a966:	d1ef      	bne.n	a948 <nrfx_usbd_irq_handler+0x58>
    return 32U;
    a968:	2420      	movs	r4, #32
    a96a:	e7ef      	b.n	a94c <nrfx_usbd_irq_handler+0x5c>
    usbd_dmareq_process();
    a96c:	f7ff fad8 	bl	9f20 <usbd_dmareq_process>
    if (setup_active)
    a970:	b906      	cbnz	r6, a974 <nrfx_usbd_irq_handler+0x84>
}
    a972:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    a974:	f7ff fee8 	bl	a748 <ev_setup_handler>
}
    a978:	e7fb      	b.n	a972 <nrfx_usbd_irq_handler+0x82>
    a97a:	bf00      	nop
    a97c:	40027000 	.word	0x40027000
    a980:	00015bac 	.word	0x00015bac

0000a984 <nrfx_usbd_ep_enable>:
{
    a984:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a986:	b244      	sxtb	r4, r0
    a988:	2c00      	cmp	r4, #0
    a98a:	db22      	blt.n	a9d2 <nrfx_usbd_ep_enable+0x4e>
    a98c:	4b26      	ldr	r3, [pc, #152]	; (aa28 <nrfx_usbd_ep_enable+0xa4>)
    a98e:	f000 010f 	and.w	r1, r0, #15
    a992:	5c5a      	ldrb	r2, [r3, r1]
    a994:	2301      	movs	r3, #1
    a996:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    a998:	4a24      	ldr	r2, [pc, #144]	; (aa2c <nrfx_usbd_ep_enable+0xa8>)
    a99a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    a99e:	2c00      	cmp	r4, #0
    a9a0:	db19      	blt.n	a9d6 <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    a9a2:	4b22      	ldr	r3, [pc, #136]	; (aa2c <nrfx_usbd_ep_enable+0xa8>)
    a9a4:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    a9a8:	40cb      	lsrs	r3, r1
    a9aa:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a9ae:	b97b      	cbnz	r3, a9d0 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    a9b0:	2c00      	cmp	r4, #0
    a9b2:	db16      	blt.n	a9e2 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    a9b4:	4d1d      	ldr	r5, [pc, #116]	; (aa2c <nrfx_usbd_ep_enable+0xa8>)
    a9b6:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    a9ba:	2201      	movs	r2, #1
    a9bc:	408a      	lsls	r2, r1
    a9be:	4313      	orrs	r3, r2
    a9c0:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    a9c4:	b121      	cbz	r1, a9d0 <nrfx_usbd_ep_enable+0x4c>
    a9c6:	2c00      	cmp	r4, #0
    a9c8:	db02      	blt.n	a9d0 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    a9ca:	f010 0f08 	tst.w	r0, #8
    a9ce:	d011      	beq.n	a9f4 <nrfx_usbd_ep_enable+0x70>
}
    a9d0:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a9d2:	4b17      	ldr	r3, [pc, #92]	; (aa30 <nrfx_usbd_ep_enable+0xac>)
    a9d4:	e7db      	b.n	a98e <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    a9d6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    a9da:	40cb      	lsrs	r3, r1
    a9dc:	f003 0301 	and.w	r3, r3, #1
    a9e0:	e7e5      	b.n	a9ae <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    a9e2:	4d12      	ldr	r5, [pc, #72]	; (aa2c <nrfx_usbd_ep_enable+0xa8>)
    a9e4:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    a9e8:	2201      	movs	r2, #1
    a9ea:	408a      	lsls	r2, r1
    a9ec:	4313      	orrs	r3, r2
    a9ee:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    a9f2:	e7e7      	b.n	a9c4 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    a9f4:	f04f 0320 	mov.w	r3, #32
    a9f8:	f3ef 8511 	mrs	r5, BASEPRI
    a9fc:	f383 8812 	msr	BASEPRI_MAX, r3
    aa00:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    aa04:	f7ff fe6e 	bl	a6e4 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    aa08:	f004 040f 	and.w	r4, r4, #15
    aa0c:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    aa0e:	2301      	movs	r3, #1
    aa10:	fa03 f404 	lsl.w	r4, r3, r4
    aa14:	4a07      	ldr	r2, [pc, #28]	; (aa34 <nrfx_usbd_ep_enable+0xb0>)
    aa16:	6813      	ldr	r3, [r2, #0]
    aa18:	ea23 0304 	bic.w	r3, r3, r4
    aa1c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    aa1e:	f385 8811 	msr	BASEPRI, r5
    aa22:	f3bf 8f6f 	isb	sy
}
    aa26:	e7d3      	b.n	a9d0 <nrfx_usbd_ep_enable+0x4c>
    aa28:	00015b8c 	.word	0x00015b8c
    aa2c:	40027000 	.word	0x40027000
    aa30:	00015b6c 	.word	0x00015b6c
    aa34:	200027e8 	.word	0x200027e8

0000aa38 <nrfx_usbd_ep_stall_clear>:
{
    aa38:	b510      	push	{r4, lr}
    aa3a:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    aa3c:	f010 0f80 	tst.w	r0, #128	; 0x80
    aa40:	d003      	beq.n	aa4a <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    aa42:	4b06      	ldr	r3, [pc, #24]	; (aa5c <nrfx_usbd_ep_stall_clear+0x24>)
    aa44:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    aa48:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    aa4a:	f7ff fd8b 	bl	a564 <nrfx_usbd_ep_stall_check>
    aa4e:	2800      	cmp	r0, #0
    aa50:	d0f7      	beq.n	aa42 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    aa52:	4620      	mov	r0, r4
    aa54:	f7ff fe46 	bl	a6e4 <nrfx_usbd_transfer_out_drop>
    aa58:	e7f3      	b.n	aa42 <nrfx_usbd_ep_stall_clear+0xa>
    aa5a:	bf00      	nop
    aa5c:	40027000 	.word	0x40027000

0000aa60 <usbd_ep_abort_all>:
{
    aa60:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa62:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    aa64:	4b59      	ldr	r3, [pc, #356]	; (abcc <usbd_ep_abort_all+0x16c>)
    aa66:	885b      	ldrh	r3, [r3, #2]
    aa68:	4a59      	ldr	r2, [pc, #356]	; (abd0 <usbd_ep_abort_all+0x170>)
    aa6a:	6815      	ldr	r5, [r2, #0]
    aa6c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    while (0 != ep_waiting)
    aa70:	e016      	b.n	aaa0 <usbd_ep_abort_all+0x40>
    aa72:	2420      	movs	r4, #32
    aa74:	e01f      	b.n	aab6 <usbd_ep_abort_all+0x56>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    aa76:	f044 0380 	orr.w	r3, r4, #128	; 0x80
    aa7a:	e01f      	b.n	aabc <usbd_ep_abort_all+0x5c>
    aa7c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    aa80:	e024      	b.n	aacc <usbd_ep_abort_all+0x6c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    aa82:	4e54      	ldr	r6, [pc, #336]	; (abd4 <usbd_ep_abort_all+0x174>)
    aa84:	e02e      	b.n	aae4 <usbd_ep_abort_all+0x84>
            nrfx_usbd_transfer_out_drop(ep);
    aa86:	f7ff fe2d 	bl	a6e4 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    aa8a:	2303      	movs	r3, #3
    aa8c:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    aa8e:	f387 8811 	msr	BASEPRI, r7
    aa92:	f3bf 8f6f 	isb	sy
        ep_waiting &= ~(1U << bitpos);
    aa96:	2301      	movs	r3, #1
    aa98:	fa03 f404 	lsl.w	r4, r3, r4
    aa9c:	ea25 0504 	bic.w	r5, r5, r4
    while (0 != ep_waiting)
    aaa0:	2d00      	cmp	r5, #0
    aaa2:	f000 808c 	beq.w	abbe <usbd_ep_abort_all+0x15e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    aaa6:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    aaaa:	2c00      	cmp	r4, #0
    aaac:	d0e1      	beq.n	aa72 <usbd_ep_abort_all+0x12>
  return __builtin_clz(value);
    aaae:	fab4 f484 	clz	r4, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    aab2:	2c0f      	cmp	r4, #15
    aab4:	d9df      	bls.n	aa76 <usbd_ep_abort_all+0x16>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    aab6:	f1a4 0310 	sub.w	r3, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    aaba:	b2db      	uxtb	r3, r3
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    aabc:	f013 0f08 	tst.w	r3, #8
    aac0:	d1e9      	bne.n	aa96 <usbd_ep_abort_all+0x36>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    aac2:	2c0f      	cmp	r4, #15
    aac4:	d9da      	bls.n	aa7c <usbd_ep_abort_all+0x1c>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    aac6:	f1a4 0010 	sub.w	r0, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    aaca:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    aacc:	f04f 0320 	mov.w	r3, #32
    aad0:	f3ef 8711 	mrs	r7, BASEPRI
    aad4:	f383 8812 	msr	BASEPRI_MAX, r3
    aad8:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    aadc:	b243      	sxtb	r3, r0
    aade:	2b00      	cmp	r3, #0
    aae0:	dbcf      	blt.n	aa82 <usbd_ep_abort_all+0x22>
    aae2:	4e3d      	ldr	r6, [pc, #244]	; (abd8 <usbd_ep_abort_all+0x178>)
        NRF_USBD_EP_NR_GET(ep));
    aae4:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    aae8:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    aaec:	2b00      	cmp	r3, #0
    aaee:	db19      	blt.n	ab24 <usbd_ep_abort_all+0xc4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    aaf0:	4a37      	ldr	r2, [pc, #220]	; (abd0 <usbd_ep_abort_all+0x170>)
    aaf2:	6812      	ldr	r2, [r2, #0]
    aaf4:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    aaf6:	f003 030f 	and.w	r3, r3, #15
    aafa:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    aafc:	40da      	lsrs	r2, r3
    aafe:	f012 0f01 	tst.w	r2, #1
    ab02:	d1c0      	bne.n	aa86 <usbd_ep_abort_all+0x26>
            p_state->handler.consumer = NULL;
    ab04:	2200      	movs	r2, #0
    ab06:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ab08:	2201      	movs	r2, #1
    ab0a:	fa02 f303 	lsl.w	r3, r2, r3
    ab0e:	4930      	ldr	r1, [pc, #192]	; (abd0 <usbd_ep_abort_all+0x170>)
    ab10:	680a      	ldr	r2, [r1, #0]
    ab12:	ea22 0203 	bic.w	r2, r2, r3
    ab16:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    ab18:	492c      	ldr	r1, [pc, #176]	; (abcc <usbd_ep_abort_all+0x16c>)
    ab1a:	680a      	ldr	r2, [r1, #0]
    ab1c:	ea22 0303 	bic.w	r3, r2, r3
    ab20:	600b      	str	r3, [r1, #0]
    ab22:	e7b2      	b.n	aa8a <usbd_ep_abort_all+0x2a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    ab24:	f010 0f08 	tst.w	r0, #8
    ab28:	d111      	bne.n	ab4e <usbd_ep_abort_all+0xee>
            if(ep != NRFX_USBD_EPIN0)
    ab2a:	2880      	cmp	r0, #128	; 0x80
    ab2c:	d037      	beq.n	ab9e <usbd_ep_abort_all+0x13e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    ab2e:	f202 32da 	addw	r2, r2, #986	; 0x3da
    ab32:	0052      	lsls	r2, r2, #1
    ab34:	4929      	ldr	r1, [pc, #164]	; (abdc <usbd_ep_abort_all+0x17c>)
    ab36:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    ab38:	3104      	adds	r1, #4
    ab3a:	680a      	ldr	r2, [r1, #0]
    ab3c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    ab3e:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ab42:	f8d1 c000 	ldr.w	ip, [r1]
    ab46:	ea42 020c 	orr.w	r2, r2, ip
    ab4a:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    ab4c:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ab4e:	4a1f      	ldr	r2, [pc, #124]	; (abcc <usbd_ep_abort_all+0x16c>)
    ab50:	6811      	ldr	r1, [r2, #0]
    ab52:	4a1f      	ldr	r2, [pc, #124]	; (abd0 <usbd_ep_abort_all+0x170>)
    ab54:	f8d2 c000 	ldr.w	ip, [r2]
    ab58:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
    ab5c:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ab60:	2201      	movs	r2, #1
    ab62:	fa02 f303 	lsl.w	r3, r2, r3
    ab66:	ea1e 0f03 	tst.w	lr, r3
    ab6a:	d090      	beq.n	aa8e <usbd_ep_abort_all+0x2e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ab6c:	ea2c 0203 	bic.w	r2, ip, r3
    ab70:	f8df c05c 	ldr.w	ip, [pc, #92]	; abd0 <usbd_ep_abort_all+0x170>
    ab74:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    ab78:	430b      	orrs	r3, r1
    ab7a:	4a14      	ldr	r2, [pc, #80]	; (abcc <usbd_ep_abort_all+0x16c>)
    ab7c:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    ab7e:	2300      	movs	r3, #0
    ab80:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    ab82:	2303      	movs	r3, #3
    ab84:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    ab86:	2206      	movs	r2, #6
    ab88:	f88d 2004 	strb.w	r2, [sp, #4]
    ab8c:	f88d 0006 	strb.w	r0, [sp, #6]
    ab90:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    ab94:	4b12      	ldr	r3, [pc, #72]	; (abe0 <usbd_ep_abort_all+0x180>)
    ab96:	681b      	ldr	r3, [r3, #0]
    ab98:	a801      	add	r0, sp, #4
    ab9a:	4798      	blx	r3
    ab9c:	e777      	b.n	aa8e <usbd_ep_abort_all+0x2e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    ab9e:	4a0f      	ldr	r2, [pc, #60]	; (abdc <usbd_ep_abort_all+0x17c>)
    aba0:	f240 71b4 	movw	r1, #1972	; 0x7b4
    aba4:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    aba6:	490f      	ldr	r1, [pc, #60]	; (abe4 <usbd_ep_abort_all+0x184>)
    aba8:	680a      	ldr	r2, [r1, #0]
    abaa:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    abac:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    abb0:	f8d1 c000 	ldr.w	ip, [r1]
    abb4:	ea42 020c 	orr.w	r2, r2, ip
    abb8:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    abba:	680a      	ldr	r2, [r1, #0]
    abbc:	e7c7      	b.n	ab4e <usbd_ep_abort_all+0xee>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    abbe:	4b03      	ldr	r3, [pc, #12]	; (abcc <usbd_ep_abort_all+0x16c>)
    abc0:	f240 12ff 	movw	r2, #511	; 0x1ff
    abc4:	601a      	str	r2, [r3, #0]
}
    abc6:	b003      	add	sp, #12
    abc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    abca:	bf00      	nop
    abcc:	20002858 	.word	0x20002858
    abd0:	200027e8 	.word	0x200027e8
    abd4:	200028ec 	.word	0x200028ec
    abd8:	2000285c 	.word	0x2000285c
    abdc:	40027800 	.word	0x40027800
    abe0:	2000297c 	.word	0x2000297c
    abe4:	40027804 	.word	0x40027804

0000abe8 <nrfx_usbd_stop>:
{
    abe8:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    abea:	4b0c      	ldr	r3, [pc, #48]	; (ac1c <nrfx_usbd_stop+0x34>)
    abec:	2280      	movs	r2, #128	; 0x80
    abee:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    abf2:	2027      	movs	r0, #39	; 0x27
    abf4:	f7f9 fba0 	bl	4338 <arch_irq_is_enabled>
    abf8:	b900      	cbnz	r0, abfc <nrfx_usbd_stop+0x14>
}
    abfa:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    abfc:	f7ff ff30 	bl	aa60 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    ac00:	4c07      	ldr	r4, [pc, #28]	; (ac20 <nrfx_usbd_stop+0x38>)
    ac02:	2300      	movs	r3, #0
    ac04:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    ac08:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    ac0c:	2027      	movs	r0, #39	; 0x27
    ac0e:	f7f9 fb7f 	bl	4310 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    ac12:	f04f 33ff 	mov.w	r3, #4294967295
    ac16:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    ac1a:	e7ee      	b.n	abfa <nrfx_usbd_stop+0x12>
    ac1c:	e000e100 	.word	0xe000e100
    ac20:	40027000 	.word	0x40027000

0000ac24 <nrfx_usbd_disable>:
{
    ac24:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    ac26:	f7ff ffdf 	bl	abe8 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    ac2a:	4b0b      	ldr	r3, [pc, #44]	; (ac58 <nrfx_usbd_disable+0x34>)
    ac2c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    ac30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    ac34:	2200      	movs	r2, #0
    ac36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    ac3a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    ac3e:	f7fe faff 	bl	9240 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    ac42:	b110      	cbz	r0, ac4a <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    ac44:	4b05      	ldr	r3, [pc, #20]	; (ac5c <nrfx_usbd_disable+0x38>)
    ac46:	2200      	movs	r2, #0
    ac48:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    ac4a:	4b05      	ldr	r3, [pc, #20]	; (ac60 <nrfx_usbd_disable+0x3c>)
    ac4c:	2200      	movs	r2, #0
    ac4e:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    ac50:	4b04      	ldr	r3, [pc, #16]	; (ac64 <nrfx_usbd_disable+0x40>)
    ac52:	2201      	movs	r2, #1
    ac54:	701a      	strb	r2, [r3, #0]
}
    ac56:	bd08      	pop	{r3, pc}
    ac58:	40027000 	.word	0x40027000
    ac5c:	40027c1c 	.word	0x40027c1c
    ac60:	20002ee0 	.word	0x20002ee0
    ac64:	20002ee1 	.word	0x20002ee1

0000ac68 <nrfx_usbd_suspend>:
{
    ac68:	b538      	push	{r3, r4, r5, lr}
    ac6a:	f04f 0320 	mov.w	r3, #32
    ac6e:	f3ef 8511 	mrs	r5, BASEPRI
    ac72:	f383 8812 	msr	BASEPRI_MAX, r3
    ac76:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    ac7a:	4b13      	ldr	r3, [pc, #76]	; (acc8 <nrfx_usbd_suspend+0x60>)
    ac7c:	781b      	ldrb	r3, [r3, #0]
    ac7e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    ac82:	b92b      	cbnz	r3, ac90 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    ac84:	f385 8811 	msr	BASEPRI, r5
    ac88:	f3bf 8f6f 	isb	sy
}
    ac8c:	4620      	mov	r0, r4
    ac8e:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    ac90:	f7ff fee6 	bl	aa60 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    ac94:	4b0d      	ldr	r3, [pc, #52]	; (accc <nrfx_usbd_suspend+0x64>)
    ac96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    ac9a:	f413 7f00 	tst.w	r3, #512	; 0x200
    ac9e:	d111      	bne.n	acc4 <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    aca0:	4b0a      	ldr	r3, [pc, #40]	; (accc <nrfx_usbd_suspend+0x64>)
    aca2:	2201      	movs	r2, #1
    aca4:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    aca8:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    acac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    acb0:	f413 7f00 	tst.w	r3, #512	; 0x200
    acb4:	d0e6      	beq.n	ac84 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    acb6:	4b05      	ldr	r3, [pc, #20]	; (accc <nrfx_usbd_suspend+0x64>)
    acb8:	2400      	movs	r4, #0
    acba:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    acbe:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
    acc2:	e7df      	b.n	ac84 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    acc4:	2400      	movs	r4, #0
    acc6:	e7dd      	b.n	ac84 <nrfx_usbd_suspend+0x1c>
    acc8:	20002edf 	.word	0x20002edf
    accc:	40027000 	.word	0x40027000

0000acd0 <nrfx_usbd_ep_abort>:
{
    acd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    acd2:	b083      	sub	sp, #12
	__asm__ volatile(
    acd4:	f04f 0320 	mov.w	r3, #32
    acd8:	f3ef 8511 	mrs	r5, BASEPRI
    acdc:	f383 8812 	msr	BASEPRI_MAX, r3
    ace0:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ace4:	b243      	sxtb	r3, r0
    ace6:	2b00      	cmp	r3, #0
    ace8:	db27      	blt.n	ad3a <nrfx_usbd_ep_abort+0x6a>
    acea:	4c39      	ldr	r4, [pc, #228]	; (add0 <nrfx_usbd_ep_abort+0x100>)
        NRF_USBD_EP_NR_GET(ep));
    acec:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    acf0:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    acf4:	2b00      	cmp	r3, #0
    acf6:	db25      	blt.n	ad44 <nrfx_usbd_ep_abort+0x74>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    acf8:	4a36      	ldr	r2, [pc, #216]	; (add4 <nrfx_usbd_ep_abort+0x104>)
    acfa:	6812      	ldr	r2, [r2, #0]
    acfc:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    acfe:	f003 030f 	and.w	r3, r3, #15
    ad02:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    ad04:	40da      	lsrs	r2, r3
    ad06:	f012 0f01 	tst.w	r2, #1
    ad0a:	d118      	bne.n	ad3e <nrfx_usbd_ep_abort+0x6e>
            p_state->handler.consumer = NULL;
    ad0c:	2200      	movs	r2, #0
    ad0e:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ad10:	2201      	movs	r2, #1
    ad12:	fa02 f303 	lsl.w	r3, r2, r3
    ad16:	492f      	ldr	r1, [pc, #188]	; (add4 <nrfx_usbd_ep_abort+0x104>)
    ad18:	680a      	ldr	r2, [r1, #0]
    ad1a:	ea22 0203 	bic.w	r2, r2, r3
    ad1e:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    ad20:	492d      	ldr	r1, [pc, #180]	; (add8 <nrfx_usbd_ep_abort+0x108>)
    ad22:	680a      	ldr	r2, [r1, #0]
    ad24:	ea22 0303 	bic.w	r3, r2, r3
    ad28:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    ad2a:	2303      	movs	r3, #3
    ad2c:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    ad2e:	f385 8811 	msr	BASEPRI, r5
    ad32:	f3bf 8f6f 	isb	sy
}
    ad36:	b003      	add	sp, #12
    ad38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ad3a:	4c28      	ldr	r4, [pc, #160]	; (addc <nrfx_usbd_ep_abort+0x10c>)
    ad3c:	e7d6      	b.n	acec <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    ad3e:	f7ff fcd1 	bl	a6e4 <nrfx_usbd_transfer_out_drop>
    ad42:	e7f2      	b.n	ad2a <nrfx_usbd_ep_abort+0x5a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    ad44:	f010 0f08 	tst.w	r0, #8
    ad48:	d10f      	bne.n	ad6a <nrfx_usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
    ad4a:	2880      	cmp	r0, #128	; 0x80
    ad4c:	d031      	beq.n	adb2 <nrfx_usbd_ep_abort+0xe2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    ad4e:	f202 32da 	addw	r2, r2, #986	; 0x3da
    ad52:	0052      	lsls	r2, r2, #1
    ad54:	4922      	ldr	r1, [pc, #136]	; (ade0 <nrfx_usbd_ep_abort+0x110>)
    ad56:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    ad58:	3104      	adds	r1, #4
    ad5a:	680a      	ldr	r2, [r1, #0]
    ad5c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    ad5e:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ad62:	680e      	ldr	r6, [r1, #0]
    ad64:	4332      	orrs	r2, r6
    ad66:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    ad68:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ad6a:	4a1b      	ldr	r2, [pc, #108]	; (add8 <nrfx_usbd_ep_abort+0x108>)
    ad6c:	6811      	ldr	r1, [r2, #0]
    ad6e:	4a19      	ldr	r2, [pc, #100]	; (add4 <nrfx_usbd_ep_abort+0x104>)
    ad70:	6816      	ldr	r6, [r2, #0]
    ad72:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
    ad76:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ad7a:	2201      	movs	r2, #1
    ad7c:	fa02 f303 	lsl.w	r3, r2, r3
    ad80:	421f      	tst	r7, r3
    ad82:	d0d4      	beq.n	ad2e <nrfx_usbd_ep_abort+0x5e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ad84:	ea26 0603 	bic.w	r6, r6, r3
    ad88:	4a12      	ldr	r2, [pc, #72]	; (add4 <nrfx_usbd_ep_abort+0x104>)
    ad8a:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    ad8c:	430b      	orrs	r3, r1
    ad8e:	4a12      	ldr	r2, [pc, #72]	; (add8 <nrfx_usbd_ep_abort+0x108>)
    ad90:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    ad92:	2300      	movs	r3, #0
    ad94:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    ad96:	2303      	movs	r3, #3
    ad98:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    ad9a:	2206      	movs	r2, #6
    ad9c:	f88d 2004 	strb.w	r2, [sp, #4]
    ada0:	f88d 0006 	strb.w	r0, [sp, #6]
    ada4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    ada8:	4b0e      	ldr	r3, [pc, #56]	; (ade4 <nrfx_usbd_ep_abort+0x114>)
    adaa:	681b      	ldr	r3, [r3, #0]
    adac:	a801      	add	r0, sp, #4
    adae:	4798      	blx	r3
    adb0:	e7bd      	b.n	ad2e <nrfx_usbd_ep_abort+0x5e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    adb2:	4a0b      	ldr	r2, [pc, #44]	; (ade0 <nrfx_usbd_ep_abort+0x110>)
    adb4:	f240 71b4 	movw	r1, #1972	; 0x7b4
    adb8:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    adba:	490b      	ldr	r1, [pc, #44]	; (ade8 <nrfx_usbd_ep_abort+0x118>)
    adbc:	680a      	ldr	r2, [r1, #0]
    adbe:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    adc0:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    adc4:	680e      	ldr	r6, [r1, #0]
    adc6:	4332      	orrs	r2, r6
    adc8:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    adca:	680a      	ldr	r2, [r1, #0]
    adcc:	e7cd      	b.n	ad6a <nrfx_usbd_ep_abort+0x9a>
    adce:	bf00      	nop
    add0:	2000285c 	.word	0x2000285c
    add4:	200027e8 	.word	0x200027e8
    add8:	20002858 	.word	0x20002858
    addc:	200028ec 	.word	0x200028ec
    ade0:	40027800 	.word	0x40027800
    ade4:	2000297c 	.word	0x2000297c
    ade8:	40027804 	.word	0x40027804

0000adec <nrfx_usbd_ep_disable>:
{
    adec:	b5f0      	push	{r4, r5, r6, r7, lr}
    adee:	b083      	sub	sp, #12
    adf0:	4604      	mov	r4, r0
	__asm__ volatile(
    adf2:	f04f 0320 	mov.w	r3, #32
    adf6:	f3ef 8611 	mrs	r6, BASEPRI
    adfa:	f383 8812 	msr	BASEPRI_MAX, r3
    adfe:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ae02:	b243      	sxtb	r3, r0
    ae04:	2b00      	cmp	r3, #0
    ae06:	db3e      	blt.n	ae86 <nrfx_usbd_ep_disable+0x9a>
    ae08:	4d4a      	ldr	r5, [pc, #296]	; (af34 <nrfx_usbd_ep_disable+0x148>)
        NRF_USBD_EP_NR_GET(ep));
    ae0a:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ae0e:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    ae12:	2b00      	cmp	r3, #0
    ae14:	db3d      	blt.n	ae92 <nrfx_usbd_ep_disable+0xa6>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    ae16:	4a48      	ldr	r2, [pc, #288]	; (af38 <nrfx_usbd_ep_disable+0x14c>)
    ae18:	6812      	ldr	r2, [r2, #0]
    ae1a:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    ae1c:	f003 030f 	and.w	r3, r3, #15
    ae20:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    ae22:	40da      	lsrs	r2, r3
    ae24:	f012 0f01 	tst.w	r2, #1
    ae28:	d12f      	bne.n	ae8a <nrfx_usbd_ep_disable+0x9e>
            p_state->handler.consumer = NULL;
    ae2a:	2200      	movs	r2, #0
    ae2c:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ae2e:	2201      	movs	r2, #1
    ae30:	fa02 f303 	lsl.w	r3, r2, r3
    ae34:	4940      	ldr	r1, [pc, #256]	; (af38 <nrfx_usbd_ep_disable+0x14c>)
    ae36:	680a      	ldr	r2, [r1, #0]
    ae38:	ea22 0203 	bic.w	r2, r2, r3
    ae3c:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    ae3e:	493f      	ldr	r1, [pc, #252]	; (af3c <nrfx_usbd_ep_disable+0x150>)
    ae40:	680a      	ldr	r2, [r1, #0]
    ae42:	ea22 0303 	bic.w	r3, r2, r3
    ae46:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    ae48:	2303      	movs	r3, #3
    ae4a:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    ae4c:	f386 8811 	msr	BASEPRI, r6
    ae50:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    ae54:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    ae58:	b264      	sxtb	r4, r4
    ae5a:	2c00      	cmp	r4, #0
    ae5c:	db5e      	blt.n	af1c <nrfx_usbd_ep_disable+0x130>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    ae5e:	4838      	ldr	r0, [pc, #224]	; (af40 <nrfx_usbd_ep_disable+0x154>)
    ae60:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
    ae64:	2101      	movs	r1, #1
    ae66:	4099      	lsls	r1, r3
    ae68:	ea22 0201 	bic.w	r2, r2, r1
    ae6c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    ae70:	2c00      	cmp	r4, #0
    ae72:	db5d      	blt.n	af30 <nrfx_usbd_ep_disable+0x144>
    ae74:	4a33      	ldr	r2, [pc, #204]	; (af44 <nrfx_usbd_ep_disable+0x158>)
    ae76:	5cd2      	ldrb	r2, [r2, r3]
    ae78:	2301      	movs	r3, #1
    ae7a:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    ae7c:	4a30      	ldr	r2, [pc, #192]	; (af40 <nrfx_usbd_ep_disable+0x154>)
    ae7e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    ae82:	b003      	add	sp, #12
    ae84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ae86:	4d30      	ldr	r5, [pc, #192]	; (af48 <nrfx_usbd_ep_disable+0x15c>)
    ae88:	e7bf      	b.n	ae0a <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
    ae8a:	4620      	mov	r0, r4
    ae8c:	f7ff fc2a 	bl	a6e4 <nrfx_usbd_transfer_out_drop>
    ae90:	e7da      	b.n	ae48 <nrfx_usbd_ep_disable+0x5c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    ae92:	f014 0f08 	tst.w	r4, #8
    ae96:	d10f      	bne.n	aeb8 <nrfx_usbd_ep_disable+0xcc>
            if(ep != NRFX_USBD_EPIN0)
    ae98:	2c80      	cmp	r4, #128	; 0x80
    ae9a:	d031      	beq.n	af00 <nrfx_usbd_ep_disable+0x114>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    ae9c:	f202 32da 	addw	r2, r2, #986	; 0x3da
    aea0:	0052      	lsls	r2, r2, #1
    aea2:	492a      	ldr	r1, [pc, #168]	; (af4c <nrfx_usbd_ep_disable+0x160>)
    aea4:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    aea6:	3104      	adds	r1, #4
    aea8:	680a      	ldr	r2, [r1, #0]
    aeaa:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    aeac:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    aeb0:	6808      	ldr	r0, [r1, #0]
    aeb2:	4302      	orrs	r2, r0
    aeb4:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    aeb6:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    aeb8:	4a20      	ldr	r2, [pc, #128]	; (af3c <nrfx_usbd_ep_disable+0x150>)
    aeba:	6811      	ldr	r1, [r2, #0]
    aebc:	4a1e      	ldr	r2, [pc, #120]	; (af38 <nrfx_usbd_ep_disable+0x14c>)
    aebe:	6810      	ldr	r0, [r2, #0]
    aec0:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
    aec4:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    aec8:	2201      	movs	r2, #1
    aeca:	fa02 f303 	lsl.w	r3, r2, r3
    aece:	421f      	tst	r7, r3
    aed0:	d0bc      	beq.n	ae4c <nrfx_usbd_ep_disable+0x60>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    aed2:	ea20 0003 	bic.w	r0, r0, r3
    aed6:	4a18      	ldr	r2, [pc, #96]	; (af38 <nrfx_usbd_ep_disable+0x14c>)
    aed8:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    aeda:	430b      	orrs	r3, r1
    aedc:	4a17      	ldr	r2, [pc, #92]	; (af3c <nrfx_usbd_ep_disable+0x150>)
    aede:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    aee0:	2300      	movs	r3, #0
    aee2:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    aee4:	2303      	movs	r3, #3
    aee6:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    aee8:	2206      	movs	r2, #6
    aeea:	f88d 2004 	strb.w	r2, [sp, #4]
    aeee:	f88d 4006 	strb.w	r4, [sp, #6]
    aef2:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    aef6:	4b16      	ldr	r3, [pc, #88]	; (af50 <nrfx_usbd_ep_disable+0x164>)
    aef8:	681b      	ldr	r3, [r3, #0]
    aefa:	a801      	add	r0, sp, #4
    aefc:	4798      	blx	r3
    aefe:	e7a5      	b.n	ae4c <nrfx_usbd_ep_disable+0x60>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    af00:	4a12      	ldr	r2, [pc, #72]	; (af4c <nrfx_usbd_ep_disable+0x160>)
    af02:	f240 71b4 	movw	r1, #1972	; 0x7b4
    af06:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    af08:	4912      	ldr	r1, [pc, #72]	; (af54 <nrfx_usbd_ep_disable+0x168>)
    af0a:	680a      	ldr	r2, [r1, #0]
    af0c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    af0e:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    af12:	6808      	ldr	r0, [r1, #0]
    af14:	4302      	orrs	r2, r0
    af16:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    af18:	680a      	ldr	r2, [r1, #0]
    af1a:	e7cd      	b.n	aeb8 <nrfx_usbd_ep_disable+0xcc>
        p_reg->EPINEN &= ~(1UL << epnr);
    af1c:	4808      	ldr	r0, [pc, #32]	; (af40 <nrfx_usbd_ep_disable+0x154>)
    af1e:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    af22:	2101      	movs	r1, #1
    af24:	4099      	lsls	r1, r3
    af26:	ea22 0201 	bic.w	r2, r2, r1
    af2a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    af2e:	e79f      	b.n	ae70 <nrfx_usbd_ep_disable+0x84>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    af30:	4a09      	ldr	r2, [pc, #36]	; (af58 <nrfx_usbd_ep_disable+0x16c>)
    af32:	e7a0      	b.n	ae76 <nrfx_usbd_ep_disable+0x8a>
    af34:	2000285c 	.word	0x2000285c
    af38:	200027e8 	.word	0x200027e8
    af3c:	20002858 	.word	0x20002858
    af40:	40027000 	.word	0x40027000
    af44:	00015b8c 	.word	0x00015b8c
    af48:	200028ec 	.word	0x200028ec
    af4c:	40027800 	.word	0x40027800
    af50:	2000297c 	.word	0x2000297c
    af54:	40027804 	.word	0x40027804
    af58:	00015b6c 	.word	0x00015b6c

0000af5c <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
    af5c:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
    af5e:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
    af62:	d01c      	beq.n	af9e <lfs_dir_traverse_filter+0x42>
    af64:	4a19      	ldr	r2, [pc, #100]	; (afcc <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
    af66:	6803      	ldr	r3, [r0, #0]
    af68:	ea83 0401 	eor.w	r4, r3, r1
    af6c:	4214      	tst	r4, r2
    af6e:	d024      	beq.n	afba <lfs_dir_traverse_filter+0x5e>
    return ((int32_t)(tag << 22) >> 22) == -1;
    af70:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
    af74:	f1b2 3fff 	cmp.w	r2, #4294967295
    af78:	d022      	beq.n	afc0 <lfs_dir_traverse_filter+0x64>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
    af7a:	4c14      	ldr	r4, [pc, #80]	; (afcc <lfs_dir_traverse_filter+0x70>)
    af7c:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
    af7e:	4a14      	ldr	r2, [pc, #80]	; (afd0 <lfs_dir_traverse_filter+0x74>)
    af80:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    af82:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
    af86:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
    af8a:	4294      	cmp	r4, r2
    af8c:	d01a      	beq.n	afc4 <lfs_dir_traverse_filter+0x68>
    return (tag & 0x70000000) >> 20;
    af8e:	0d0a      	lsrs	r2, r1, #20
    af90:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    af94:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    af98:	d003      	beq.n	afa2 <lfs_dir_traverse_filter+0x46>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
    af9a:	2000      	movs	r0, #0
    af9c:	e00e      	b.n	afbc <lfs_dir_traverse_filter+0x60>
            : LFS_MKTAG(0x700, 0x3ff, 0);
    af9e:	4a0d      	ldr	r2, [pc, #52]	; (afd4 <lfs_dir_traverse_filter+0x78>)
    afa0:	e7e1      	b.n	af66 <lfs_dir_traverse_filter+0xa>
    return (tag & 0x000ffc00) >> 10;
    afa2:	f3c1 2189 	ubfx	r1, r1, #10, #10
    afa6:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    afaa:	428c      	cmp	r4, r1
    afac:	d30c      	bcc.n	afc8 <lfs_dir_traverse_filter+0x6c>
    return (int8_t)lfs_tag_chunk(tag);
    afae:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    afb0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
    afb4:	6003      	str	r3, [r0, #0]
    return false;
    afb6:	2000      	movs	r0, #0
    afb8:	e000      	b.n	afbc <lfs_dir_traverse_filter+0x60>
        return true;
    afba:	2001      	movs	r0, #1
}
    afbc:	bc10      	pop	{r4}
    afbe:	4770      	bx	lr
        return true;
    afc0:	2001      	movs	r0, #1
    afc2:	e7fb      	b.n	afbc <lfs_dir_traverse_filter+0x60>
    afc4:	2001      	movs	r0, #1
    afc6:	e7f9      	b.n	afbc <lfs_dir_traverse_filter+0x60>
    return false;
    afc8:	2000      	movs	r0, #0
    afca:	e7f7      	b.n	afbc <lfs_dir_traverse_filter+0x60>
    afcc:	7ffffc00 	.word	0x7ffffc00
    afd0:	000ffc00 	.word	0x000ffc00
    afd4:	700ffc00 	.word	0x700ffc00

0000afd8 <lfs_fs_prepmove>:
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    afd8:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    afda:	6b04      	ldr	r4, [r0, #48]	; 0x30
    afdc:	4b10      	ldr	r3, [pc, #64]	; (b020 <lfs_fs_prepmove+0x48>)
    afde:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    afe0:	f240 34ff 	movw	r4, #1023	; 0x3ff
    afe4:	42a1      	cmp	r1, r4
    afe6:	d014      	beq.n	b012 <lfs_fs_prepmove+0x3a>
    afe8:	028c      	lsls	r4, r1, #10
    afea:	f044 449f 	orr.w	r4, r4, #1333788672	; 0x4f800000
    afee:	f444 04e0 	orr.w	r4, r4, #7340032	; 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    aff2:	4323      	orrs	r3, r4
    aff4:	6303      	str	r3, [r0, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    aff6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    affa:	4299      	cmp	r1, r3
    affc:	d00b      	beq.n	b016 <lfs_fs_prepmove+0x3e>
    affe:	6813      	ldr	r3, [r2, #0]
    b000:	6343      	str	r3, [r0, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    b002:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b006:	4299      	cmp	r1, r3
    b008:	d007      	beq.n	b01a <lfs_fs_prepmove+0x42>
    b00a:	6853      	ldr	r3, [r2, #4]
    b00c:	6383      	str	r3, [r0, #56]	; 0x38
}
    b00e:	bc10      	pop	{r4}
    b010:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    b012:	2400      	movs	r4, #0
    b014:	e7ed      	b.n	aff2 <lfs_fs_prepmove+0x1a>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    b016:	2300      	movs	r3, #0
    b018:	e7f2      	b.n	b000 <lfs_fs_prepmove+0x28>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    b01a:	2300      	movs	r3, #0
    b01c:	e7f6      	b.n	b00c <lfs_fs_prepmove+0x34>
    b01e:	bf00      	nop
    b020:	800003ff 	.word	0x800003ff

0000b024 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b028:	b097      	sub	sp, #92	; 0x5c
    b02a:	4615      	mov	r5, r2
    b02c:	9309      	str	r3, [sp, #36]	; 0x24
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
    b02e:	6812      	ldr	r2, [r2, #0]
    b030:	6e83      	ldr	r3, [r0, #104]	; 0x68
    b032:	6a1b      	ldr	r3, [r3, #32]
    b034:	429a      	cmp	r2, r3
    b036:	f080 828e 	bcs.w	b556 <lfs_dir_fetchmatch+0x532>
    b03a:	4683      	mov	fp, r0
    b03c:	4689      	mov	r9, r1
    b03e:	686a      	ldr	r2, [r5, #4]
    b040:	4293      	cmp	r3, r2
    b042:	f240 828c 	bls.w	b55e <lfs_dir_fetchmatch+0x53a>
    uint32_t revs[2] = {0, 0};
    b046:	2600      	movs	r6, #0
    b048:	9612      	str	r6, [sp, #72]	; 0x48
    b04a:	9613      	str	r6, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
    b04c:	4634      	mov	r4, r6
    b04e:	e000      	b.n	b052 <lfs_dir_fetchmatch+0x2e>
    b050:	3401      	adds	r4, #1
    b052:	2c01      	cmp	r4, #1
    b054:	dc2b      	bgt.n	b0ae <lfs_dir_fetchmatch+0x8a>
                pair[i], 0, &revs[i], sizeof(revs[i]));
    b056:	00a7      	lsls	r7, r4, #2
    b058:	ab12      	add	r3, sp, #72	; 0x48
    b05a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
        int err = lfs_bd_read(lfs,
    b05e:	2304      	movs	r3, #4
    b060:	9303      	str	r3, [sp, #12]
    b062:	9202      	str	r2, [sp, #8]
    b064:	2100      	movs	r1, #0
    b066:	9101      	str	r1, [sp, #4]
    b068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    b06c:	9200      	str	r2, [sp, #0]
    b06e:	465a      	mov	r2, fp
    b070:	4658      	mov	r0, fp
    b072:	f007 fbfd 	bl	12870 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
    b076:	ab16      	add	r3, sp, #88	; 0x58
    b078:	441f      	add	r7, r3
    b07a:	f857 2c10 	ldr.w	r2, [r7, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
    b07e:	4603      	mov	r3, r0
    b080:	b118      	cbz	r0, b08a <lfs_dir_fetchmatch+0x66>
    b082:	f110 0f54 	cmn.w	r0, #84	; 0x54
    b086:	f040 826e 	bne.w	b566 <lfs_dir_fetchmatch+0x542>
        if (err != LFS_ERR_CORRUPT &&
    b08a:	f113 0f54 	cmn.w	r3, #84	; 0x54
    b08e:	d0df      	beq.n	b050 <lfs_dir_fetchmatch+0x2c>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
    b090:	1c63      	adds	r3, r4, #1
    b092:	f003 0301 	and.w	r3, r3, #1
    b096:	bf48      	it	mi
    b098:	425b      	negmi	r3, r3
    b09a:	a916      	add	r1, sp, #88	; 0x58
    b09c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    b0a0:	f853 3c10 	ldr.w	r3, [r3, #-16]
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
    b0a4:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
    b0a6:	2a00      	cmp	r2, #0
    b0a8:	ddd2      	ble.n	b050 <lfs_dir_fetchmatch+0x2c>
            r = i;
    b0aa:	4626      	mov	r6, r4
    b0ac:	e7d0      	b.n	b050 <lfs_dir_fetchmatch+0x2c>
    dir->pair[0] = pair[(r+0)%2];
    b0ae:	2e00      	cmp	r6, #0
    b0b0:	f006 0301 	and.w	r3, r6, #1
    b0b4:	bfb8      	it	lt
    b0b6:	425b      	neglt	r3, r3
    b0b8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    b0bc:	f8c9 2000 	str.w	r2, [r9]
    dir->pair[1] = pair[(r+1)%2];
    b0c0:	3601      	adds	r6, #1
    b0c2:	f006 0601 	and.w	r6, r6, #1
    b0c6:	bf48      	it	mi
    b0c8:	4276      	negmi	r6, r6
    b0ca:	960a      	str	r6, [sp, #40]	; 0x28
    b0cc:	f855 2026 	ldr.w	r2, [r5, r6, lsl #2]
    b0d0:	f8c9 2004 	str.w	r2, [r9, #4]
    dir->rev = revs[(r+0)%2];
    b0d4:	aa16      	add	r2, sp, #88	; 0x58
    b0d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b0da:	f853 3c10 	ldr.w	r3, [r3, #-16]
    b0de:	f8c9 3008 	str.w	r3, [r9, #8]
    dir->off = 0; // nonzero = found some commits
    b0e2:	2300      	movs	r3, #0
    b0e4:	f8c9 300c 	str.w	r3, [r9, #12]
    for (int i = 0; i < 2; i++) {
    b0e8:	469a      	mov	sl, r3
    lfs_stag_t besttag = -1;
    b0ea:	f04f 33ff 	mov.w	r3, #4294967295
    b0ee:	9305      	str	r3, [sp, #20]
    for (int i = 0; i < 2; i++) {
    b0f0:	e053      	b.n	b19a <lfs_dir_fetchmatch+0x176>
                if (err == LFS_ERR_CORRUPT) {
    b0f2:	f110 0f54 	cmn.w	r0, #84	; 0x54
    b0f6:	f040 81b0 	bne.w	b45a <lfs_dir_fetchmatch+0x436>
                    dir->erased = false;
    b0fa:	2300      	movs	r3, #0
    b0fc:	f889 3016 	strb.w	r3, [r9, #22]
                    break;
    b100:	e034      	b.n	b16c <lfs_dir_fetchmatch+0x148>
    return (tag & 0x70000000) >> 20;
    b102:	ea4f 5318 	mov.w	r3, r8, lsr #20
    b106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    b10a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    b10e:	d005      	beq.n	b11c <lfs_dir_fetchmatch+0xf8>
    b110:	9b07      	ldr	r3, [sp, #28]
    b112:	f003 0301 	and.w	r3, r3, #1
    b116:	f889 3016 	strb.w	r3, [r9, #22]
                break;
    b11a:	e027      	b.n	b16c <lfs_dir_fetchmatch+0x148>
                        dir->off % lfs->cfg->prog_size == 0);
    b11c:	f8d9 100c 	ldr.w	r1, [r9, #12]
    b120:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
    b124:	699a      	ldr	r2, [r3, #24]
    b126:	fbb1 f3f2 	udiv	r3, r1, r2
    b12a:	fb02 1313 	mls	r3, r2, r3, r1
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    b12e:	2b00      	cmp	r3, #0
    b130:	d1ee      	bne.n	b110 <lfs_dir_fetchmatch+0xec>
    b132:	2301      	movs	r3, #1
    b134:	9307      	str	r3, [sp, #28]
    b136:	e7eb      	b.n	b110 <lfs_dir_fetchmatch+0xec>
                dir->erased = false;
    b138:	2300      	movs	r3, #0
    b13a:	f889 3016 	strb.w	r3, [r9, #22]
                break;
    b13e:	e015      	b.n	b16c <lfs_dir_fetchmatch+0x148>
                err = lfs_bd_read(lfs,
    b140:	2204      	movs	r2, #4
    b142:	9203      	str	r2, [sp, #12]
    b144:	aa0d      	add	r2, sp, #52	; 0x34
    b146:	9202      	str	r2, [sp, #8]
    b148:	1d32      	adds	r2, r6, #4
    b14a:	9201      	str	r2, [sp, #4]
    b14c:	f8d9 2000 	ldr.w	r2, [r9]
    b150:	9200      	str	r2, [sp, #0]
    b152:	465a      	mov	r2, fp
    b154:	2100      	movs	r1, #0
    b156:	4658      	mov	r0, fp
    b158:	f007 fb8a 	bl	12870 <lfs_bd_read>
                if (err) {
    b15c:	2800      	cmp	r0, #0
    b15e:	d136      	bne.n	b1ce <lfs_dir_fetchmatch+0x1aa>
                dcrc = lfs_fromle32(dcrc);
    b160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (crc != dcrc) {
    b162:	42a3      	cmp	r3, r4
    b164:	d03c      	beq.n	b1e0 <lfs_dir_fetchmatch+0x1bc>
                    dir->erased = false;
    b166:	2300      	movs	r3, #0
    b168:	f889 3016 	strb.w	r3, [r9, #22]
        if (dir->off > 0) {
    b16c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    b170:	2b00      	cmp	r3, #0
    b172:	f040 8175 	bne.w	b460 <lfs_dir_fetchmatch+0x43c>
    lfs_block_t t = pair[0];
    b176:	f8d9 3000 	ldr.w	r3, [r9]
    pair[0] = pair[1];
    b17a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b17e:	f8c9 2000 	str.w	r2, [r9]
    pair[1] = t;
    b182:	f8c9 3004 	str.w	r3, [r9, #4]
        dir->rev = revs[(r+1)%2];
    b186:	aa16      	add	r2, sp, #88	; 0x58
    b188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b18a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b18e:	f853 3c10 	ldr.w	r3, [r3, #-16]
    b192:	f8c9 3008 	str.w	r3, [r9, #8]
    for (int i = 0; i < 2; i++) {
    b196:	f10a 0a01 	add.w	sl, sl, #1
    b19a:	f1ba 0f01 	cmp.w	sl, #1
    b19e:	f300 81b6 	bgt.w	b50e <lfs_dir_fetchmatch+0x4ea>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
    b1a2:	4abc      	ldr	r2, [pc, #752]	; (b494 <lfs_dir_fetchmatch+0x470>)
    b1a4:	ab0e      	add	r3, sp, #56	; 0x38
    b1a6:	e892 0003 	ldmia.w	r2, {r0, r1}
    b1aa:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    b1ae:	2204      	movs	r2, #4
    b1b0:	f109 0108 	add.w	r1, r9, #8
    b1b4:	f04f 30ff 	mov.w	r0, #4294967295
    b1b8:	f002 fb8a 	bl	d8d0 <lfs_crc>
    b1bc:	4604      	mov	r4, r0
        lfs_stag_t tempbesttag = besttag;
    b1be:	9b05      	ldr	r3, [sp, #20]
    b1c0:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
    b1c2:	2600      	movs	r6, #0
    b1c4:	960b      	str	r6, [sp, #44]	; 0x2c
        uint16_t tempcount = 0;
    b1c6:	9606      	str	r6, [sp, #24]
        lfs_tag_t ptag = 0xffffffff;
    b1c8:	f04f 38ff 	mov.w	r8, #4294967295
    b1cc:	e066      	b.n	b29c <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
    b1ce:	f110 0f54 	cmn.w	r0, #84	; 0x54
    b1d2:	d103      	bne.n	b1dc <lfs_dir_fetchmatch+0x1b8>
                        dir->erased = false;
    b1d4:	2300      	movs	r3, #0
    b1d6:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    b1da:	e7c7      	b.n	b16c <lfs_dir_fetchmatch+0x148>
                    return err;
    b1dc:	9005      	str	r0, [sp, #20]
    b1de:	e1b6      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    b1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
    b1e2:	ea4f 5813 	mov.w	r8, r3, lsr #20
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    b1e6:	ea85 78c8 	eor.w	r8, r5, r8, lsl #31
                lfs->seed ^= crc;
    b1ea:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
    b1ee:	4062      	eors	r2, r4
    b1f0:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
    return ((int32_t)(tag << 22) >> 22) == -1;
    b1f4:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b1f8:	f1b2 3fff 	cmp.w	r2, #4294967295
    b1fc:	bf08      	it	eq
    b1fe:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
    b200:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b204:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
    b206:	4433      	add	r3, r6
    b208:	f8c9 300c 	str.w	r3, [r9, #12]
                dir->etag = ptag;
    b20c:	f8c9 8010 	str.w	r8, [r9, #16]
                dir->count = tempcount;
    b210:	9b06      	ldr	r3, [sp, #24]
    b212:	f8a9 3014 	strh.w	r3, [r9, #20]
                dir->tail[0] = temptail[0];
    b216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b218:	f8c9 3018 	str.w	r3, [r9, #24]
                dir->tail[1] = temptail[1];
    b21c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b21e:	f8c9 301c 	str.w	r3, [r9, #28]
                dir->split = tempsplit;
    b222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b224:	f889 3017 	strb.w	r3, [r9, #23]
                besttag = tempbesttag;
    b228:	9b08      	ldr	r3, [sp, #32]
    b22a:	9305      	str	r3, [sp, #20]
                crc = 0xffffffff;
    b22c:	f04f 34ff 	mov.w	r4, #4294967295
    b230:	e034      	b.n	b29c <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
    b232:	f110 0f54 	cmn.w	r0, #84	; 0x54
    b236:	d10f      	bne.n	b258 <lfs_dir_fetchmatch+0x234>
                        dir->erased = false;
    b238:	2300      	movs	r3, #0
    b23a:	f889 3016 	strb.w	r3, [r9, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    b23e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    b240:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    b242:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
    b246:	d109      	bne.n	b25c <lfs_dir_fetchmatch+0x238>
    return (tag & 0x000ffc00) >> 10;
    b248:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
    b24c:	9a06      	ldr	r2, [sp, #24]
    b24e:	4293      	cmp	r3, r2
    b250:	d30c      	bcc.n	b26c <lfs_dir_fetchmatch+0x248>
                    tempcount = lfs_tag_id(tag) + 1;
    b252:	3301      	adds	r3, #1
    b254:	9306      	str	r3, [sp, #24]
    b256:	e009      	b.n	b26c <lfs_dir_fetchmatch+0x248>
                    return err;
    b258:	9005      	str	r0, [sp, #20]
    b25a:	e178      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
    b25c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    b260:	f000 8090 	beq.w	b384 <lfs_dir_fetchmatch+0x360>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
    b264:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
    b268:	f000 80b5 	beq.w	b3d6 <lfs_dir_fetchmatch+0x3b2>
            if ((fmask & tag) == (fmask & ftag)) {
    b26c:	990c      	ldr	r1, [sp, #48]	; 0x30
    b26e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b270:	404b      	eors	r3, r1
    b272:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b274:	4213      	tst	r3, r2
    b276:	d110      	bne.n	b29a <lfs_dir_fetchmatch+0x276>
                        dir->pair[0], off+sizeof(tag)});
    b278:	f8d9 3000 	ldr.w	r3, [r9]
                int res = cb(data, tag, &(struct lfs_diskoff){
    b27c:	9314      	str	r3, [sp, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag)});
    b27e:	1d33      	adds	r3, r6, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
    b280:	9315      	str	r3, [sp, #84]	; 0x54
    b282:	aa14      	add	r2, sp, #80	; 0x50
    b284:	9823      	ldr	r0, [sp, #140]	; 0x8c
    b286:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b288:	4798      	blx	r3
                if (res < 0) {
    b28a:	2800      	cmp	r0, #0
    b28c:	f2c0 80c2 	blt.w	b414 <lfs_dir_fetchmatch+0x3f0>
                if (res == LFS_CMP_EQ) {
    b290:	2800      	cmp	r0, #0
    b292:	f040 80c8 	bne.w	b426 <lfs_dir_fetchmatch+0x402>
                    tempbesttag = tag;
    b296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b298:	9308      	str	r3, [sp, #32]
            ptag = tag;
    b29a:	46a8      	mov	r8, r5
    return ((int32_t)(tag << 22) >> 22) == -1;
    b29c:	f348 0309 	sbfx	r3, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
    b2a4:	bf14      	ite	ne
    b2a6:	4643      	movne	r3, r8
    b2a8:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
    b2ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b2b0:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
    b2b2:	441e      	add	r6, r3
            int err = lfs_bd_read(lfs,
    b2b4:	465f      	mov	r7, fp
                    NULL, &lfs->rcache, lfs->cfg->block_size,
    b2b6:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
            int err = lfs_bd_read(lfs,
    b2ba:	69db      	ldr	r3, [r3, #28]
    b2bc:	2204      	movs	r2, #4
    b2be:	9203      	str	r2, [sp, #12]
    b2c0:	aa0c      	add	r2, sp, #48	; 0x30
    b2c2:	9202      	str	r2, [sp, #8]
    b2c4:	9601      	str	r6, [sp, #4]
    b2c6:	f8d9 2000 	ldr.w	r2, [r9]
    b2ca:	9200      	str	r2, [sp, #0]
    b2cc:	465a      	mov	r2, fp
    b2ce:	2100      	movs	r1, #0
    b2d0:	4658      	mov	r0, fp
    b2d2:	f007 facd 	bl	12870 <lfs_bd_read>
            if (err) {
    b2d6:	9007      	str	r0, [sp, #28]
    b2d8:	2800      	cmp	r0, #0
    b2da:	f47f af0a 	bne.w	b0f2 <lfs_dir_fetchmatch+0xce>
            crc = lfs_crc(crc, &tag, sizeof(tag));
    b2de:	2204      	movs	r2, #4
    b2e0:	a90c      	add	r1, sp, #48	; 0x30
    b2e2:	4620      	mov	r0, r4
    b2e4:	f002 faf4 	bl	d8d0 <lfs_crc>
    b2e8:	4604      	mov	r4, r0
            tag = lfs_frombe32(tag) ^ ptag;
    b2ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    b2ec:	ba2d      	rev	r5, r5
    b2ee:	ea85 0508 	eor.w	r5, r5, r8
    b2f2:	950c      	str	r5, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag)) {
    b2f4:	2d00      	cmp	r5, #0
    b2f6:	f6ff af04 	blt.w	b102 <lfs_dir_fetchmatch+0xde>
    return ((int32_t)(tag << 22) >> 22) == -1;
    b2fa:	f345 0209 	sbfx	r2, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b2fe:	f1b2 3fff 	cmp.w	r2, #4294967295
    b302:	bf14      	ite	ne
    b304:	462a      	movne	r2, r5
    b306:	1c6a      	addeq	r2, r5, #1
    return tag & 0x000003ff;
    b308:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b30c:	3204      	adds	r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
    b30e:	4432      	add	r2, r6
    b310:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
    b314:	69db      	ldr	r3, [r3, #28]
    b316:	429a      	cmp	r2, r3
    b318:	f63f af0e 	bhi.w	b138 <lfs_dir_fetchmatch+0x114>
    return (tag & 0x70000000) >> 20;
    b31c:	0d2a      	lsrs	r2, r5, #20
    b31e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
    b322:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    b326:	f43f af0b 	beq.w	b140 <lfs_dir_fetchmatch+0x11c>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b32a:	f04f 0804 	mov.w	r8, #4
    b32e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
    b330:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b334:	f1b2 3fff 	cmp.w	r2, #4294967295
    b338:	bf08      	it	eq
    b33a:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
    b33c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b340:	3304      	adds	r3, #4
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b342:	4543      	cmp	r3, r8
    b344:	f67f af7b 	bls.w	b23e <lfs_dir_fetchmatch+0x21a>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
    b348:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
    b34c:	69db      	ldr	r3, [r3, #28]
    b34e:	2201      	movs	r2, #1
    b350:	9203      	str	r2, [sp, #12]
    b352:	aa0d      	add	r2, sp, #52	; 0x34
    b354:	9202      	str	r2, [sp, #8]
    b356:	eb06 0208 	add.w	r2, r6, r8
    b35a:	9201      	str	r2, [sp, #4]
    b35c:	f8d9 2000 	ldr.w	r2, [r9]
    b360:	9200      	str	r2, [sp, #0]
    b362:	463a      	mov	r2, r7
    b364:	2100      	movs	r1, #0
    b366:	4658      	mov	r0, fp
    b368:	f007 fa82 	bl	12870 <lfs_bd_read>
                if (err) {
    b36c:	2800      	cmp	r0, #0
    b36e:	f47f af60 	bne.w	b232 <lfs_dir_fetchmatch+0x20e>
                crc = lfs_crc(crc, &dat, 1);
    b372:	2201      	movs	r2, #1
    b374:	a90d      	add	r1, sp, #52	; 0x34
    b376:	4620      	mov	r0, r4
    b378:	f002 faaa 	bl	d8d0 <lfs_crc>
    b37c:	4604      	mov	r4, r0
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b37e:	f108 0801 	add.w	r8, r8, #1
    b382:	e7d4      	b.n	b32e <lfs_dir_fetchmatch+0x30a>
    return (int8_t)lfs_tag_chunk(tag);
    b384:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
    b386:	9906      	ldr	r1, [sp, #24]
    b388:	4411      	add	r1, r2
    b38a:	b289      	uxth	r1, r1
    b38c:	9106      	str	r1, [sp, #24]
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
    b38e:	9908      	ldr	r1, [sp, #32]
    b390:	4608      	mov	r0, r1
    b392:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b396:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
    b39a:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
    b39e:	f021 0103 	bic.w	r1, r1, #3
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    b3a2:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
    b3a6:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
    b3aa:	428b      	cmp	r3, r1
    b3ac:	d00f      	beq.n	b3ce <lfs_dir_fetchmatch+0x3aa>
                } else if (tempbesttag != -1 &&
    b3ae:	9908      	ldr	r1, [sp, #32]
    b3b0:	f1b1 3fff 	cmp.w	r1, #4294967295
    b3b4:	f43f af5a 	beq.w	b26c <lfs_dir_fetchmatch+0x248>
    return (tag & 0x000ffc00) >> 10;
    b3b8:	f3c3 2389 	ubfx	r3, r3, #10, #10
    b3bc:	f3c0 2189 	ubfx	r1, r0, #10, #10
                } else if (tempbesttag != -1 &&
    b3c0:	428b      	cmp	r3, r1
    b3c2:	f63f af53 	bhi.w	b26c <lfs_dir_fetchmatch+0x248>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    b3c6:	eb00 2382 	add.w	r3, r0, r2, lsl #10
    b3ca:	9308      	str	r3, [sp, #32]
    b3cc:	e74e      	b.n	b26c <lfs_dir_fetchmatch+0x248>
                    tempbesttag |= 0x80000000;
    b3ce:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
    b3d2:	9308      	str	r3, [sp, #32]
    b3d4:	e74a      	b.n	b26c <lfs_dir_fetchmatch+0x248>
                tempsplit = (lfs_tag_chunk(tag) & 1);
    b3d6:	f002 0301 	and.w	r3, r2, #1
    b3da:	930b      	str	r3, [sp, #44]	; 0x2c
                        NULL, &lfs->rcache, lfs->cfg->block_size,
    b3dc:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
    b3e0:	69db      	ldr	r3, [r3, #28]
    b3e2:	2208      	movs	r2, #8
    b3e4:	9203      	str	r2, [sp, #12]
    b3e6:	aa0e      	add	r2, sp, #56	; 0x38
    b3e8:	9202      	str	r2, [sp, #8]
    b3ea:	1d32      	adds	r2, r6, #4
    b3ec:	9201      	str	r2, [sp, #4]
    b3ee:	f8d9 2000 	ldr.w	r2, [r9]
    b3f2:	9200      	str	r2, [sp, #0]
    b3f4:	465a      	mov	r2, fp
    b3f6:	2100      	movs	r1, #0
    b3f8:	4658      	mov	r0, fp
    b3fa:	f007 fa39 	bl	12870 <lfs_bd_read>
                if (err) {
    b3fe:	2800      	cmp	r0, #0
    b400:	f43f af34 	beq.w	b26c <lfs_dir_fetchmatch+0x248>
                    if (err == LFS_ERR_CORRUPT) {
    b404:	f110 0f54 	cmn.w	r0, #84	; 0x54
    b408:	f47f af30 	bne.w	b26c <lfs_dir_fetchmatch+0x248>
                        dir->erased = false;
    b40c:	2300      	movs	r3, #0
    b40e:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    b412:	e6ab      	b.n	b16c <lfs_dir_fetchmatch+0x148>
                    if (res == LFS_ERR_CORRUPT) {
    b414:	f110 0f54 	cmn.w	r0, #84	; 0x54
    b418:	d103      	bne.n	b422 <lfs_dir_fetchmatch+0x3fe>
                        dir->erased = false;
    b41a:	2300      	movs	r3, #0
    b41c:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    b420:	e6a4      	b.n	b16c <lfs_dir_fetchmatch+0x148>
                    return res;
    b422:	9005      	str	r0, [sp, #20]
    b424:	e093      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
    b426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b428:	9b08      	ldr	r3, [sp, #32]
    b42a:	461f      	mov	r7, r3
    b42c:	ea82 0103 	eor.w	r1, r2, r3
    b430:	4b19      	ldr	r3, [pc, #100]	; (b498 <lfs_dir_fetchmatch+0x474>)
    b432:	400b      	ands	r3, r1
    b434:	b16b      	cbz	r3, b452 <lfs_dir_fetchmatch+0x42e>
                } else if (res == LFS_CMP_GT &&
    b436:	2802      	cmp	r0, #2
    b438:	f47f af2f 	bne.w	b29a <lfs_dir_fetchmatch+0x276>
    return (tag & 0x000ffc00) >> 10;
    b43c:	f3c2 2389 	ubfx	r3, r2, #10, #10
    b440:	f3c7 2789 	ubfx	r7, r7, #10, #10
                } else if (res == LFS_CMP_GT &&
    b444:	42bb      	cmp	r3, r7
    b446:	f63f af28 	bhi.w	b29a <lfs_dir_fetchmatch+0x276>
                    tempbesttag = tag | 0x80000000;
    b44a:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    b44e:	9308      	str	r3, [sp, #32]
    b450:	e723      	b.n	b29a <lfs_dir_fetchmatch+0x276>
                    tempbesttag = -1;
    b452:	f04f 33ff 	mov.w	r3, #4294967295
    b456:	9308      	str	r3, [sp, #32]
    b458:	e71f      	b.n	b29a <lfs_dir_fetchmatch+0x276>
                return err;
    b45a:	9b07      	ldr	r3, [sp, #28]
    b45c:	9305      	str	r3, [sp, #20]
    b45e:	e076      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b460:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
    b464:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b466:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    b46a:	d017      	beq.n	b49c <lfs_dir_fetchmatch+0x478>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    b46c:	f8db 0040 	ldr.w	r0, [fp, #64]	; 0x40
    b470:	f8d9 1000 	ldr.w	r1, [r9]
    b474:	4281      	cmp	r1, r0
    b476:	d025      	beq.n	b4c4 <lfs_dir_fetchmatch+0x4a0>
    b478:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    b47c:	f8d9 4004 	ldr.w	r4, [r9, #4]
    b480:	429c      	cmp	r4, r3
    b482:	d021      	beq.n	b4c8 <lfs_dir_fetchmatch+0x4a4>
    b484:	4284      	cmp	r4, r0
    b486:	d021      	beq.n	b4cc <lfs_dir_fetchmatch+0x4a8>
    b488:	4299      	cmp	r1, r3
    b48a:	d001      	beq.n	b490 <lfs_dir_fetchmatch+0x46c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b48c:	2300      	movs	r3, #0
    b48e:	e006      	b.n	b49e <lfs_dir_fetchmatch+0x47a>
    b490:	2301      	movs	r3, #1
    b492:	e004      	b.n	b49e <lfs_dir_fetchmatch+0x47a>
    b494:	000147a8 	.word	0x000147a8
    b498:	7ffffc00 	.word	0x7ffffc00
    b49c:	2300      	movs	r3, #0
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
    b49e:	b1d3      	cbz	r3, b4d6 <lfs_dir_fetchmatch+0x4b2>
    return (tag & 0x000ffc00) >> 10;
    b4a0:	f3c2 2389 	ubfx	r3, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    b4a4:	9a05      	ldr	r2, [sp, #20]
    b4a6:	4611      	mov	r1, r2
    return (tag & 0x000ffc00) >> 10;
    b4a8:	f3c2 2289 	ubfx	r2, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    b4ac:	4293      	cmp	r3, r2
    b4ae:	d00f      	beq.n	b4d0 <lfs_dir_fetchmatch+0x4ac>
                } else if (besttag != -1 &&
    b4b0:	9805      	ldr	r0, [sp, #20]
    b4b2:	f1b0 3fff 	cmp.w	r0, #4294967295
    b4b6:	d00e      	beq.n	b4d6 <lfs_dir_fetchmatch+0x4b2>
    b4b8:	4293      	cmp	r3, r2
    b4ba:	d20c      	bcs.n	b4d6 <lfs_dir_fetchmatch+0x4b2>
                    besttag -= LFS_MKTAG(0, 1, 0);
    b4bc:	f5a1 6380 	sub.w	r3, r1, #1024	; 0x400
    b4c0:	9305      	str	r3, [sp, #20]
    b4c2:	e008      	b.n	b4d6 <lfs_dir_fetchmatch+0x4b2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b4c4:	2301      	movs	r3, #1
    b4c6:	e7ea      	b.n	b49e <lfs_dir_fetchmatch+0x47a>
    b4c8:	2301      	movs	r3, #1
    b4ca:	e7e8      	b.n	b49e <lfs_dir_fetchmatch+0x47a>
    b4cc:	2301      	movs	r3, #1
    b4ce:	e7e6      	b.n	b49e <lfs_dir_fetchmatch+0x47a>
                    besttag |= 0x80000000;
    b4d0:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
    b4d4:	9305      	str	r3, [sp, #20]
            if (id) {
    b4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b4d8:	b14b      	cbz	r3, b4ee <lfs_dir_fetchmatch+0x4ca>
    return (tag & 0x000ffc00) >> 10;
    b4da:	9b05      	ldr	r3, [sp, #20]
    b4dc:	f3c3 2389 	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
    b4e0:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    return (a < b) ? a : b;
    b4e4:	4293      	cmp	r3, r2
    b4e6:	bf28      	it	cs
    b4e8:	4613      	movcs	r3, r2
    b4ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b4ec:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
    b4ee:	9b05      	ldr	r3, [sp, #20]
    b4f0:	2b00      	cmp	r3, #0
    b4f2:	da2c      	bge.n	b54e <lfs_dir_fetchmatch+0x52a>
    return (tag & 0x000ffc00) >> 10;
    b4f4:	f3c3 2389 	ubfx	r3, r3, #10, #10
            } else if (lfs_tag_id(besttag) < dir->count) {
    b4f8:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    b4fc:	429a      	cmp	r2, r3
    b4fe:	d903      	bls.n	b508 <lfs_dir_fetchmatch+0x4e4>
                return LFS_ERR_NOENT;
    b500:	f06f 0301 	mvn.w	r3, #1
    b504:	9305      	str	r3, [sp, #20]
    b506:	e022      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
                return 0;
    b508:	2300      	movs	r3, #0
    b50a:	9305      	str	r3, [sp, #20]
    b50c:	e01f      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
    b50e:	4a17      	ldr	r2, [pc, #92]	; (b56c <lfs_dir_fetchmatch+0x548>)
    b510:	4b17      	ldr	r3, [pc, #92]	; (b570 <lfs_dir_fetchmatch+0x54c>)
    b512:	1ad2      	subs	r2, r2, r3
    b514:	08d2      	lsrs	r2, r2, #3
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
    b516:	f04f 0300 	mov.w	r3, #0
    b51a:	2101      	movs	r1, #1
    b51c:	f361 0302 	bfi	r3, r1, #0, #3
    b520:	f36f 03c5 	bfc	r3, #3, #3
    b524:	f362 138f 	bfi	r3, r2, #6, #10
    b528:	4a12      	ldr	r2, [pc, #72]	; (b574 <lfs_dir_fetchmatch+0x550>)
    b52a:	920e      	str	r2, [sp, #56]	; 0x38
    b52c:	f240 32e5 	movw	r2, #997	; 0x3e5
    b530:	920f      	str	r2, [sp, #60]	; 0x3c
    b532:	f8d9 2000 	ldr.w	r2, [r9]
    b536:	9210      	str	r2, [sp, #64]	; 0x40
    b538:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b53c:	9211      	str	r2, [sp, #68]	; 0x44
    b53e:	2204      	movs	r2, #4
    b540:	a90e      	add	r1, sp, #56	; 0x38
    b542:	480d      	ldr	r0, [pc, #52]	; (b578 <lfs_dir_fetchmatch+0x554>)
    b544:	f7f6 fca6 	bl	1e94 <log_n>
    return LFS_ERR_CORRUPT;
    b548:	f06f 0353 	mvn.w	r3, #83	; 0x53
    b54c:	9305      	str	r3, [sp, #20]
}
    b54e:	9805      	ldr	r0, [sp, #20]
    b550:	b017      	add	sp, #92	; 0x5c
    b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
    b556:	f06f 0353 	mvn.w	r3, #83	; 0x53
    b55a:	9305      	str	r3, [sp, #20]
    b55c:	e7f7      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
    b55e:	f06f 0353 	mvn.w	r3, #83	; 0x53
    b562:	9305      	str	r3, [sp, #20]
    b564:	e7f3      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
    b566:	9005      	str	r0, [sp, #20]
    b568:	e7f1      	b.n	b54e <lfs_dir_fetchmatch+0x52a>
    b56a:	bf00      	nop
    b56c:	000146a0 	.word	0x000146a0
    b570:	00014688 	.word	0x00014688
    b574:	00015c10 	.word	0x00015c10
    b578:	00015c38 	.word	0x00015c38

0000b57c <lfs_fs_parent>:
        lfs_mdir_t *parent) {
    b57c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b57e:	b089      	sub	sp, #36	; 0x24
    b580:	4606      	mov	r6, r0
    b582:	460f      	mov	r7, r1
    b584:	4614      	mov	r4, r2
    parent->tail[0] = 0;
    b586:	2500      	movs	r5, #0
    b588:	6195      	str	r5, [r2, #24]
    parent->tail[1] = 1;
    b58a:	2301      	movs	r3, #1
    b58c:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(parent->tail)) {
    b58e:	e025      	b.n	b5dc <lfs_fs_parent+0x60>
            return LFS_ERR_CORRUPT;
    b590:	f06f 0353 	mvn.w	r3, #83	; 0x53
    b594:	e02e      	b.n	b5f4 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b596:	2301      	movs	r3, #1
    b598:	e000      	b.n	b59c <lfs_fs_parent+0x20>
    b59a:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
    b59c:	bb43      	cbnz	r3, b5f0 <lfs_fs_parent+0x74>
        if (cycle >= lfs->cfg->block_count/2) {
    b59e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    b5a0:	6a1b      	ldr	r3, [r3, #32]
    b5a2:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    b5a6:	d2f3      	bcs.n	b590 <lfs_fs_parent+0x14>
        cycle += 1;
    b5a8:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    b5aa:	9605      	str	r6, [sp, #20]
                    lfs, {pair[0], pair[1]}});
    b5ac:	683b      	ldr	r3, [r7, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    b5ae:	9306      	str	r3, [sp, #24]
    b5b0:	687b      	ldr	r3, [r7, #4]
    b5b2:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    b5b4:	ab05      	add	r3, sp, #20
    b5b6:	9303      	str	r3, [sp, #12]
    b5b8:	4b10      	ldr	r3, [pc, #64]	; (b5fc <lfs_fs_parent+0x80>)
    b5ba:	9302      	str	r3, [sp, #8]
    b5bc:	2300      	movs	r3, #0
    b5be:	9301      	str	r3, [sp, #4]
    b5c0:	4b0f      	ldr	r3, [pc, #60]	; (b600 <lfs_fs_parent+0x84>)
    b5c2:	9300      	str	r3, [sp, #0]
    b5c4:	4b0f      	ldr	r3, [pc, #60]	; (b604 <lfs_fs_parent+0x88>)
    b5c6:	f104 0218 	add.w	r2, r4, #24
    b5ca:	4621      	mov	r1, r4
    b5cc:	4630      	mov	r0, r6
    b5ce:	f7ff fd29 	bl	b024 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
    b5d2:	4603      	mov	r3, r0
    b5d4:	b110      	cbz	r0, b5dc <lfs_fs_parent+0x60>
    b5d6:	f110 0f02 	cmn.w	r0, #2
    b5da:	d10b      	bne.n	b5f4 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b5dc:	69a3      	ldr	r3, [r4, #24]
    b5de:	f1b3 3fff 	cmp.w	r3, #4294967295
    b5e2:	d0da      	beq.n	b59a <lfs_fs_parent+0x1e>
    b5e4:	69e3      	ldr	r3, [r4, #28]
    b5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    b5ea:	d0d4      	beq.n	b596 <lfs_fs_parent+0x1a>
    b5ec:	2300      	movs	r3, #0
    b5ee:	e7d5      	b.n	b59c <lfs_fs_parent+0x20>
    return LFS_ERR_NOENT;
    b5f0:	f06f 0301 	mvn.w	r3, #1
}
    b5f4:	4618      	mov	r0, r3
    b5f6:	b009      	add	sp, #36	; 0x24
    b5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5fa:	bf00      	nop
    b5fc:	00012a09 	.word	0x00012a09
    b600:	20000008 	.word	0x20000008
    b604:	7ff003ff 	.word	0x7ff003ff

0000b608 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b60c:	b097      	sub	sp, #92	; 0x5c
    b60e:	900b      	str	r0, [sp, #44]	; 0x2c
    b610:	4688      	mov	r8, r1
    b612:	4692      	mov	sl, r2
    b614:	461d      	mov	r5, r3
    b616:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b618:	9f21      	ldr	r7, [sp, #132]	; 0x84
    b61a:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    b61e:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
    b622:	930d      	str	r3, [sp, #52]	; 0x34
    b624:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    b628:	930e      	str	r3, [sp, #56]	; 0x38
    b62a:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
    b62e:	930c      	str	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
    b630:	f345 0409 	sbfx	r4, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b634:	f1b4 3fff 	cmp.w	r4, #4294967295
    b638:	bf14      	ite	ne
    b63a:	462c      	movne	r4, r5
    b63c:	1c6c      	addeq	r4, r5, #1
    return tag & 0x000003ff;
    b63e:	f3c4 0409 	ubfx	r4, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b642:	3404      	adds	r4, #4
        if (off+lfs_tag_dsize(ptag) < dir->off) {
    b644:	4454      	add	r4, sl
    b646:	f8d8 300c 	ldr.w	r3, [r8, #12]
    b64a:	429c      	cmp	r4, r3
    b64c:	d32b      	bcc.n	b6a6 <lfs_dir_traverse+0x9e>
        } else if (attrcount > 0) {
    b64e:	2f00      	cmp	r7, #0
    b650:	f340 80ba 	ble.w	b7c8 <lfs_dir_traverse+0x1c0>
            tag = attrs[0].tag;
    b654:	6833      	ldr	r3, [r6, #0]
    b656:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
    b658:	6874      	ldr	r4, [r6, #4]
            attrs += 1;
    b65a:	3608      	adds	r6, #8
            attrcount -= 1;
    b65c:	3f01      	subs	r7, #1
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    b65e:	4b5d      	ldr	r3, [pc, #372]	; (b7d4 <lfs_dir_traverse+0x1cc>)
    b660:	ea0b 0303 	and.w	r3, fp, r3
    b664:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b666:	9923      	ldr	r1, [sp, #140]	; 0x8c
    b668:	404a      	eors	r2, r1
    b66a:	ea12 0903 	ands.w	r9, r2, r3
    b66e:	d1df      	bne.n	b630 <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
    b670:	f3cb 2389 	ubfx	r3, fp, #10, #10
        if (lfs_tag_id(tmask) != 0) {
    b674:	2b00      	cmp	r3, #0
    b676:	d135      	bne.n	b6e4 <lfs_dir_traverse+0xdc>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    b678:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return (tag & 0x7ff00000) >> 20;
    b67a:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    b67e:	2b00      	cmp	r3, #0
    b680:	d0d6      	beq.n	b630 <lfs_dir_traverse+0x28>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
    b682:	f240 1201 	movw	r2, #257	; 0x101
    b686:	4293      	cmp	r3, r2
    b688:	d04c      	beq.n	b724 <lfs_dir_traverse+0x11c>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
    b68a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b68e:	d06d      	beq.n	b76c <lfs_dir_traverse+0x164>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    b690:	4622      	mov	r2, r4
    b692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b694:	eb01 2183 	add.w	r1, r1, r3, lsl #10
    b698:	9828      	ldr	r0, [sp, #160]	; 0xa0
    b69a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    b69c:	4798      	blx	r3
            if (err) {
    b69e:	4603      	mov	r3, r0
    b6a0:	2800      	cmp	r0, #0
    b6a2:	d0c5      	beq.n	b630 <lfs_dir_traverse+0x28>
    b6a4:	e091      	b.n	b7ca <lfs_dir_traverse+0x1c2>
            int err = lfs_bd_read(lfs,
    b6a6:	2304      	movs	r3, #4
    b6a8:	9303      	str	r3, [sp, #12]
    b6aa:	aa13      	add	r2, sp, #76	; 0x4c
    b6ac:	9202      	str	r2, [sp, #8]
    b6ae:	9401      	str	r4, [sp, #4]
    b6b0:	f8d8 2000 	ldr.w	r2, [r8]
    b6b4:	9200      	str	r2, [sp, #0]
    b6b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b6b8:	2100      	movs	r1, #0
    b6ba:	4610      	mov	r0, r2
    b6bc:	f007 f8d8 	bl	12870 <lfs_bd_read>
            if (err) {
    b6c0:	4603      	mov	r3, r0
    b6c2:	2800      	cmp	r0, #0
    b6c4:	f040 8081 	bne.w	b7ca <lfs_dir_traverse+0x1c2>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
    b6c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return __builtin_bswap32(a);
    b6ca:	ba1b      	rev	r3, r3
    b6cc:	405d      	eors	r5, r3
    b6ce:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    b6d2:	9513      	str	r5, [sp, #76]	; 0x4c
            disk.block = dir->pair[0];
    b6d4:	f8d8 3000 	ldr.w	r3, [r8]
    b6d8:	9314      	str	r3, [sp, #80]	; 0x50
            disk.off = off+sizeof(lfs_tag_t);
    b6da:	1d23      	adds	r3, r4, #4
    b6dc:	9315      	str	r3, [sp, #84]	; 0x54
            off += lfs_tag_dsize(ptag);
    b6de:	46a2      	mov	sl, r4
            buffer = &disk;
    b6e0:	ac14      	add	r4, sp, #80	; 0x50
    b6e2:	e7bc      	b.n	b65e <lfs_dir_traverse+0x56>
            int filter = lfs_dir_traverse(lfs,
    b6e4:	ab13      	add	r3, sp, #76	; 0x4c
    b6e6:	9308      	str	r3, [sp, #32]
    b6e8:	4b3b      	ldr	r3, [pc, #236]	; (b7d8 <lfs_dir_traverse+0x1d0>)
    b6ea:	9307      	str	r3, [sp, #28]
    b6ec:	2300      	movs	r3, #0
    b6ee:	9306      	str	r3, [sp, #24]
    b6f0:	9305      	str	r3, [sp, #20]
    b6f2:	9304      	str	r3, [sp, #16]
    b6f4:	9303      	str	r3, [sp, #12]
    b6f6:	9302      	str	r3, [sp, #8]
    b6f8:	9701      	str	r7, [sp, #4]
    b6fa:	9600      	str	r6, [sp, #0]
    b6fc:	462b      	mov	r3, r5
    b6fe:	4652      	mov	r2, sl
    b700:	4641      	mov	r1, r8
    b702:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b704:	f7ff ff80 	bl	b608 <lfs_dir_traverse>
            if (filter < 0) {
    b708:	1e03      	subs	r3, r0, #0
    b70a:	db5e      	blt.n	b7ca <lfs_dir_traverse+0x1c2>
            if (filter) {
    b70c:	2b00      	cmp	r3, #0
    b70e:	d18f      	bne.n	b630 <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
    b710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b712:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
    b716:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b718:	429a      	cmp	r2, r3
    b71a:	d889      	bhi.n	b630 <lfs_dir_traverse+0x28>
    b71c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b71e:	429a      	cmp	r2, r3
    b720:	d8aa      	bhi.n	b678 <lfs_dir_traverse+0x70>
    b722:	e785      	b.n	b630 <lfs_dir_traverse+0x28>
    return tag & 0x000003ff;
    b724:	f3c1 0209 	ubfx	r2, r1, #0, #10
            uint16_t fromid = lfs_tag_size(tag);
    b728:	4610      	mov	r0, r2
    return (tag & 0x000ffc00) >> 10;
    b72a:	f3c1 2389 	ubfx	r3, r1, #10, #10
                    fromid, fromid+1, toid-fromid+diff,
    b72e:	1a9b      	subs	r3, r3, r2
            int err = lfs_dir_traverse(lfs,
    b730:	9928      	ldr	r1, [sp, #160]	; 0xa0
    b732:	9108      	str	r1, [sp, #32]
    b734:	9927      	ldr	r1, [sp, #156]	; 0x9c
    b736:	9107      	str	r1, [sp, #28]
    b738:	990c      	ldr	r1, [sp, #48]	; 0x30
    b73a:	440b      	add	r3, r1
    b73c:	b21b      	sxth	r3, r3
    b73e:	9306      	str	r3, [sp, #24]
    b740:	3201      	adds	r2, #1
    b742:	9205      	str	r2, [sp, #20]
    b744:	9004      	str	r0, [sp, #16]
    b746:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    b74a:	9303      	str	r3, [sp, #12]
    b74c:	4b23      	ldr	r3, [pc, #140]	; (b7dc <lfs_dir_traverse+0x1d4>)
    b74e:	9302      	str	r3, [sp, #8]
    b750:	2200      	movs	r2, #0
    b752:	9201      	str	r2, [sp, #4]
    b754:	9200      	str	r2, [sp, #0]
    b756:	f04f 33ff 	mov.w	r3, #4294967295
    b75a:	4621      	mov	r1, r4
    b75c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b75e:	f7ff ff53 	bl	b608 <lfs_dir_traverse>
            if (err) {
    b762:	4603      	mov	r3, r0
    b764:	2800      	cmp	r0, #0
    b766:	f43f af63 	beq.w	b630 <lfs_dir_traverse+0x28>
    b76a:	e02e      	b.n	b7ca <lfs_dir_traverse+0x1c2>
    b76c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    b770:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    b774:	9511      	str	r5, [sp, #68]	; 0x44
    b776:	46b2      	mov	sl, r6
    b778:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b77a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    b77c:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    b780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return tag & 0x000003ff;
    b782:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    b786:	4591      	cmp	r9, r2
    b788:	d217      	bcs.n	b7ba <lfs_dir_traverse+0x1b2>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    b78a:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    b78e:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    b792:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
    b796:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
    b79a:	f3c3 2389 	ubfx	r3, r3, #10, #10
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    b79e:	442b      	add	r3, r5
    b7a0:	029b      	lsls	r3, r3, #10
    b7a2:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
    b7a6:	6891      	ldr	r1, [r2, #8]
    b7a8:	6852      	ldr	r2, [r2, #4]
    b7aa:	4319      	orrs	r1, r3
    b7ac:	4640      	mov	r0, r8
    b7ae:	47b0      	blx	r6
                if (err) {
    b7b0:	4603      	mov	r3, r0
    b7b2:	b950      	cbnz	r0, b7ca <lfs_dir_traverse+0x1c2>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    b7b4:	f109 0901 	add.w	r9, r9, #1
    b7b8:	e7e2      	b.n	b780 <lfs_dir_traverse+0x178>
    b7ba:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    b7be:	9d11      	ldr	r5, [sp, #68]	; 0x44
    b7c0:	4656      	mov	r6, sl
    b7c2:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    b7c6:	e733      	b.n	b630 <lfs_dir_traverse+0x28>
            return 0;
    b7c8:	2300      	movs	r3, #0
}
    b7ca:	4618      	mov	r0, r3
    b7cc:	b017      	add	sp, #92	; 0x5c
    b7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7d2:	bf00      	nop
    b7d4:	7ff00000 	.word	0x7ff00000
    b7d8:	0000af5d 	.word	0x0000af5d
    b7dc:	600ffc00 	.word	0x600ffc00

0000b7e0 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7e4:	b089      	sub	sp, #36	; 0x24
    b7e6:	4607      	mov	r7, r0
    b7e8:	468a      	mov	sl, r1
    b7ea:	4690      	mov	r8, r2
    b7ec:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
    b7ee:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
    b7f0:	690b      	ldr	r3, [r1, #16]
    b7f2:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b7f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
    b7f6:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b7f8:	f412 6fe0 	tst.w	r2, #1792	; 0x700
    b7fc:	d010      	beq.n	b820 <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    b7fe:	6c02      	ldr	r2, [r0, #64]	; 0x40
    b800:	6809      	ldr	r1, [r1, #0]
    b802:	4291      	cmp	r1, r2
    b804:	d01e      	beq.n	b844 <lfs_dir_getslice+0x64>
    b806:	6c44      	ldr	r4, [r0, #68]	; 0x44
    b808:	f8da 0004 	ldr.w	r0, [sl, #4]
    b80c:	42a0      	cmp	r0, r4
    b80e:	d01b      	beq.n	b848 <lfs_dir_getslice+0x68>
    b810:	4290      	cmp	r0, r2
    b812:	d01b      	beq.n	b84c <lfs_dir_getslice+0x6c>
    b814:	428c      	cmp	r4, r1
    b816:	d001      	beq.n	b81c <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b818:	2200      	movs	r2, #0
    b81a:	e002      	b.n	b822 <lfs_dir_getslice+0x42>
    b81c:	2201      	movs	r2, #1
    b81e:	e000      	b.n	b822 <lfs_dir_getslice+0x42>
    b820:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    b822:	2a00      	cmp	r2, #0
    b824:	f000 808b 	beq.w	b93e <lfs_dir_getslice+0x15e>
    return (tag & 0x000ffc00) >> 10;
    b828:	f3c8 2289 	ubfx	r2, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    b82c:	2a00      	cmp	r2, #0
    b82e:	f000 8088 	beq.w	b942 <lfs_dir_getslice+0x162>
    return (tag & 0x000ffc00) >> 10;
    b832:	f3c3 2389 	ubfx	r3, r3, #10, #10
    b836:	f3cb 2289 	ubfx	r2, fp, #10, #10
            lfs_tag_id(gmask) != 0 &&
    b83a:	429a      	cmp	r2, r3
    b83c:	f080 8083 	bcs.w	b946 <lfs_dir_getslice+0x166>
    lfs_stag_t gdiff = 0;
    b840:	2600      	movs	r6, #0
    b842:	e00b      	b.n	b85c <lfs_dir_getslice+0x7c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b844:	2201      	movs	r2, #1
    b846:	e7ec      	b.n	b822 <lfs_dir_getslice+0x42>
    b848:	2201      	movs	r2, #1
    b84a:	e7ea      	b.n	b822 <lfs_dir_getslice+0x42>
    b84c:	2201      	movs	r2, #1
    b84e:	e7e8      	b.n	b822 <lfs_dir_getslice+0x42>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
    b850:	ebab 0306 	sub.w	r3, fp, r6
    b854:	4063      	eors	r3, r4
    b856:	ea13 0f08 	tst.w	r3, r8
    b85a:	d04a      	beq.n	b8f2 <lfs_dir_getslice+0x112>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    b85c:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
    b85e:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b862:	f1b9 3fff 	cmp.w	r9, #4294967295
    b866:	bf14      	ite	ne
    b868:	4623      	movne	r3, r4
    b86a:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
    b86c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b870:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    b872:	3308      	adds	r3, #8
    b874:	42ab      	cmp	r3, r5
    b876:	d868      	bhi.n	b94a <lfs_dir_getslice+0x16a>
        off -= lfs_tag_dsize(ntag);
    b878:	1aad      	subs	r5, r5, r2
        int err = lfs_bd_read(lfs,
    b87a:	9705      	str	r7, [sp, #20]
    b87c:	2304      	movs	r3, #4
    b87e:	9303      	str	r3, [sp, #12]
    b880:	aa07      	add	r2, sp, #28
    b882:	9202      	str	r2, [sp, #8]
    b884:	9501      	str	r5, [sp, #4]
    b886:	f8da 2000 	ldr.w	r2, [sl]
    b88a:	9200      	str	r2, [sp, #0]
    b88c:	463a      	mov	r2, r7
    b88e:	2100      	movs	r1, #0
    b890:	4638      	mov	r0, r7
    b892:	f006 ffed 	bl	12870 <lfs_bd_read>
        if (err) {
    b896:	4603      	mov	r3, r0
    b898:	2800      	cmp	r0, #0
    b89a:	d158      	bne.n	b94e <lfs_dir_getslice+0x16e>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
    b89c:	9b07      	ldr	r3, [sp, #28]
    b89e:	ba1b      	rev	r3, r3
    b8a0:	4063      	eors	r3, r4
    b8a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b8a6:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
    b8a8:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
    b8ac:	2b00      	cmp	r3, #0
    b8ae:	d0cf      	beq.n	b850 <lfs_dir_getslice+0x70>
    return (tag & 0x70000000) >> 20;
    b8b0:	0d23      	lsrs	r3, r4, #20
    b8b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
    b8b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    b8ba:	d1c9      	bne.n	b850 <lfs_dir_getslice+0x70>
    return (tag & 0x000ffc00) >> 10;
    b8bc:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
    b8c0:	4631      	mov	r1, r6
    b8c2:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
    b8c6:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    b8ca:	4584      	cmp	ip, r0
    b8cc:	d3c0      	bcc.n	b850 <lfs_dir_getslice+0x70>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
    b8ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    b8d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b8d6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
    b8da:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
    b8de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    b8e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    b8e6:	42a2      	cmp	r2, r4
    b8e8:	d035      	beq.n	b956 <lfs_dir_getslice+0x176>
    return (int8_t)lfs_tag_chunk(tag);
    b8ea:	b25e      	sxtb	r6, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    b8ec:	eb01 2686 	add.w	r6, r1, r6, lsl #10
    b8f0:	e7ae      	b.n	b850 <lfs_dir_getslice+0x70>
    b8f2:	46b0      	mov	r8, r6
            if (lfs_tag_isdelete(tag)) {
    b8f4:	f1b9 3fff 	cmp.w	r9, #4294967295
    b8f8:	d030      	beq.n	b95c <lfs_dir_getslice+0x17c>
    return tag & 0x000003ff;
    b8fa:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
    b8fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b900:	429e      	cmp	r6, r3
    b902:	bf28      	it	cs
    b904:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
    b906:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b908:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
    b90a:	9603      	str	r6, [sp, #12]
    b90c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b90e:	9202      	str	r2, [sp, #8]
    b910:	3304      	adds	r3, #4
    b912:	9301      	str	r3, [sp, #4]
    b914:	f8da 3000 	ldr.w	r3, [sl]
    b918:	9300      	str	r3, [sp, #0]
    b91a:	4633      	mov	r3, r6
    b91c:	9a05      	ldr	r2, [sp, #20]
    b91e:	2100      	movs	r1, #0
    b920:	4638      	mov	r0, r7
    b922:	f006 ffa5 	bl	12870 <lfs_bd_read>
            if (err) {
    b926:	4603      	mov	r3, r0
    b928:	b988      	cbnz	r0, b94e <lfs_dir_getslice+0x16e>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
    b92a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b92c:	1b9a      	subs	r2, r3, r6
    b92e:	2100      	movs	r1, #0
    b930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b932:	1998      	adds	r0, r3, r6
    b934:	f005 fe36 	bl	115a4 <memset>
            return tag + gdiff;
    b938:	4643      	mov	r3, r8
    b93a:	4423      	add	r3, r4
    b93c:	e007      	b.n	b94e <lfs_dir_getslice+0x16e>
    lfs_stag_t gdiff = 0;
    b93e:	2600      	movs	r6, #0
    b940:	e78c      	b.n	b85c <lfs_dir_getslice+0x7c>
    b942:	2600      	movs	r6, #0
    b944:	e78a      	b.n	b85c <lfs_dir_getslice+0x7c>
        gdiff -= LFS_MKTAG(0, 1, 0);
    b946:	4e07      	ldr	r6, [pc, #28]	; (b964 <lfs_dir_getslice+0x184>)
    b948:	e788      	b.n	b85c <lfs_dir_getslice+0x7c>
    return LFS_ERR_NOENT;
    b94a:	f06f 0301 	mvn.w	r3, #1
}
    b94e:	4618      	mov	r0, r3
    b950:	b009      	add	sp, #36	; 0x24
    b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
    b956:	f06f 0301 	mvn.w	r3, #1
    b95a:	e7f8      	b.n	b94e <lfs_dir_getslice+0x16e>
                return LFS_ERR_NOENT;
    b95c:	f06f 0301 	mvn.w	r3, #1
    b960:	e7f5      	b.n	b94e <lfs_dir_getslice+0x16e>
    b962:	bf00      	nop
    b964:	fffffc00 	.word	0xfffffc00

0000b968 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
    b968:	b510      	push	{r4, lr}
    b96a:	b086      	sub	sp, #24
    b96c:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
    b96e:	ab03      	add	r3, sp, #12
    b970:	9300      	str	r3, [sp, #0]
    b972:	4b10      	ldr	r3, [pc, #64]	; (b9b4 <lfs_dir_getgstate+0x4c>)
    b974:	4a10      	ldr	r2, [pc, #64]	; (b9b8 <lfs_dir_getgstate+0x50>)
    b976:	f007 f90f 	bl	12b98 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
    b97a:	2800      	cmp	r0, #0
    b97c:	db04      	blt.n	b988 <lfs_dir_getgstate+0x20>
    if (res != LFS_ERR_NOENT) {
    b97e:	f110 0f02 	cmn.w	r0, #2
    b982:	d005      	beq.n	b990 <lfs_dir_getgstate+0x28>
    for (int i = 0; i < 3; i++) {
    b984:	2300      	movs	r3, #0
    b986:	e010      	b.n	b9aa <lfs_dir_getgstate+0x42>
    if (res < 0 && res != LFS_ERR_NOENT) {
    b988:	f110 0f02 	cmn.w	r0, #2
    b98c:	d110      	bne.n	b9b0 <lfs_dir_getgstate+0x48>
    b98e:	e7f6      	b.n	b97e <lfs_dir_getgstate+0x16>
    return 0;
    b990:	2000      	movs	r0, #0
    b992:	e00d      	b.n	b9b0 <lfs_dir_getgstate+0x48>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    b994:	aa06      	add	r2, sp, #24
    b996:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b99a:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    b99e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    b9a2:	4051      	eors	r1, r2
    b9a4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    b9a8:	3301      	adds	r3, #1
    b9aa:	2b02      	cmp	r3, #2
    b9ac:	ddf2      	ble.n	b994 <lfs_dir_getgstate+0x2c>
    return 0;
    b9ae:	2000      	movs	r0, #0
}
    b9b0:	b006      	add	sp, #24
    b9b2:	bd10      	pop	{r4, pc}
    b9b4:	7ff0000c 	.word	0x7ff0000c
    b9b8:	7ff00000 	.word	0x7ff00000

0000b9bc <lfs_dir_find>:
        const char **path, uint16_t *id) {
    b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9c0:	b08d      	sub	sp, #52	; 0x34
    b9c2:	4683      	mov	fp, r0
    b9c4:	4688      	mov	r8, r1
    b9c6:	9207      	str	r2, [sp, #28]
    const char *name = *path;
    b9c8:	6812      	ldr	r2, [r2, #0]
    b9ca:	9206      	str	r2, [sp, #24]
    if (id) {
    b9cc:	9305      	str	r3, [sp, #20]
    b9ce:	b11b      	cbz	r3, b9d8 <lfs_dir_find+0x1c>
    b9d0:	461a      	mov	r2, r3
        *id = 0x3ff;
    b9d2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b9d6:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
    b9d8:	f8db 3020 	ldr.w	r3, [fp, #32]
    b9dc:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
    b9e0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    b9e4:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
    b9e8:	4e50      	ldr	r6, [pc, #320]	; (bb2c <lfs_dir_find+0x170>)
        name += strspn(name, "/");
    b9ea:	4c51      	ldr	r4, [pc, #324]	; (bb30 <lfs_dir_find+0x174>)
    b9ec:	4621      	mov	r1, r4
    b9ee:	9d06      	ldr	r5, [sp, #24]
    b9f0:	4628      	mov	r0, r5
    b9f2:	f005 fdf4 	bl	115de <strspn>
    b9f6:	462b      	mov	r3, r5
    b9f8:	4403      	add	r3, r0
    b9fa:	4699      	mov	r9, r3
        lfs_size_t namelen = strcspn(name, "/");
    b9fc:	4621      	mov	r1, r4
    b9fe:	4618      	mov	r0, r3
    ba00:	f005 fdfb 	bl	115fa <strcspn>
    ba04:	4682      	mov	sl, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    ba06:	2801      	cmp	r0, #1
    ba08:	d00b      	beq.n	ba22 <lfs_dir_find+0x66>
    ba0a:	f1ba 0f02 	cmp.w	sl, #2
    ba0e:	d013      	beq.n	ba38 <lfs_dir_find+0x7c>
        const char *suffix = name + namelen;
    ba10:	eb09 030a 	add.w	r3, r9, sl
    ba14:	9306      	str	r3, [sp, #24]
    ba16:	461c      	mov	r4, r3
        int depth = 1;
    ba18:	2701      	movs	r7, #1
    ba1a:	e017      	b.n	ba4c <lfs_dir_find+0x90>
    ba1c:	46b3      	mov	fp, r6
    ba1e:	4606      	mov	r6, r0
    ba20:	e7e3      	b.n	b9ea <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    ba22:	2201      	movs	r2, #1
    ba24:	4943      	ldr	r1, [pc, #268]	; (bb34 <lfs_dir_find+0x178>)
    ba26:	4648      	mov	r0, r9
    ba28:	f005 fd81 	bl	1152e <memcmp>
    ba2c:	2800      	cmp	r0, #0
    ba2e:	d1ec      	bne.n	ba0a <lfs_dir_find+0x4e>
            name += namelen;
    ba30:	eb09 030a 	add.w	r3, r9, sl
    ba34:	9306      	str	r3, [sp, #24]
            goto nextname;
    ba36:	e7d8      	b.n	b9ea <lfs_dir_find+0x2e>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
    ba38:	2202      	movs	r2, #2
    ba3a:	493f      	ldr	r1, [pc, #252]	; (bb38 <lfs_dir_find+0x17c>)
    ba3c:	4648      	mov	r0, r9
    ba3e:	f005 fd76 	bl	1152e <memcmp>
    ba42:	2800      	cmp	r0, #0
    ba44:	d1e4      	bne.n	ba10 <lfs_dir_find+0x54>
    ba46:	e7f3      	b.n	ba30 <lfs_dir_find+0x74>
                depth += 1;
    ba48:	3701      	adds	r7, #1
            suffix += sufflen;
    ba4a:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
    ba4c:	4d38      	ldr	r5, [pc, #224]	; (bb30 <lfs_dir_find+0x174>)
    ba4e:	4629      	mov	r1, r5
    ba50:	4620      	mov	r0, r4
    ba52:	f005 fdc4 	bl	115de <strspn>
    ba56:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
    ba58:	4629      	mov	r1, r5
    ba5a:	4620      	mov	r0, r4
    ba5c:	f005 fdcd 	bl	115fa <strcspn>
            if (sufflen == 0) {
    ba60:	4605      	mov	r5, r0
    ba62:	b168      	cbz	r0, ba80 <lfs_dir_find+0xc4>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
    ba64:	2802      	cmp	r0, #2
    ba66:	d1ef      	bne.n	ba48 <lfs_dir_find+0x8c>
    ba68:	2202      	movs	r2, #2
    ba6a:	4933      	ldr	r1, [pc, #204]	; (bb38 <lfs_dir_find+0x17c>)
    ba6c:	4620      	mov	r0, r4
    ba6e:	f005 fd5e 	bl	1152e <memcmp>
    ba72:	2800      	cmp	r0, #0
    ba74:	d1e8      	bne.n	ba48 <lfs_dir_find+0x8c>
                if (depth == 0) {
    ba76:	3f01      	subs	r7, #1
    ba78:	d1e7      	bne.n	ba4a <lfs_dir_find+0x8e>
                    name = suffix + sufflen;
    ba7a:	1963      	adds	r3, r4, r5
    ba7c:	9306      	str	r3, [sp, #24]
                    goto nextname;
    ba7e:	e7b4      	b.n	b9ea <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
    ba80:	f899 3000 	ldrb.w	r3, [r9]
    ba84:	2b00      	cmp	r3, #0
    ba86:	d04c      	beq.n	bb22 <lfs_dir_find+0x166>
        *path = name;
    ba88:	9b07      	ldr	r3, [sp, #28]
    ba8a:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
    ba8e:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    ba92:	2b02      	cmp	r3, #2
    ba94:	d141      	bne.n	bb1a <lfs_dir_find+0x15e>
    return (tag & 0x000ffc00) >> 10;
    ba96:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
    ba9a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ba9e:	429e      	cmp	r6, r3
    baa0:	d103      	bne.n	baaa <lfs_dir_find+0xee>
    baa2:	464c      	mov	r4, r9
    baa4:	4655      	mov	r5, sl
    baa6:	465e      	mov	r6, fp
    baa8:	e02a      	b.n	bb00 <lfs_dir_find+0x144>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
    baaa:	02b6      	lsls	r6, r6, #10
    baac:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
    bab0:	9300      	str	r3, [sp, #0]
    bab2:	f046 5300 	orr.w	r3, r6, #536870912	; 0x20000000
    bab6:	f043 0308 	orr.w	r3, r3, #8
    baba:	4a20      	ldr	r2, [pc, #128]	; (bb3c <lfs_dir_find+0x180>)
    babc:	4641      	mov	r1, r8
    babe:	4658      	mov	r0, fp
    bac0:	f007 f86a 	bl	12b98 <lfs_dir_get>
            if (res < 0) {
    bac4:	1e06      	subs	r6, r0, #0
    bac6:	db2c      	blt.n	bb22 <lfs_dir_find+0x166>
    bac8:	464c      	mov	r4, r9
    baca:	4655      	mov	r5, sl
    bacc:	465e      	mov	r6, fp
    bace:	e017      	b.n	bb00 <lfs_dir_find+0x144>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    bad0:	9b05      	ldr	r3, [sp, #20]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
    bad2:	9609      	str	r6, [sp, #36]	; 0x24
    bad4:	940a      	str	r4, [sp, #40]	; 0x28
    bad6:	950b      	str	r5, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    bad8:	aa09      	add	r2, sp, #36	; 0x24
    bada:	9203      	str	r2, [sp, #12]
    badc:	4a18      	ldr	r2, [pc, #96]	; (bb40 <lfs_dir_find+0x184>)
    bade:	9202      	str	r2, [sp, #8]
    bae0:	9301      	str	r3, [sp, #4]
    bae2:	9500      	str	r5, [sp, #0]
    bae4:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
    bae8:	463a      	mov	r2, r7
    baea:	4641      	mov	r1, r8
    baec:	4630      	mov	r0, r6
    baee:	f7ff fa99 	bl	b024 <lfs_dir_fetchmatch>
            if (tag < 0) {
    baf2:	2800      	cmp	r0, #0
    baf4:	db14      	blt.n	bb20 <lfs_dir_find+0x164>
            if (tag) {
    baf6:	2800      	cmp	r0, #0
    baf8:	d190      	bne.n	ba1c <lfs_dir_find+0x60>
            if (!dir->split) {
    bafa:	f898 3017 	ldrb.w	r3, [r8, #23]
    bafe:	b14b      	cbz	r3, bb14 <lfs_dir_find+0x158>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    bb00:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
    bb04:	212f      	movs	r1, #47	; 0x2f
    bb06:	4620      	mov	r0, r4
    bb08:	f005 fcce 	bl	114a8 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    bb0c:	2800      	cmp	r0, #0
    bb0e:	d0df      	beq.n	bad0 <lfs_dir_find+0x114>
    bb10:	2300      	movs	r3, #0
    bb12:	e7de      	b.n	bad2 <lfs_dir_find+0x116>
                return LFS_ERR_NOENT;
    bb14:	f06f 0601 	mvn.w	r6, #1
    bb18:	e003      	b.n	bb22 <lfs_dir_find+0x166>
            return LFS_ERR_NOTDIR;
    bb1a:	f06f 0613 	mvn.w	r6, #19
    bb1e:	e000      	b.n	bb22 <lfs_dir_find+0x166>
    bb20:	4606      	mov	r6, r0
}
    bb22:	4630      	mov	r0, r6
    bb24:	b00d      	add	sp, #52	; 0x34
    bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb2a:	bf00      	nop
    bb2c:	002ffc00 	.word	0x002ffc00
    bb30:	000155a0 	.word	0x000155a0
    bb34:	00015c64 	.word	0x00015c64
    bb38:	00015c68 	.word	0x00015c68
    bb3c:	700ffc00 	.word	0x700ffc00
    bb40:	00012ac1 	.word	0x00012ac1

0000bb44 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
    bb44:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb46:	b085      	sub	sp, #20
    bb48:	461d      	mov	r5, r3
    if (id == 0x3ff) {
    bb4a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    bb4e:	429a      	cmp	r2, r3
    bb50:	d02c      	beq.n	bbac <lfs_dir_getinfo+0x68>
    bb52:	4604      	mov	r4, r0
    bb54:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    bb56:	0297      	lsls	r7, r2, #10
    bb58:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    bb5a:	3301      	adds	r3, #1
    bb5c:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
    bb60:	9100      	str	r1, [sp, #0]
    bb62:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
    bb66:	4a1b      	ldr	r2, [pc, #108]	; (bbd4 <lfs_dir_getinfo+0x90>)
    bb68:	4631      	mov	r1, r6
    bb6a:	f007 f815 	bl	12b98 <lfs_dir_get>
    if (tag < 0) {
    bb6e:	2800      	cmp	r0, #0
    bb70:	db24      	blt.n	bbbc <lfs_dir_getinfo+0x78>
    return (tag & 0x7ff00000) >> 20;
    bb72:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
    bb76:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
    bb78:	ab02      	add	r3, sp, #8
    bb7a:	9300      	str	r3, [sp, #0]
    bb7c:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
    bb80:	f043 0308 	orr.w	r3, r3, #8
    bb84:	4a14      	ldr	r2, [pc, #80]	; (bbd8 <lfs_dir_getinfo+0x94>)
    bb86:	4631      	mov	r1, r6
    bb88:	4620      	mov	r0, r4
    bb8a:	f007 f805 	bl	12b98 <lfs_dir_get>
    if (tag < 0) {
    bb8e:	2800      	cmp	r0, #0
    bb90:	db14      	blt.n	bbbc <lfs_dir_getinfo+0x78>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    bb92:	4602      	mov	r2, r0
    return (tag & 0x7ff00000) >> 20;
    bb94:	f3c0 500a 	ubfx	r0, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    bb98:	f240 2302 	movw	r3, #514	; 0x202
    bb9c:	4298      	cmp	r0, r3
    bb9e:	d00f      	beq.n	bbc0 <lfs_dir_getinfo+0x7c>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    bba0:	f240 2301 	movw	r3, #513	; 0x201
    bba4:	4298      	cmp	r0, r3
    bba6:	d00f      	beq.n	bbc8 <lfs_dir_getinfo+0x84>
    return 0;
    bba8:	2000      	movs	r0, #0
    bbaa:	e007      	b.n	bbbc <lfs_dir_getinfo+0x78>
        strcpy(info->name, "/");
    bbac:	490b      	ldr	r1, [pc, #44]	; (bbdc <lfs_dir_getinfo+0x98>)
    bbae:	f105 0008 	add.w	r0, r5, #8
    bbb2:	f005 fc56 	bl	11462 <strcpy>
        info->type = LFS_TYPE_DIR;
    bbb6:	2302      	movs	r3, #2
    bbb8:	702b      	strb	r3, [r5, #0]
        return 0;
    bbba:	2000      	movs	r0, #0
}
    bbbc:	b005      	add	sp, #20
    bbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
    bbc0:	9b03      	ldr	r3, [sp, #12]
    bbc2:	606b      	str	r3, [r5, #4]
    return 0;
    bbc4:	2000      	movs	r0, #0
    bbc6:	e7f9      	b.n	bbbc <lfs_dir_getinfo+0x78>
    return tag & 0x000003ff;
    bbc8:	f3c2 0209 	ubfx	r2, r2, #0, #10
        info->size = lfs_tag_size(tag);
    bbcc:	606a      	str	r2, [r5, #4]
    return 0;
    bbce:	2000      	movs	r0, #0
    bbd0:	e7f4      	b.n	bbbc <lfs_dir_getinfo+0x78>
    bbd2:	bf00      	nop
    bbd4:	780ffc00 	.word	0x780ffc00
    bbd8:	700ffc00 	.word	0x700ffc00
    bbdc:	000155a0 	.word	0x000155a0

0000bbe0 <lfs_dir_open>:
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    bbe0:	b570      	push	{r4, r5, r6, lr}
    bbe2:	b086      	sub	sp, #24
    bbe4:	4605      	mov	r5, r0
    bbe6:	460c      	mov	r4, r1
    bbe8:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    bbea:	f101 0608 	add.w	r6, r1, #8
    bbee:	2300      	movs	r3, #0
    bbf0:	aa03      	add	r2, sp, #12
    bbf2:	4631      	mov	r1, r6
    bbf4:	f7ff fee2 	bl	b9bc <lfs_dir_find>
    if (tag < 0) {
    bbf8:	2800      	cmp	r0, #0
    bbfa:	db1f      	blt.n	bc3c <lfs_dir_open+0x5c>
    return (tag & 0x7ff00000) >> 20;
    bbfc:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    bc00:	2b02      	cmp	r3, #2
    bc02:	d12c      	bne.n	bc5e <lfs_dir_open+0x7e>
    return (tag & 0x000ffc00) >> 10;
    bc04:	f3c0 2089 	ubfx	r0, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
    bc08:	f240 33ff 	movw	r3, #1023	; 0x3ff
    bc0c:	4298      	cmp	r0, r3
    bc0e:	d117      	bne.n	bc40 <lfs_dir_open+0x60>
        pair[0] = lfs->root[0];
    bc10:	6a2b      	ldr	r3, [r5, #32]
    bc12:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
    bc14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bc16:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
    bc18:	aa04      	add	r2, sp, #16
    bc1a:	4631      	mov	r1, r6
    bc1c:	4628      	mov	r0, r5
    bc1e:	f006 ff6f 	bl	12b00 <lfs_dir_fetch>
    if (err) {
    bc22:	b958      	cbnz	r0, bc3c <lfs_dir_open+0x5c>
    dir->head[0] = dir->m.pair[0];
    bc24:	68a3      	ldr	r3, [r4, #8]
    bc26:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
    bc28:	68e3      	ldr	r3, [r4, #12]
    bc2a:	6323      	str	r3, [r4, #48]	; 0x30
    dir->id = 0;
    bc2c:	2300      	movs	r3, #0
    bc2e:	80a3      	strh	r3, [r4, #4]
    dir->pos = 0;
    bc30:	62a3      	str	r3, [r4, #40]	; 0x28
    dir->type = LFS_TYPE_DIR;
    bc32:	2302      	movs	r3, #2
    bc34:	71a3      	strb	r3, [r4, #6]
    dir->next = (lfs_dir_t*)lfs->mlist;
    bc36:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bc38:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)dir;
    bc3a:	62ac      	str	r4, [r5, #40]	; 0x28
}
    bc3c:	b006      	add	sp, #24
    bc3e:	bd70      	pop	{r4, r5, r6, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    bc40:	0283      	lsls	r3, r0, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
    bc42:	aa04      	add	r2, sp, #16
    bc44:	9200      	str	r2, [sp, #0]
    bc46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    bc4a:	f043 0308 	orr.w	r3, r3, #8
    bc4e:	4a05      	ldr	r2, [pc, #20]	; (bc64 <lfs_dir_open+0x84>)
    bc50:	4631      	mov	r1, r6
    bc52:	4628      	mov	r0, r5
    bc54:	f006 ffa0 	bl	12b98 <lfs_dir_get>
        if (res < 0) {
    bc58:	2800      	cmp	r0, #0
    bc5a:	dadd      	bge.n	bc18 <lfs_dir_open+0x38>
    bc5c:	e7ee      	b.n	bc3c <lfs_dir_open+0x5c>
        return LFS_ERR_NOTDIR;
    bc5e:	f06f 0013 	mvn.w	r0, #19
    bc62:	e7eb      	b.n	bc3c <lfs_dir_open+0x5c>
    bc64:	700ffc00 	.word	0x700ffc00

0000bc68 <lfs_dir_read>:
int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
    bc68:	b570      	push	{r4, r5, r6, lr}
    bc6a:	4605      	mov	r5, r0
    bc6c:	460c      	mov	r4, r1
    bc6e:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
    bc70:	f44f 7284 	mov.w	r2, #264	; 0x108
    bc74:	2100      	movs	r1, #0
    bc76:	4630      	mov	r0, r6
    bc78:	f005 fc94 	bl	115a4 <memset>
    if (dir->pos == 0) {
    bc7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bc7e:	b16b      	cbz	r3, bc9c <lfs_dir_read+0x34>
    } else if (dir->pos == 1) {
    bc80:	2b01      	cmp	r3, #1
    bc82:	d11d      	bne.n	bcc0 <lfs_dir_read+0x58>
        info->type = LFS_TYPE_DIR;
    bc84:	4630      	mov	r0, r6
    bc86:	2302      	movs	r3, #2
    bc88:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, "..");
    bc8c:	4920      	ldr	r1, [pc, #128]	; (bd10 <lfs_dir_read+0xa8>)
    bc8e:	f005 fbe8 	bl	11462 <strcpy>
        dir->pos += 1;
    bc92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bc94:	3301      	adds	r3, #1
    bc96:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
    bc98:	2101      	movs	r1, #1
    bc9a:	e034      	b.n	bd06 <lfs_dir_read+0x9e>
        info->type = LFS_TYPE_DIR;
    bc9c:	4630      	mov	r0, r6
    bc9e:	2302      	movs	r3, #2
    bca0:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, ".");
    bca4:	491b      	ldr	r1, [pc, #108]	; (bd14 <lfs_dir_read+0xac>)
    bca6:	f005 fbdc 	bl	11462 <strcpy>
        dir->pos += 1;
    bcaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bcac:	3301      	adds	r3, #1
    bcae:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
    bcb0:	2101      	movs	r1, #1
    bcb2:	e028      	b.n	bd06 <lfs_dir_read+0x9e>
        dir->id += 1;
    bcb4:	88a3      	ldrh	r3, [r4, #4]
    bcb6:	3301      	adds	r3, #1
    bcb8:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
    bcba:	f111 0f02 	cmn.w	r1, #2
    bcbe:	d11e      	bne.n	bcfe <lfs_dir_read+0x96>
        if (dir->id == dir->m.count) {
    bcc0:	88a2      	ldrh	r2, [r4, #4]
    bcc2:	8ba3      	ldrh	r3, [r4, #28]
    bcc4:	429a      	cmp	r2, r3
    bcc6:	d10c      	bne.n	bce2 <lfs_dir_read+0x7a>
            if (!dir->m.split) {
    bcc8:	7fe3      	ldrb	r3, [r4, #31]
    bcca:	b1f3      	cbz	r3, bd0a <lfs_dir_read+0xa2>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
    bccc:	f104 0220 	add.w	r2, r4, #32
    bcd0:	f104 0108 	add.w	r1, r4, #8
    bcd4:	4628      	mov	r0, r5
    bcd6:	f006 ff13 	bl	12b00 <lfs_dir_fetch>
            if (err) {
    bcda:	4601      	mov	r1, r0
    bcdc:	b998      	cbnz	r0, bd06 <lfs_dir_read+0x9e>
            dir->id = 0;
    bcde:	2300      	movs	r3, #0
    bce0:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
    bce2:	4633      	mov	r3, r6
    bce4:	88a2      	ldrh	r2, [r4, #4]
    bce6:	f104 0108 	add.w	r1, r4, #8
    bcea:	4628      	mov	r0, r5
    bcec:	f7ff ff2a 	bl	bb44 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
    bcf0:	4601      	mov	r1, r0
    bcf2:	2800      	cmp	r0, #0
    bcf4:	d0de      	beq.n	bcb4 <lfs_dir_read+0x4c>
    bcf6:	f110 0f02 	cmn.w	r0, #2
    bcfa:	d0db      	beq.n	bcb4 <lfs_dir_read+0x4c>
    bcfc:	e003      	b.n	bd06 <lfs_dir_read+0x9e>
    dir->pos += 1;
    bcfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bd00:	3301      	adds	r3, #1
    bd02:	62a3      	str	r3, [r4, #40]	; 0x28
    return true;
    bd04:	2101      	movs	r1, #1
}
    bd06:	4608      	mov	r0, r1
    bd08:	bd70      	pop	{r4, r5, r6, pc}
                return false;
    bd0a:	2100      	movs	r1, #0
    bd0c:	e7fb      	b.n	bd06 <lfs_dir_read+0x9e>
    bd0e:	bf00      	nop
    bd10:	00015c68 	.word	0x00015c68
    bd14:	00015c64 	.word	0x00015c64

0000bd18 <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
    bd18:	b570      	push	{r4, r5, r6, lr}
    bd1a:	b09a      	sub	sp, #104	; 0x68
    bd1c:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
    bd1e:	f007 f9f2 	bl	13106 <lfs_init>
    if (err) {
    bd22:	4606      	mov	r6, r0
    bd24:	2800      	cmp	r0, #0
    bd26:	f040 80e6 	bne.w	bef6 <lfs_mount+0x1de>
    lfs_mdir_t dir = {.tail = {0, 1}};
    bd2a:	2500      	movs	r5, #0
    bd2c:	950f      	str	r5, [sp, #60]	; 0x3c
    bd2e:	9510      	str	r5, [sp, #64]	; 0x40
    bd30:	9511      	str	r5, [sp, #68]	; 0x44
    bd32:	9512      	str	r5, [sp, #72]	; 0x48
    bd34:	9513      	str	r5, [sp, #76]	; 0x4c
    bd36:	9514      	str	r5, [sp, #80]	; 0x50
    bd38:	9515      	str	r5, [sp, #84]	; 0x54
    bd3a:	2301      	movs	r3, #1
    bd3c:	9316      	str	r3, [sp, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
    bd3e:	e07a      	b.n	be36 <lfs_mount+0x11e>
    bd40:	4988      	ldr	r1, [pc, #544]	; (bf64 <lfs_mount+0x24c>)
    bd42:	4b89      	ldr	r3, [pc, #548]	; (bf68 <lfs_mount+0x250>)
    bd44:	1ac9      	subs	r1, r1, r3
    bd46:	08c9      	lsrs	r1, r1, #3
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
    bd48:	f04f 0300 	mov.w	r3, #0
    bd4c:	2501      	movs	r5, #1
    bd4e:	f365 0302 	bfi	r3, r5, #0, #3
    bd52:	f36f 03c5 	bfc	r3, #3, #3
    bd56:	f361 138f 	bfi	r3, r1, #6, #10
    bd5a:	4984      	ldr	r1, [pc, #528]	; (bf6c <lfs_mount+0x254>)
    bd5c:	9105      	str	r1, [sp, #20]
    bd5e:	f640 6198 	movw	r1, #3736	; 0xe98
    bd62:	9106      	str	r1, [sp, #24]
    bd64:	9007      	str	r0, [sp, #28]
    bd66:	b292      	uxth	r2, r2
    bd68:	9208      	str	r2, [sp, #32]
    bd6a:	2204      	movs	r2, #4
    bd6c:	a905      	add	r1, sp, #20
    bd6e:	4880      	ldr	r0, [pc, #512]	; (bf70 <lfs_mount+0x258>)
    bd70:	f7f6 f890 	bl	1e94 <log_n>
                err = LFS_ERR_INVAL;
    bd74:	f06f 0615 	mvn.w	r6, #21
                goto cleanup;
    bd78:	e0ba      	b.n	bef0 <lfs_mount+0x1d8>
    bd7a:	487a      	ldr	r0, [pc, #488]	; (bf64 <lfs_mount+0x24c>)
    bd7c:	4b7a      	ldr	r3, [pc, #488]	; (bf68 <lfs_mount+0x250>)
    bd7e:	1ac0      	subs	r0, r0, r3
    bd80:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
    bd82:	f04f 0300 	mov.w	r3, #0
    bd86:	2501      	movs	r5, #1
    bd88:	f365 0302 	bfi	r3, r5, #0, #3
    bd8c:	f36f 03c5 	bfc	r3, #3, #3
    bd90:	f360 138f 	bfi	r3, r0, #6, #10
    bd94:	4875      	ldr	r0, [pc, #468]	; (bf6c <lfs_mount+0x254>)
    bd96:	9005      	str	r0, [sp, #20]
    bd98:	f640 60a1 	movw	r0, #3745	; 0xea1
    bd9c:	9006      	str	r0, [sp, #24]
    bd9e:	9207      	str	r2, [sp, #28]
    bda0:	9108      	str	r1, [sp, #32]
    bda2:	2204      	movs	r2, #4
    bda4:	a905      	add	r1, sp, #20
    bda6:	4873      	ldr	r0, [pc, #460]	; (bf74 <lfs_mount+0x25c>)
    bda8:	f7f6 f874 	bl	1e94 <log_n>
                    err = LFS_ERR_INVAL;
    bdac:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    bdb0:	e09e      	b.n	bef0 <lfs_mount+0x1d8>
    bdb2:	486c      	ldr	r0, [pc, #432]	; (bf64 <lfs_mount+0x24c>)
    bdb4:	4b6c      	ldr	r3, [pc, #432]	; (bf68 <lfs_mount+0x250>)
    bdb6:	1ac0      	subs	r0, r0, r3
    bdb8:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
    bdba:	f04f 0300 	mov.w	r3, #0
    bdbe:	2501      	movs	r5, #1
    bdc0:	f365 0302 	bfi	r3, r5, #0, #3
    bdc4:	f36f 03c5 	bfc	r3, #3, #3
    bdc8:	f360 138f 	bfi	r3, r0, #6, #10
    bdcc:	4867      	ldr	r0, [pc, #412]	; (bf6c <lfs_mount+0x254>)
    bdce:	9005      	str	r0, [sp, #20]
    bdd0:	f640 60ac 	movw	r0, #3756	; 0xeac
    bdd4:	9006      	str	r0, [sp, #24]
    bdd6:	9207      	str	r2, [sp, #28]
    bdd8:	9108      	str	r1, [sp, #32]
    bdda:	2204      	movs	r2, #4
    bddc:	a905      	add	r1, sp, #20
    bdde:	4866      	ldr	r0, [pc, #408]	; (bf78 <lfs_mount+0x260>)
    bde0:	f7f6 f858 	bl	1e94 <log_n>
                    err = LFS_ERR_INVAL;
    bde4:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    bde8:	e082      	b.n	bef0 <lfs_mount+0x1d8>
    bdea:	485e      	ldr	r0, [pc, #376]	; (bf64 <lfs_mount+0x24c>)
    bdec:	4b5e      	ldr	r3, [pc, #376]	; (bf68 <lfs_mount+0x250>)
    bdee:	1ac0      	subs	r0, r0, r3
    bdf0:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
    bdf2:	f04f 0300 	mov.w	r3, #0
    bdf6:	2501      	movs	r5, #1
    bdf8:	f365 0302 	bfi	r3, r5, #0, #3
    bdfc:	f36f 03c5 	bfc	r3, #3, #3
    be00:	f360 138f 	bfi	r3, r0, #6, #10
    be04:	4859      	ldr	r0, [pc, #356]	; (bf6c <lfs_mount+0x254>)
    be06:	9005      	str	r0, [sp, #20]
    be08:	f640 60b7 	movw	r0, #3767	; 0xeb7
    be0c:	9006      	str	r0, [sp, #24]
    be0e:	9207      	str	r2, [sp, #28]
    be10:	9108      	str	r1, [sp, #32]
    be12:	2204      	movs	r2, #4
    be14:	a905      	add	r1, sp, #20
    be16:	4859      	ldr	r0, [pc, #356]	; (bf7c <lfs_mount+0x264>)
    be18:	f7f6 f83c 	bl	1e94 <log_n>
                    err = LFS_ERR_INVAL;
    be1c:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    be20:	e066      	b.n	bef0 <lfs_mount+0x1d8>
                err = tag;
    be22:	4606      	mov	r6, r0
    be24:	e064      	b.n	bef0 <lfs_mount+0x1d8>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    be26:	f104 0230 	add.w	r2, r4, #48	; 0x30
    be2a:	a90f      	add	r1, sp, #60	; 0x3c
    be2c:	4620      	mov	r0, r4
    be2e:	f7ff fd9b 	bl	b968 <lfs_dir_getgstate>
        if (err) {
    be32:	2800      	cmp	r0, #0
    be34:	d164      	bne.n	bf00 <lfs_mount+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    be36:	9b15      	ldr	r3, [sp, #84]	; 0x54
    be38:	f1b3 3fff 	cmp.w	r3, #4294967295
    be3c:	d064      	beq.n	bf08 <lfs_mount+0x1f0>
    be3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    be40:	f1b3 3fff 	cmp.w	r3, #4294967295
    be44:	d05e      	beq.n	bf04 <lfs_mount+0x1ec>
    be46:	4633      	mov	r3, r6
    while (!lfs_pair_isnull(dir.tail)) {
    be48:	f013 0f01 	tst.w	r3, #1
    be4c:	d15e      	bne.n	bf0c <lfs_mount+0x1f4>
        if (cycle >= lfs->cfg->block_count/2) {
    be4e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    be50:	6a1b      	ldr	r3, [r3, #32]
    be52:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    be56:	d249      	bcs.n	beec <lfs_mount+0x1d4>
        cycle += 1;
    be58:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    be5a:	9417      	str	r4, [sp, #92]	; 0x5c
    be5c:	4b48      	ldr	r3, [pc, #288]	; (bf80 <lfs_mount+0x268>)
    be5e:	9318      	str	r3, [sp, #96]	; 0x60
    be60:	2308      	movs	r3, #8
    be62:	9319      	str	r3, [sp, #100]	; 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    be64:	ab17      	add	r3, sp, #92	; 0x5c
    be66:	9303      	str	r3, [sp, #12]
    be68:	4b46      	ldr	r3, [pc, #280]	; (bf84 <lfs_mount+0x26c>)
    be6a:	9302      	str	r3, [sp, #8]
    be6c:	2300      	movs	r3, #0
    be6e:	9301      	str	r3, [sp, #4]
    be70:	4b45      	ldr	r3, [pc, #276]	; (bf88 <lfs_mount+0x270>)
    be72:	9300      	str	r3, [sp, #0]
    be74:	4b45      	ldr	r3, [pc, #276]	; (bf8c <lfs_mount+0x274>)
    be76:	aa15      	add	r2, sp, #84	; 0x54
    be78:	a90f      	add	r1, sp, #60	; 0x3c
    be7a:	4620      	mov	r0, r4
    be7c:	f7ff f8d2 	bl	b024 <lfs_dir_fetchmatch>
        if (tag < 0) {
    be80:	2800      	cmp	r0, #0
    be82:	db3b      	blt.n	befc <lfs_mount+0x1e4>
        if (tag && !lfs_tag_isdelete(tag)) {
    be84:	2800      	cmp	r0, #0
    be86:	d0ce      	beq.n	be26 <lfs_mount+0x10e>
    return ((int32_t)(tag << 22) >> 22) == -1;
    be88:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
    be8c:	f1b0 3fff 	cmp.w	r0, #4294967295
    be90:	d0c9      	beq.n	be26 <lfs_mount+0x10e>
            lfs->root[0] = dir.pair[0];
    be92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    be94:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
    be96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    be98:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
    be9a:	ab09      	add	r3, sp, #36	; 0x24
    be9c:	9300      	str	r3, [sp, #0]
    be9e:	4b3c      	ldr	r3, [pc, #240]	; (bf90 <lfs_mount+0x278>)
    bea0:	4a3a      	ldr	r2, [pc, #232]	; (bf8c <lfs_mount+0x274>)
    bea2:	a90f      	add	r1, sp, #60	; 0x3c
    bea4:	4620      	mov	r0, r4
    bea6:	f006 fe77 	bl	12b98 <lfs_dir_get>
            if (tag < 0) {
    beaa:	2800      	cmp	r0, #0
    beac:	dbb9      	blt.n	be22 <lfs_mount+0x10a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
    beae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    beb0:	0c10      	lsrs	r0, r2, #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
    beb2:	b291      	uxth	r1, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
    beb4:	2802      	cmp	r0, #2
    beb6:	f47f af43 	bne.w	bd40 <lfs_mount+0x28>
    beba:	2900      	cmp	r1, #0
    bebc:	f47f af40 	bne.w	bd40 <lfs_mount+0x28>
            if (superblock.name_max) {
    bec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bec2:	b122      	cbz	r2, bece <lfs_mount+0x1b6>
                if (superblock.name_max > lfs->name_max) {
    bec4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    bec6:	428a      	cmp	r2, r1
    bec8:	f63f af57 	bhi.w	bd7a <lfs_mount+0x62>
                lfs->name_max = superblock.name_max;
    becc:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
    bece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bed0:	b122      	cbz	r2, bedc <lfs_mount+0x1c4>
                if (superblock.file_max > lfs->file_max) {
    bed2:	6f21      	ldr	r1, [r4, #112]	; 0x70
    bed4:	428a      	cmp	r2, r1
    bed6:	f63f af6c 	bhi.w	bdb2 <lfs_mount+0x9a>
                lfs->file_max = superblock.file_max;
    beda:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
    bedc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bede:	2a00      	cmp	r2, #0
    bee0:	d0a1      	beq.n	be26 <lfs_mount+0x10e>
                if (superblock.attr_max > lfs->attr_max) {
    bee2:	6f61      	ldr	r1, [r4, #116]	; 0x74
    bee4:	428a      	cmp	r2, r1
    bee6:	d880      	bhi.n	bdea <lfs_mount+0xd2>
                lfs->attr_max = superblock.attr_max;
    bee8:	6762      	str	r2, [r4, #116]	; 0x74
    beea:	e79c      	b.n	be26 <lfs_mount+0x10e>
            err = LFS_ERR_CORRUPT;
    beec:	f06f 0653 	mvn.w	r6, #83	; 0x53
    lfs_unmount(lfs);
    bef0:	4620      	mov	r0, r4
    bef2:	f007 fa48 	bl	13386 <lfs_unmount>
}
    bef6:	4630      	mov	r0, r6
    bef8:	b01a      	add	sp, #104	; 0x68
    befa:	bd70      	pop	{r4, r5, r6, pc}
            err = tag;
    befc:	4606      	mov	r6, r0
    befe:	e7f7      	b.n	bef0 <lfs_mount+0x1d8>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    bf00:	4606      	mov	r6, r0
    bf02:	e7f5      	b.n	bef0 <lfs_mount+0x1d8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    bf04:	2301      	movs	r3, #1
    bf06:	e79f      	b.n	be48 <lfs_mount+0x130>
    bf08:	2301      	movs	r3, #1
    bf0a:	e79d      	b.n	be48 <lfs_mount+0x130>
    bf0c:	6a23      	ldr	r3, [r4, #32]
    bf0e:	f1b3 3fff 	cmp.w	r3, #4294967295
    bf12:	d013      	beq.n	bf3c <lfs_mount+0x224>
    bf14:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bf16:	f1b3 3fff 	cmp.w	r3, #4294967295
    bf1a:	d00d      	beq.n	bf38 <lfs_mount+0x220>
    bf1c:	4633      	mov	r3, r6
    if (lfs_pair_isnull(lfs->root)) {
    bf1e:	f013 0f01 	tst.w	r3, #1
    bf22:	d11c      	bne.n	bf5e <lfs_mount+0x246>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
    bf24:	f104 0130 	add.w	r1, r4, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    bf28:	4633      	mov	r3, r6
    bf2a:	2b02      	cmp	r3, #2
    bf2c:	dc08      	bgt.n	bf40 <lfs_mount+0x228>
        if (((uint32_t*)a)[i] != 0) {
    bf2e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    bf32:	b92a      	cbnz	r2, bf40 <lfs_mount+0x228>
    for (int i = 0; i < 3; i++) {
    bf34:	3301      	adds	r3, #1
    bf36:	e7f8      	b.n	bf2a <lfs_mount+0x212>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    bf38:	2301      	movs	r3, #1
    bf3a:	e7f0      	b.n	bf1e <lfs_mount+0x206>
    bf3c:	2301      	movs	r3, #1
    bf3e:	e7ee      	b.n	bf1e <lfs_mount+0x206>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    bf40:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bf42:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    bf46:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
    bf48:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    bf4c:	f104 0230 	add.w	r2, r4, #48	; 0x30
    bf50:	ca07      	ldmia	r2, {r0, r1, r2}
    bf52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs_alloc_reset(lfs);
    bf56:	4620      	mov	r0, r4
    bf58:	f006 fc5b 	bl	12812 <lfs_alloc_reset>
    return 0;
    bf5c:	e7cb      	b.n	bef6 <lfs_mount+0x1de>
        err = LFS_ERR_INVAL;
    bf5e:	f06f 0615 	mvn.w	r6, #21
    bf62:	e7c5      	b.n	bef0 <lfs_mount+0x1d8>
    bf64:	000146a0 	.word	0x000146a0
    bf68:	00014688 	.word	0x00014688
    bf6c:	00015c10 	.word	0x00015c10
    bf70:	00015c6c 	.word	0x00015c6c
    bf74:	00015c8c 	.word	0x00015c8c
    bf78:	00015cb4 	.word	0x00015cb4
    bf7c:	00015cdc 	.word	0x00015cdc
    bf80:	00015704 	.word	0x00015704
    bf84:	00012ac1 	.word	0x00012ac1
    bf88:	0ff00008 	.word	0x0ff00008
    bf8c:	7ffffc00 	.word	0x7ffffc00
    bf90:	20100018 	.word	0x20100018

0000bf94 <lfs_fs_traverseraw>:
        bool includeorphans) {
    bf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf98:	b08f      	sub	sp, #60	; 0x3c
    bf9a:	4606      	mov	r6, r0
    bf9c:	460f      	mov	r7, r1
    bf9e:	4690      	mov	r8, r2
    bfa0:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
    bfa2:	2500      	movs	r5, #0
    bfa4:	9506      	str	r5, [sp, #24]
    bfa6:	9507      	str	r5, [sp, #28]
    bfa8:	9508      	str	r5, [sp, #32]
    bfaa:	9509      	str	r5, [sp, #36]	; 0x24
    bfac:	950a      	str	r5, [sp, #40]	; 0x28
    bfae:	950b      	str	r5, [sp, #44]	; 0x2c
    bfb0:	950c      	str	r5, [sp, #48]	; 0x30
    bfb2:	2301      	movs	r3, #1
    bfb4:	930d      	str	r3, [sp, #52]	; 0x34
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    bfb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
    bfbc:	d06d      	beq.n	c09a <lfs_fs_traverseraw+0x106>
    bfbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
    bfc4:	d067      	beq.n	c096 <lfs_fs_traverseraw+0x102>
    bfc6:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
    bfc8:	2b00      	cmp	r3, #0
    bfca:	d168      	bne.n	c09e <lfs_fs_traverseraw+0x10a>
        if (cycle >= lfs->cfg->block_count/2) {
    bfcc:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    bfce:	6a1b      	ldr	r3, [r3, #32]
    bfd0:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    bfd4:	f080 8097 	bcs.w	c106 <lfs_fs_traverseraw+0x172>
        cycle += 1;
    bfd8:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
    bfda:	2400      	movs	r4, #0
    bfdc:	2c01      	cmp	r4, #1
    bfde:	dc0b      	bgt.n	bff8 <lfs_fs_traverseraw+0x64>
            int err = cb(data, dir.tail[i]);
    bfe0:	1da3      	adds	r3, r4, #6
    bfe2:	aa0e      	add	r2, sp, #56	; 0x38
    bfe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bfe8:	f853 1c20 	ldr.w	r1, [r3, #-32]
    bfec:	4640      	mov	r0, r8
    bfee:	47b8      	blx	r7
            if (err) {
    bff0:	4603      	mov	r3, r0
    bff2:	b978      	cbnz	r0, c014 <lfs_fs_traverseraw+0x80>
        for (int i = 0; i < 2; i++) {
    bff4:	3401      	adds	r4, #1
    bff6:	e7f1      	b.n	bfdc <lfs_fs_traverseraw+0x48>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
    bff8:	aa0c      	add	r2, sp, #48	; 0x30
    bffa:	a906      	add	r1, sp, #24
    bffc:	4630      	mov	r0, r6
    bffe:	f006 fd7f 	bl	12b00 <lfs_dir_fetch>
        if (err) {
    c002:	4682      	mov	sl, r0
    c004:	2800      	cmp	r0, #0
    c006:	f040 8081 	bne.w	c10c <lfs_fs_traverseraw+0x178>
        for (uint16_t id = 0; id < dir.count; id++) {
    c00a:	2400      	movs	r4, #0
    c00c:	e016      	b.n	c03c <lfs_fs_traverseraw+0xa8>
                if (tag == LFS_ERR_NOENT) {
    c00e:	f113 0f02 	cmn.w	r3, #2
    c012:	d011      	beq.n	c038 <lfs_fs_traverseraw+0xa4>
}
    c014:	4618      	mov	r0, r3
    c016:	b00f      	add	sp, #60	; 0x3c
    c018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
    c01c:	f8cd 8008 	str.w	r8, [sp, #8]
    c020:	9701      	str	r7, [sp, #4]
    c022:	9b05      	ldr	r3, [sp, #20]
    c024:	9300      	str	r3, [sp, #0]
    c026:	9b04      	ldr	r3, [sp, #16]
    c028:	4632      	mov	r2, r6
    c02a:	2100      	movs	r1, #0
    c02c:	4630      	mov	r0, r6
    c02e:	f007 f8e6 	bl	131fe <lfs_ctz_traverse>
                if (err) {
    c032:	4603      	mov	r3, r0
    c034:	2800      	cmp	r0, #0
    c036:	d1ed      	bne.n	c014 <lfs_fs_traverseraw+0x80>
        for (uint16_t id = 0; id < dir.count; id++) {
    c038:	3401      	adds	r4, #1
    c03a:	b2a4      	uxth	r4, r4
    c03c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    c040:	42a3      	cmp	r3, r4
    c042:	d9b8      	bls.n	bfb6 <lfs_fs_traverseraw+0x22>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
    c044:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
    c046:	aa04      	add	r2, sp, #16
    c048:	9200      	str	r2, [sp, #0]
    c04a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c04e:	f043 0308 	orr.w	r3, r3, #8
    c052:	4a2f      	ldr	r2, [pc, #188]	; (c110 <lfs_fs_traverseraw+0x17c>)
    c054:	a906      	add	r1, sp, #24
    c056:	4630      	mov	r0, r6
    c058:	f006 fd9e 	bl	12b98 <lfs_dir_get>
            if (tag < 0) {
    c05c:	1e03      	subs	r3, r0, #0
    c05e:	dbd6      	blt.n	c00e <lfs_fs_traverseraw+0x7a>
    return (tag & 0x7ff00000) >> 20;
    c060:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    c064:	f240 2202 	movw	r2, #514	; 0x202
    c068:	4293      	cmp	r3, r2
    c06a:	d0d7      	beq.n	c01c <lfs_fs_traverseraw+0x88>
            } else if (includeorphans && 
    c06c:	f1b9 0f00 	cmp.w	r9, #0
    c070:	d0e2      	beq.n	c038 <lfs_fs_traverseraw+0xa4>
    c072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c076:	d1df      	bne.n	c038 <lfs_fs_traverseraw+0xa4>
                for (int i = 0; i < 2; i++) {
    c078:	46d3      	mov	fp, sl
    c07a:	f1bb 0f01 	cmp.w	fp, #1
    c07e:	dcdb      	bgt.n	c038 <lfs_fs_traverseraw+0xa4>
                    err = cb(data, (&ctz.head)[i]);
    c080:	ab04      	add	r3, sp, #16
    c082:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
    c086:	4640      	mov	r0, r8
    c088:	47b8      	blx	r7
                    if (err) {
    c08a:	4603      	mov	r3, r0
    c08c:	2800      	cmp	r0, #0
    c08e:	d1c1      	bne.n	c014 <lfs_fs_traverseraw+0x80>
                for (int i = 0; i < 2; i++) {
    c090:	f10b 0b01 	add.w	fp, fp, #1
    c094:	e7f1      	b.n	c07a <lfs_fs_traverseraw+0xe6>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c096:	2301      	movs	r3, #1
    c098:	e796      	b.n	bfc8 <lfs_fs_traverseraw+0x34>
    c09a:	2301      	movs	r3, #1
    c09c:	e794      	b.n	bfc8 <lfs_fs_traverseraw+0x34>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    c09e:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    c0a0:	e00f      	b.n	c0c2 <lfs_fs_traverseraw+0x12e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    c0a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c0a4:	f8cd 8008 	str.w	r8, [sp, #8]
    c0a8:	9701      	str	r7, [sp, #4]
    c0aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    c0ac:	9200      	str	r2, [sp, #0]
    c0ae:	4632      	mov	r2, r6
    c0b0:	f104 0140 	add.w	r1, r4, #64	; 0x40
    c0b4:	4630      	mov	r0, r6
    c0b6:	f007 f8a2 	bl	131fe <lfs_ctz_traverse>
            if (err) {
    c0ba:	4603      	mov	r3, r0
    c0bc:	b158      	cbz	r0, c0d6 <lfs_fs_traverseraw+0x142>
    c0be:	e7a9      	b.n	c014 <lfs_fs_traverseraw+0x80>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    c0c0:	6824      	ldr	r4, [r4, #0]
    c0c2:	b1f4      	cbz	r4, c102 <lfs_fs_traverseraw+0x16e>
        if (f->type != LFS_TYPE_REG) {
    c0c4:	79a3      	ldrb	r3, [r4, #6]
    c0c6:	2b01      	cmp	r3, #1
    c0c8:	d1fa      	bne.n	c0c0 <lfs_fs_traverseraw+0x12c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
    c0ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c0cc:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
    c0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c0d4:	d0e5      	beq.n	c0a2 <lfs_fs_traverseraw+0x10e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
    c0d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c0d8:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
    c0dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    c0e0:	d1ee      	bne.n	c0c0 <lfs_fs_traverseraw+0x12c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    c0e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c0e4:	f8cd 8008 	str.w	r8, [sp, #8]
    c0e8:	9701      	str	r7, [sp, #4]
    c0ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
    c0ec:	9200      	str	r2, [sp, #0]
    c0ee:	4632      	mov	r2, r6
    c0f0:	f104 0140 	add.w	r1, r4, #64	; 0x40
    c0f4:	4630      	mov	r0, r6
    c0f6:	f007 f882 	bl	131fe <lfs_ctz_traverse>
            if (err) {
    c0fa:	4603      	mov	r3, r0
    c0fc:	2800      	cmp	r0, #0
    c0fe:	d0df      	beq.n	c0c0 <lfs_fs_traverseraw+0x12c>
    c100:	e788      	b.n	c014 <lfs_fs_traverseraw+0x80>
    return 0;
    c102:	2300      	movs	r3, #0
    c104:	e786      	b.n	c014 <lfs_fs_traverseraw+0x80>
            return LFS_ERR_CORRUPT;
    c106:	f06f 0353 	mvn.w	r3, #83	; 0x53
    c10a:	e783      	b.n	c014 <lfs_fs_traverseraw+0x80>
            return err;
    c10c:	4603      	mov	r3, r0
    c10e:	e781      	b.n	c014 <lfs_fs_traverseraw+0x80>
    c110:	700ffc00 	.word	0x700ffc00

0000c114 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    c114:	b570      	push	{r4, r5, r6, lr}
    c116:	b082      	sub	sp, #8
    c118:	4604      	mov	r4, r0
    c11a:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
    c11c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    c11e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    c120:	4293      	cmp	r3, r2
    c122:	d02d      	beq.n	c180 <lfs_alloc+0x6c>
            lfs->free.i += 1;
    c124:	1c5a      	adds	r2, r3, #1
    c126:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
    c128:	6e22      	ldr	r2, [r4, #96]	; 0x60
    c12a:	3a01      	subs	r2, #1
    c12c:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    c12e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c130:	0959      	lsrs	r1, r3, #5
    c132:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    c136:	f003 001f 	and.w	r0, r3, #31
    c13a:	2201      	movs	r2, #1
    c13c:	4082      	lsls	r2, r0
    c13e:	4211      	tst	r1, r2
    c140:	d1ec      	bne.n	c11c <lfs_alloc+0x8>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
    c142:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c144:	4413      	add	r3, r2
    c146:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    c148:	6a11      	ldr	r1, [r2, #32]
    c14a:	fbb3 f2f1 	udiv	r2, r3, r1
    c14e:	fb01 3312 	mls	r3, r1, r2, r3
    c152:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
    c154:	e004      	b.n	c160 <lfs_alloc+0x4c>
                    lfs->free.i += 1;
    c156:	3301      	adds	r3, #1
    c158:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
    c15a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    c15c:	3b01      	subs	r3, #1
    c15e:	6623      	str	r3, [r4, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
    c160:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    c162:	6da2      	ldr	r2, [r4, #88]	; 0x58
    c164:	4293      	cmp	r3, r2
    c166:	d049      	beq.n	c1fc <lfs_alloc+0xe8>
                        (lfs->free.buffer[lfs->free.i / 32]
    c168:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c16a:	0959      	lsrs	r1, r3, #5
    c16c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
    c170:	f003 001f 	and.w	r0, r3, #31
    c174:	2201      	movs	r2, #1
    c176:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
    c178:	4211      	tst	r1, r2
    c17a:	d1ec      	bne.n	c156 <lfs_alloc+0x42>
                return 0;
    c17c:	2600      	movs	r6, #0
    c17e:	e03e      	b.n	c1fe <lfs_alloc+0xea>
        if (lfs->free.ack == 0) {
    c180:	6e21      	ldr	r1, [r4, #96]	; 0x60
    c182:	b309      	cbz	r1, c1c8 <lfs_alloc+0xb4>
        lfs->free.off = (lfs->free.off + lfs->free.size)
    c184:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c186:	441a      	add	r2, r3
                % lfs->cfg->block_count;
    c188:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    c18a:	6a1e      	ldr	r6, [r3, #32]
    c18c:	fbb2 f0f6 	udiv	r0, r2, r6
    c190:	fb06 2210 	mls	r2, r6, r0, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
    c194:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    c196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c198:	00d2      	lsls	r2, r2, #3
    c19a:	4291      	cmp	r1, r2
    c19c:	bf28      	it	cs
    c19e:	4611      	movcs	r1, r2
    c1a0:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
    c1a2:	2100      	movs	r1, #0
    c1a4:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    c1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c1a8:	6e60      	ldr	r0, [r4, #100]	; 0x64
    c1aa:	f005 f9fb 	bl	115a4 <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
    c1ae:	2301      	movs	r3, #1
    c1b0:	4622      	mov	r2, r4
    c1b2:	4914      	ldr	r1, [pc, #80]	; (c204 <lfs_alloc+0xf0>)
    c1b4:	4620      	mov	r0, r4
    c1b6:	f7ff feed 	bl	bf94 <lfs_fs_traverseraw>
        if (err) {
    c1ba:	4606      	mov	r6, r0
    c1bc:	2800      	cmp	r0, #0
    c1be:	d0ad      	beq.n	c11c <lfs_alloc+0x8>
            lfs_alloc_reset(lfs);
    c1c0:	4620      	mov	r0, r4
    c1c2:	f006 fb26 	bl	12812 <lfs_alloc_reset>
            return err;
    c1c6:	e01a      	b.n	c1fe <lfs_alloc+0xea>
    c1c8:	4a0f      	ldr	r2, [pc, #60]	; (c208 <lfs_alloc+0xf4>)
    c1ca:	4910      	ldr	r1, [pc, #64]	; (c20c <lfs_alloc+0xf8>)
    c1cc:	1a52      	subs	r2, r2, r1
    c1ce:	08d2      	lsrs	r2, r2, #3
            LFS_ERROR("No more free space %"PRIu32,
    c1d0:	f04f 0100 	mov.w	r1, #0
    c1d4:	2001      	movs	r0, #1
    c1d6:	f360 0102 	bfi	r1, r0, #0, #3
    c1da:	f36f 01c5 	bfc	r1, #3, #3
    c1de:	f362 118f 	bfi	r1, r2, #6, #10
    c1e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c1e4:	f8ad 1000 	strh.w	r1, [sp]
    c1e8:	4413      	add	r3, r2
    c1ea:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
    c1ee:	4908      	ldr	r1, [pc, #32]	; (c210 <lfs_alloc+0xfc>)
    c1f0:	4808      	ldr	r0, [pc, #32]	; (c214 <lfs_alloc+0x100>)
    c1f2:	f7f5 fd9f 	bl	1d34 <log_3>
            return LFS_ERR_NOSPC;
    c1f6:	f06f 061b 	mvn.w	r6, #27
    c1fa:	e000      	b.n	c1fe <lfs_alloc+0xea>
                return 0;
    c1fc:	2600      	movs	r6, #0
}
    c1fe:	4630      	mov	r0, r6
    c200:	b002      	add	sp, #8
    c202:	bd70      	pop	{r4, r5, r6, pc}
    c204:	000127d7 	.word	0x000127d7
    c208:	000146a0 	.word	0x000146a0
    c20c:	00014688 	.word	0x00014688
    c210:	00015c10 	.word	0x00015c10
    c214:	00015d04 	.word	0x00015d04

0000c218 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
    c218:	b5f0      	push	{r4, r5, r6, r7, lr}
    c21a:	b089      	sub	sp, #36	; 0x24
    c21c:	4605      	mov	r5, r0
    c21e:	460e      	mov	r6, r1
    c220:	e04a      	b.n	c2b8 <lfs_file_relocate+0xa0>
                err = lfs_bd_read(lfs,
    c222:	2201      	movs	r2, #1
    c224:	9203      	str	r2, [sp, #12]
    c226:	f10d 021b 	add.w	r2, sp, #27
    c22a:	9202      	str	r2, [sp, #8]
    c22c:	9401      	str	r4, [sp, #4]
    c22e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    c230:	9200      	str	r2, [sp, #0]
    c232:	1b1b      	subs	r3, r3, r4
    c234:	462a      	mov	r2, r5
    c236:	f106 0140 	add.w	r1, r6, #64	; 0x40
    c23a:	4628      	mov	r0, r5
    c23c:	f006 fb18 	bl	12870 <lfs_bd_read>
                if (err) {
    c240:	2800      	cmp	r0, #0
    c242:	d149      	bne.n	c2d8 <lfs_file_relocate+0xc0>
            err = lfs_bd_prog(lfs,
    c244:	2301      	movs	r3, #1
    c246:	9303      	str	r3, [sp, #12]
    c248:	f10d 021b 	add.w	r2, sp, #27
    c24c:	9202      	str	r2, [sp, #8]
    c24e:	9401      	str	r4, [sp, #4]
    c250:	9a07      	ldr	r2, [sp, #28]
    c252:	9200      	str	r2, [sp, #0]
    c254:	462a      	mov	r2, r5
    c256:	f105 0110 	add.w	r1, r5, #16
    c25a:	4628      	mov	r0, r5
    c25c:	f006 fd7f 	bl	12d5e <lfs_bd_prog>
            if (err) {
    c260:	bb20      	cbnz	r0, c2ac <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
    c262:	3401      	adds	r4, #1
    c264:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    c266:	42a3      	cmp	r3, r4
    c268:	d93c      	bls.n	c2e4 <lfs_file_relocate+0xcc>
            if (file->flags & LFS_F_INLINE) {
    c26a:	6b32      	ldr	r2, [r6, #48]	; 0x30
    c26c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    c270:	d0d7      	beq.n	c222 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
    c272:	88b2      	ldrh	r2, [r6, #4]
    c274:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
    c276:	2101      	movs	r1, #1
    c278:	9105      	str	r1, [sp, #20]
    c27a:	f10d 011b 	add.w	r1, sp, #27
    c27e:	9104      	str	r1, [sp, #16]
    c280:	9403      	str	r4, [sp, #12]
    c282:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    c286:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    c28a:	9202      	str	r2, [sp, #8]
    c28c:	4a24      	ldr	r2, [pc, #144]	; (c320 <lfs_file_relocate+0x108>)
    c28e:	9201      	str	r2, [sp, #4]
    c290:	1b1b      	subs	r3, r3, r4
    c292:	9300      	str	r3, [sp, #0]
    c294:	f106 0340 	add.w	r3, r6, #64	; 0x40
    c298:	2200      	movs	r2, #0
    c29a:	f106 0108 	add.w	r1, r6, #8
    c29e:	4628      	mov	r0, r5
    c2a0:	f006 fc87 	bl	12bb2 <lfs_dir_getread>
                if (err) {
    c2a4:	2800      	cmp	r0, #0
    c2a6:	d0cd      	beq.n	c244 <lfs_file_relocate+0x2c>
                    return err;
    c2a8:	4607      	mov	r7, r0
    c2aa:	e036      	b.n	c31a <lfs_file_relocate+0x102>
                if (err == LFS_ERR_CORRUPT) {
    c2ac:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c2b0:	d114      	bne.n	c2dc <lfs_file_relocate+0xc4>
    rcache->block = LFS_BLOCK_NULL;
    c2b2:	f04f 33ff 	mov.w	r3, #4294967295
    c2b6:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
    c2b8:	a907      	add	r1, sp, #28
    c2ba:	4628      	mov	r0, r5
    c2bc:	f7ff ff2a 	bl	c114 <lfs_alloc>
        if (err) {
    c2c0:	4607      	mov	r7, r0
    c2c2:	bb50      	cbnz	r0, c31a <lfs_file_relocate+0x102>
        err = lfs_bd_erase(lfs, nblock);
    c2c4:	9907      	ldr	r1, [sp, #28]
    c2c6:	4628      	mov	r0, r5
    c2c8:	f006 fa80 	bl	127cc <lfs_bd_erase>
        if (err) {
    c2cc:	4607      	mov	r7, r0
    c2ce:	b138      	cbz	r0, c2e0 <lfs_file_relocate+0xc8>
            if (err == LFS_ERR_CORRUPT) {
    c2d0:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c2d4:	d0ed      	beq.n	c2b2 <lfs_file_relocate+0x9a>
    c2d6:	e020      	b.n	c31a <lfs_file_relocate+0x102>
                    return err;
    c2d8:	4607      	mov	r7, r0
    c2da:	e01e      	b.n	c31a <lfs_file_relocate+0x102>
                return err;
    c2dc:	4607      	mov	r7, r0
    c2de:	e01c      	b.n	c31a <lfs_file_relocate+0x102>
        for (lfs_off_t i = 0; i < file->off; i++) {
    c2e0:	2400      	movs	r4, #0
    c2e2:	e7bf      	b.n	c264 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
    c2e4:	6eab      	ldr	r3, [r5, #104]	; 0x68
    c2e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c2e8:	69e9      	ldr	r1, [r5, #28]
    c2ea:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    c2ec:	f005 f936 	bl	1155c <memcpy>
        file->cache.block = lfs->pcache.block;
    c2f0:	692b      	ldr	r3, [r5, #16]
    c2f2:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
    c2f4:	696b      	ldr	r3, [r5, #20]
    c2f6:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
    c2f8:	69ab      	ldr	r3, [r5, #24]
    c2fa:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    c2fc:	6eab      	ldr	r3, [r5, #104]	; 0x68
    c2fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c300:	21ff      	movs	r1, #255	; 0xff
    c302:	69e8      	ldr	r0, [r5, #28]
    c304:	f005 f94e 	bl	115a4 <memset>
    pcache->block = LFS_BLOCK_NULL;
    c308:	f04f 33ff 	mov.w	r3, #4294967295
    c30c:	612b      	str	r3, [r5, #16]
        file->block = nblock;
    c30e:	9b07      	ldr	r3, [sp, #28]
    c310:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
    c312:	6b33      	ldr	r3, [r6, #48]	; 0x30
    c314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c318:	6333      	str	r3, [r6, #48]	; 0x30
}
    c31a:	4638      	mov	r0, r7
    c31c:	b009      	add	sp, #36	; 0x24
    c31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c320:	fff7fc00 	.word	0xfff7fc00

0000c324 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
    c324:	b5f0      	push	{r4, r5, r6, r7, lr}
    c326:	b097      	sub	sp, #92	; 0x5c
    c328:	4605      	mov	r5, r0
    c32a:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
    c32c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    c32e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    c332:	d008      	beq.n	c346 <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
    c334:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c338:	d102      	bne.n	c340 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
    c33a:	f04f 32ff 	mov.w	r2, #4294967295
    c33e:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
    c340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    c344:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
    c346:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c348:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    c34c:	d05e      	beq.n	c40c <lfs_file_flush+0xe8>
        lfs_off_t pos = file->pos;
    c34e:	6b66      	ldr	r6, [r4, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
    c350:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c354:	d148      	bne.n	c3e8 <lfs_file_flush+0xc4>
            lfs_file_t orig = {
    c356:	2254      	movs	r2, #84	; 0x54
    c358:	2100      	movs	r1, #0
    c35a:	a801      	add	r0, sp, #4
    c35c:	f005 f922 	bl	115a4 <memset>
                .ctz.head = file->ctz.head,
    c360:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
    c362:	930b      	str	r3, [sp, #44]	; 0x2c
                .ctz.size = file->ctz.size,
    c364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
    c366:	930c      	str	r3, [sp, #48]	; 0x30
    c368:	4b2a      	ldr	r3, [pc, #168]	; (c414 <lfs_file_flush+0xf0>)
    c36a:	930d      	str	r3, [sp, #52]	; 0x34
                .pos = file->pos,
    c36c:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
    c36e:	930e      	str	r3, [sp, #56]	; 0x38
    c370:	af11      	add	r7, sp, #68	; 0x44
    c372:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c376:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
    c37a:	f04f 33ff 	mov.w	r3, #4294967295
    c37e:	602b      	str	r3, [r5, #0]
}
    c380:	e003      	b.n	c38a <lfs_file_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
    c382:	f04f 33ff 	mov.w	r3, #4294967295
    c386:	9311      	str	r3, [sp, #68]	; 0x44
    c388:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
    c38a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    c38c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c38e:	429a      	cmp	r2, r3
    c390:	d216      	bcs.n	c3c0 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
    c392:	2301      	movs	r3, #1
    c394:	f10d 0203 	add.w	r2, sp, #3
    c398:	a901      	add	r1, sp, #4
    c39a:	4628      	mov	r0, r5
    c39c:	f000 f83c 	bl	c418 <lfs_file_read>
                if (res < 0) {
    c3a0:	1e03      	subs	r3, r0, #0
    c3a2:	db34      	blt.n	c40e <lfs_file_flush+0xea>
                res = lfs_file_write(lfs, file, &data, 1);
    c3a4:	2301      	movs	r3, #1
    c3a6:	f10d 0203 	add.w	r2, sp, #3
    c3aa:	4621      	mov	r1, r4
    c3ac:	4628      	mov	r0, r5
    c3ae:	f007 f8e2 	bl	13576 <lfs_file_write>
                if (res < 0) {
    c3b2:	1e03      	subs	r3, r0, #0
    c3b4:	db2b      	blt.n	c40e <lfs_file_flush+0xea>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
    c3b6:	682b      	ldr	r3, [r5, #0]
    c3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
    c3bc:	d1e1      	bne.n	c382 <lfs_file_flush+0x5e>
    c3be:	e7e4      	b.n	c38a <lfs_file_flush+0x66>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
    c3c0:	2301      	movs	r3, #1
    c3c2:	462a      	mov	r2, r5
    c3c4:	f104 0140 	add.w	r1, r4, #64	; 0x40
    c3c8:	4628      	mov	r0, r5
    c3ca:	f006 fc80 	bl	12cce <lfs_bd_flush>
                if (err) {
    c3ce:	4603      	mov	r3, r0
    c3d0:	b178      	cbz	r0, c3f2 <lfs_file_flush+0xce>
                    if (err == LFS_ERR_CORRUPT) {
    c3d2:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c3d6:	d11a      	bne.n	c40e <lfs_file_flush+0xea>
                err = lfs_file_relocate(lfs, file);
    c3d8:	4621      	mov	r1, r4
    c3da:	4628      	mov	r0, r5
    c3dc:	f7ff ff1c 	bl	c218 <lfs_file_relocate>
                if (err) {
    c3e0:	4603      	mov	r3, r0
    c3e2:	2800      	cmp	r0, #0
    c3e4:	d0ec      	beq.n	c3c0 <lfs_file_flush+0x9c>
    c3e6:	e012      	b.n	c40e <lfs_file_flush+0xea>
            file->pos = lfs_max(file->pos, file->ctz.size);
    c3e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
    c3ea:	42b3      	cmp	r3, r6
    c3ec:	bf38      	it	cc
    c3ee:	4633      	movcc	r3, r6
    c3f0:	6363      	str	r3, [r4, #52]	; 0x34
        file->ctz.head = file->block;
    c3f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c3f4:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
    c3f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c3f8:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
    c3fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c3fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
    c400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c404:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
    c406:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
    c408:	2300      	movs	r3, #0
    c40a:	e000      	b.n	c40e <lfs_file_flush+0xea>
    c40c:	2300      	movs	r3, #0
}
    c40e:	4618      	mov	r0, r3
    c410:	b017      	add	sp, #92	; 0x5c
    c412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c414:	00200001 	.word	0x00200001

0000c418 <lfs_file_read>:
        void *buffer, lfs_size_t size) {
    c418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c41c:	b087      	sub	sp, #28
    c41e:	4680      	mov	r8, r0
    c420:	460c      	mov	r4, r1
    c422:	4617      	mov	r7, r2
    c424:	4699      	mov	r9, r3
    if (file->flags & LFS_F_WRITING) {
    c426:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    c428:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    c42c:	d109      	bne.n	c442 <lfs_file_read+0x2a>
    if (file->pos >= file->ctz.size) {
    c42e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    c430:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c432:	429a      	cmp	r2, r3
    c434:	d276      	bcs.n	c524 <lfs_file_read+0x10c>
    size = lfs_min(size, file->ctz.size - file->pos);
    c436:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
    c438:	4599      	cmp	r9, r3
    c43a:	bf28      	it	cs
    c43c:	4699      	movcs	r9, r3
    nsize = size;
    c43e:	464e      	mov	r6, r9
    while (nsize > 0) {
    c440:	e03d      	b.n	c4be <lfs_file_read+0xa6>
        int err = lfs_file_flush(lfs, file);
    c442:	f7ff ff6f 	bl	c324 <lfs_file_flush>
        if (err) {
    c446:	4602      	mov	r2, r0
    c448:	2800      	cmp	r0, #0
    c44a:	d0f0      	beq.n	c42e <lfs_file_read+0x16>
    c44c:	e06b      	b.n	c526 <lfs_file_read+0x10e>
            if (!(file->flags & LFS_F_INLINE)) {
    c44e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c452:	d041      	beq.n	c4d8 <lfs_file_read+0xc0>
                file->block = LFS_BLOCK_INLINE;
    c454:	f06f 0301 	mvn.w	r3, #1
    c458:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
    c45a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c45c:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
    c45e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    c464:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
    c466:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    c46a:	69db      	ldr	r3, [r3, #28]
    c46c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    c46e:	1a9d      	subs	r5, r3, r2
    c470:	42b5      	cmp	r5, r6
    c472:	bf28      	it	cs
    c474:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
    c476:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c478:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c47c:	d041      	beq.n	c502 <lfs_file_read+0xea>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
    c47e:	88a1      	ldrh	r1, [r4, #4]
    c480:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
    c482:	9505      	str	r5, [sp, #20]
    c484:	9704      	str	r7, [sp, #16]
    c486:	9203      	str	r2, [sp, #12]
    c488:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    c48c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c490:	9102      	str	r1, [sp, #8]
    c492:	4a27      	ldr	r2, [pc, #156]	; (c530 <lfs_file_read+0x118>)
    c494:	9201      	str	r2, [sp, #4]
    c496:	9300      	str	r3, [sp, #0]
    c498:	f104 0340 	add.w	r3, r4, #64	; 0x40
    c49c:	2200      	movs	r2, #0
    c49e:	f104 0108 	add.w	r1, r4, #8
    c4a2:	4640      	mov	r0, r8
    c4a4:	f006 fb85 	bl	12bb2 <lfs_dir_getread>
            if (err) {
    c4a8:	4602      	mov	r2, r0
    c4aa:	2800      	cmp	r0, #0
    c4ac:	d13b      	bne.n	c526 <lfs_file_read+0x10e>
        file->pos += diff;
    c4ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c4b0:	442b      	add	r3, r5
    c4b2:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
    c4b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c4b6:	442b      	add	r3, r5
    c4b8:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
    c4ba:	442f      	add	r7, r5
        nsize -= diff;
    c4bc:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
    c4be:	2e00      	cmp	r6, #0
    c4c0:	d02e      	beq.n	c520 <lfs_file_read+0x108>
        if (!(file->flags & LFS_F_READING) ||
    c4c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c4c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    c4c8:	d0c1      	beq.n	c44e <lfs_file_read+0x36>
                file->off == lfs->cfg->block_size) {
    c4ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    c4cc:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
    c4d0:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
    c4d2:	4291      	cmp	r1, r2
    c4d4:	d1c7      	bne.n	c466 <lfs_file_read+0x4e>
    c4d6:	e7ba      	b.n	c44e <lfs_file_read+0x36>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
    c4d8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    c4dc:	9303      	str	r3, [sp, #12]
    c4de:	f104 0338 	add.w	r3, r4, #56	; 0x38
    c4e2:	9302      	str	r3, [sp, #8]
    c4e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c4e6:	9301      	str	r3, [sp, #4]
    c4e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c4ea:	9300      	str	r3, [sp, #0]
    c4ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c4ee:	f104 0240 	add.w	r2, r4, #64	; 0x40
    c4f2:	2100      	movs	r1, #0
    c4f4:	4640      	mov	r0, r8
    c4f6:	f006 fecd 	bl	13294 <lfs_ctz_find>
                if (err) {
    c4fa:	4602      	mov	r2, r0
    c4fc:	2800      	cmp	r0, #0
    c4fe:	d0ae      	beq.n	c45e <lfs_file_read+0x46>
    c500:	e011      	b.n	c526 <lfs_file_read+0x10e>
            int err = lfs_bd_read(lfs,
    c502:	9503      	str	r5, [sp, #12]
    c504:	9702      	str	r7, [sp, #8]
    c506:	9201      	str	r2, [sp, #4]
    c508:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    c50a:	9200      	str	r2, [sp, #0]
    c50c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    c510:	2100      	movs	r1, #0
    c512:	4640      	mov	r0, r8
    c514:	f006 f9ac 	bl	12870 <lfs_bd_read>
            if (err) {
    c518:	4602      	mov	r2, r0
    c51a:	2800      	cmp	r0, #0
    c51c:	d0c7      	beq.n	c4ae <lfs_file_read+0x96>
    c51e:	e002      	b.n	c526 <lfs_file_read+0x10e>
    return size;
    c520:	464a      	mov	r2, r9
    c522:	e000      	b.n	c526 <lfs_file_read+0x10e>
        return 0;
    c524:	2200      	movs	r2, #0
}
    c526:	4610      	mov	r0, r2
    c528:	b007      	add	sp, #28
    c52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c52e:	bf00      	nop
    c530:	fff7fc00 	.word	0xfff7fc00

0000c534 <lfs_fs_size>:
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
    c534:	b500      	push	{lr}
    c536:	b083      	sub	sp, #12
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
    c538:	2300      	movs	r3, #0
    c53a:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
    c53c:	aa01      	add	r2, sp, #4
    c53e:	4904      	ldr	r1, [pc, #16]	; (c550 <lfs_fs_size+0x1c>)
    c540:	f7ff fd28 	bl	bf94 <lfs_fs_traverseraw>
    if (err) {
    c544:	b900      	cbnz	r0, c548 <lfs_fs_size+0x14>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
    c546:	9801      	ldr	r0, [sp, #4]
}
    c548:	b003      	add	sp, #12
    c54a:	f85d fb04 	ldr.w	pc, [sp], #4
    c54e:	bf00      	nop
    c550:	00012867 	.word	0x00012867

0000c554 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c558:	b09b      	sub	sp, #108	; 0x6c
    c55a:	4607      	mov	r7, r0
    c55c:	468b      	mov	fp, r1
    c55e:	4690      	mov	r8, r2
    c560:	4699      	mov	r9, r3
    c562:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
    c566:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
    c56a:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    c56e:	680b      	ldr	r3, [r1, #0]
    c570:	9316      	str	r3, [sp, #88]	; 0x58
    c572:	684b      	ldr	r3, [r1, #4]
    c574:	9317      	str	r3, [sp, #92]	; 0x5c
    while (end - begin > 1) {
    c576:	e012      	b.n	c59e <lfs_dir_compact+0x4a>
        uint16_t split = (end - begin) / 2;
    c578:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    c57c:	f3c4 044f 	ubfx	r4, r4, #1, #16
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
    c580:	442c      	add	r4, r5
    c582:	b2a4      	uxth	r4, r4
    c584:	9602      	str	r6, [sp, #8]
    c586:	9401      	str	r4, [sp, #4]
    c588:	f8cd a000 	str.w	sl, [sp]
    c58c:	464b      	mov	r3, r9
    c58e:	4642      	mov	r2, r8
    c590:	4659      	mov	r1, fp
    c592:	4638      	mov	r0, r7
    c594:	f007 fa02 	bl	1399c <lfs_dir_split>
        if (err) {
    c598:	2800      	cmp	r0, #0
    c59a:	d151      	bne.n	c640 <lfs_dir_compact+0xec>
        end = begin + split;
    c59c:	4626      	mov	r6, r4
    while (end - begin > 1) {
    c59e:	1b74      	subs	r4, r6, r5
    c5a0:	2c01      	cmp	r4, #1
    c5a2:	dd2f      	ble.n	c604 <lfs_dir_compact+0xb0>
        lfs_size_t size = 0;
    c5a4:	2200      	movs	r2, #0
    c5a6:	9210      	str	r2, [sp, #64]	; 0x40
        int err = lfs_dir_traverse(lfs,
    c5a8:	ab10      	add	r3, sp, #64	; 0x40
    c5aa:	9308      	str	r3, [sp, #32]
    c5ac:	4bad      	ldr	r3, [pc, #692]	; (c864 <lfs_dir_compact+0x310>)
    c5ae:	9307      	str	r3, [sp, #28]
    c5b0:	426b      	negs	r3, r5
    c5b2:	b21b      	sxth	r3, r3
    c5b4:	9306      	str	r3, [sp, #24]
    c5b6:	9605      	str	r6, [sp, #20]
    c5b8:	9504      	str	r5, [sp, #16]
    c5ba:	9203      	str	r2, [sp, #12]
    c5bc:	4baa      	ldr	r3, [pc, #680]	; (c868 <lfs_dir_compact+0x314>)
    c5be:	9302      	str	r3, [sp, #8]
    c5c0:	f8cd 9004 	str.w	r9, [sp, #4]
    c5c4:	f8cd 8000 	str.w	r8, [sp]
    c5c8:	f04f 33ff 	mov.w	r3, #4294967295
    c5cc:	4651      	mov	r1, sl
    c5ce:	4638      	mov	r0, r7
    c5d0:	f7ff f81a 	bl	b608 <lfs_dir_traverse>
        if (err) {
    c5d4:	2800      	cmp	r0, #0
    c5d6:	f040 81a7 	bne.w	c928 <lfs_dir_compact+0x3d4>
        if (end - begin < 0xff &&
    c5da:	2cfe      	cmp	r4, #254	; 0xfe
    c5dc:	dccc      	bgt.n	c578 <lfs_dir_compact+0x24>
                size <= lfs_min(lfs->cfg->block_size - 36,
    c5de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c5e0:	69da      	ldr	r2, [r3, #28]
    c5e2:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
    c5e6:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
    c5e8:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    c5ec:	1e53      	subs	r3, r2, #1
    return a - (a % alignment);
    c5ee:	fbb3 f2f0 	udiv	r2, r3, r0
    c5f2:	fb00 3212 	mls	r2, r0, r2, r3
    c5f6:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
    c5f8:	428b      	cmp	r3, r1
    c5fa:	bf28      	it	cs
    c5fc:	460b      	movcs	r3, r1
    c5fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
        if (end - begin < 0xff &&
    c600:	429a      	cmp	r2, r3
    c602:	d8b9      	bhi.n	c578 <lfs_dir_compact+0x24>
    dir->rev += 1;
    c604:	f8db 2008 	ldr.w	r2, [fp, #8]
    c608:	3201      	adds	r2, #1
    c60a:	f8cb 2008 	str.w	r2, [fp, #8]
    if (lfs->cfg->block_cycles > 0 &&
    c60e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c612:	2b00      	cmp	r3, #0
    c614:	dd43      	ble.n	c69e <lfs_dir_compact+0x14a>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
    c616:	3301      	adds	r3, #1
    c618:	f043 0301 	orr.w	r3, r3, #1
    c61c:	fbb2 f1f3 	udiv	r1, r2, r3
    c620:	fb03 2311 	mls	r3, r3, r1, r2
    if (lfs->cfg->block_cycles > 0 &&
    c624:	2b00      	cmp	r3, #0
    c626:	d13c      	bne.n	c6a2 <lfs_dir_compact+0x14e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c628:	f8db 3000 	ldr.w	r3, [fp]
    c62c:	b1a3      	cbz	r3, c658 <lfs_dir_compact+0x104>
    c62e:	f8db 2004 	ldr.w	r2, [fp, #4]
    c632:	2a01      	cmp	r2, #1
    c634:	d010      	beq.n	c658 <lfs_dir_compact+0x104>
    c636:	2b01      	cmp	r3, #1
    c638:	d00e      	beq.n	c658 <lfs_dir_compact+0x104>
    c63a:	b16a      	cbz	r2, c658 <lfs_dir_compact+0x104>
            tired = true;
    c63c:	2401      	movs	r4, #1
    c63e:	e049      	b.n	c6d4 <lfs_dir_compact+0x180>
    c640:	900b      	str	r0, [sp, #44]	; 0x2c
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
    c642:	f110 0f1c 	cmn.w	r0, #28
    c646:	f040 8170 	bne.w	c92a <lfs_dir_compact+0x3d6>
    c64a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c64c:	69db      	ldr	r3, [r3, #28]
    c64e:	3b24      	subs	r3, #36	; 0x24
    c650:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c652:	4293      	cmp	r3, r2
    c654:	d2d6      	bcs.n	c604 <lfs_dir_compact+0xb0>
    c656:	e168      	b.n	c92a <lfs_dir_compact+0x3d6>
            lfs_ssize_t res = lfs_fs_size(lfs);
    c658:	4638      	mov	r0, r7
    c65a:	f7ff ff6b 	bl	c534 <lfs_fs_size>
            if (res < 0) {
    c65e:	1e02      	subs	r2, r0, #0
    c660:	920b      	str	r2, [sp, #44]	; 0x2c
    c662:	f2c0 8162 	blt.w	c92a <lfs_dir_compact+0x3d6>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
    c666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c668:	6a1b      	ldr	r3, [r3, #32]
    c66a:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
    c66e:	d301      	bcc.n	c674 <lfs_dir_compact+0x120>
    bool relocated = false;
    c670:	2400      	movs	r4, #0
    c672:	e017      	b.n	c6a4 <lfs_dir_compact+0x150>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
    c674:	9602      	str	r6, [sp, #8]
    c676:	9501      	str	r5, [sp, #4]
    c678:	f8cd a000 	str.w	sl, [sp]
    c67c:	464b      	mov	r3, r9
    c67e:	4642      	mov	r2, r8
    c680:	4659      	mov	r1, fp
    c682:	4638      	mov	r0, r7
    c684:	f007 f98a 	bl	1399c <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
    c688:	900b      	str	r0, [sp, #44]	; 0x2c
    c68a:	b118      	cbz	r0, c694 <lfs_dir_compact+0x140>
    c68c:	f110 0f1c 	cmn.w	r0, #28
    c690:	f040 814b 	bne.w	c92a <lfs_dir_compact+0x3d6>
                if (!err) {
    c694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c696:	2b00      	cmp	r3, #0
    c698:	d1ea      	bne.n	c670 <lfs_dir_compact+0x11c>
                    end = begin;
    c69a:	462e      	mov	r6, r5
    c69c:	e7e8      	b.n	c670 <lfs_dir_compact+0x11c>
    bool relocated = false;
    c69e:	2400      	movs	r4, #0
    c6a0:	e000      	b.n	c6a4 <lfs_dir_compact+0x150>
    c6a2:	2400      	movs	r4, #0
                .block = dir->pair[1],
    c6a4:	f8db 1004 	ldr.w	r1, [fp, #4]
            struct lfs_commit commit = {
    c6a8:	9110      	str	r1, [sp, #64]	; 0x40
    c6aa:	2300      	movs	r3, #0
    c6ac:	9311      	str	r3, [sp, #68]	; 0x44
    c6ae:	f04f 32ff 	mov.w	r2, #4294967295
    c6b2:	9212      	str	r2, [sp, #72]	; 0x48
    c6b4:	9213      	str	r2, [sp, #76]	; 0x4c
    c6b6:	9314      	str	r3, [sp, #80]	; 0x50
                .end = lfs->cfg->block_size - 8,
    c6b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c6ba:	69db      	ldr	r3, [r3, #28]
    c6bc:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
    c6be:	9315      	str	r3, [sp, #84]	; 0x54
            int err = lfs_bd_erase(lfs, dir->pair[1]);
    c6c0:	4638      	mov	r0, r7
    c6c2:	f006 f883 	bl	127cc <lfs_bd_erase>
            if (err) {
    c6c6:	900b      	str	r0, [sp, #44]	; 0x2c
    c6c8:	b340      	cbz	r0, c71c <lfs_dir_compact+0x1c8>
                if (err == LFS_ERR_CORRUPT) {
    c6ca:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c6ce:	f040 812c 	bne.w	c92a <lfs_dir_compact+0x3d6>
                    goto relocate;
    c6d2:	2400      	movs	r4, #0
    rcache->block = LFS_BLOCK_NULL;
    c6d4:	f04f 33ff 	mov.w	r3, #4294967295
    c6d8:	613b      	str	r3, [r7, #16]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c6da:	f8db 3000 	ldr.w	r3, [fp]
    c6de:	2b00      	cmp	r3, #0
    c6e0:	f000 8107 	beq.w	c8f2 <lfs_dir_compact+0x39e>
    c6e4:	f8db 2004 	ldr.w	r2, [fp, #4]
    c6e8:	2a01      	cmp	r2, #1
    c6ea:	f000 8102 	beq.w	c8f2 <lfs_dir_compact+0x39e>
    c6ee:	2b01      	cmp	r3, #1
    c6f0:	f000 80ff 	beq.w	c8f2 <lfs_dir_compact+0x39e>
    c6f4:	2a00      	cmp	r2, #0
    c6f6:	f000 80fc 	beq.w	c8f2 <lfs_dir_compact+0x39e>
        int err = lfs_alloc(lfs, &dir->pair[1]);
    c6fa:	f10b 0104 	add.w	r1, fp, #4
    c6fe:	4638      	mov	r0, r7
    c700:	f7ff fd08 	bl	c114 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
    c704:	900b      	str	r0, [sp, #44]	; 0x2c
    c706:	b138      	cbz	r0, c718 <lfs_dir_compact+0x1c4>
    c708:	f110 0f1c 	cmn.w	r0, #28
    c70c:	f040 810d 	bne.w	c92a <lfs_dir_compact+0x3d6>
    c710:	2c00      	cmp	r4, #0
    c712:	f000 810a 	beq.w	c92a <lfs_dir_compact+0x3d6>
    c716:	e7c5      	b.n	c6a4 <lfs_dir_compact+0x150>
        relocated = true;
    c718:	2401      	movs	r4, #1
    c71a:	e7c3      	b.n	c6a4 <lfs_dir_compact+0x150>
            err = lfs_dir_commitprog(lfs, &commit,
    c71c:	2304      	movs	r3, #4
    c71e:	f10b 0208 	add.w	r2, fp, #8
    c722:	a910      	add	r1, sp, #64	; 0x40
    c724:	4638      	mov	r0, r7
    c726:	f006 fb69 	bl	12dfc <lfs_dir_commitprog>
            if (err) {
    c72a:	900b      	str	r0, [sp, #44]	; 0x2c
    c72c:	b120      	cbz	r0, c738 <lfs_dir_compact+0x1e4>
                if (err == LFS_ERR_CORRUPT) {
    c72e:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c732:	f040 80fa 	bne.w	c92a <lfs_dir_compact+0x3d6>
    c736:	e7cc      	b.n	c6d2 <lfs_dir_compact+0x17e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    c738:	9718      	str	r7, [sp, #96]	; 0x60
    c73a:	ab10      	add	r3, sp, #64	; 0x40
    c73c:	9319      	str	r3, [sp, #100]	; 0x64
            err = lfs_dir_traverse(lfs,
    c73e:	ab18      	add	r3, sp, #96	; 0x60
    c740:	9308      	str	r3, [sp, #32]
    c742:	4b4a      	ldr	r3, [pc, #296]	; (c86c <lfs_dir_compact+0x318>)
    c744:	9307      	str	r3, [sp, #28]
    c746:	426b      	negs	r3, r5
    c748:	b21b      	sxth	r3, r3
    c74a:	9306      	str	r3, [sp, #24]
    c74c:	9605      	str	r6, [sp, #20]
    c74e:	9504      	str	r5, [sp, #16]
    c750:	2200      	movs	r2, #0
    c752:	9203      	str	r2, [sp, #12]
    c754:	4b44      	ldr	r3, [pc, #272]	; (c868 <lfs_dir_compact+0x314>)
    c756:	9302      	str	r3, [sp, #8]
    c758:	f8cd 9004 	str.w	r9, [sp, #4]
    c75c:	f8cd 8000 	str.w	r8, [sp]
    c760:	f04f 33ff 	mov.w	r3, #4294967295
    c764:	4651      	mov	r1, sl
    c766:	4638      	mov	r0, r7
    c768:	f7fe ff4e 	bl	b608 <lfs_dir_traverse>
            if (err) {
    c76c:	900b      	str	r0, [sp, #44]	; 0x2c
    c76e:	b120      	cbz	r0, c77a <lfs_dir_compact+0x226>
                if (err == LFS_ERR_CORRUPT) {
    c770:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c774:	f040 80d9 	bne.w	c92a <lfs_dir_compact+0x3d6>
    c778:	e7ab      	b.n	c6d2 <lfs_dir_compact+0x17e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c77a:	f8db 3018 	ldr.w	r3, [fp, #24]
    c77e:	f1b3 3fff 	cmp.w	r3, #4294967295
    c782:	d01e      	beq.n	c7c2 <lfs_dir_compact+0x26e>
    c784:	f8db 301c 	ldr.w	r3, [fp, #28]
    c788:	f1b3 3fff 	cmp.w	r3, #4294967295
    c78c:	d017      	beq.n	c7be <lfs_dir_compact+0x26a>
    c78e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (!lfs_pair_isnull(dir->tail)) {
    c790:	f013 0f01 	tst.w	r3, #1
    c794:	d017      	beq.n	c7c6 <lfs_dir_compact+0x272>
            lfs_gstate_t delta = {0};
    c796:	2300      	movs	r3, #0
    c798:	930d      	str	r3, [sp, #52]	; 0x34
    c79a:	930e      	str	r3, [sp, #56]	; 0x38
    c79c:	930f      	str	r3, [sp, #60]	; 0x3c
            if (!relocated) {
    c79e:	bbb4      	cbnz	r4, c80e <lfs_dir_compact+0x2ba>
                lfs_gstate_xor(&delta, &lfs->gdisk);
    c7a0:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
    c7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7a6:	2b02      	cmp	r3, #2
    c7a8:	dc22      	bgt.n	c7f0 <lfs_dir_compact+0x29c>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c7aa:	a90d      	add	r1, sp, #52	; 0x34
    c7ac:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    c7b0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c7b4:	4042      	eors	r2, r0
    c7b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c7ba:	3301      	adds	r3, #1
    c7bc:	e7f3      	b.n	c7a6 <lfs_dir_compact+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c7be:	2301      	movs	r3, #1
    c7c0:	e7e6      	b.n	c790 <lfs_dir_compact+0x23c>
    c7c2:	2301      	movs	r3, #1
    c7c4:	e7e4      	b.n	c790 <lfs_dir_compact+0x23c>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
    c7c6:	f89b 2017 	ldrb.w	r2, [fp, #23]
    c7ca:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
    c7ce:	f10b 0318 	add.w	r3, fp, #24
    c7d2:	4927      	ldr	r1, [pc, #156]	; (c870 <lfs_dir_compact+0x31c>)
    c7d4:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    c7d8:	a910      	add	r1, sp, #64	; 0x40
    c7da:	4638      	mov	r0, r7
    c7dc:	f006 fb2e 	bl	12e3c <lfs_dir_commitattr>
                if (err) {
    c7e0:	2800      	cmp	r0, #0
    c7e2:	d0d8      	beq.n	c796 <lfs_dir_compact+0x242>
                    if (err == LFS_ERR_CORRUPT) {
    c7e4:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c7e8:	f43f af73 	beq.w	c6d2 <lfs_dir_compact+0x17e>
                    return err;
    c7ec:	900b      	str	r0, [sp, #44]	; 0x2c
    c7ee:	e09c      	b.n	c92a <lfs_dir_compact+0x3d6>
                lfs_gstate_xor(&delta, &lfs->gstate);
    c7f0:	f107 0c30 	add.w	ip, r7, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    c7f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7f6:	2b02      	cmp	r3, #2
    c7f8:	dc09      	bgt.n	c80e <lfs_dir_compact+0x2ba>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c7fa:	a90d      	add	r1, sp, #52	; 0x34
    c7fc:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    c800:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c804:	4042      	eors	r2, r0
    c806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c80a:	3301      	adds	r3, #1
    c80c:	e7f3      	b.n	c7f6 <lfs_dir_compact+0x2a2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
    c80e:	f107 0048 	add.w	r0, r7, #72	; 0x48
    for (int i = 0; i < 3; i++) {
    c812:	46a4      	mov	ip, r4
    c814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c816:	e008      	b.n	c82a <lfs_dir_compact+0x2d6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c818:	a90d      	add	r1, sp, #52	; 0x34
    c81a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c81e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    c822:	4062      	eors	r2, r4
    c824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c828:	3301      	adds	r3, #1
    c82a:	2b02      	cmp	r3, #2
    c82c:	ddf4      	ble.n	c818 <lfs_dir_compact+0x2c4>
    c82e:	4664      	mov	r4, ip
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    c830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c832:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    c836:	f023 0303 	bic.w	r3, r3, #3
    c83a:	930d      	str	r3, [sp, #52]	; 0x34
            err = lfs_dir_getgstate(lfs, dir, &delta);
    c83c:	aa0d      	add	r2, sp, #52	; 0x34
    c83e:	4659      	mov	r1, fp
    c840:	4638      	mov	r0, r7
    c842:	f7ff f891 	bl	b968 <lfs_dir_getgstate>
            if (err) {
    c846:	900b      	str	r0, [sp, #44]	; 0x2c
    c848:	2800      	cmp	r0, #0
    c84a:	d16e      	bne.n	c92a <lfs_dir_compact+0x3d6>
    c84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
    c84e:	2b02      	cmp	r3, #2
    c850:	dc10      	bgt.n	c874 <lfs_dir_compact+0x320>
        if (((uint32_t*)a)[i] != 0) {
    c852:	aa1a      	add	r2, sp, #104	; 0x68
    c854:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c858:	f852 2c34 	ldr.w	r2, [r2, #-52]
    c85c:	b9c2      	cbnz	r2, c890 <lfs_dir_compact+0x33c>
    for (int i = 0; i < 3; i++) {
    c85e:	3301      	adds	r3, #1
    c860:	e7f5      	b.n	c84e <lfs_dir_compact+0x2fa>
    c862:	bf00      	nop
    c864:	00012831 	.word	0x00012831
    c868:	400ffc00 	.word	0x400ffc00
    c86c:	00012ef9 	.word	0x00012ef9
    c870:	000ffc08 	.word	0x000ffc08
    return true;
    c874:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
    c876:	b96b      	cbnz	r3, c894 <lfs_dir_compact+0x340>
                err = lfs_dir_commitattr(lfs, &commit,
    c878:	ab0d      	add	r3, sp, #52	; 0x34
    c87a:	4a2e      	ldr	r2, [pc, #184]	; (c934 <lfs_dir_compact+0x3e0>)
    c87c:	a910      	add	r1, sp, #64	; 0x40
    c87e:	4638      	mov	r0, r7
    c880:	f006 fadc 	bl	12e3c <lfs_dir_commitattr>
                if (err) {
    c884:	900b      	str	r0, [sp, #44]	; 0x2c
    c886:	b128      	cbz	r0, c894 <lfs_dir_compact+0x340>
                    if (err == LFS_ERR_CORRUPT) {
    c888:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c88c:	d14d      	bne.n	c92a <lfs_dir_compact+0x3d6>
    c88e:	e720      	b.n	c6d2 <lfs_dir_compact+0x17e>
            return false;
    c890:	2300      	movs	r3, #0
    c892:	e7f0      	b.n	c876 <lfs_dir_compact+0x322>
            err = lfs_dir_commitcrc(lfs, &commit);
    c894:	a910      	add	r1, sp, #64	; 0x40
    c896:	4638      	mov	r0, r7
    c898:	f006 fb42 	bl	12f20 <lfs_dir_commitcrc>
            if (err) {
    c89c:	900b      	str	r0, [sp, #44]	; 0x2c
    c89e:	b118      	cbz	r0, c8a8 <lfs_dir_compact+0x354>
                if (err == LFS_ERR_CORRUPT) {
    c8a0:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c8a4:	d141      	bne.n	c92a <lfs_dir_compact+0x3d6>
    c8a6:	e714      	b.n	c6d2 <lfs_dir_compact+0x17e>
    lfs_block_t t = pair[0];
    c8a8:	f8db 3000 	ldr.w	r3, [fp]
    pair[0] = pair[1];
    c8ac:	f8db 2004 	ldr.w	r2, [fp, #4]
    c8b0:	f8cb 2000 	str.w	r2, [fp]
    pair[1] = t;
    c8b4:	f8cb 3004 	str.w	r3, [fp, #4]
            dir->count = end - begin;
    c8b8:	1b75      	subs	r5, r6, r5
    c8ba:	f8ab 5014 	strh.w	r5, [fp, #20]
            dir->off = commit.off;
    c8be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c8c0:	f8cb 300c 	str.w	r3, [fp, #12]
            dir->etag = commit.ptag;
    c8c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c8c6:	f8cb 3010 	str.w	r3, [fp, #16]
            lfs->gdelta = (lfs_gstate_t){0};
    c8ca:	2200      	movs	r2, #0
    c8cc:	64ba      	str	r2, [r7, #72]	; 0x48
    c8ce:	64fa      	str	r2, [r7, #76]	; 0x4c
    c8d0:	653a      	str	r2, [r7, #80]	; 0x50
            if (!relocated) {
    c8d2:	b934      	cbnz	r4, c8e2 <lfs_dir_compact+0x38e>
                lfs->gdisk = lfs->gstate;
    c8d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    c8d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c8dc:	ca07      	ldmia	r2, {r0, r1, r2}
    c8de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (relocated) {
    c8e2:	b314      	cbz	r4, c92a <lfs_dir_compact+0x3d6>
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
    c8e4:	465a      	mov	r2, fp
    c8e6:	a916      	add	r1, sp, #88	; 0x58
    c8e8:	4638      	mov	r0, r7
    c8ea:	f000 fba1 	bl	d030 <lfs_fs_relocate>
    c8ee:	900b      	str	r0, [sp, #44]	; 0x2c
        if (err) {
    c8f0:	e01b      	b.n	c92a <lfs_dir_compact+0x3d6>
    c8f2:	4b11      	ldr	r3, [pc, #68]	; (c938 <lfs_dir_compact+0x3e4>)
    c8f4:	4a11      	ldr	r2, [pc, #68]	; (c93c <lfs_dir_compact+0x3e8>)
    c8f6:	1a9b      	subs	r3, r3, r2
    c8f8:	08db      	lsrs	r3, r3, #3
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
    c8fa:	f04f 0200 	mov.w	r2, #0
    c8fe:	2102      	movs	r1, #2
    c900:	f361 0202 	bfi	r2, r1, #0, #3
    c904:	f36f 02c5 	bfc	r2, #3, #3
    c908:	f363 128f 	bfi	r2, r3, #6, #10
    c90c:	f8ad 2000 	strh.w	r2, [sp]
    c910:	f8db 3004 	ldr.w	r3, [fp, #4]
    c914:	f240 629a 	movw	r2, #1690	; 0x69a
    c918:	4909      	ldr	r1, [pc, #36]	; (c940 <lfs_dir_compact+0x3ec>)
    c91a:	480a      	ldr	r0, [pc, #40]	; (c944 <lfs_dir_compact+0x3f0>)
    c91c:	f7f5 fa0a 	bl	1d34 <log_3>
            return LFS_ERR_NOSPC;
    c920:	f06f 031b 	mvn.w	r3, #27
    c924:	930b      	str	r3, [sp, #44]	; 0x2c
    c926:	e000      	b.n	c92a <lfs_dir_compact+0x3d6>
    c928:	900b      	str	r0, [sp, #44]	; 0x2c
}
    c92a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c92c:	b01b      	add	sp, #108	; 0x6c
    c92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c932:	bf00      	nop
    c934:	7ffffc0c 	.word	0x7ffffc0c
    c938:	000146a0 	.word	0x000146a0
    c93c:	00014688 	.word	0x00014688
    c940:	00015c10 	.word	0x00015c10
    c944:	00015d24 	.word	0x00015d24

0000c948 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
    c948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c94c:	b0a1      	sub	sp, #132	; 0x84
    c94e:	4680      	mov	r8, r0
    c950:	460d      	mov	r5, r1
    c952:	4617      	mov	r7, r2
    c954:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    c956:	6a84      	ldr	r4, [r0, #40]	; 0x28
    c958:	e003      	b.n	c962 <lfs_dir_commit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    c95a:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    c95c:	2b01      	cmp	r3, #1
    c95e:	d012      	beq.n	c986 <lfs_dir_commit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    c960:	6824      	ldr	r4, [r4, #0]
    c962:	b354      	cbz	r4, c9ba <lfs_dir_commit+0x72>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    c964:	f104 0308 	add.w	r3, r4, #8
    c968:	42ab      	cmp	r3, r5
    c96a:	d0f9      	beq.n	c960 <lfs_dir_commit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c96c:	68a3      	ldr	r3, [r4, #8]
    c96e:	682a      	ldr	r2, [r5, #0]
    c970:	4293      	cmp	r3, r2
    c972:	d0f2      	beq.n	c95a <lfs_dir_commit+0x12>
    c974:	68e0      	ldr	r0, [r4, #12]
    c976:	6869      	ldr	r1, [r5, #4]
    c978:	4281      	cmp	r1, r0
    c97a:	d0ee      	beq.n	c95a <lfs_dir_commit+0x12>
    c97c:	428b      	cmp	r3, r1
    c97e:	d0ec      	beq.n	c95a <lfs_dir_commit+0x12>
    c980:	4290      	cmp	r0, r2
    c982:	d1ed      	bne.n	c960 <lfs_dir_commit+0x18>
    c984:	e7e9      	b.n	c95a <lfs_dir_commit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    c986:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c988:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c98c:	d0e8      	beq.n	c960 <lfs_dir_commit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
    c98e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    c990:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    c994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    c996:	429a      	cmp	r2, r3
    c998:	d9e2      	bls.n	c960 <lfs_dir_commit+0x18>
            int err = lfs_file_outline(lfs, f);
    c99a:	4621      	mov	r1, r4
    c99c:	4640      	mov	r0, r8
    c99e:	f006 fd31 	bl	13404 <lfs_file_outline>
            if (err) {
    c9a2:	4606      	mov	r6, r0
    c9a4:	2800      	cmp	r0, #0
    c9a6:	f040 81e6 	bne.w	cd76 <lfs_dir_commit+0x42e>
            err = lfs_file_flush(lfs, f);
    c9aa:	4621      	mov	r1, r4
    c9ac:	4640      	mov	r0, r8
    c9ae:	f7ff fcb9 	bl	c324 <lfs_file_flush>
            if (err) {
    c9b2:	4606      	mov	r6, r0
    c9b4:	2800      	cmp	r0, #0
    c9b6:	d0d3      	beq.n	c960 <lfs_dir_commit+0x18>
    c9b8:	e1dd      	b.n	cd76 <lfs_dir_commit+0x42e>
    lfs_mdir_t olddir = *dir;
    c9ba:	ac16      	add	r4, sp, #88	; 0x58
    c9bc:	462e      	mov	r6, r5
    c9be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c9c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c9c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    c9c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < attrcount; i++) {
    c9ca:	2300      	movs	r3, #0
    bool hasdelete = false;
    c9cc:	461e      	mov	r6, r3
    for (int i = 0; i < attrcount; i++) {
    c9ce:	e003      	b.n	c9d8 <lfs_dir_commit+0x90>
            dir->count += 1;
    c9d0:	8aaa      	ldrh	r2, [r5, #20]
    c9d2:	3201      	adds	r2, #1
    c9d4:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
    c9d6:	3301      	adds	r3, #1
    c9d8:	454b      	cmp	r3, r9
    c9da:	da26      	bge.n	ca2a <lfs_dir_commit+0xe2>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    c9dc:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    c9e0:	eb07 04c3 	add.w	r4, r7, r3, lsl #3
    c9e4:	f857 2033 	ldr.w	r2, [r7, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
    c9e8:	0d11      	lsrs	r1, r2, #20
    c9ea:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    c9ee:	f240 4001 	movw	r0, #1025	; 0x401
    c9f2:	4282      	cmp	r2, r0
    c9f4:	d0ec      	beq.n	c9d0 <lfs_dir_commit+0x88>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
    c9f6:	f240 40ff 	movw	r0, #1279	; 0x4ff
    c9fa:	4282      	cmp	r2, r0
    c9fc:	d010      	beq.n	ca20 <lfs_dir_commit+0xd8>
    return (tag & 0x70000000) >> 20;
    c9fe:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
    ca02:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
    ca06:	d1e6      	bne.n	c9d6 <lfs_dir_commit+0x8e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
    ca08:	6862      	ldr	r2, [r4, #4]
    ca0a:	6812      	ldr	r2, [r2, #0]
    ca0c:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
    ca0e:	6862      	ldr	r2, [r4, #4]
    ca10:	6852      	ldr	r2, [r2, #4]
    ca12:	61ea      	str	r2, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
    ca14:	f857 200c 	ldr.w	r2, [r7, ip]
    ca18:	f3c2 5200 	ubfx	r2, r2, #20, #1
    ca1c:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
    ca1e:	e7da      	b.n	c9d6 <lfs_dir_commit+0x8e>
            dir->count -= 1;
    ca20:	8aaa      	ldrh	r2, [r5, #20]
    ca22:	3a01      	subs	r2, #1
    ca24:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
    ca26:	2601      	movs	r6, #1
    ca28:	e7d5      	b.n	c9d6 <lfs_dir_commit+0x8e>
    if (hasdelete && dir->count == 0) {
    ca2a:	b116      	cbz	r6, ca32 <lfs_dir_commit+0xea>
    ca2c:	8aab      	ldrh	r3, [r5, #20]
    ca2e:	2b00      	cmp	r3, #0
    ca30:	d03c      	beq.n	caac <lfs_dir_commit+0x164>
    if (dir->erased || dir->count >= 0xff) {
    ca32:	7dab      	ldrb	r3, [r5, #22]
    ca34:	b91b      	cbnz	r3, ca3e <lfs_dir_commit+0xf6>
    ca36:	8aab      	ldrh	r3, [r5, #20]
    ca38:	2bfe      	cmp	r3, #254	; 0xfe
    ca3a:	f240 80f1 	bls.w	cc20 <lfs_dir_commit+0x2d8>
            .block = dir->pair[0],
    ca3e:	682b      	ldr	r3, [r5, #0]
        struct lfs_commit commit = {
    ca40:	930e      	str	r3, [sp, #56]	; 0x38
            .off = dir->off,
    ca42:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
    ca44:	920f      	str	r2, [sp, #60]	; 0x3c
            .ptag = dir->etag,
    ca46:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
    ca48:	9310      	str	r3, [sp, #64]	; 0x40
    ca4a:	f04f 31ff 	mov.w	r1, #4294967295
    ca4e:	9111      	str	r1, [sp, #68]	; 0x44
    ca50:	9212      	str	r2, [sp, #72]	; 0x48
            .end = lfs->cfg->block_size - 8,
    ca52:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
    ca56:	69c9      	ldr	r1, [r1, #28]
    ca58:	3908      	subs	r1, #8
        struct lfs_commit commit = {
    ca5a:	9113      	str	r1, [sp, #76]	; 0x4c
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    ca5c:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
    ca60:	a90e      	add	r1, sp, #56	; 0x38
    ca62:	911f      	str	r1, [sp, #124]	; 0x7c
        int err = lfs_dir_traverse(lfs,
    ca64:	a91e      	add	r1, sp, #120	; 0x78
    ca66:	9108      	str	r1, [sp, #32]
    ca68:	49b0      	ldr	r1, [pc, #704]	; (cd2c <lfs_dir_commit+0x3e4>)
    ca6a:	9107      	str	r1, [sp, #28]
    ca6c:	2100      	movs	r1, #0
    ca6e:	9106      	str	r1, [sp, #24]
    ca70:	9105      	str	r1, [sp, #20]
    ca72:	9104      	str	r1, [sp, #16]
    ca74:	9103      	str	r1, [sp, #12]
    ca76:	9102      	str	r1, [sp, #8]
    ca78:	f8cd 9004 	str.w	r9, [sp, #4]
    ca7c:	9700      	str	r7, [sp, #0]
    ca7e:	4629      	mov	r1, r5
    ca80:	4640      	mov	r0, r8
    ca82:	f7fe fdc1 	bl	b608 <lfs_dir_traverse>
        if (err) {
    ca86:	4606      	mov	r6, r0
    ca88:	2800      	cmp	r0, #0
    ca8a:	d038      	beq.n	cafe <lfs_dir_commit+0x1b6>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    ca8c:	f110 0f1c 	cmn.w	r0, #28
    ca90:	f000 80c6 	beq.w	cc20 <lfs_dir_commit+0x2d8>
    ca94:	f110 0f54 	cmn.w	r0, #84	; 0x54
    ca98:	f000 80c2 	beq.w	cc20 <lfs_dir_commit+0x2d8>
            *dir = olddir;
    ca9c:	ac16      	add	r4, sp, #88	; 0x58
    ca9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    caa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    caa2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    caa6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    caaa:	e164      	b.n	cd76 <lfs_dir_commit+0x42e>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
    caac:	aa0e      	add	r2, sp, #56	; 0x38
    caae:	4629      	mov	r1, r5
    cab0:	4640      	mov	r0, r8
    cab2:	f006 f833 	bl	12b1c <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
    cab6:	4606      	mov	r6, r0
    cab8:	b150      	cbz	r0, cad0 <lfs_dir_commit+0x188>
    caba:	f110 0f02 	cmn.w	r0, #2
    cabe:	d007      	beq.n	cad0 <lfs_dir_commit+0x188>
            *dir = olddir;
    cac0:	ac16      	add	r4, sp, #88	; 0x58
    cac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cac6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    caca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    cace:	e152      	b.n	cd76 <lfs_dir_commit+0x42e>
        if (err != LFS_ERR_NOENT && pdir.split) {
    cad0:	f116 0f02 	cmn.w	r6, #2
    cad4:	d0ad      	beq.n	ca32 <lfs_dir_commit+0xea>
    cad6:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    cada:	2b00      	cmp	r3, #0
    cadc:	d0a9      	beq.n	ca32 <lfs_dir_commit+0xea>
            err = lfs_dir_drop(lfs, &pdir, dir);
    cade:	462a      	mov	r2, r5
    cae0:	a90e      	add	r1, sp, #56	; 0x38
    cae2:	4640      	mov	r0, r8
    cae4:	f000 f94e 	bl	cd84 <lfs_dir_drop>
            if (err) {
    cae8:	4606      	mov	r6, r0
    caea:	2800      	cmp	r0, #0
    caec:	d0a1      	beq.n	ca32 <lfs_dir_commit+0xea>
                *dir = olddir;
    caee:	ac16      	add	r4, sp, #88	; 0x58
    caf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    caf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    caf4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    caf8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    cafc:	e13b      	b.n	cd76 <lfs_dir_commit+0x42e>
        lfs_gstate_t delta = {0};
    cafe:	2300      	movs	r3, #0
    cb00:	930b      	str	r3, [sp, #44]	; 0x2c
    cb02:	930c      	str	r3, [sp, #48]	; 0x30
    cb04:	930d      	str	r3, [sp, #52]	; 0x34
        lfs_gstate_xor(&delta, &lfs->gstate);
    cb06:	f108 0430 	add.w	r4, r8, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    cb0a:	4603      	mov	r3, r0
    cb0c:	e008      	b.n	cb20 <lfs_dir_commit+0x1d8>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    cb0e:	a90b      	add	r1, sp, #44	; 0x2c
    cb10:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    cb14:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cb18:	4042      	eors	r2, r0
    cb1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    cb1e:	3301      	adds	r3, #1
    cb20:	2b02      	cmp	r3, #2
    cb22:	ddf4      	ble.n	cb0e <lfs_dir_commit+0x1c6>
        lfs_gstate_xor(&delta, &lfs->gdisk);
    cb24:	f108 043c 	add.w	r4, r8, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
    cb28:	4633      	mov	r3, r6
    cb2a:	e008      	b.n	cb3e <lfs_dir_commit+0x1f6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    cb2c:	a90b      	add	r1, sp, #44	; 0x2c
    cb2e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    cb32:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cb36:	4042      	eors	r2, r0
    cb38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    cb3c:	3301      	adds	r3, #1
    cb3e:	2b02      	cmp	r3, #2
    cb40:	ddf4      	ble.n	cb2c <lfs_dir_commit+0x1e4>
        lfs_gstate_xor(&delta, &lfs->gdelta);
    cb42:	f108 0448 	add.w	r4, r8, #72	; 0x48
    for (int i = 0; i < 3; i++) {
    cb46:	4633      	mov	r3, r6
    cb48:	e008      	b.n	cb5c <lfs_dir_commit+0x214>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    cb4a:	a90b      	add	r1, sp, #44	; 0x2c
    cb4c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    cb50:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cb54:	4042      	eors	r2, r0
    cb56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    cb5a:	3301      	adds	r3, #1
    cb5c:	2b02      	cmp	r3, #2
    cb5e:	ddf4      	ble.n	cb4a <lfs_dir_commit+0x202>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    cb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    cb66:	f023 0303 	bic.w	r3, r3, #3
    cb6a:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
    cb6c:	2e02      	cmp	r6, #2
    cb6e:	dc07      	bgt.n	cb80 <lfs_dir_commit+0x238>
        if (((uint32_t*)a)[i] != 0) {
    cb70:	ab20      	add	r3, sp, #128	; 0x80
    cb72:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    cb76:	f853 3c54 	ldr.w	r3, [r3, #-84]
    cb7a:	b993      	cbnz	r3, cba2 <lfs_dir_commit+0x25a>
    for (int i = 0; i < 3; i++) {
    cb7c:	3601      	adds	r6, #1
    cb7e:	e7f5      	b.n	cb6c <lfs_dir_commit+0x224>
    return true;
    cb80:	2301      	movs	r3, #1
        if (!lfs_gstate_iszero(&delta)) {
    cb82:	bb33      	cbnz	r3, cbd2 <lfs_dir_commit+0x28a>
            err = lfs_dir_getgstate(lfs, dir, &delta);
    cb84:	aa0b      	add	r2, sp, #44	; 0x2c
    cb86:	4629      	mov	r1, r5
    cb88:	4640      	mov	r0, r8
    cb8a:	f7fe feed 	bl	b968 <lfs_dir_getgstate>
            if (err) {
    cb8e:	4606      	mov	r6, r0
    cb90:	b148      	cbz	r0, cba6 <lfs_dir_commit+0x25e>
                *dir = olddir;
    cb92:	ac16      	add	r4, sp, #88	; 0x58
    cb94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cb96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cb98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    cb9c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    cba0:	e0e9      	b.n	cd76 <lfs_dir_commit+0x42e>
            return false;
    cba2:	2300      	movs	r3, #0
    cba4:	e7ed      	b.n	cb82 <lfs_dir_commit+0x23a>
            err = lfs_dir_commitattr(lfs, &commit,
    cba6:	ab0b      	add	r3, sp, #44	; 0x2c
    cba8:	4a61      	ldr	r2, [pc, #388]	; (cd30 <lfs_dir_commit+0x3e8>)
    cbaa:	a90e      	add	r1, sp, #56	; 0x38
    cbac:	4640      	mov	r0, r8
    cbae:	f006 f945 	bl	12e3c <lfs_dir_commitattr>
            if (err) {
    cbb2:	4606      	mov	r6, r0
    cbb4:	b168      	cbz	r0, cbd2 <lfs_dir_commit+0x28a>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    cbb6:	f110 0f1c 	cmn.w	r0, #28
    cbba:	d031      	beq.n	cc20 <lfs_dir_commit+0x2d8>
    cbbc:	f110 0f54 	cmn.w	r0, #84	; 0x54
    cbc0:	d02e      	beq.n	cc20 <lfs_dir_commit+0x2d8>
                *dir = olddir;
    cbc2:	ac16      	add	r4, sp, #88	; 0x58
    cbc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cbc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cbc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    cbcc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    cbd0:	e0d1      	b.n	cd76 <lfs_dir_commit+0x42e>
        err = lfs_dir_commitcrc(lfs, &commit);
    cbd2:	a90e      	add	r1, sp, #56	; 0x38
    cbd4:	4640      	mov	r0, r8
    cbd6:	f006 f9a3 	bl	12f20 <lfs_dir_commitcrc>
        if (err) {
    cbda:	4606      	mov	r6, r0
    cbdc:	b168      	cbz	r0, cbfa <lfs_dir_commit+0x2b2>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    cbde:	f110 0f1c 	cmn.w	r0, #28
    cbe2:	d01d      	beq.n	cc20 <lfs_dir_commit+0x2d8>
    cbe4:	f110 0f54 	cmn.w	r0, #84	; 0x54
    cbe8:	d01a      	beq.n	cc20 <lfs_dir_commit+0x2d8>
            *dir = olddir;
    cbea:	ac16      	add	r4, sp, #88	; 0x58
    cbec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cbee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cbf0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    cbf4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    cbf8:	e0bd      	b.n	cd76 <lfs_dir_commit+0x42e>
        dir->off = commit.off;
    cbfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cbfc:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
    cbfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc00:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
    cc02:	f108 033c 	add.w	r3, r8, #60	; 0x3c
    cc06:	f108 0230 	add.w	r2, r8, #48	; 0x30
    cc0a:	ca07      	ldmia	r2, {r0, r1, r2}
    cc0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
    cc10:	2200      	movs	r2, #0
    cc12:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
    cc16:	f8c8 204c 	str.w	r2, [r8, #76]	; 0x4c
    cc1a:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
    if (dir->erased || dir->count >= 0xff) {
    cc1e:	e010      	b.n	cc42 <lfs_dir_commit+0x2fa>
    rcache->block = LFS_BLOCK_NULL;
    cc20:	f04f 33ff 	mov.w	r3, #4294967295
    cc24:	f8c8 3010 	str.w	r3, [r8, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
    cc28:	8aab      	ldrh	r3, [r5, #20]
    cc2a:	9302      	str	r3, [sp, #8]
    cc2c:	2300      	movs	r3, #0
    cc2e:	9301      	str	r3, [sp, #4]
    cc30:	9500      	str	r5, [sp, #0]
    cc32:	464b      	mov	r3, r9
    cc34:	463a      	mov	r2, r7
    cc36:	4629      	mov	r1, r5
    cc38:	4640      	mov	r0, r8
    cc3a:	f7ff fc8b 	bl	c554 <lfs_dir_compact>
        if (err) {
    cc3e:	4606      	mov	r6, r0
    cc40:	b910      	cbnz	r0, cc48 <lfs_dir_commit+0x300>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    cc42:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
    cc46:	e04e      	b.n	cce6 <lfs_dir_commit+0x39e>
            *dir = olddir;
    cc48:	ac16      	add	r4, sp, #88	; 0x58
    cc4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cc4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cc4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    cc52:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    cc56:	e08e      	b.n	cd76 <lfs_dir_commit+0x42e>
                        d->id == lfs_tag_id(attrs[i].tag)) {
    cc58:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    cc5c:	f3c6 2389 	ubfx	r3, r6, #10, #10
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    cc60:	429a      	cmp	r2, r3
    cc62:	d110      	bne.n	cc86 <lfs_dir_commit+0x33e>
                    d->m.pair[0] = LFS_BLOCK_NULL;
    cc64:	f04f 33ff 	mov.w	r3, #4294967295
    cc68:	f8cc 3008 	str.w	r3, [ip, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
    cc6c:	f8cc 300c 	str.w	r3, [ip, #12]
            for (int i = 0; i < attrcount; i++) {
    cc70:	3101      	adds	r1, #1
    cc72:	4549      	cmp	r1, r9
    cc74:	da35      	bge.n	cce2 <lfs_dir_commit+0x39a>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    cc76:	f857 6031 	ldr.w	r6, [r7, r1, lsl #3]
    return (tag & 0x7ff00000) >> 20;
    cc7a:	f3c6 540a 	ubfx	r4, r6, #20, #11
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    cc7e:	f240 43ff 	movw	r3, #1279	; 0x4ff
    cc82:	429c      	cmp	r4, r3
    cc84:	d0e8      	beq.n	cc58 <lfs_dir_commit+0x310>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    cc86:	f240 43ff 	movw	r3, #1279	; 0x4ff
    cc8a:	429c      	cmp	r4, r3
    cc8c:	d016      	beq.n	ccbc <lfs_dir_commit+0x374>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    cc8e:	f240 4301 	movw	r3, #1025	; 0x401
    cc92:	429c      	cmp	r4, r3
    cc94:	d1ec      	bne.n	cc70 <lfs_dir_commit+0x328>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
    cc96:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    cc9a:	f3c6 2689 	ubfx	r6, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    cc9e:	42b3      	cmp	r3, r6
    cca0:	d3e6      	bcc.n	cc70 <lfs_dir_commit+0x328>
                    d->id += 1;
    cca2:	3301      	adds	r3, #1
    cca4:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
    cca8:	f89c 3006 	ldrb.w	r3, [ip, #6]
    ccac:	2b02      	cmp	r3, #2
    ccae:	d1df      	bne.n	cc70 <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos += 1;
    ccb0:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    ccb4:	3301      	adds	r3, #1
    ccb6:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    ccba:	e7d9      	b.n	cc70 <lfs_dir_commit+0x328>
                        d->id > lfs_tag_id(attrs[i].tag)) {
    ccbc:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    ccc0:	f3c6 2289 	ubfx	r2, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    ccc4:	4293      	cmp	r3, r2
    ccc6:	d9e2      	bls.n	cc8e <lfs_dir_commit+0x346>
                    d->id -= 1;
    ccc8:	3b01      	subs	r3, #1
    ccca:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
    ccce:	f89c 3006 	ldrb.w	r3, [ip, #6]
    ccd2:	2b02      	cmp	r3, #2
    ccd4:	d1cc      	bne.n	cc70 <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos -= 1;
    ccd6:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    ccda:	3b01      	subs	r3, #1
    ccdc:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    cce0:	e7c6      	b.n	cc70 <lfs_dir_commit+0x328>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    cce2:	f8dc c000 	ldr.w	ip, [ip]
    cce6:	f1bc 0f00 	cmp.w	ip, #0
    ccea:	d01c      	beq.n	cd26 <lfs_dir_commit+0x3de>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
    ccec:	f10c 0308 	add.w	r3, ip, #8
    ccf0:	42ab      	cmp	r3, r5
    ccf2:	d0f6      	beq.n	cce2 <lfs_dir_commit+0x39a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    ccf4:	f8dc 3008 	ldr.w	r3, [ip, #8]
    ccf8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ccfa:	4293      	cmp	r3, r2
    ccfc:	d008      	beq.n	cd10 <lfs_dir_commit+0x3c8>
    ccfe:	f8dc 000c 	ldr.w	r0, [ip, #12]
    cd02:	9917      	ldr	r1, [sp, #92]	; 0x5c
    cd04:	4288      	cmp	r0, r1
    cd06:	d003      	beq.n	cd10 <lfs_dir_commit+0x3c8>
    cd08:	428b      	cmp	r3, r1
    cd0a:	d001      	beq.n	cd10 <lfs_dir_commit+0x3c8>
    cd0c:	4282      	cmp	r2, r0
    cd0e:	d1e8      	bne.n	cce2 <lfs_dir_commit+0x39a>
            d->m = *dir;
    cd10:	f10c 0408 	add.w	r4, ip, #8
    cd14:	462e      	mov	r6, r5
    cd16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cd18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd1a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    cd1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
    cd22:	2100      	movs	r1, #0
    cd24:	e7a5      	b.n	cc72 <lfs_dir_commit+0x32a>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    cd26:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
    cd2a:	e004      	b.n	cd36 <lfs_dir_commit+0x3ee>
    cd2c:	00012ef9 	.word	0x00012ef9
    cd30:	7ffffc0c 	.word	0x7ffffc0c
    cd34:	6824      	ldr	r4, [r4, #0]
    cd36:	b314      	cbz	r4, cd7e <lfs_dir_commit+0x436>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    cd38:	68a3      	ldr	r3, [r4, #8]
    cd3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cd3c:	4293      	cmp	r3, r2
    cd3e:	d007      	beq.n	cd50 <lfs_dir_commit+0x408>
    cd40:	68e0      	ldr	r0, [r4, #12]
    cd42:	9917      	ldr	r1, [sp, #92]	; 0x5c
    cd44:	4288      	cmp	r0, r1
    cd46:	d003      	beq.n	cd50 <lfs_dir_commit+0x408>
    cd48:	428b      	cmp	r3, r1
    cd4a:	d001      	beq.n	cd50 <lfs_dir_commit+0x408>
    cd4c:	4282      	cmp	r2, r0
    cd4e:	d1f1      	bne.n	cd34 <lfs_dir_commit+0x3ec>
            while (d->id >= d->m.count && d->m.split) {
    cd50:	88a3      	ldrh	r3, [r4, #4]
    cd52:	8ba2      	ldrh	r2, [r4, #28]
    cd54:	4293      	cmp	r3, r2
    cd56:	d3ed      	bcc.n	cd34 <lfs_dir_commit+0x3ec>
    cd58:	7fe1      	ldrb	r1, [r4, #31]
    cd5a:	2900      	cmp	r1, #0
    cd5c:	d0ea      	beq.n	cd34 <lfs_dir_commit+0x3ec>
                d->id -= d->m.count;
    cd5e:	1a9b      	subs	r3, r3, r2
    cd60:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
    cd62:	f104 0220 	add.w	r2, r4, #32
    cd66:	f104 0108 	add.w	r1, r4, #8
    cd6a:	4640      	mov	r0, r8
    cd6c:	f005 fec8 	bl	12b00 <lfs_dir_fetch>
                if (err) {
    cd70:	4606      	mov	r6, r0
    cd72:	2800      	cmp	r0, #0
    cd74:	d0ec      	beq.n	cd50 <lfs_dir_commit+0x408>
}
    cd76:	4630      	mov	r0, r6
    cd78:	b021      	add	sp, #132	; 0x84
    cd7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    cd7e:	2600      	movs	r6, #0
    cd80:	e7f9      	b.n	cd76 <lfs_dir_commit+0x42e>
    cd82:	bf00      	nop

0000cd84 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
    cd84:	b570      	push	{r4, r5, r6, lr}
    cd86:	b082      	sub	sp, #8
    cd88:	4605      	mov	r5, r0
    cd8a:	460e      	mov	r6, r1
    cd8c:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
    cd8e:	f100 0248 	add.w	r2, r0, #72	; 0x48
    cd92:	4621      	mov	r1, r4
    cd94:	f7fe fde8 	bl	b968 <lfs_dir_getgstate>
    if (err) {
    cd98:	b108      	cbz	r0, cd9e <lfs_dir_drop+0x1a>
}
    cd9a:	b002      	add	sp, #8
    cd9c:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
    cd9e:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
    cda2:	7de3      	ldrb	r3, [r4, #23]
    cda4:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    cda8:	4b05      	ldr	r3, [pc, #20]	; (cdc0 <lfs_dir_drop+0x3c>)
    cdaa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    cdae:	9300      	str	r3, [sp, #0]
    cdb0:	9101      	str	r1, [sp, #4]
    cdb2:	2301      	movs	r3, #1
    cdb4:	466a      	mov	r2, sp
    cdb6:	4631      	mov	r1, r6
    cdb8:	4628      	mov	r0, r5
    cdba:	f7ff fdc5 	bl	c948 <lfs_dir_commit>
    if (err) {
    cdbe:	e7ec      	b.n	cd9a <lfs_dir_drop+0x16>
    cdc0:	000ffc08 	.word	0x000ffc08

0000cdc4 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs) {
    cdc4:	b570      	push	{r4, r5, r6, lr}
    cdc6:	b09e      	sub	sp, #120	; 0x78
    return lfs_tag_size(a->tag);
    cdc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
    cdca:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d07d      	beq.n	cece <lfs_fs_deorphan+0x10a>
    cdd2:	4606      	mov	r6, r0
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
    cdd4:	2300      	movs	r3, #0
    cdd6:	9314      	str	r3, [sp, #80]	; 0x50
    cdd8:	9315      	str	r3, [sp, #84]	; 0x54
    cdda:	9316      	str	r3, [sp, #88]	; 0x58
    cddc:	9317      	str	r3, [sp, #92]	; 0x5c
    cdde:	9318      	str	r3, [sp, #96]	; 0x60
    cde0:	9319      	str	r3, [sp, #100]	; 0x64
    cde2:	931a      	str	r3, [sp, #104]	; 0x68
    cde4:	2301      	movs	r3, #1
    cde6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    cdea:	931b      	str	r3, [sp, #108]	; 0x6c
    while (!lfs_pair_isnull(pdir.tail)) {
    cdec:	e05c      	b.n	cea8 <lfs_fs_deorphan+0xe4>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
    cdee:	aa04      	add	r2, sp, #16
    cdf0:	a91a      	add	r1, sp, #104	; 0x68
    cdf2:	4630      	mov	r0, r6
    cdf4:	f7fe fbc2 	bl	b57c <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    cdf8:	1e03      	subs	r3, r0, #0
    cdfa:	db23      	blt.n	ce44 <lfs_fs_deorphan+0x80>
            if (tag == LFS_ERR_NOENT) {
    cdfc:	f113 0f02 	cmn.w	r3, #2
    ce00:	d025      	beq.n	ce4e <lfs_fs_deorphan+0x8a>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
    ce02:	aa02      	add	r2, sp, #8
    ce04:	9200      	str	r2, [sp, #0]
    ce06:	4a34      	ldr	r2, [pc, #208]	; (ced8 <lfs_fs_deorphan+0x114>)
    ce08:	a904      	add	r1, sp, #16
    ce0a:	4630      	mov	r0, r6
    ce0c:	f005 fec4 	bl	12b98 <lfs_dir_get>
            if (res < 0) {
    ce10:	2800      	cmp	r0, #0
    ce12:	db30      	blt.n	ce76 <lfs_fs_deorphan+0xb2>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    ce14:	9b02      	ldr	r3, [sp, #8]
    ce16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ce18:	4293      	cmp	r3, r2
    ce1a:	d021      	beq.n	ce60 <lfs_fs_deorphan+0x9c>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    ce1c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    ce1e:	4299      	cmp	r1, r3
    ce20:	d024      	beq.n	ce6c <lfs_fs_deorphan+0xa8>
            if (!lfs_pair_sync(pair, pdir.tail)) {
    ce22:	f014 0f01 	tst.w	r4, #1
    ce26:	d137      	bne.n	ce98 <lfs_fs_deorphan+0xd4>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
    ce28:	4b2c      	ldr	r3, [pc, #176]	; (cedc <lfs_fs_deorphan+0x118>)
    ce2a:	931c      	str	r3, [sp, #112]	; 0x70
    ce2c:	ab02      	add	r3, sp, #8
    ce2e:	931d      	str	r3, [sp, #116]	; 0x74
    ce30:	2301      	movs	r3, #1
    ce32:	aa1c      	add	r2, sp, #112	; 0x70
    ce34:	a914      	add	r1, sp, #80	; 0x50
    ce36:	4630      	mov	r0, r6
    ce38:	f7ff fd86 	bl	c948 <lfs_dir_commit>
                if (err) {
    ce3c:	4604      	mov	r4, r0
    ce3e:	2800      	cmp	r0, #0
    ce40:	d146      	bne.n	ced0 <lfs_fs_deorphan+0x10c>
    ce42:	e031      	b.n	cea8 <lfs_fs_deorphan+0xe4>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    ce44:	f113 0f02 	cmn.w	r3, #2
    ce48:	d0d8      	beq.n	cdfc <lfs_fs_deorphan+0x38>
                return tag;
    ce4a:	461c      	mov	r4, r3
    ce4c:	e040      	b.n	ced0 <lfs_fs_deorphan+0x10c>
                err = lfs_dir_drop(lfs, &pdir, &dir);
    ce4e:	aa0c      	add	r2, sp, #48	; 0x30
    ce50:	a914      	add	r1, sp, #80	; 0x50
    ce52:	4630      	mov	r0, r6
    ce54:	f7ff ff96 	bl	cd84 <lfs_dir_drop>
                if (err) {
    ce58:	4604      	mov	r4, r0
    ce5a:	2800      	cmp	r0, #0
    ce5c:	d138      	bne.n	ced0 <lfs_fs_deorphan+0x10c>
    ce5e:	e023      	b.n	cea8 <lfs_fs_deorphan+0xe4>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    ce60:	9803      	ldr	r0, [sp, #12]
    ce62:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ce64:	4288      	cmp	r0, r1
    ce66:	d1d9      	bne.n	ce1c <lfs_fs_deorphan+0x58>
    ce68:	2401      	movs	r4, #1
    ce6a:	e7da      	b.n	ce22 <lfs_fs_deorphan+0x5e>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    ce6c:	9b03      	ldr	r3, [sp, #12]
    ce6e:	4293      	cmp	r3, r2
    ce70:	d1d7      	bne.n	ce22 <lfs_fs_deorphan+0x5e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    ce72:	2401      	movs	r4, #1
    ce74:	e7d5      	b.n	ce22 <lfs_fs_deorphan+0x5e>
                return res;
    ce76:	4604      	mov	r4, r0
    ce78:	e02a      	b.n	ced0 <lfs_fs_deorphan+0x10c>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    ce7a:	2301      	movs	r3, #1
    ce7c:	e000      	b.n	ce80 <lfs_fs_deorphan+0xbc>
    ce7e:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(pdir.tail)) {
    ce80:	b9e3      	cbnz	r3, cebc <lfs_fs_deorphan+0xf8>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
    ce82:	aa1a      	add	r2, sp, #104	; 0x68
    ce84:	a90c      	add	r1, sp, #48	; 0x30
    ce86:	4630      	mov	r0, r6
    ce88:	f005 fe3a 	bl	12b00 <lfs_dir_fetch>
        if (err) {
    ce8c:	4604      	mov	r4, r0
    ce8e:	b9f8      	cbnz	r0, ced0 <lfs_fs_deorphan+0x10c>
        if (!pdir.split) {
    ce90:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    ce94:	2b00      	cmp	r3, #0
    ce96:	d0aa      	beq.n	cdee <lfs_fs_deorphan+0x2a>
        pdir = dir;
    ce98:	ac14      	add	r4, sp, #80	; 0x50
    ce9a:	ad0c      	add	r5, sp, #48	; 0x30
    ce9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ce9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cea0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    cea8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ceaa:	f1b3 3fff 	cmp.w	r3, #4294967295
    ceae:	d0e6      	beq.n	ce7e <lfs_fs_deorphan+0xba>
    ceb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295
    ceb6:	d0e0      	beq.n	ce7a <lfs_fs_deorphan+0xb6>
    ceb8:	2300      	movs	r3, #0
    ceba:	e7e1      	b.n	ce80 <lfs_fs_deorphan+0xbc>
    return lfs_tag_size(a->tag);
    cebc:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
    cec0:	4249      	negs	r1, r1
    cec2:	b249      	sxtb	r1, r1
    cec4:	4630      	mov	r0, r6
    cec6:	f005 fcc1 	bl	1284c <lfs_fs_preporphans>
    return 0;
    ceca:	2400      	movs	r4, #0
    cecc:	e000      	b.n	ced0 <lfs_fs_deorphan+0x10c>
        return 0;
    cece:	2400      	movs	r4, #0
}
    ced0:	4620      	mov	r0, r4
    ced2:	b01e      	add	sp, #120	; 0x78
    ced4:	bd70      	pop	{r4, r5, r6, pc}
    ced6:	bf00      	nop
    ced8:	7ffffc00 	.word	0x7ffffc00
    cedc:	600ffc08 	.word	0x600ffc08

0000cee0 <lfs_mkdir>:
int lfs_mkdir(lfs_t *lfs, const char *path) {
    cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cee2:	b0ab      	sub	sp, #172	; 0xac
    cee4:	4604      	mov	r4, r0
    cee6:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
    cee8:	f006 fcd7 	bl	1389a <lfs_fs_forceconsistency>
    if (err) {
    ceec:	4603      	mov	r3, r0
    ceee:	b110      	cbz	r0, cef6 <lfs_mkdir+0x16>
}
    cef0:	4618      	mov	r0, r3
    cef2:	b02b      	add	sp, #172	; 0xac
    cef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cwd.next = lfs->mlist;
    cef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cef8:	931c      	str	r3, [sp, #112]	; 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
    cefa:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
    cefe:	aa01      	add	r2, sp, #4
    cf00:	a91e      	add	r1, sp, #120	; 0x78
    cf02:	4620      	mov	r0, r4
    cf04:	f7fe fd5a 	bl	b9bc <lfs_dir_find>
    cf08:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
    cf0a:	f110 0f02 	cmn.w	r0, #2
    cf0e:	d12a      	bne.n	cf66 <lfs_mkdir+0x86>
    cf10:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    cf14:	f240 32ff 	movw	r2, #1023	; 0x3ff
    cf18:	4291      	cmp	r1, r2
    cf1a:	d024      	beq.n	cf66 <lfs_mkdir+0x86>
    lfs_size_t nlen = strlen(path);
    cf1c:	9801      	ldr	r0, [sp, #4]
    cf1e:	f004 facf 	bl	114c0 <strlen>
    cf22:	4607      	mov	r7, r0
    if (nlen > lfs->name_max) {
    cf24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    cf26:	4283      	cmp	r3, r0
    cf28:	d37c      	bcc.n	d024 <lfs_mkdir+0x144>
    lfs_alloc_ack(lfs);
    cf2a:	4620      	mov	r0, r4
    cf2c:	f005 fc6d 	bl	1280a <lfs_alloc_ack>
    err = lfs_dir_alloc(lfs, &dir);
    cf30:	a913      	add	r1, sp, #76	; 0x4c
    cf32:	4620      	mov	r0, r4
    cf34:	f006 fa2b 	bl	1338e <lfs_dir_alloc>
    if (err) {
    cf38:	4603      	mov	r3, r0
    cf3a:	2800      	cmp	r0, #0
    cf3c:	d1d8      	bne.n	cef0 <lfs_mkdir+0x10>
    lfs_mdir_t pred = cwd.m;
    cf3e:	ad0b      	add	r5, sp, #44	; 0x2c
    cf40:	ae1e      	add	r6, sp, #120	; 0x78
    cf42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cf44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cf46:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    cf4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    while (pred.split) {
    cf4e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    cf52:	b16b      	cbz	r3, cf70 <lfs_mkdir+0x90>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
    cf54:	aa11      	add	r2, sp, #68	; 0x44
    cf56:	a90b      	add	r1, sp, #44	; 0x2c
    cf58:	4620      	mov	r0, r4
    cf5a:	f005 fdd1 	bl	12b00 <lfs_dir_fetch>
        if (err) {
    cf5e:	4603      	mov	r3, r0
    cf60:	2800      	cmp	r0, #0
    cf62:	d0f4      	beq.n	cf4e <lfs_mkdir+0x6e>
    cf64:	e7c4      	b.n	cef0 <lfs_mkdir+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
    cf66:	2b00      	cmp	r3, #0
    cf68:	dbc2      	blt.n	cef0 <lfs_mkdir+0x10>
    cf6a:	f06f 0310 	mvn.w	r3, #16
    cf6e:	e7bf      	b.n	cef0 <lfs_mkdir+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
    cf70:	4b2e      	ldr	r3, [pc, #184]	; (d02c <lfs_mkdir+0x14c>)
    cf72:	9326      	str	r3, [sp, #152]	; 0x98
    cf74:	ab11      	add	r3, sp, #68	; 0x44
    cf76:	9327      	str	r3, [sp, #156]	; 0x9c
    cf78:	2301      	movs	r3, #1
    cf7a:	aa26      	add	r2, sp, #152	; 0x98
    cf7c:	a913      	add	r1, sp, #76	; 0x4c
    cf7e:	4620      	mov	r0, r4
    cf80:	f7ff fce2 	bl	c948 <lfs_dir_commit>
    if (err) {
    cf84:	4603      	mov	r3, r0
    cf86:	2800      	cmp	r0, #0
    cf88:	d1b2      	bne.n	cef0 <lfs_mkdir+0x10>
    if (cwd.m.split) {
    cf8a:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
    cf8e:	bb2b      	cbnz	r3, cfdc <lfs_mkdir+0xfc>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    cf90:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    cf94:	029b      	lsls	r3, r3, #10
    cf96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cf9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    cf9e:	9203      	str	r2, [sp, #12]
    cfa0:	2200      	movs	r2, #0
    cfa2:	9204      	str	r2, [sp, #16]
    cfa4:	431f      	orrs	r7, r3
    cfa6:	f447 1700 	orr.w	r7, r7, #2097152	; 0x200000
    cfaa:	9705      	str	r7, [sp, #20]
    cfac:	9a01      	ldr	r2, [sp, #4]
    cfae:	9206      	str	r2, [sp, #24]
    cfb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    cfb4:	f043 0308 	orr.w	r3, r3, #8
    cfb8:	9307      	str	r3, [sp, #28]
    cfba:	ab13      	add	r3, sp, #76	; 0x4c
    cfbc:	9308      	str	r3, [sp, #32]
    cfbe:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
    cfc2:	bb6b      	cbnz	r3, d020 <lfs_mkdir+0x140>
    cfc4:	4b19      	ldr	r3, [pc, #100]	; (d02c <lfs_mkdir+0x14c>)
    cfc6:	9309      	str	r3, [sp, #36]	; 0x24
    cfc8:	ab13      	add	r3, sp, #76	; 0x4c
    cfca:	930a      	str	r3, [sp, #40]	; 0x28
    cfcc:	2304      	movs	r3, #4
    cfce:	aa03      	add	r2, sp, #12
    cfd0:	a91e      	add	r1, sp, #120	; 0x78
    cfd2:	4620      	mov	r0, r4
    cfd4:	f7ff fcb8 	bl	c948 <lfs_dir_commit>
    cfd8:	4603      	mov	r3, r0
    if (err) {
    cfda:	e789      	b.n	cef0 <lfs_mkdir+0x10>
        lfs_fs_preporphans(lfs, +1);
    cfdc:	2101      	movs	r1, #1
    cfde:	4620      	mov	r0, r4
    cfe0:	f005 fc34 	bl	1284c <lfs_fs_preporphans>
        cwd.type = 0;
    cfe4:	2300      	movs	r3, #0
    cfe6:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
        cwd.id = 0;
    cfea:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        lfs->mlist = &cwd;
    cfee:	ab1c      	add	r3, sp, #112	; 0x70
    cff0:	62a3      	str	r3, [r4, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
    cff2:	4b0e      	ldr	r3, [pc, #56]	; (d02c <lfs_mkdir+0x14c>)
    cff4:	9328      	str	r3, [sp, #160]	; 0xa0
    cff6:	ab13      	add	r3, sp, #76	; 0x4c
    cff8:	9329      	str	r3, [sp, #164]	; 0xa4
    cffa:	2301      	movs	r3, #1
    cffc:	aa28      	add	r2, sp, #160	; 0xa0
    cffe:	a90b      	add	r1, sp, #44	; 0x2c
    d000:	4620      	mov	r0, r4
    d002:	f7ff fca1 	bl	c948 <lfs_dir_commit>
        if (err) {
    d006:	4603      	mov	r3, r0
    d008:	b110      	cbz	r0, d010 <lfs_mkdir+0x130>
            lfs->mlist = cwd.next;
    d00a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d00c:	62a2      	str	r2, [r4, #40]	; 0x28
            return err;
    d00e:	e76f      	b.n	cef0 <lfs_mkdir+0x10>
        lfs->mlist = cwd.next;
    d010:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d012:	62a3      	str	r3, [r4, #40]	; 0x28
        lfs_fs_preporphans(lfs, -1);
    d014:	f04f 31ff 	mov.w	r1, #4294967295
    d018:	4620      	mov	r0, r4
    d01a:	f005 fc17 	bl	1284c <lfs_fs_preporphans>
    d01e:	e7b7      	b.n	cf90 <lfs_mkdir+0xb0>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    d020:	2300      	movs	r3, #0
    d022:	e7d0      	b.n	cfc6 <lfs_mkdir+0xe6>
        return LFS_ERR_NAMETOOLONG;
    d024:	f06f 0323 	mvn.w	r3, #35	; 0x23
    d028:	e762      	b.n	cef0 <lfs_mkdir+0x10>
    d02a:	bf00      	nop
    d02c:	600ffc08 	.word	0x600ffc08

0000d030 <lfs_fs_relocate>:
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
    d030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d034:	b090      	sub	sp, #64	; 0x40
    d036:	4607      	mov	r7, r0
    d038:	460c      	mov	r4, r1
    d03a:	4615      	mov	r5, r2
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d03c:	680b      	ldr	r3, [r1, #0]
    d03e:	6a02      	ldr	r2, [r0, #32]
    d040:	4293      	cmp	r3, r2
    d042:	d007      	beq.n	d054 <lfs_fs_relocate+0x24>
    d044:	6848      	ldr	r0, [r1, #4]
    d046:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d048:	4281      	cmp	r1, r0
    d04a:	d003      	beq.n	d054 <lfs_fs_relocate+0x24>
    d04c:	428b      	cmp	r3, r1
    d04e:	d001      	beq.n	d054 <lfs_fs_relocate+0x24>
    d050:	4282      	cmp	r2, r0
    d052:	d103      	bne.n	d05c <lfs_fs_relocate+0x2c>
        lfs->root[0] = newpair[0];
    d054:	682b      	ldr	r3, [r5, #0]
    d056:	623b      	str	r3, [r7, #32]
        lfs->root[1] = newpair[1];
    d058:	686b      	ldr	r3, [r5, #4]
    d05a:	627b      	str	r3, [r7, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    d05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d05e:	e007      	b.n	d070 <lfs_fs_relocate+0x40>
            d->m.pair[0] = newpair[0];
    d060:	682a      	ldr	r2, [r5, #0]
    d062:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
    d064:	686a      	ldr	r2, [r5, #4]
    d066:	60da      	str	r2, [r3, #12]
        if (d->type == LFS_TYPE_DIR &&
    d068:	799a      	ldrb	r2, [r3, #6]
    d06a:	2a02      	cmp	r2, #2
    d06c:	d00e      	beq.n	d08c <lfs_fs_relocate+0x5c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    d06e:	681b      	ldr	r3, [r3, #0]
    d070:	b1eb      	cbz	r3, d0ae <lfs_fs_relocate+0x7e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d072:	6822      	ldr	r2, [r4, #0]
    d074:	6899      	ldr	r1, [r3, #8]
    d076:	4291      	cmp	r1, r2
    d078:	d0f2      	beq.n	d060 <lfs_fs_relocate+0x30>
    d07a:	6860      	ldr	r0, [r4, #4]
    d07c:	68de      	ldr	r6, [r3, #12]
    d07e:	42b0      	cmp	r0, r6
    d080:	d0ee      	beq.n	d060 <lfs_fs_relocate+0x30>
    d082:	42b2      	cmp	r2, r6
    d084:	d0ec      	beq.n	d060 <lfs_fs_relocate+0x30>
    d086:	4281      	cmp	r1, r0
    d088:	d1ee      	bne.n	d068 <lfs_fs_relocate+0x38>
    d08a:	e7e9      	b.n	d060 <lfs_fs_relocate+0x30>
    d08c:	6822      	ldr	r2, [r4, #0]
    d08e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    d090:	428a      	cmp	r2, r1
    d092:	d007      	beq.n	d0a4 <lfs_fs_relocate+0x74>
    d094:	6866      	ldr	r6, [r4, #4]
    d096:	6b18      	ldr	r0, [r3, #48]	; 0x30
    d098:	42b0      	cmp	r0, r6
    d09a:	d003      	beq.n	d0a4 <lfs_fs_relocate+0x74>
    d09c:	4282      	cmp	r2, r0
    d09e:	d001      	beq.n	d0a4 <lfs_fs_relocate+0x74>
    d0a0:	428e      	cmp	r6, r1
    d0a2:	d1e4      	bne.n	d06e <lfs_fs_relocate+0x3e>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
    d0a4:	682a      	ldr	r2, [r5, #0]
    d0a6:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
    d0a8:	686a      	ldr	r2, [r5, #4]
    d0aa:	631a      	str	r2, [r3, #48]	; 0x30
    d0ac:	e7df      	b.n	d06e <lfs_fs_relocate+0x3e>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
    d0ae:	466a      	mov	r2, sp
    d0b0:	4621      	mov	r1, r4
    d0b2:	4638      	mov	r0, r7
    d0b4:	f7fe fa62 	bl	b57c <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    d0b8:	1e06      	subs	r6, r0, #0
    d0ba:	db1a      	blt.n	d0f2 <lfs_fs_relocate+0xc2>
    if (tag != LFS_ERR_NOENT) {
    d0bc:	f116 0f02 	cmn.w	r6, #2
    d0c0:	d058      	beq.n	d174 <lfs_fs_relocate+0x144>
        lfs_fs_preporphans(lfs, +1);
    d0c2:	2101      	movs	r1, #1
    d0c4:	4638      	mov	r0, r7
    d0c6:	f005 fbc1 	bl	1284c <lfs_fs_preporphans>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    d0cc:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d0ce:	f412 6fe0 	tst.w	r2, #1792	; 0x700
    d0d2:	d014      	beq.n	d0fe <lfs_fs_relocate+0xce>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d0d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    d0d6:	9900      	ldr	r1, [sp, #0]
    d0d8:	428a      	cmp	r2, r1
    d0da:	d02f      	beq.n	d13c <lfs_fs_relocate+0x10c>
    d0dc:	f8d7 c038 	ldr.w	ip, [r7, #56]	; 0x38
    d0e0:	9801      	ldr	r0, [sp, #4]
    d0e2:	4584      	cmp	ip, r0
    d0e4:	d02c      	beq.n	d140 <lfs_fs_relocate+0x110>
    d0e6:	4282      	cmp	r2, r0
    d0e8:	d02c      	beq.n	d144 <lfs_fs_relocate+0x114>
    d0ea:	4561      	cmp	r1, ip
    d0ec:	d005      	beq.n	d0fa <lfs_fs_relocate+0xca>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d0ee:	2200      	movs	r2, #0
    d0f0:	e006      	b.n	d100 <lfs_fs_relocate+0xd0>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    d0f2:	f116 0f02 	cmn.w	r6, #2
    d0f6:	d11d      	bne.n	d134 <lfs_fs_relocate+0x104>
    d0f8:	e7e0      	b.n	d0bc <lfs_fs_relocate+0x8c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d0fa:	2201      	movs	r2, #1
    d0fc:	e000      	b.n	d100 <lfs_fs_relocate+0xd0>
    d0fe:	2200      	movs	r2, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    d100:	bb12      	cbnz	r2, d148 <lfs_fs_relocate+0x118>
        uint16_t moveid = 0x3ff;
    d102:	f240 38ff 	movw	r8, #1023	; 0x3ff
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d106:	2300      	movs	r3, #0
    d108:	9309      	str	r3, [sp, #36]	; 0x24
    d10a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d10e:	4598      	cmp	r8, r3
    d110:	d029      	beq.n	d166 <lfs_fs_relocate+0x136>
    d112:	ea4f 2388 	mov.w	r3, r8, lsl #10
    d116:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    d11a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    d11e:	9308      	str	r3, [sp, #32]
    d120:	960a      	str	r6, [sp, #40]	; 0x28
    d122:	950b      	str	r5, [sp, #44]	; 0x2c
    d124:	2302      	movs	r3, #2
    d126:	aa08      	add	r2, sp, #32
    d128:	4669      	mov	r1, sp
    d12a:	4638      	mov	r0, r7
    d12c:	f7ff fc0c 	bl	c948 <lfs_dir_commit>
        if (err) {
    d130:	4606      	mov	r6, r0
    d132:	b1d0      	cbz	r0, d16a <lfs_fs_relocate+0x13a>
}
    d134:	4630      	mov	r0, r6
    d136:	b010      	add	sp, #64	; 0x40
    d138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d13c:	2201      	movs	r2, #1
    d13e:	e7df      	b.n	d100 <lfs_fs_relocate+0xd0>
    d140:	2201      	movs	r2, #1
    d142:	e7dd      	b.n	d100 <lfs_fs_relocate+0xd0>
    d144:	2201      	movs	r2, #1
    d146:	e7db      	b.n	d100 <lfs_fs_relocate+0xd0>
    return (tag & 0x000ffc00) >> 10;
    d148:	f3c3 2889 	ubfx	r8, r3, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
    d14c:	2200      	movs	r2, #0
    d14e:	f240 31ff 	movw	r1, #1023	; 0x3ff
    d152:	4638      	mov	r0, r7
    d154:	f7fd ff40 	bl	afd8 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
    d158:	f3c6 2389 	ubfx	r3, r6, #10, #10
            if (moveid < lfs_tag_id(tag)) {
    d15c:	4598      	cmp	r8, r3
    d15e:	d2d2      	bcs.n	d106 <lfs_fs_relocate+0xd6>
                tag -= LFS_MKTAG(0, 1, 0);
    d160:	f5a6 6680 	sub.w	r6, r6, #1024	; 0x400
    d164:	e7cf      	b.n	d106 <lfs_fs_relocate+0xd6>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d166:	2300      	movs	r3, #0
    d168:	e7d9      	b.n	d11e <lfs_fs_relocate+0xee>
        lfs_fs_preporphans(lfs, -1);
    d16a:	f04f 31ff 	mov.w	r1, #4294967295
    d16e:	4638      	mov	r0, r7
    d170:	f005 fb6c 	bl	1284c <lfs_fs_preporphans>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
    d174:	466a      	mov	r2, sp
    d176:	4621      	mov	r1, r4
    d178:	4638      	mov	r0, r7
    d17a:	f005 fccf 	bl	12b1c <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
    d17e:	4606      	mov	r6, r0
    d180:	b110      	cbz	r0, d188 <lfs_fs_relocate+0x158>
    d182:	f110 0f02 	cmn.w	r0, #2
    d186:	d1d5      	bne.n	d134 <lfs_fs_relocate+0x104>
    if (err != LFS_ERR_NOENT) {
    d188:	f116 0f02 	cmn.w	r6, #2
    d18c:	d046      	beq.n	d21c <lfs_fs_relocate+0x1ec>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d18e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    d190:	0d23      	lsrs	r3, r4, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d192:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    d196:	d00f      	beq.n	d1b8 <lfs_fs_relocate+0x188>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d19a:	9a00      	ldr	r2, [sp, #0]
    d19c:	4293      	cmp	r3, r2
    d19e:	d02c      	beq.n	d1fa <lfs_fs_relocate+0x1ca>
    d1a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d1a2:	9901      	ldr	r1, [sp, #4]
    d1a4:	4281      	cmp	r1, r0
    d1a6:	d02a      	beq.n	d1fe <lfs_fs_relocate+0x1ce>
    d1a8:	4299      	cmp	r1, r3
    d1aa:	d02a      	beq.n	d202 <lfs_fs_relocate+0x1d2>
    d1ac:	4290      	cmp	r0, r2
    d1ae:	d001      	beq.n	d1b4 <lfs_fs_relocate+0x184>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d1b0:	2300      	movs	r3, #0
    d1b2:	e002      	b.n	d1ba <lfs_fs_relocate+0x18a>
    d1b4:	2301      	movs	r3, #1
    d1b6:	e000      	b.n	d1ba <lfs_fs_relocate+0x18a>
    d1b8:	2300      	movs	r3, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    d1ba:	bb23      	cbnz	r3, d206 <lfs_fs_relocate+0x1d6>
        uint16_t moveid = 0x3ff;
    d1bc:	f240 34ff 	movw	r4, #1023	; 0x3ff
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d1c0:	2300      	movs	r3, #0
    d1c2:	930d      	str	r3, [sp, #52]	; 0x34
    d1c4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d1c8:	429c      	cmp	r4, r3
    d1ca:	d025      	beq.n	d218 <lfs_fs_relocate+0x1e8>
    d1cc:	02a3      	lsls	r3, r4, #10
    d1ce:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    d1d2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    d1d6:	930c      	str	r3, [sp, #48]	; 0x30
    d1d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d1dc:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    d1e0:	4b0f      	ldr	r3, [pc, #60]	; (d220 <lfs_fs_relocate+0x1f0>)
    d1e2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    d1e6:	930e      	str	r3, [sp, #56]	; 0x38
    d1e8:	950f      	str	r5, [sp, #60]	; 0x3c
    d1ea:	2302      	movs	r3, #2
    d1ec:	aa0c      	add	r2, sp, #48	; 0x30
    d1ee:	4669      	mov	r1, sp
    d1f0:	4638      	mov	r0, r7
    d1f2:	f7ff fba9 	bl	c948 <lfs_dir_commit>
    d1f6:	4606      	mov	r6, r0
        if (err) {
    d1f8:	e79c      	b.n	d134 <lfs_fs_relocate+0x104>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d1fa:	2301      	movs	r3, #1
    d1fc:	e7dd      	b.n	d1ba <lfs_fs_relocate+0x18a>
    d1fe:	2301      	movs	r3, #1
    d200:	e7db      	b.n	d1ba <lfs_fs_relocate+0x18a>
    d202:	2301      	movs	r3, #1
    d204:	e7d9      	b.n	d1ba <lfs_fs_relocate+0x18a>
    return (tag & 0x000ffc00) >> 10;
    d206:	f3c4 2489 	ubfx	r4, r4, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
    d20a:	2200      	movs	r2, #0
    d20c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    d210:	4638      	mov	r0, r7
    d212:	f7fd fee1 	bl	afd8 <lfs_fs_prepmove>
    d216:	e7d3      	b.n	d1c0 <lfs_fs_relocate+0x190>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    d218:	2300      	movs	r3, #0
    d21a:	e7dc      	b.n	d1d6 <lfs_fs_relocate+0x1a6>
    return 0;
    d21c:	2600      	movs	r6, #0
    d21e:	e789      	b.n	d134 <lfs_fs_relocate+0x104>
    d220:	000ffc08 	.word	0x000ffc08

0000d224 <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
    d224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d228:	b08b      	sub	sp, #44	; 0x2c
    d22a:	4607      	mov	r7, r0
    d22c:	460c      	mov	r4, r1
    d22e:	9203      	str	r2, [sp, #12]
    d230:	461e      	mov	r6, r3
    if ((flags & 3) != LFS_O_RDONLY) {
    d232:	f003 0303 	and.w	r3, r3, #3
    d236:	2b01      	cmp	r3, #1
    d238:	d005      	beq.n	d246 <lfs_file_opencfg+0x22>
        int err = lfs_fs_forceconsistency(lfs);
    d23a:	f006 fb2e 	bl	1389a <lfs_fs_forceconsistency>
        if (err) {
    d23e:	4605      	mov	r5, r0
    d240:	2800      	cmp	r0, #0
    d242:	f040 8109 	bne.w	d458 <lfs_file_opencfg+0x234>
    file->cfg = cfg;
    d246:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d248:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
    d24a:	f446 1300 	orr.w	r3, r6, #2097152	; 0x200000
    d24e:	6323      	str	r3, [r4, #48]	; 0x30
    file->pos = 0;
    d250:	2300      	movs	r3, #0
    d252:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
    d254:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
    d256:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
    d258:	f104 0808 	add.w	r8, r4, #8
    d25c:	1d23      	adds	r3, r4, #4
    d25e:	aa03      	add	r2, sp, #12
    d260:	4641      	mov	r1, r8
    d262:	4638      	mov	r0, r7
    d264:	f7fe fbaa 	bl	b9bc <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    d268:	1e05      	subs	r5, r0, #0
    d26a:	db21      	blt.n	d2b0 <lfs_file_opencfg+0x8c>
    file->type = LFS_TYPE_REG;
    d26c:	2301      	movs	r3, #1
    d26e:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
    d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d272:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;
    d274:	62bc      	str	r4, [r7, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
    d276:	f115 0f02 	cmn.w	r5, #2
    d27a:	d023      	beq.n	d2c4 <lfs_file_opencfg+0xa0>
    } else if (flags & LFS_O_EXCL) {
    d27c:	f416 7f00 	tst.w	r6, #512	; 0x200
    d280:	f040 80e0 	bne.w	d444 <lfs_file_opencfg+0x220>
    return (tag & 0x7ff00000) >> 20;
    d284:	f3c5 550a 	ubfx	r5, r5, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
    d288:	2d01      	cmp	r5, #1
    d28a:	f040 80e9 	bne.w	d460 <lfs_file_opencfg+0x23c>
    } else if (flags & LFS_O_TRUNC) {
    d28e:	f416 6f80 	tst.w	r6, #1024	; 0x400
    d292:	d046      	beq.n	d322 <lfs_file_opencfg+0xfe>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
    d294:	f8b4 9004 	ldrh.w	r9, [r4, #4]
    d298:	ea4f 2989 	mov.w	r9, r9, lsl #10
    d29c:	f049 5900 	orr.w	r9, r9, #536870912	; 0x20000000
    d2a0:	f449 1980 	orr.w	r9, r9, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
    d2a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d2a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d2aa:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    d2ac:	2600      	movs	r6, #0
    d2ae:	e05e      	b.n	d36e <lfs_file_opencfg+0x14a>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    d2b0:	f115 0f02 	cmn.w	r5, #2
    d2b4:	f040 80c8 	bne.w	d448 <lfs_file_opencfg+0x224>
    d2b8:	88a2      	ldrh	r2, [r4, #4]
    d2ba:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d2be:	429a      	cmp	r2, r3
    d2c0:	d1d4      	bne.n	d26c <lfs_file_opencfg+0x48>
    d2c2:	e0c1      	b.n	d448 <lfs_file_opencfg+0x224>
        if (!(flags & LFS_O_CREAT)) {
    d2c4:	f416 7f80 	tst.w	r6, #256	; 0x100
    d2c8:	f000 80be 	beq.w	d448 <lfs_file_opencfg+0x224>
        lfs_size_t nlen = strlen(path);
    d2cc:	9803      	ldr	r0, [sp, #12]
    d2ce:	f004 f8f7 	bl	114c0 <strlen>
        if (nlen > lfs->name_max) {
    d2d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    d2d4:	4283      	cmp	r3, r0
    d2d6:	d202      	bcs.n	d2de <lfs_file_opencfg+0xba>
            err = LFS_ERR_NAMETOOLONG;
    d2d8:	f06f 0523 	mvn.w	r5, #35	; 0x23
    d2dc:	e0b4      	b.n	d448 <lfs_file_opencfg+0x224>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
    d2de:	2300      	movs	r3, #0
    d2e0:	9305      	str	r3, [sp, #20]
    d2e2:	9309      	str	r3, [sp, #36]	; 0x24
    d2e4:	88a3      	ldrh	r3, [r4, #4]
    d2e6:	029b      	lsls	r3, r3, #10
    d2e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    d2ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d2f0:	9204      	str	r2, [sp, #16]
    d2f2:	4318      	orrs	r0, r3
    d2f4:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    d2f8:	9006      	str	r0, [sp, #24]
    d2fa:	9a03      	ldr	r2, [sp, #12]
    d2fc:	9207      	str	r2, [sp, #28]
    d2fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d306:	9308      	str	r3, [sp, #32]
    d308:	2303      	movs	r3, #3
    d30a:	aa04      	add	r2, sp, #16
    d30c:	4641      	mov	r1, r8
    d30e:	4638      	mov	r0, r7
    d310:	f7ff fb1a 	bl	c948 <lfs_dir_commit>
        if (err) {
    d314:	b910      	cbnz	r0, d31c <lfs_file_opencfg+0xf8>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    d316:	f8df 915c 	ldr.w	r9, [pc, #348]	; d474 <lfs_file_opencfg+0x250>
    d31a:	e7c7      	b.n	d2ac <lfs_file_opencfg+0x88>
            err = LFS_ERR_NAMETOOLONG;
    d31c:	f06f 0523 	mvn.w	r5, #35	; 0x23
    d320:	e092      	b.n	d448 <lfs_file_opencfg+0x224>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
    d322:	88a3      	ldrh	r3, [r4, #4]
    d324:	029b      	lsls	r3, r3, #10
    d326:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
    d32a:	9200      	str	r2, [sp, #0]
    d32c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d330:	f043 0308 	orr.w	r3, r3, #8
    d334:	4a4d      	ldr	r2, [pc, #308]	; (d46c <lfs_file_opencfg+0x248>)
    d336:	4641      	mov	r1, r8
    d338:	4638      	mov	r0, r7
    d33a:	f005 fc2d 	bl	12b98 <lfs_dir_get>
        if (tag < 0) {
    d33e:	f1b0 0900 	subs.w	r9, r0, #0
    d342:	dab3      	bge.n	d2ac <lfs_file_opencfg+0x88>
            err = tag;
    d344:	464d      	mov	r5, r9
    d346:	e07f      	b.n	d448 <lfs_file_opencfg+0x224>
        if ((file->flags & 3) != LFS_O_RDONLY) {
    d348:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d34a:	f003 0203 	and.w	r2, r3, #3
    d34e:	2a01      	cmp	r2, #1
    d350:	d00c      	beq.n	d36c <lfs_file_opencfg+0x148>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
    d352:	6d22      	ldr	r2, [r4, #80]	; 0x50
    d354:	6852      	ldr	r2, [r2, #4]
    d356:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    d35a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d35e:	6891      	ldr	r1, [r2, #8]
    d360:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    d362:	4291      	cmp	r1, r2
    d364:	d87f      	bhi.n	d466 <lfs_file_opencfg+0x242>
            file->flags |= LFS_F_DIRTY;
    d366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d36a:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    d36c:	3601      	adds	r6, #1
    d36e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    d370:	6893      	ldr	r3, [r2, #8]
    d372:	42b3      	cmp	r3, r6
    d374:	d920      	bls.n	d3b8 <lfs_file_opencfg+0x194>
        if ((file->flags & 3) != LFS_O_WRONLY) {
    d376:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d378:	f003 0303 	and.w	r3, r3, #3
    d37c:	2b02      	cmp	r3, #2
    d37e:	d0e3      	beq.n	d348 <lfs_file_opencfg+0x124>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
    d380:	6853      	ldr	r3, [r2, #4]
    d382:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    d386:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    d38a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    d38e:	f503 7240 	add.w	r2, r3, #768	; 0x300
    d392:	88a3      	ldrh	r3, [r4, #4]
    d394:	029b      	lsls	r3, r3, #10
    d396:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    d39a:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    d39c:	6849      	ldr	r1, [r1, #4]
    d39e:	9100      	str	r1, [sp, #0]
    d3a0:	4313      	orrs	r3, r2
    d3a2:	4a33      	ldr	r2, [pc, #204]	; (d470 <lfs_file_opencfg+0x24c>)
    d3a4:	4641      	mov	r1, r8
    d3a6:	4638      	mov	r0, r7
    d3a8:	f005 fbf6 	bl	12b98 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
    d3ac:	1e05      	subs	r5, r0, #0
    d3ae:	dacb      	bge.n	d348 <lfs_file_opencfg+0x124>
    d3b0:	f115 0f02 	cmn.w	r5, #2
    d3b4:	d0c8      	beq.n	d348 <lfs_file_opencfg+0x124>
    d3b6:	e047      	b.n	d448 <lfs_file_opencfg+0x224>
    if (file->cfg->buffer) {
    d3b8:	6813      	ldr	r3, [r2, #0]
    d3ba:	b18b      	cbz	r3, d3e0 <lfs_file_opencfg+0x1bc>
        file->cache.buffer = file->cfg->buffer;
    d3bc:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    d3be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d3c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d3c2:	21ff      	movs	r1, #255	; 0xff
    d3c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    d3c6:	f004 f8ed 	bl	115a4 <memset>
    pcache->block = LFS_BLOCK_NULL;
    d3ca:	f04f 33ff 	mov.w	r3, #4294967295
    d3ce:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
    d3d0:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    d3d4:	f240 2301 	movw	r3, #513	; 0x201
    d3d8:	429a      	cmp	r2, r3
    d3da:	d00b      	beq.n	d3f4 <lfs_file_opencfg+0x1d0>
    return 0;
    d3dc:	2500      	movs	r5, #0
    d3de:	e03b      	b.n	d458 <lfs_file_opencfg+0x234>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
    d3e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
    d3e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    d3e4:	f7f7 fe18 	bl	5018 <malloc>
    d3e8:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
    d3ea:	2800      	cmp	r0, #0
    d3ec:	d1e7      	bne.n	d3be <lfs_file_opencfg+0x19a>
            err = LFS_ERR_NOMEM;
    d3ee:	f06f 050b 	mvn.w	r5, #11
    d3f2:	e029      	b.n	d448 <lfs_file_opencfg+0x224>
        file->ctz.head = LFS_BLOCK_INLINE;
    d3f4:	f06f 0101 	mvn.w	r1, #1
    d3f8:	62a1      	str	r1, [r4, #40]	; 0x28
    return tag & 0x000003ff;
    d3fa:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
    d3fe:	62e2      	str	r2, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
    d400:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d406:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
    d408:	6421      	str	r1, [r4, #64]	; 0x40
        file->cache.off = 0;
    d40a:	2300      	movs	r3, #0
    d40c:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
    d40e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d412:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
    d414:	b90a      	cbnz	r2, d41a <lfs_file_opencfg+0x1f6>
    return 0;
    d416:	2500      	movs	r5, #0
    d418:	e01e      	b.n	d458 <lfs_file_opencfg+0x234>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
    d41a:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
    d41c:	f240 31fe 	movw	r1, #1022	; 0x3fe
    d420:	428b      	cmp	r3, r1
    d422:	bf28      	it	cs
    d424:	460b      	movcs	r3, r1
    d426:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
    d42a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    d42c:	9200      	str	r2, [sp, #0]
    d42e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d432:	4a0e      	ldr	r2, [pc, #56]	; (d46c <lfs_file_opencfg+0x248>)
    d434:	4641      	mov	r1, r8
    d436:	4638      	mov	r0, r7
    d438:	f005 fbae 	bl	12b98 <lfs_dir_get>
            if (res < 0) {
    d43c:	1e05      	subs	r5, r0, #0
    d43e:	db03      	blt.n	d448 <lfs_file_opencfg+0x224>
    return 0;
    d440:	2500      	movs	r5, #0
    d442:	e009      	b.n	d458 <lfs_file_opencfg+0x234>
        err = LFS_ERR_EXIST;
    d444:	f06f 0510 	mvn.w	r5, #16
    file->flags |= LFS_F_ERRED;
    d448:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d44a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    d44e:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
    d450:	4621      	mov	r1, r4
    d452:	4638      	mov	r0, r7
    d454:	f006 fa85 	bl	13962 <lfs_file_close>
}
    d458:	4628      	mov	r0, r5
    d45a:	b00b      	add	sp, #44	; 0x2c
    d45c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
    d460:	f06f 0514 	mvn.w	r5, #20
    d464:	e7f0      	b.n	d448 <lfs_file_opencfg+0x224>
                err = LFS_ERR_NOSPC;
    d466:	f06f 051b 	mvn.w	r5, #27
    d46a:	e7ed      	b.n	d448 <lfs_file_opencfg+0x224>
    d46c:	700ffc00 	.word	0x700ffc00
    d470:	7ffffc00 	.word	0x7ffffc00
    d474:	20100000 	.word	0x20100000

0000d478 <lfs_remove>:
int lfs_remove(lfs_t *lfs, const char *path) {
    d478:	b570      	push	{r4, r5, r6, lr}
    d47a:	b09a      	sub	sp, #104	; 0x68
    d47c:	4604      	mov	r4, r0
    d47e:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
    d480:	f006 fa0b 	bl	1389a <lfs_fs_forceconsistency>
    if (err) {
    d484:	4603      	mov	r3, r0
    d486:	b110      	cbz	r0, d48e <lfs_remove+0x16>
}
    d488:	4618      	mov	r0, r3
    d48a:	b01a      	add	sp, #104	; 0x68
    d48c:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    d48e:	2300      	movs	r3, #0
    d490:	aa03      	add	r2, sp, #12
    d492:	a910      	add	r1, sp, #64	; 0x40
    d494:	4620      	mov	r0, r4
    d496:	f7fe fa91 	bl	b9bc <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    d49a:	1e03      	subs	r3, r0, #0
    d49c:	db34      	blt.n	d508 <lfs_remove+0x90>
    return (tag & 0x000ffc00) >> 10;
    d49e:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    d4a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d4a6:	4295      	cmp	r5, r2
    d4a8:	d02e      	beq.n	d508 <lfs_remove+0x90>
    dir.next = lfs->mlist;
    d4aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d4ac:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
    d4ae:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    d4b2:	2e02      	cmp	r6, #2
    d4b4:	d02d      	beq.n	d512 <lfs_remove+0x9a>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
    d4b6:	2300      	movs	r3, #0
    d4b8:	9319      	str	r3, [sp, #100]	; 0x64
    d4ba:	02ad      	lsls	r5, r5, #10
    d4bc:	f045 459f 	orr.w	r5, r5, #1333788672	; 0x4f800000
    d4c0:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
    d4c4:	9518      	str	r5, [sp, #96]	; 0x60
    d4c6:	2301      	movs	r3, #1
    d4c8:	aa18      	add	r2, sp, #96	; 0x60
    d4ca:	a910      	add	r1, sp, #64	; 0x40
    d4cc:	4620      	mov	r0, r4
    d4ce:	f7ff fa3b 	bl	c948 <lfs_dir_commit>
    if (err) {
    d4d2:	4603      	mov	r3, r0
    d4d4:	2800      	cmp	r0, #0
    d4d6:	d145      	bne.n	d564 <lfs_remove+0xec>
    lfs->mlist = dir.next;
    d4d8:	9a06      	ldr	r2, [sp, #24]
    d4da:	62a2      	str	r2, [r4, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    d4dc:	2e02      	cmp	r6, #2
    d4de:	d1d3      	bne.n	d488 <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, -1);
    d4e0:	f04f 31ff 	mov.w	r1, #4294967295
    d4e4:	4620      	mov	r0, r4
    d4e6:	f005 f9b1 	bl	1284c <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
    d4ea:	aa10      	add	r2, sp, #64	; 0x40
    d4ec:	a908      	add	r1, sp, #32
    d4ee:	4620      	mov	r0, r4
    d4f0:	f005 fb14 	bl	12b1c <lfs_fs_pred>
        if (err) {
    d4f4:	4603      	mov	r3, r0
    d4f6:	2800      	cmp	r0, #0
    d4f8:	d1c6      	bne.n	d488 <lfs_remove+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
    d4fa:	aa08      	add	r2, sp, #32
    d4fc:	a910      	add	r1, sp, #64	; 0x40
    d4fe:	4620      	mov	r0, r4
    d500:	f7ff fc40 	bl	cd84 <lfs_dir_drop>
    d504:	4603      	mov	r3, r0
        if (err) {
    d506:	e7bf      	b.n	d488 <lfs_remove+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    d508:	2b00      	cmp	r3, #0
    d50a:	dbbd      	blt.n	d488 <lfs_remove+0x10>
    d50c:	f06f 0315 	mvn.w	r3, #21
    d510:	e7ba      	b.n	d488 <lfs_remove+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    d512:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
    d514:	aa04      	add	r2, sp, #16
    d516:	9200      	str	r2, [sp, #0]
    d518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d51c:	f043 0308 	orr.w	r3, r3, #8
    d520:	4a12      	ldr	r2, [pc, #72]	; (d56c <lfs_remove+0xf4>)
    d522:	a910      	add	r1, sp, #64	; 0x40
    d524:	4620      	mov	r0, r4
    d526:	f005 fb37 	bl	12b98 <lfs_dir_get>
        if (res < 0) {
    d52a:	1e03      	subs	r3, r0, #0
    d52c:	dbac      	blt.n	d488 <lfs_remove+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
    d52e:	aa04      	add	r2, sp, #16
    d530:	a908      	add	r1, sp, #32
    d532:	4620      	mov	r0, r4
    d534:	f005 fae4 	bl	12b00 <lfs_dir_fetch>
        if (err) {
    d538:	4603      	mov	r3, r0
    d53a:	2800      	cmp	r0, #0
    d53c:	d1a4      	bne.n	d488 <lfs_remove+0x10>
        if (dir.m.count > 0 || dir.m.split) {
    d53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d540:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
    d544:	d002      	beq.n	d54c <lfs_remove+0xd4>
            return LFS_ERR_NOTEMPTY;
    d546:	f06f 0326 	mvn.w	r3, #38	; 0x26
    d54a:	e79d      	b.n	d488 <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, +1);
    d54c:	2101      	movs	r1, #1
    d54e:	4620      	mov	r0, r4
    d550:	f005 f97c 	bl	1284c <lfs_fs_preporphans>
        dir.type = 0;
    d554:	2300      	movs	r3, #0
    d556:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
    d55a:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
    d55e:	ab06      	add	r3, sp, #24
    d560:	62a3      	str	r3, [r4, #40]	; 0x28
    d562:	e7a8      	b.n	d4b6 <lfs_remove+0x3e>
        lfs->mlist = dir.next;
    d564:	9a06      	ldr	r2, [sp, #24]
    d566:	62a2      	str	r2, [r4, #40]	; 0x28
        return err;
    d568:	e78e      	b.n	d488 <lfs_remove+0x10>
    d56a:	bf00      	nop
    d56c:	700ffc00 	.word	0x700ffc00

0000d570 <lfs_rename>:
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
    d570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d574:	b0ad      	sub	sp, #180	; 0xb4
    d576:	4604      	mov	r4, r0
    d578:	9103      	str	r1, [sp, #12]
    d57a:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
    d57c:	f006 f98d 	bl	1389a <lfs_fs_forceconsistency>
    if (err) {
    d580:	4606      	mov	r6, r0
    d582:	b118      	cbz	r0, d58c <lfs_rename+0x1c>
}
    d584:	4630      	mov	r0, r6
    d586:	b02d      	add	sp, #180	; 0xb4
    d588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    d58c:	2300      	movs	r3, #0
    d58e:	aa03      	add	r2, sp, #12
    d590:	a922      	add	r1, sp, #136	; 0x88
    d592:	4620      	mov	r0, r4
    d594:	f7fe fa12 	bl	b9bc <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    d598:	1e05      	subs	r5, r0, #0
    d59a:	f2c0 8090 	blt.w	d6be <lfs_rename+0x14e>
    return (tag & 0x000ffc00) >> 10;
    d59e:	f3c5 2889 	ubfx	r8, r5, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    d5a2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d5a6:	4598      	cmp	r8, r3
    d5a8:	f000 8089 	beq.w	d6be <lfs_rename+0x14e>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
    d5ac:	f10d 0366 	add.w	r3, sp, #102	; 0x66
    d5b0:	aa02      	add	r2, sp, #8
    d5b2:	a91a      	add	r1, sp, #104	; 0x68
    d5b4:	4620      	mov	r0, r4
    d5b6:	f7fe fa01 	bl	b9bc <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    d5ba:	1e07      	subs	r7, r0, #0
    d5bc:	f2c0 8086 	blt.w	d6cc <lfs_rename+0x15c>
    return (tag & 0x000ffc00) >> 10;
    d5c0:	f3c7 2289 	ubfx	r2, r7, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    d5c4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d5c8:	429a      	cmp	r2, r3
    d5ca:	d07f      	beq.n	d6cc <lfs_rename+0x15c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d5cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d5ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    d5d0:	429a      	cmp	r2, r3
    d5d2:	d008      	beq.n	d5e6 <lfs_rename+0x76>
    d5d4:	9823      	ldr	r0, [sp, #140]	; 0x8c
    d5d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    d5d8:	4281      	cmp	r1, r0
    d5da:	d004      	beq.n	d5e6 <lfs_rename+0x76>
    d5dc:	4299      	cmp	r1, r3
    d5de:	d002      	beq.n	d5e6 <lfs_rename+0x76>
    d5e0:	4290      	cmp	r0, r2
    d5e2:	d000      	beq.n	d5e6 <lfs_rename+0x76>
    d5e4:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
    d5e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d5e8:	930f      	str	r3, [sp, #60]	; 0x3c
    if (prevtag == LFS_ERR_NOENT) {
    d5ea:	f117 0f02 	cmn.w	r7, #2
    d5ee:	d07e      	beq.n	d6ee <lfs_rename+0x17e>
    return (tag & 0x7ff00000) >> 20;
    d5f0:	f3c7 530a 	ubfx	r3, r7, #20, #11
    d5f4:	f3c5 520a 	ubfx	r2, r5, #20, #11
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
    d5f8:	429a      	cmp	r2, r3
    d5fa:	f040 80f8 	bne.w	d7ee <lfs_rename+0x27e>
    } else if (samepair && newid == newoldid) {
    d5fe:	b91e      	cbnz	r6, d608 <lfs_rename+0x98>
    d600:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    d604:	4542      	cmp	r2, r8
    d606:	d0bd      	beq.n	d584 <lfs_rename+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    d608:	2b02      	cmp	r3, #2
    d60a:	d07e      	beq.n	d70a <lfs_rename+0x19a>
    uint16_t newoldid = lfs_tag_id(oldtag);
    d60c:	46c1      	mov	r9, r8
    if (!samepair) {
    d60e:	2e00      	cmp	r6, #0
    d610:	f040 80ab 	bne.w	d76a <lfs_rename+0x1fa>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    d614:	2224      	movs	r2, #36	; 0x24
    d616:	2100      	movs	r1, #0
    d618:	a806      	add	r0, sp, #24
    d61a:	f003 ffc3 	bl	115a4 <memset>
    d61e:	f117 0f02 	cmn.w	r7, #2
    d622:	f000 80a8 	beq.w	d776 <lfs_rename+0x206>
    d626:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d62a:	029b      	lsls	r3, r3, #10
    d62c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    d630:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    d634:	9305      	str	r3, [sp, #20]
    d636:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    d63a:	0292      	lsls	r2, r2, #10
    d63c:	f042 4380 	orr.w	r3, r2, #1073741824	; 0x40000000
    d640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d644:	9307      	str	r3, [sp, #28]
    return (tag & 0x7ff00000) >> 20;
    d646:	f3c5 530a 	ubfx	r3, r5, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    d64a:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
    d64e:	9802      	ldr	r0, [sp, #8]
    d650:	f003 ff36 	bl	114c0 <strlen>
    d654:	4328      	orrs	r0, r5
    d656:	9009      	str	r0, [sp, #36]	; 0x24
    d658:	9b02      	ldr	r3, [sp, #8]
    d65a:	930a      	str	r3, [sp, #40]	; 0x28
    d65c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d660:	ea48 2383 	orr.w	r3, r8, r3, lsl #10
    d664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d66c:	930b      	str	r3, [sp, #44]	; 0x2c
    d66e:	ab22      	add	r3, sp, #136	; 0x88
    d670:	930c      	str	r3, [sp, #48]	; 0x30
    d672:	2e00      	cmp	r6, #0
    d674:	f040 8081 	bne.w	d77a <lfs_rename+0x20a>
    d678:	ea4f 2989 	mov.w	r9, r9, lsl #10
    d67c:	f049 439f 	orr.w	r3, r9, #1333788672	; 0x4f800000
    d680:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    d684:	930d      	str	r3, [sp, #52]	; 0x34
    d686:	2305      	movs	r3, #5
    d688:	aa05      	add	r2, sp, #20
    d68a:	a91a      	add	r1, sp, #104	; 0x68
    d68c:	4620      	mov	r0, r4
    d68e:	f7ff f95b 	bl	c948 <lfs_dir_commit>
    if (err) {
    d692:	4605      	mov	r5, r0
    d694:	2800      	cmp	r0, #0
    d696:	d172      	bne.n	d77e <lfs_rename+0x20e>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    d698:	b126      	cbz	r6, d6a4 <lfs_rename+0x134>
    return lfs_tag_type1(a->tag);
    d69a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    d69c:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    d69e:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    d6a2:	d170      	bne.n	d786 <lfs_rename+0x216>
    lfs->mlist = prevdir.next;
    d6a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d6a6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    d6a8:	f117 0f02 	cmn.w	r7, #2
    d6ac:	f000 80a2 	beq.w	d7f4 <lfs_rename+0x284>
    return (tag & 0x7ff00000) >> 20;
    d6b0:	f3c7 570a 	ubfx	r7, r7, #20, #11
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    d6b4:	2f02      	cmp	r7, #2
    d6b6:	f000 8082 	beq.w	d7be <lfs_rename+0x24e>
    return 0;
    d6ba:	462e      	mov	r6, r5
    d6bc:	e762      	b.n	d584 <lfs_rename+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
    d6be:	2d00      	cmp	r5, #0
    d6c0:	db02      	blt.n	d6c8 <lfs_rename+0x158>
    d6c2:	f06f 0615 	mvn.w	r6, #21
    d6c6:	e75d      	b.n	d584 <lfs_rename+0x14>
    d6c8:	462e      	mov	r6, r5
    d6ca:	e75b      	b.n	d584 <lfs_rename+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    d6cc:	f117 0f02 	cmn.w	r7, #2
    d6d0:	d106      	bne.n	d6e0 <lfs_rename+0x170>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
    d6d2:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    d6d6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d6da:	429a      	cmp	r2, r3
    d6dc:	f47f af76 	bne.w	d5cc <lfs_rename+0x5c>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
    d6e0:	2f00      	cmp	r7, #0
    d6e2:	db02      	blt.n	d6ea <lfs_rename+0x17a>
    d6e4:	f06f 0615 	mvn.w	r6, #21
    d6e8:	e74c      	b.n	d584 <lfs_rename+0x14>
    d6ea:	463e      	mov	r6, r7
    d6ec:	e74a      	b.n	d584 <lfs_rename+0x14>
        lfs_size_t nlen = strlen(newpath);
    d6ee:	9802      	ldr	r0, [sp, #8]
    d6f0:	f003 fee6 	bl	114c0 <strlen>
        if (nlen > lfs->name_max) {
    d6f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    d6f6:	4283      	cmp	r3, r0
    d6f8:	d376      	bcc.n	d7e8 <lfs_rename+0x278>
        if (samepair && newid <= newoldid) {
    d6fa:	bb96      	cbnz	r6, d762 <lfs_rename+0x1f2>
    d6fc:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d700:	4543      	cmp	r3, r8
    d702:	d830      	bhi.n	d766 <lfs_rename+0x1f6>
            newoldid += 1;
    d704:	f108 0901 	add.w	r9, r8, #1
    d708:	e781      	b.n	d60e <lfs_rename+0x9e>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
    d70a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d70e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
    d710:	aa05      	add	r2, sp, #20
    d712:	9200      	str	r2, [sp, #0]
    d714:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d718:	f043 0308 	orr.w	r3, r3, #8
    d71c:	4a36      	ldr	r2, [pc, #216]	; (d7f8 <lfs_rename+0x288>)
    d71e:	a91a      	add	r1, sp, #104	; 0x68
    d720:	4620      	mov	r0, r4
    d722:	f005 fa39 	bl	12b98 <lfs_dir_get>
        if (res < 0) {
    d726:	1e03      	subs	r3, r0, #0
    d728:	db0c      	blt.n	d744 <lfs_rename+0x1d4>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
    d72a:	aa05      	add	r2, sp, #20
    d72c:	a911      	add	r1, sp, #68	; 0x44
    d72e:	4620      	mov	r0, r4
    d730:	f005 f9e6 	bl	12b00 <lfs_dir_fetch>
        if (err) {
    d734:	4603      	mov	r3, r0
    d736:	b928      	cbnz	r0, d744 <lfs_rename+0x1d4>
        if (prevdir.m.count > 0 || prevdir.m.split) {
    d738:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d73a:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
    d73e:	d003      	beq.n	d748 <lfs_rename+0x1d8>
            return LFS_ERR_NOTEMPTY;
    d740:	f06f 0326 	mvn.w	r3, #38	; 0x26
            return (int)res;
    d744:	461e      	mov	r6, r3
    d746:	e71d      	b.n	d584 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, +1);
    d748:	2101      	movs	r1, #1
    d74a:	4620      	mov	r0, r4
    d74c:	f005 f87e 	bl	1284c <lfs_fs_preporphans>
        prevdir.type = 0;
    d750:	2300      	movs	r3, #0
    d752:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        prevdir.id = 0;
    d756:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        lfs->mlist = &prevdir;
    d75a:	ab0f      	add	r3, sp, #60	; 0x3c
    d75c:	62a3      	str	r3, [r4, #40]	; 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
    d75e:	46c1      	mov	r9, r8
    d760:	e755      	b.n	d60e <lfs_rename+0x9e>
    d762:	46c1      	mov	r9, r8
    d764:	e753      	b.n	d60e <lfs_rename+0x9e>
    d766:	46c1      	mov	r9, r8
    d768:	e751      	b.n	d60e <lfs_rename+0x9e>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    d76a:	aa22      	add	r2, sp, #136	; 0x88
    d76c:	4649      	mov	r1, r9
    d76e:	4620      	mov	r0, r4
    d770:	f7fd fc32 	bl	afd8 <lfs_fs_prepmove>
    d774:	e74e      	b.n	d614 <lfs_rename+0xa4>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    d776:	2300      	movs	r3, #0
    d778:	e75c      	b.n	d634 <lfs_rename+0xc4>
    d77a:	2300      	movs	r3, #0
    d77c:	e782      	b.n	d684 <lfs_rename+0x114>
        lfs->mlist = prevdir.next;
    d77e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d780:	62a3      	str	r3, [r4, #40]	; 0x28
        return err;
    d782:	4606      	mov	r6, r0
    d784:	e6fe      	b.n	d584 <lfs_rename+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
    d786:	2200      	movs	r2, #0
    d788:	f240 31ff 	movw	r1, #1023	; 0x3ff
    d78c:	4620      	mov	r0, r4
    d78e:	f7fd fc23 	bl	afd8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
    d792:	2300      	movs	r3, #0
    d794:	932b      	str	r3, [sp, #172]	; 0xac
    d796:	ea4f 2388 	mov.w	r3, r8, lsl #10
    d79a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    d79e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    d7a2:	932a      	str	r3, [sp, #168]	; 0xa8
    d7a4:	2301      	movs	r3, #1
    d7a6:	aa2a      	add	r2, sp, #168	; 0xa8
    d7a8:	a922      	add	r1, sp, #136	; 0x88
    d7aa:	4620      	mov	r0, r4
    d7ac:	f7ff f8cc 	bl	c948 <lfs_dir_commit>
        if (err) {
    d7b0:	4606      	mov	r6, r0
    d7b2:	2800      	cmp	r0, #0
    d7b4:	f43f af76 	beq.w	d6a4 <lfs_rename+0x134>
            lfs->mlist = prevdir.next;
    d7b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d7ba:	62a3      	str	r3, [r4, #40]	; 0x28
            return err;
    d7bc:	e6e2      	b.n	d584 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, -1);
    d7be:	f04f 31ff 	mov.w	r1, #4294967295
    d7c2:	4620      	mov	r0, r4
    d7c4:	f005 f842 	bl	1284c <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
    d7c8:	aa1a      	add	r2, sp, #104	; 0x68
    d7ca:	a911      	add	r1, sp, #68	; 0x44
    d7cc:	4620      	mov	r0, r4
    d7ce:	f005 f9a5 	bl	12b1c <lfs_fs_pred>
        if (err) {
    d7d2:	4606      	mov	r6, r0
    d7d4:	2800      	cmp	r0, #0
    d7d6:	f47f aed5 	bne.w	d584 <lfs_rename+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
    d7da:	aa11      	add	r2, sp, #68	; 0x44
    d7dc:	a91a      	add	r1, sp, #104	; 0x68
    d7de:	4620      	mov	r0, r4
    d7e0:	f7ff fad0 	bl	cd84 <lfs_dir_drop>
    d7e4:	4606      	mov	r6, r0
        if (err) {
    d7e6:	e6cd      	b.n	d584 <lfs_rename+0x14>
            return LFS_ERR_NAMETOOLONG;
    d7e8:	f06f 0623 	mvn.w	r6, #35	; 0x23
    d7ec:	e6ca      	b.n	d584 <lfs_rename+0x14>
        return LFS_ERR_ISDIR;
    d7ee:	f06f 0614 	mvn.w	r6, #20
    d7f2:	e6c7      	b.n	d584 <lfs_rename+0x14>
    return 0;
    d7f4:	462e      	mov	r6, r5
    d7f6:	e6c5      	b.n	d584 <lfs_rename+0x14>
    d7f8:	700ffc00 	.word	0x700ffc00

0000d7fc <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
    d7fc:	b530      	push	{r4, r5, lr}
    d7fe:	b097      	sub	sp, #92	; 0x5c
    d800:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
    d802:	f005 fc80 	bl	13106 <lfs_init>
        if (err) {
    d806:	4605      	mov	r5, r0
    d808:	b110      	cbz	r0, d810 <lfs_format+0x14>
}
    d80a:	4628      	mov	r0, r5
    d80c:	b017      	add	sp, #92	; 0x5c
    d80e:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    d810:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d814:	2100      	movs	r1, #0
    d816:	6e60      	ldr	r0, [r4, #100]	; 0x64
    d818:	f003 fec4 	bl	115a4 <memset>
        lfs->free.off = 0;
    d81c:	2200      	movs	r2, #0
    d81e:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
    d820:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    d822:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    d824:	00db      	lsls	r3, r3, #3
    d826:	6a09      	ldr	r1, [r1, #32]
    d828:	428b      	cmp	r3, r1
    d82a:	bf28      	it	cs
    d82c:	460b      	movcs	r3, r1
    d82e:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
    d830:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
    d832:	4620      	mov	r0, r4
    d834:	f004 ffe9 	bl	1280a <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
    d838:	a906      	add	r1, sp, #24
    d83a:	4620      	mov	r0, r4
    d83c:	f005 fda7 	bl	1338e <lfs_dir_alloc>
        if (err) {
    d840:	4605      	mov	r5, r0
    d842:	b118      	cbz	r0, d84c <lfs_format+0x50>
    lfs_deinit(lfs);
    d844:	4620      	mov	r0, r4
    d846:	f005 fc45 	bl	130d4 <lfs_deinit>
    return err;
    d84a:	e7de      	b.n	d80a <lfs_format+0xe>
        lfs_superblock_t superblock = {
    d84c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    d850:	9300      	str	r3, [sp, #0]
            .block_size  = lfs->cfg->block_size,
    d852:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d854:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
    d856:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
    d858:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
    d85a:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
    d85c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
    d85e:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
    d860:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
    d862:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
    d864:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
    d866:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
    d868:	2300      	movs	r3, #0
    d86a:	930f      	str	r3, [sp, #60]	; 0x3c
    d86c:	4b14      	ldr	r3, [pc, #80]	; (d8c0 <lfs_format+0xc4>)
    d86e:	930e      	str	r3, [sp, #56]	; 0x38
    d870:	4b14      	ldr	r3, [pc, #80]	; (d8c4 <lfs_format+0xc8>)
    d872:	9310      	str	r3, [sp, #64]	; 0x40
    d874:	4b14      	ldr	r3, [pc, #80]	; (d8c8 <lfs_format+0xcc>)
    d876:	9311      	str	r3, [sp, #68]	; 0x44
    d878:	4b14      	ldr	r3, [pc, #80]	; (d8cc <lfs_format+0xd0>)
    d87a:	9312      	str	r3, [sp, #72]	; 0x48
    d87c:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
    d880:	2303      	movs	r3, #3
    d882:	aa0e      	add	r2, sp, #56	; 0x38
    d884:	a906      	add	r1, sp, #24
    d886:	4620      	mov	r0, r4
    d888:	f7ff f85e 	bl	c948 <lfs_dir_commit>
        if (err) {
    d88c:	4605      	mov	r5, r0
    d88e:	2800      	cmp	r0, #0
    d890:	d1d8      	bne.n	d844 <lfs_format+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
    d892:	2300      	movs	r3, #0
    d894:	9314      	str	r3, [sp, #80]	; 0x50
    d896:	2301      	movs	r3, #1
    d898:	9315      	str	r3, [sp, #84]	; 0x54
    d89a:	aa14      	add	r2, sp, #80	; 0x50
    d89c:	a906      	add	r1, sp, #24
    d89e:	4620      	mov	r0, r4
    d8a0:	f005 f92e 	bl	12b00 <lfs_dir_fetch>
        if (err) {
    d8a4:	4605      	mov	r5, r0
    d8a6:	2800      	cmp	r0, #0
    d8a8:	d1cc      	bne.n	d844 <lfs_format+0x48>
        root.erased = false;
    d8aa:	2200      	movs	r2, #0
    d8ac:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
    d8b0:	4613      	mov	r3, r2
    d8b2:	a906      	add	r1, sp, #24
    d8b4:	4620      	mov	r0, r4
    d8b6:	f7ff f847 	bl	c948 <lfs_dir_commit>
    d8ba:	4605      	mov	r5, r0
        if (err) {
    d8bc:	e7c2      	b.n	d844 <lfs_format+0x48>
    d8be:	bf00      	nop
    d8c0:	40100000 	.word	0x40100000
    d8c4:	0ff00008 	.word	0x0ff00008
    d8c8:	00015704 	.word	0x00015704
    d8cc:	20100018 	.word	0x20100018

0000d8d0 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
    d8d0:	b470      	push	{r4, r5, r6}
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
    d8d2:	2400      	movs	r4, #0
    d8d4:	4294      	cmp	r4, r2
    d8d6:	d213      	bcs.n	d900 <lfs_crc+0x30>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
    d8d8:	5d0b      	ldrb	r3, [r1, r4]
    d8da:	ea83 0500 	eor.w	r5, r3, r0
    d8de:	f005 050f 	and.w	r5, r5, #15
    d8e2:	4e08      	ldr	r6, [pc, #32]	; (d904 <lfs_crc+0x34>)
    d8e4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    d8e8:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    d8ec:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
    d8f0:	f003 030f 	and.w	r3, r3, #15
    d8f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    d8f8:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
    d8fc:	3401      	adds	r4, #1
    d8fe:	e7e9      	b.n	d8d4 <lfs_crc+0x4>
    }

    return crc;
}
    d900:	bc70      	pop	{r4, r5, r6}
    d902:	4770      	bx	lr
    d904:	00015d54 	.word	0x00015d54

0000d908 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    d908:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d90a:	4c11      	ldr	r4, [pc, #68]	; (d950 <_DoInit+0x48>)
    d90c:	2303      	movs	r3, #3
    d90e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d910:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d912:	4a10      	ldr	r2, [pc, #64]	; (d954 <_DoInit+0x4c>)
    d914:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d916:	4b10      	ldr	r3, [pc, #64]	; (d958 <_DoInit+0x50>)
    d918:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    d91a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d91e:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    d920:	2300      	movs	r3, #0
    d922:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d924:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d926:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d928:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d92a:	4a0c      	ldr	r2, [pc, #48]	; (d95c <_DoInit+0x54>)
    d92c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    d92e:	2210      	movs	r2, #16
    d930:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    d932:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d934:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d936:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    d938:	4909      	ldr	r1, [pc, #36]	; (d960 <_DoInit+0x58>)
    d93a:	1de0      	adds	r0, r4, #7
    d93c:	f003 fd91 	bl	11462 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    d940:	4908      	ldr	r1, [pc, #32]	; (d964 <_DoInit+0x5c>)
    d942:	4620      	mov	r0, r4
    d944:	f003 fd8d 	bl	11462 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    d948:	2320      	movs	r3, #32
    d94a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    d94c:	bd10      	pop	{r4, pc}
    d94e:	bf00      	nop
    d950:	200029c0 	.word	0x200029c0
    d954:	00015d94 	.word	0x00015d94
    d958:	20002a78 	.word	0x20002a78
    d95c:	20002a68 	.word	0x20002a68
    d960:	00015da0 	.word	0x00015da0
    d964:	00015da4 	.word	0x00015da4

0000d968 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d96c:	4604      	mov	r4, r0
    d96e:	460e      	mov	r6, r1
    d970:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    d972:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    d976:	4a2d      	ldr	r2, [pc, #180]	; (da2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d978:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    d97c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    d97e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    d980:	42bb      	cmp	r3, r7
    d982:	d84b      	bhi.n	da1c <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    d984:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    d988:	4928      	ldr	r1, [pc, #160]	; (da2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d98a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    d98e:	f8d2 8020 	ldr.w	r8, [r2, #32]
    d992:	eba8 0907 	sub.w	r9, r8, r7
    d996:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    d99a:	4295      	cmp	r5, r2
    d99c:	d904      	bls.n	d9a8 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    d99e:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    d9a0:	429d      	cmp	r5, r3
    d9a2:	d916      	bls.n	d9d2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    d9a4:	2000      	movs	r0, #0
    d9a6:	e03e      	b.n	da26 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d9a8:	f8df 8080 	ldr.w	r8, [pc, #128]	; da2c <SEGGER_RTT_WriteSkipNoLock+0xc4>
    d9ac:	1c63      	adds	r3, r4, #1
    d9ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d9b2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    d9b6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    d9b8:	462a      	mov	r2, r5
    d9ba:	4631      	mov	r1, r6
    d9bc:	4438      	add	r0, r7
    d9be:	f003 fdcd 	bl	1155c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    d9c2:	443d      	add	r5, r7
    d9c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d9c8:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    d9cc:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    d9ce:	2001      	movs	r0, #1
    d9d0:	e029      	b.n	da26 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d9d2:	1c43      	adds	r3, r0, #1
    d9d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d9d8:	4a14      	ldr	r2, [pc, #80]	; (da2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d9da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d9de:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    d9e0:	464a      	mov	r2, r9
    d9e2:	4631      	mov	r1, r6
    d9e4:	4438      	add	r0, r7
    d9e6:	f003 fdb9 	bl	1155c <memcpy>
      NumBytes -= Rem;
    d9ea:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    d9ee:	197f      	adds	r7, r7, r5
    d9f0:	d107      	bne.n	da02 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    d9f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d9f6:	4b0d      	ldr	r3, [pc, #52]	; (da2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d9f8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    d9fc:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    d9fe:	2001      	movs	r0, #1
    da00:	e011      	b.n	da26 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    da02:	1c63      	adds	r3, r4, #1
    da04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    da08:	4a08      	ldr	r2, [pc, #32]	; (da2c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    da0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    da0e:	463a      	mov	r2, r7
    da10:	eb06 0109 	add.w	r1, r6, r9
    da14:	6858      	ldr	r0, [r3, #4]
    da16:	f003 fda1 	bl	1155c <memcpy>
    da1a:	e7ea      	b.n	d9f2 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    da1c:	1bdb      	subs	r3, r3, r7
    da1e:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    da20:	42ab      	cmp	r3, r5
    da22:	d2c1      	bcs.n	d9a8 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    da24:	2000      	movs	r0, #0
}
    da26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da2a:	bf00      	nop
    da2c:	200029c0 	.word	0x200029c0

0000da30 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    da30:	4b06      	ldr	r3, [pc, #24]	; (da4c <SEGGER_RTT_HasDataUp+0x1c>)
    da32:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    da36:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    da3a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    da3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    da40:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    da44:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    da46:	1a80      	subs	r0, r0, r2
    da48:	4770      	bx	lr
    da4a:	bf00      	nop
    da4c:	200029c0 	.word	0x200029c0

0000da50 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    da50:	4b03      	ldr	r3, [pc, #12]	; (da60 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    da52:	4a04      	ldr	r2, [pc, #16]	; (da64 <z_device_state_init+0x14>)
    da54:	4293      	cmp	r3, r2
    da56:	d201      	bcs.n	da5c <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    da58:	3318      	adds	r3, #24
    da5a:	e7fa      	b.n	da52 <z_device_state_init+0x2>
	}
}
    da5c:	4770      	bx	lr
    da5e:	bf00      	nop
    da60:	00014460 	.word	0x00014460
    da64:	00014508 	.word	0x00014508

0000da68 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    da68:	b570      	push	{r4, r5, r6, lr}
    da6a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    da6c:	4b11      	ldr	r3, [pc, #68]	; (dab4 <z_sys_init_run_level+0x4c>)
    da6e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    da72:	e009      	b.n	da88 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    da74:	4240      	negs	r0, r0
    da76:	e017      	b.n	daa8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    da78:	68eb      	ldr	r3, [r5, #12]
    da7a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    da7c:	68ea      	ldr	r2, [r5, #12]
    da7e:	7853      	ldrb	r3, [r2, #1]
    da80:	f043 0301 	orr.w	r3, r3, #1
    da84:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    da86:	3408      	adds	r4, #8
    da88:	1c73      	adds	r3, r6, #1
    da8a:	4a0a      	ldr	r2, [pc, #40]	; (dab4 <z_sys_init_run_level+0x4c>)
    da8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da90:	42a3      	cmp	r3, r4
    da92:	d90d      	bls.n	dab0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    da94:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    da96:	6823      	ldr	r3, [r4, #0]
    da98:	4628      	mov	r0, r5
    da9a:	4798      	blx	r3
		if (dev != NULL) {
    da9c:	2d00      	cmp	r5, #0
    da9e:	d0f2      	beq.n	da86 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    daa0:	2800      	cmp	r0, #0
    daa2:	d0eb      	beq.n	da7c <z_sys_init_run_level+0x14>
				if (rc < 0) {
    daa4:	2800      	cmp	r0, #0
    daa6:	dbe5      	blt.n	da74 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    daa8:	28ff      	cmp	r0, #255	; 0xff
    daaa:	dde5      	ble.n	da78 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    daac:	20ff      	movs	r0, #255	; 0xff
    daae:	e7e3      	b.n	da78 <z_sys_init_run_level+0x10>
		}
	}
}
    dab0:	bd70      	pop	{r4, r5, r6, pc}
    dab2:	bf00      	nop
    dab4:	00015dac 	.word	0x00015dac

0000dab8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    dab8:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    daba:	4605      	mov	r5, r0
    dabc:	b328      	cbz	r0, db0a <z_impl_device_get_binding+0x52>
    dabe:	7803      	ldrb	r3, [r0, #0]
    dac0:	b32b      	cbz	r3, db0e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    dac2:	4c14      	ldr	r4, [pc, #80]	; (db14 <z_impl_device_get_binding+0x5c>)
    dac4:	e000      	b.n	dac8 <z_impl_device_get_binding+0x10>
    dac6:	3418      	adds	r4, #24
    dac8:	4b13      	ldr	r3, [pc, #76]	; (db18 <z_impl_device_get_binding+0x60>)
    daca:	429c      	cmp	r4, r3
    dacc:	d008      	beq.n	dae0 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    dace:	4620      	mov	r0, r4
    dad0:	f005 ffae 	bl	13a30 <z_device_ready>
    dad4:	2800      	cmp	r0, #0
    dad6:	d0f6      	beq.n	dac6 <z_impl_device_get_binding+0xe>
    dad8:	6823      	ldr	r3, [r4, #0]
    dada:	42ab      	cmp	r3, r5
    dadc:	d1f3      	bne.n	dac6 <z_impl_device_get_binding+0xe>
    dade:	e012      	b.n	db06 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    dae0:	4c0c      	ldr	r4, [pc, #48]	; (db14 <z_impl_device_get_binding+0x5c>)
    dae2:	e000      	b.n	dae6 <z_impl_device_get_binding+0x2e>
    dae4:	3418      	adds	r4, #24
    dae6:	4b0c      	ldr	r3, [pc, #48]	; (db18 <z_impl_device_get_binding+0x60>)
    dae8:	429c      	cmp	r4, r3
    daea:	d00b      	beq.n	db04 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    daec:	4620      	mov	r0, r4
    daee:	f005 ff9f 	bl	13a30 <z_device_ready>
    daf2:	2800      	cmp	r0, #0
    daf4:	d0f6      	beq.n	dae4 <z_impl_device_get_binding+0x2c>
    daf6:	6821      	ldr	r1, [r4, #0]
    daf8:	4628      	mov	r0, r5
    dafa:	f003 fcf3 	bl	114e4 <strcmp>
    dafe:	2800      	cmp	r0, #0
    db00:	d1f0      	bne.n	dae4 <z_impl_device_get_binding+0x2c>
    db02:	e000      	b.n	db06 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    db04:	2400      	movs	r4, #0
}
    db06:	4620      	mov	r0, r4
    db08:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    db0a:	4604      	mov	r4, r0
    db0c:	e7fb      	b.n	db06 <z_impl_device_get_binding+0x4e>
    db0e:	2400      	movs	r4, #0
    db10:	e7f9      	b.n	db06 <z_impl_device_get_binding+0x4e>
    db12:	bf00      	nop
    db14:	00014460 	.word	0x00014460
    db18:	00014508 	.word	0x00014508

0000db1c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    db1c:	4b01      	ldr	r3, [pc, #4]	; (db24 <z_impl_z_errno+0x8>)
    db1e:	6898      	ldr	r0, [r3, #8]
}
    db20:	3094      	adds	r0, #148	; 0x94
    db22:	4770      	bx	lr
    db24:	20002e78 	.word	0x20002e78

0000db28 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    db28:	2804      	cmp	r0, #4
    db2a:	d80c      	bhi.n	db46 <reason_to_str+0x1e>
    db2c:	e8df f000 	tbb	[pc, r0]
    db30:	07050d03 	.word	0x07050d03
    db34:	09          	.byte	0x09
    db35:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    db36:	4806      	ldr	r0, [pc, #24]	; (db50 <reason_to_str+0x28>)
    db38:	4770      	bx	lr
		return "Stack overflow";
    db3a:	4806      	ldr	r0, [pc, #24]	; (db54 <reason_to_str+0x2c>)
    db3c:	4770      	bx	lr
		return "Kernel oops";
    db3e:	4806      	ldr	r0, [pc, #24]	; (db58 <reason_to_str+0x30>)
    db40:	4770      	bx	lr
		return "Kernel panic";
    db42:	4806      	ldr	r0, [pc, #24]	; (db5c <reason_to_str+0x34>)
    db44:	4770      	bx	lr
	default:
		return "Unknown error";
    db46:	4806      	ldr	r0, [pc, #24]	; (db60 <reason_to_str+0x38>)
    db48:	4770      	bx	lr
		return "Unhandled interrupt";
    db4a:	4806      	ldr	r0, [pc, #24]	; (db64 <reason_to_str+0x3c>)
	}
}
    db4c:	4770      	bx	lr
    db4e:	bf00      	nop
    db50:	00015e14 	.word	0x00015e14
    db54:	00015de8 	.word	0x00015de8
    db58:	00015df8 	.word	0x00015df8
    db5c:	00015e04 	.word	0x00015e04
    db60:	00015dc4 	.word	0x00015dc4
    db64:	00015dd4 	.word	0x00015dd4

0000db68 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    db68:	b130      	cbz	r0, db78 <thread_name_get+0x10>
{
    db6a:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    db6c:	f006 f85a 	bl	13c24 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    db70:	b120      	cbz	r0, db7c <thread_name_get+0x14>
    db72:	7803      	ldrb	r3, [r0, #0]
    db74:	b123      	cbz	r3, db80 <thread_name_get+0x18>
}
    db76:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    db78:	4802      	ldr	r0, [pc, #8]	; (db84 <thread_name_get+0x1c>)
}
    db7a:	4770      	bx	lr
		thread_name = "unknown";
    db7c:	4801      	ldr	r0, [pc, #4]	; (db84 <thread_name_get+0x1c>)
    db7e:	e7fa      	b.n	db76 <thread_name_get+0xe>
    db80:	4800      	ldr	r0, [pc, #0]	; (db84 <thread_name_get+0x1c>)
	return thread_name;
    db82:	e7f8      	b.n	db76 <thread_name_get+0xe>
    db84:	00015e24 	.word	0x00015e24

0000db88 <k_sys_fatal_error_handler>:
{
    db88:	b510      	push	{r4, lr}
    db8a:	4604      	mov	r4, r0
	z_impl_log_panic();
    db8c:	f7f4 f9d4 	bl	1f38 <z_impl_log_panic>
    db90:	4b09      	ldr	r3, [pc, #36]	; (dbb8 <k_sys_fatal_error_handler+0x30>)
    db92:	4a0a      	ldr	r2, [pc, #40]	; (dbbc <k_sys_fatal_error_handler+0x34>)
    db94:	1a9b      	subs	r3, r3, r2
    db96:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
    db98:	f04f 0100 	mov.w	r1, #0
    db9c:	2201      	movs	r2, #1
    db9e:	f362 0102 	bfi	r1, r2, #0, #3
    dba2:	f36f 01c5 	bfc	r1, #3, #3
    dba6:	f363 118f 	bfi	r1, r3, #6, #10
    dbaa:	4805      	ldr	r0, [pc, #20]	; (dbc0 <k_sys_fatal_error_handler+0x38>)
    dbac:	f7f4 f994 	bl	1ed8 <log_0>
	arch_system_halt(reason);
    dbb0:	4620      	mov	r0, r4
    dbb2:	f005 ff4a 	bl	13a4a <arch_system_halt>
    dbb6:	bf00      	nop
    dbb8:	000146b8 	.word	0x000146b8
    dbbc:	00014688 	.word	0x00014688
    dbc0:	00015e2c 	.word	0x00015e2c

0000dbc4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbc8:	b082      	sub	sp, #8
    dbca:	4605      	mov	r5, r0
    dbcc:	460e      	mov	r6, r1
	__asm__ volatile(
    dbce:	f04f 0320 	mov.w	r3, #32
    dbd2:	f3ef 8711 	mrs	r7, BASEPRI
    dbd6:	f383 8812 	msr	BASEPRI_MAX, r3
    dbda:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    dbde:	f001 f927 	bl	ee30 <z_impl_z_current_get>
    dbe2:	4604      	mov	r4, r0
    dbe4:	4b29      	ldr	r3, [pc, #164]	; (dc8c <z_fatal_error+0xc8>)
    dbe6:	4a2a      	ldr	r2, [pc, #168]	; (dc90 <z_fatal_error+0xcc>)
    dbe8:	1a9b      	subs	r3, r3, r2
    dbea:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    dbec:	f04f 0800 	mov.w	r8, #0
    dbf0:	2201      	movs	r2, #1
    dbf2:	f362 0802 	bfi	r8, r2, #0, #3
    dbf6:	f36f 08c5 	bfc	r8, #3, #3
    dbfa:	f363 188f 	bfi	r8, r3, #6, #10
    dbfe:	4628      	mov	r0, r5
    dc00:	f7ff ff92 	bl	db28 <reason_to_str>
    dc04:	4602      	mov	r2, r0
    dc06:	f8ad 8000 	strh.w	r8, [sp]
    dc0a:	2300      	movs	r3, #0
    dc0c:	4629      	mov	r1, r5
    dc0e:	4821      	ldr	r0, [pc, #132]	; (dc94 <z_fatal_error+0xd0>)
    dc10:	f7f4 f890 	bl	1d34 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    dc14:	b11e      	cbz	r6, dc1e <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    dc16:	69f3      	ldr	r3, [r6, #28]
    dc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
    dc1c:	bb2b      	cbnz	r3, dc6a <z_fatal_error+0xa6>
    dc1e:	4b1b      	ldr	r3, [pc, #108]	; (dc8c <z_fatal_error+0xc8>)
    dc20:	4a1b      	ldr	r2, [pc, #108]	; (dc90 <z_fatal_error+0xcc>)
    dc22:	1a9b      	subs	r3, r3, r2
    dc24:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    dc26:	f04f 0800 	mov.w	r8, #0
    dc2a:	2201      	movs	r2, #1
    dc2c:	f362 0802 	bfi	r8, r2, #0, #3
    dc30:	f36f 08c5 	bfc	r8, #3, #3
    dc34:	f363 188f 	bfi	r8, r3, #6, #10
    dc38:	4620      	mov	r0, r4
    dc3a:	f7ff ff95 	bl	db68 <thread_name_get>
    dc3e:	f7f3 ff3d 	bl	1abc <z_log_strdup>
    dc42:	4602      	mov	r2, r0
    dc44:	4643      	mov	r3, r8
    dc46:	4621      	mov	r1, r4
    dc48:	4813      	ldr	r0, [pc, #76]	; (dc98 <z_fatal_error+0xd4>)
    dc4a:	f7f4 f8e7 	bl	1e1c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    dc4e:	4631      	mov	r1, r6
    dc50:	4628      	mov	r0, r5
    dc52:	f7ff ff99 	bl	db88 <k_sys_fatal_error_handler>
	__asm__ volatile(
    dc56:	f387 8811 	msr	BASEPRI, r7
    dc5a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    dc5e:	4620      	mov	r0, r4
    dc60:	f7f7 f8dc 	bl	4e1c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    dc64:	b002      	add	sp, #8
    dc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc6a:	4b08      	ldr	r3, [pc, #32]	; (dc8c <z_fatal_error+0xc8>)
    dc6c:	4a08      	ldr	r2, [pc, #32]	; (dc90 <z_fatal_error+0xcc>)
    dc6e:	1a9b      	subs	r3, r3, r2
    dc70:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    dc72:	f04f 0100 	mov.w	r1, #0
    dc76:	2201      	movs	r2, #1
    dc78:	f362 0102 	bfi	r1, r2, #0, #3
    dc7c:	f36f 01c5 	bfc	r1, #3, #3
    dc80:	f363 118f 	bfi	r1, r3, #6, #10
    dc84:	4805      	ldr	r0, [pc, #20]	; (dc9c <z_fatal_error+0xd8>)
    dc86:	f7f4 f927 	bl	1ed8 <log_0>
    dc8a:	e7c8      	b.n	dc1e <z_fatal_error+0x5a>
    dc8c:	000146b8 	.word	0x000146b8
    dc90:	00014688 	.word	0x00014688
    dc94:	00015e3c 	.word	0x00015e3c
    dc98:	00015e88 	.word	0x00015e88
    dc9c:	00015e64 	.word	0x00015e64

0000dca0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    dca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dca2:	b089      	sub	sp, #36	; 0x24
    dca4:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    dca6:	4b15      	ldr	r3, [pc, #84]	; (dcfc <init_idle_thread+0x5c>)
    dca8:	25b0      	movs	r5, #176	; 0xb0
    dcaa:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    dcae:	4b14      	ldr	r3, [pc, #80]	; (dd00 <init_idle_thread+0x60>)
    dcb0:	f44f 76b0 	mov.w	r6, #352	; 0x160
    dcb4:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    dcb8:	af06      	add	r7, sp, #24
    dcba:	4603      	mov	r3, r0
    dcbc:	4a11      	ldr	r2, [pc, #68]	; (dd04 <init_idle_thread+0x64>)
    dcbe:	2108      	movs	r1, #8
    dcc0:	4638      	mov	r0, r7
    dcc2:	f001 fddf 	bl	f884 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    dcc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dcca:	480f      	ldr	r0, [pc, #60]	; (dd08 <init_idle_thread+0x68>)
    dccc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    dcd0:	9705      	str	r7, [sp, #20]
    dcd2:	2301      	movs	r3, #1
    dcd4:	9304      	str	r3, [sp, #16]
    dcd6:	230f      	movs	r3, #15
    dcd8:	9303      	str	r3, [sp, #12]
    dcda:	2300      	movs	r3, #0
    dcdc:	9302      	str	r3, [sp, #8]
    dcde:	9301      	str	r3, [sp, #4]
    dce0:	9400      	str	r4, [sp, #0]
    dce2:	4b0a      	ldr	r3, [pc, #40]	; (dd0c <init_idle_thread+0x6c>)
    dce4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    dce8:	4631      	mov	r1, r6
    dcea:	4628      	mov	r0, r5
    dcec:	f000 f96c 	bl	dfc8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    dcf0:	7b6b      	ldrb	r3, [r5, #13]
    dcf2:	f023 0304 	bic.w	r3, r3, #4
    dcf6:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    dcf8:	b009      	add	sp, #36	; 0x24
    dcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcfc:	20000788 	.word	0x20000788
    dd00:	20004420 	.word	0x20004420
    dd04:	00015ea0 	.word	0x00015ea0
    dd08:	20002e78 	.word	0x20002e78
    dd0c:	00013c97 	.word	0x00013c97

0000dd10 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    dd10:	b570      	push	{r4, r5, r6, lr}
    dd12:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    dd14:	f000 ffbe 	bl	ec94 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    dd18:	4d1b      	ldr	r5, [pc, #108]	; (dd88 <prepare_multithreading+0x78>)
    dd1a:	4b1c      	ldr	r3, [pc, #112]	; (dd8c <prepare_multithreading+0x7c>)
    dd1c:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    dd1e:	4b1c      	ldr	r3, [pc, #112]	; (dd90 <prepare_multithreading+0x80>)
    dd20:	9305      	str	r3, [sp, #20]
    dd22:	2301      	movs	r3, #1
    dd24:	9304      	str	r3, [sp, #16]
    dd26:	2400      	movs	r4, #0
    dd28:	9403      	str	r4, [sp, #12]
    dd2a:	9402      	str	r4, [sp, #8]
    dd2c:	9401      	str	r4, [sp, #4]
    dd2e:	9400      	str	r4, [sp, #0]
    dd30:	4b18      	ldr	r3, [pc, #96]	; (dd94 <prepare_multithreading+0x84>)
    dd32:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dd36:	4918      	ldr	r1, [pc, #96]	; (dd98 <prepare_multithreading+0x88>)
    dd38:	4628      	mov	r0, r5
    dd3a:	f000 f945 	bl	dfc8 <z_setup_new_thread>
    dd3e:	4606      	mov	r6, r0
    dd40:	7b6b      	ldrb	r3, [r5, #13]
    dd42:	f023 0304 	bic.w	r3, r3, #4
    dd46:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    dd48:	4628      	mov	r0, r5
    dd4a:	f006 f8ff 	bl	13f4c <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    dd4e:	2c00      	cmp	r4, #0
    dd50:	dd02      	ble.n	dd58 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    dd52:	4630      	mov	r0, r6
    dd54:	b006      	add	sp, #24
    dd56:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    dd58:	4620      	mov	r0, r4
    dd5a:	f7ff ffa1 	bl	dca0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    dd5e:	4b0f      	ldr	r3, [pc, #60]	; (dd9c <prepare_multithreading+0x8c>)
    dd60:	22b0      	movs	r2, #176	; 0xb0
    dd62:	fb02 3204 	mla	r2, r2, r4, r3
    dd66:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    dd6a:	4b08      	ldr	r3, [pc, #32]	; (dd8c <prepare_multithreading+0x7c>)
    dd6c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    dd70:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    dd72:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    dd74:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    dd78:	4a09      	ldr	r2, [pc, #36]	; (dda0 <prepare_multithreading+0x90>)
    dd7a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    dd7e:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    dd82:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    dd84:	3401      	adds	r4, #1
    dd86:	e7e2      	b.n	dd4e <prepare_multithreading+0x3e>
    dd88:	20000838 	.word	0x20000838
    dd8c:	20002e78 	.word	0x20002e78
    dd90:	00015eac 	.word	0x00015eac
    dd94:	0000dda5 	.word	0x0000dda5
    dd98:	20003c00 	.word	0x20003c00
    dd9c:	20000788 	.word	0x20000788
    dda0:	20004580 	.word	0x20004580

0000dda4 <bg_thread_main>:
{
    dda4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    dda6:	4b0a      	ldr	r3, [pc, #40]	; (ddd0 <bg_thread_main+0x2c>)
    dda8:	2201      	movs	r2, #1
    ddaa:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ddac:	2002      	movs	r0, #2
    ddae:	f7ff fe5b 	bl	da68 <z_sys_init_run_level>
	boot_banner();
    ddb2:	f001 fadd 	bl	f370 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    ddb6:	2003      	movs	r0, #3
    ddb8:	f7ff fe56 	bl	da68 <z_sys_init_run_level>
	z_init_static_threads();
    ddbc:	f000 f968 	bl	e090 <z_init_static_threads>
	main();
    ddc0:	f7f2 fc60 	bl	684 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    ddc4:	4a03      	ldr	r2, [pc, #12]	; (ddd4 <bg_thread_main+0x30>)
    ddc6:	7b13      	ldrb	r3, [r2, #12]
    ddc8:	f023 0301 	bic.w	r3, r3, #1
    ddcc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ddce:	bd08      	pop	{r3, pc}
    ddd0:	20002ee3 	.word	0x20002ee3
    ddd4:	20000838 	.word	0x20000838

0000ddd8 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    ddd8:	b508      	push	{r3, lr}
    ddda:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    dddc:	4a01      	ldr	r2, [pc, #4]	; (dde4 <switch_to_main_thread+0xc>)
    ddde:	4802      	ldr	r0, [pc, #8]	; (dde8 <switch_to_main_thread+0x10>)
    dde0:	f7f6 fb96 	bl	4510 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    dde4:	0000dda5 	.word	0x0000dda5
    dde8:	20000838 	.word	0x20000838

0000ddec <z_bss_zero>:
{
    ddec:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    ddee:	4803      	ldr	r0, [pc, #12]	; (ddfc <z_bss_zero+0x10>)
    ddf0:	4a03      	ldr	r2, [pc, #12]	; (de00 <z_bss_zero+0x14>)
    ddf2:	1a12      	subs	r2, r2, r0
    ddf4:	2100      	movs	r1, #0
    ddf6:	f003 fbd5 	bl	115a4 <memset>
}
    ddfa:	bd08      	pop	{r3, pc}
    ddfc:	200004e0 	.word	0x200004e0
    de00:	200030a0 	.word	0x200030a0

0000de04 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    de04:	b500      	push	{lr}
    de06:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    de08:	f7f3 fd7a 	bl	1900 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    de0c:	4b1c      	ldr	r3, [pc, #112]	; (de80 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    de0e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    de12:	4c1c      	ldr	r4, [pc, #112]	; (de84 <z_cstart+0x80>)
    de14:	6963      	ldr	r3, [r4, #20]
    de16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    de1a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    de1c:	23e0      	movs	r3, #224	; 0xe0
    de1e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    de22:	2500      	movs	r5, #0
    de24:	77e5      	strb	r5, [r4, #31]
    de26:	7625      	strb	r5, [r4, #24]
    de28:	7665      	strb	r5, [r4, #25]
    de2a:	76a5      	strb	r5, [r4, #26]
    de2c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    de30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    de32:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    de36:	6263      	str	r3, [r4, #36]	; 0x24
    de38:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    de3c:	f7f6 ff5e 	bl	4cfc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    de40:	f7f6 f9ea 	bl	4218 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    de44:	f04f 33ff 	mov.w	r3, #4294967295
    de48:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    de4a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    de4c:	f7f7 f8c2 	bl	4fd4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    de50:	f7f6 fffa 	bl	4e48 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    de54:	2401      	movs	r4, #1
    de56:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    de5a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    de5e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    de60:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    de62:	4b09      	ldr	r3, [pc, #36]	; (de88 <z_cstart+0x84>)
    de64:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    de68:	f7ff fdf2 	bl	da50 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    de6c:	4628      	mov	r0, r5
    de6e:	f7ff fdfb 	bl	da68 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    de72:	4620      	mov	r0, r4
    de74:	f7ff fdf8 	bl	da68 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    de78:	f7ff ff4a 	bl	dd10 <prepare_multithreading>
    de7c:	f7ff ffac 	bl	ddd8 <switch_to_main_thread>
    de80:	20004da0 	.word	0x20004da0
    de84:	e000ed00 	.word	0xe000ed00
    de88:	20002e78 	.word	0x20002e78

0000de8c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    de8c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    de8e:	4c06      	ldr	r4, [pc, #24]	; (dea8 <statics_init+0x1c>)
    de90:	4b06      	ldr	r3, [pc, #24]	; (deac <statics_init+0x20>)
    de92:	429c      	cmp	r4, r3
    de94:	d206      	bcs.n	dea4 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    de96:	68a2      	ldr	r2, [r4, #8]
    de98:	6861      	ldr	r1, [r4, #4]
    de9a:	4620      	mov	r0, r4
    de9c:	f005 fdde 	bl	13a5c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    dea0:	3414      	adds	r4, #20
    dea2:	e7f5      	b.n	de90 <statics_init+0x4>
		}
	}
	return 0;
}
    dea4:	2000      	movs	r0, #0
    dea6:	bd10      	pop	{r4, pc}
    dea8:	2000033c 	.word	0x2000033c
    deac:	20000364 	.word	0x20000364

0000deb0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    deb0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    deb2:	4c06      	ldr	r4, [pc, #24]	; (decc <init_mem_slab_module+0x1c>)
	int rc = 0;
    deb4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    deb6:	4b06      	ldr	r3, [pc, #24]	; (ded0 <init_mem_slab_module+0x20>)
    deb8:	429c      	cmp	r4, r3
    deba:	d206      	bcs.n	deca <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    debc:	4620      	mov	r0, r4
    debe:	f005 fe48 	bl	13b52 <create_free_list>
		if (rc < 0) {
    dec2:	2800      	cmp	r0, #0
    dec4:	db01      	blt.n	deca <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    dec6:	341c      	adds	r4, #28
    dec8:	e7f5      	b.n	deb6 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    deca:	bd10      	pop	{r4, pc}
    decc:	200002e8 	.word	0x200002e8
    ded0:	2000033c 	.word	0x2000033c

0000ded4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    ded4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ded6:	b083      	sub	sp, #12
    ded8:	460c      	mov	r4, r1
    deda:	461f      	mov	r7, r3
	__asm__ volatile(
    dedc:	f04f 0320 	mov.w	r3, #32
    dee0:	f3ef 8111 	mrs	r1, BASEPRI
    dee4:	f383 8812 	msr	BASEPRI_MAX, r3
    dee8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    deec:	6943      	ldr	r3, [r0, #20]
    deee:	b16b      	cbz	r3, df0c <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    def0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    def2:	6943      	ldr	r3, [r0, #20]
    def4:	681b      	ldr	r3, [r3, #0]
    def6:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    def8:	6983      	ldr	r3, [r0, #24]
    defa:	3301      	adds	r3, #1
    defc:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    defe:	2000      	movs	r0, #0
	__asm__ volatile(
    df00:	f381 8811 	msr	BASEPRI, r1
    df04:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    df08:	b003      	add	sp, #12
    df0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df0c:	4616      	mov	r6, r2
    df0e:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    df12:	ea56 0307 	orrs.w	r3, r6, r7
    df16:	d104      	bne.n	df22 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    df18:	2300      	movs	r3, #0
    df1a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    df1c:	f06f 000b 	mvn.w	r0, #11
    df20:	e7ee      	b.n	df00 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    df22:	e9cd 6700 	strd	r6, r7, [sp]
    df26:	4602      	mov	r2, r0
    df28:	4628      	mov	r0, r5
    df2a:	f000 fd89 	bl	ea40 <z_pend_curr>
		if (result == 0) {
    df2e:	2800      	cmp	r0, #0
    df30:	d1ea      	bne.n	df08 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    df32:	4b02      	ldr	r3, [pc, #8]	; (df3c <k_mem_slab_alloc+0x68>)
    df34:	689b      	ldr	r3, [r3, #8]
    df36:	695b      	ldr	r3, [r3, #20]
    df38:	6023      	str	r3, [r4, #0]
		return result;
    df3a:	e7e5      	b.n	df08 <k_mem_slab_alloc+0x34>
    df3c:	20002e78 	.word	0x20002e78

0000df40 <z_thread_monitor_exit>:
	__asm__ volatile(
    df40:	f04f 0320 	mov.w	r3, #32
    df44:	f3ef 8111 	mrs	r1, BASEPRI
    df48:	f383 8812 	msr	BASEPRI_MAX, r3
    df4c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    df50:	4b0a      	ldr	r3, [pc, #40]	; (df7c <z_thread_monitor_exit+0x3c>)
    df52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df54:	4283      	cmp	r3, r0
    df56:	d104      	bne.n	df62 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    df58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    df5a:	4b08      	ldr	r3, [pc, #32]	; (df7c <z_thread_monitor_exit+0x3c>)
    df5c:	629a      	str	r2, [r3, #40]	; 0x28
    df5e:	e007      	b.n	df70 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    df60:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    df62:	b113      	cbz	r3, df6a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    df64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    df66:	4282      	cmp	r2, r0
    df68:	d1fa      	bne.n	df60 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    df6a:	b10b      	cbz	r3, df70 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    df6c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    df6e:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    df70:	f381 8811 	msr	BASEPRI, r1
    df74:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    df78:	4770      	bx	lr
    df7a:	bf00      	nop
    df7c:	20002e78 	.word	0x20002e78

0000df80 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    df80:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    df82:	4604      	mov	r4, r0
    df84:	b140      	cbz	r0, df98 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    df86:	2220      	movs	r2, #32
    df88:	f104 0074 	add.w	r0, r4, #116	; 0x74
    df8c:	f003 fa72 	bl	11474 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    df90:	2000      	movs	r0, #0
    df92:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    df96:	bd10      	pop	{r4, pc}
		thread = _current;
    df98:	4b01      	ldr	r3, [pc, #4]	; (dfa0 <z_impl_k_thread_name_set+0x20>)
    df9a:	689c      	ldr	r4, [r3, #8]
    df9c:	e7f3      	b.n	df86 <z_impl_k_thread_name_set+0x6>
    df9e:	bf00      	nop
    dfa0:	20002e78 	.word	0x20002e78

0000dfa4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    dfa4:	b538      	push	{r3, r4, r5, lr}
    dfa6:	4614      	mov	r4, r2
    dfa8:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    dfaa:	ea54 0305 	orrs.w	r3, r4, r5
    dfae:	d102      	bne.n	dfb6 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    dfb0:	f005 fe3a 	bl	13c28 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    dfb4:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    dfb6:	462b      	mov	r3, r5
    dfb8:	4902      	ldr	r1, [pc, #8]	; (dfc4 <schedule_new_thread+0x20>)
    dfba:	3018      	adds	r0, #24
    dfbc:	f000 ffea 	bl	ef94 <z_add_timeout>
    dfc0:	e7f8      	b.n	dfb4 <schedule_new_thread+0x10>
    dfc2:	bf00      	nop
    dfc4:	00013f85 	.word	0x00013f85

0000dfc8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfcc:	b085      	sub	sp, #20
    dfce:	4604      	mov	r4, r0
    dfd0:	460f      	mov	r7, r1
    dfd2:	4615      	mov	r5, r2
    dfd4:	461e      	mov	r6, r3
    dfd6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    dfda:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    dfde:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    dfe2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    dfe6:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
    dfea:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    dfec:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    dfee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dff0:	2204      	movs	r2, #4
    dff2:	9911      	ldr	r1, [sp, #68]	; 0x44
    dff4:	f005 fe1c 	bl	13c30 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    dff8:	462a      	mov	r2, r5
    dffa:	4639      	mov	r1, r7
    dffc:	4620      	mov	r0, r4
    dffe:	f005 fdf9 	bl	13bf4 <setup_thread_stack>
    e002:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    e004:	f8cd 8008 	str.w	r8, [sp, #8]
    e008:	f8cd 9004 	str.w	r9, [sp, #4]
    e00c:	f8cd a000 	str.w	sl, [sp]
    e010:	4633      	mov	r3, r6
    e012:	4602      	mov	r2, r0
    e014:	4639      	mov	r1, r7
    e016:	4620      	mov	r0, r4
    e018:	f7f6 fa2a 	bl	4470 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    e01c:	2300      	movs	r3, #0
    e01e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    e020:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    e022:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    e026:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    e02a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    e02e:	f04f 0320 	mov.w	r3, #32
    e032:	f3ef 8211 	mrs	r2, BASEPRI
    e036:	f383 8812 	msr	BASEPRI_MAX, r3
    e03a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    e03e:	4b13      	ldr	r3, [pc, #76]	; (e08c <z_setup_new_thread+0xc4>)
    e040:	6a99      	ldr	r1, [r3, #40]	; 0x28
    e042:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    e044:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    e046:	f382 8811 	msr	BASEPRI, r2
    e04a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    e04e:	f1bb 0f00 	cmp.w	fp, #0
    e052:	d013      	beq.n	e07c <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    e054:	221f      	movs	r2, #31
    e056:	4659      	mov	r1, fp
    e058:	f104 0074 	add.w	r0, r4, #116	; 0x74
    e05c:	f003 fa0a 	bl	11474 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    e060:	2300      	movs	r3, #0
    e062:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    e066:	4b09      	ldr	r3, [pc, #36]	; (e08c <z_setup_new_thread+0xc4>)
    e068:	689b      	ldr	r3, [r3, #8]
    e06a:	b15b      	cbz	r3, e084 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    e06c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    e070:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    e074:	4628      	mov	r0, r5
    e076:	b005      	add	sp, #20
    e078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    e07c:	2300      	movs	r3, #0
    e07e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    e082:	e7f0      	b.n	e066 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    e084:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    e088:	e7f4      	b.n	e074 <z_setup_new_thread+0xac>
    e08a:	bf00      	nop
    e08c:	20002e78 	.word	0x20002e78

0000e090 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    e090:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    e094:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    e096:	4c23      	ldr	r4, [pc, #140]	; (e124 <z_init_static_threads+0x94>)
    e098:	4b23      	ldr	r3, [pc, #140]	; (e128 <z_init_static_threads+0x98>)
    e09a:	429c      	cmp	r4, r3
    e09c:	d215      	bcs.n	e0ca <z_init_static_threads+0x3a>
		z_setup_new_thread(
    e09e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e0a0:	9305      	str	r3, [sp, #20]
    e0a2:	6a23      	ldr	r3, [r4, #32]
    e0a4:	9304      	str	r3, [sp, #16]
    e0a6:	69e3      	ldr	r3, [r4, #28]
    e0a8:	9303      	str	r3, [sp, #12]
    e0aa:	69a3      	ldr	r3, [r4, #24]
    e0ac:	9302      	str	r3, [sp, #8]
    e0ae:	6963      	ldr	r3, [r4, #20]
    e0b0:	9301      	str	r3, [sp, #4]
    e0b2:	6923      	ldr	r3, [r4, #16]
    e0b4:	9300      	str	r3, [sp, #0]
    e0b6:	68e3      	ldr	r3, [r4, #12]
    e0b8:	68a2      	ldr	r2, [r4, #8]
    e0ba:	6861      	ldr	r1, [r4, #4]
    e0bc:	6820      	ldr	r0, [r4, #0]
    e0be:	f7ff ff83 	bl	dfc8 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    e0c2:	6823      	ldr	r3, [r4, #0]
    e0c4:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    e0c6:	3430      	adds	r4, #48	; 0x30
    e0c8:	e7e6      	b.n	e098 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    e0ca:	f000 fb71 	bl	e7b0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    e0ce:	4c15      	ldr	r4, [pc, #84]	; (e124 <z_init_static_threads+0x94>)
    e0d0:	e01b      	b.n	e10a <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    e0d2:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    e0d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e0d8:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    e0dc:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    e0e0:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    e0e4:	03d8      	lsls	r0, r3, #15
    e0e6:	f240 35e7 	movw	r5, #999	; 0x3e7
    e0ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e0ee:	2300      	movs	r3, #0
    e0f0:	1940      	adds	r0, r0, r5
    e0f2:	f04f 0500 	mov.w	r5, #0
    e0f6:	eb45 0101 	adc.w	r1, r5, r1
    e0fa:	f7f2 f935 	bl	368 <__aeabi_uldivmod>
    e0fe:	4602      	mov	r2, r0
    e100:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    e102:	4630      	mov	r0, r6
    e104:	f7ff ff4e 	bl	dfa4 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    e108:	3430      	adds	r4, #48	; 0x30
    e10a:	4b07      	ldr	r3, [pc, #28]	; (e128 <z_init_static_threads+0x98>)
    e10c:	429c      	cmp	r4, r3
    e10e:	d204      	bcs.n	e11a <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    e110:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e112:	f1b3 3fff 	cmp.w	r3, #4294967295
    e116:	d0f7      	beq.n	e108 <z_init_static_threads+0x78>
    e118:	e7db      	b.n	e0d2 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    e11a:	f000 fd47 	bl	ebac <k_sched_unlock>
}
    e11e:	b006      	add	sp, #24
    e120:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    e124:	200002e8 	.word	0x200002e8
    e128:	200002e8 	.word	0x200002e8

0000e12c <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    e12c:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    e12e:	f006 f877 	bl	14220 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    e132:	4b04      	ldr	r3, [pc, #16]	; (e144 <pm_save_idle+0x18>)
    e134:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    e136:	f7f5 ff39 	bl	3fac <pm_system_suspend>
    e13a:	b100      	cbz	r0, e13e <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    e13c:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    e13e:	f7f6 f871 	bl	4224 <arch_cpu_idle>
    e142:	e7fb      	b.n	e13c <pm_save_idle+0x10>
    e144:	20002e78 	.word	0x20002e78

0000e148 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    e148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e14c:	b083      	sub	sp, #12
    e14e:	4604      	mov	r4, r0
    e150:	461d      	mov	r5, r3
	__asm__ volatile(
    e152:	f04f 0320 	mov.w	r3, #32
    e156:	f3ef 8711 	mrs	r7, BASEPRI
    e15a:	f383 8812 	msr	BASEPRI_MAX, r3
    e15e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    e162:	68c1      	ldr	r1, [r0, #12]
    e164:	b999      	cbnz	r1, e18e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    e166:	2900      	cmp	r1, #0
    e168:	d14f      	bne.n	e20a <z_impl_k_mutex_lock+0xc2>
    e16a:	4b3a      	ldr	r3, [pc, #232]	; (e254 <z_impl_k_mutex_lock+0x10c>)
    e16c:	689b      	ldr	r3, [r3, #8]
    e16e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    e172:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    e174:	3101      	adds	r1, #1
    e176:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    e178:	4b36      	ldr	r3, [pc, #216]	; (e254 <z_impl_k_mutex_lock+0x10c>)
    e17a:	689b      	ldr	r3, [r3, #8]
    e17c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e17e:	f387 8811 	msr	BASEPRI, r7
    e182:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    e186:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    e188:	b003      	add	sp, #12
    e18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e18e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    e190:	6882      	ldr	r2, [r0, #8]
    e192:	4b30      	ldr	r3, [pc, #192]	; (e254 <z_impl_k_mutex_lock+0x10c>)
    e194:	689b      	ldr	r3, [r3, #8]
    e196:	429a      	cmp	r2, r3
    e198:	d0e5      	beq.n	e166 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    e19a:	ea55 0106 	orrs.w	r1, r5, r6
    e19e:	bf0c      	ite	eq
    e1a0:	f04f 0801 	moveq.w	r8, #1
    e1a4:	f04f 0800 	movne.w	r8, #0
    e1a8:	d031      	beq.n	e20e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    e1aa:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    e1ae:	4649      	mov	r1, r9
    e1b0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    e1b4:	f005 fd7b 	bl	13cae <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    e1b8:	4581      	cmp	r9, r0
    e1ba:	dc2f      	bgt.n	e21c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    e1bc:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    e1c0:	9600      	str	r6, [sp, #0]
    e1c2:	9501      	str	r5, [sp, #4]
    e1c4:	4622      	mov	r2, r4
    e1c6:	4639      	mov	r1, r7
    e1c8:	4823      	ldr	r0, [pc, #140]	; (e258 <z_impl_k_mutex_lock+0x110>)
    e1ca:	f000 fc39 	bl	ea40 <z_pend_curr>
	if (got_mutex == 0) {
    e1ce:	2800      	cmp	r0, #0
    e1d0:	d0da      	beq.n	e188 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    e1d2:	f04f 0320 	mov.w	r3, #32
    e1d6:	f3ef 8511 	mrs	r5, BASEPRI
    e1da:	f383 8812 	msr	BASEPRI_MAX, r3
    e1de:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e1e2:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e1e4:	42a3      	cmp	r3, r4
    e1e6:	d01f      	beq.n	e228 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    e1e8:	b1f3      	cbz	r3, e228 <z_impl_k_mutex_lock+0xe0>
    e1ea:	6921      	ldr	r1, [r4, #16]
    e1ec:	f993 000e 	ldrsb.w	r0, [r3, #14]
    e1f0:	f005 fd5d 	bl	13cae <new_prio_for_inheritance>
    e1f4:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e1f6:	4620      	mov	r0, r4
    e1f8:	f005 fd64 	bl	13cc4 <adjust_owner_prio>
    e1fc:	b9b0      	cbnz	r0, e22c <z_impl_k_mutex_lock+0xe4>
    e1fe:	f1b9 0f00 	cmp.w	r9, #0
    e202:	d015      	beq.n	e230 <z_impl_k_mutex_lock+0xe8>
    e204:	f04f 0801 	mov.w	r8, #1
    e208:	e012      	b.n	e230 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    e20a:	6923      	ldr	r3, [r4, #16]
    e20c:	e7b1      	b.n	e172 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    e20e:	f387 8811 	msr	BASEPRI, r7
    e212:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    e216:	f06f 000f 	mvn.w	r0, #15
    e21a:	e7b5      	b.n	e188 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    e21c:	4601      	mov	r1, r0
    e21e:	4620      	mov	r0, r4
    e220:	f005 fd50 	bl	13cc4 <adjust_owner_prio>
    e224:	4681      	mov	r9, r0
    e226:	e7cb      	b.n	e1c0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    e228:	6921      	ldr	r1, [r4, #16]
    e22a:	e7e4      	b.n	e1f6 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    e22c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    e230:	f1b8 0f00 	cmp.w	r8, #0
    e234:	d106      	bne.n	e244 <z_impl_k_mutex_lock+0xfc>
    e236:	f385 8811 	msr	BASEPRI, r5
    e23a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    e23e:	f06f 000a 	mvn.w	r0, #10
    e242:	e7a1      	b.n	e188 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    e244:	4629      	mov	r1, r5
    e246:	4804      	ldr	r0, [pc, #16]	; (e258 <z_impl_k_mutex_lock+0x110>)
    e248:	f000 fa96 	bl	e778 <z_reschedule>
	return -EAGAIN;
    e24c:	f06f 000a 	mvn.w	r0, #10
    e250:	e79a      	b.n	e188 <z_impl_k_mutex_lock+0x40>
    e252:	bf00      	nop
    e254:	20002e78 	.word	0x20002e78
    e258:	20002ea4 	.word	0x20002ea4

0000e25c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    e25c:	6882      	ldr	r2, [r0, #8]
    e25e:	2a00      	cmp	r2, #0
    e260:	d035      	beq.n	e2ce <z_impl_k_mutex_unlock+0x72>
{
    e262:	b538      	push	{r3, r4, r5, lr}
    e264:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    e266:	4b1d      	ldr	r3, [pc, #116]	; (e2dc <z_impl_k_mutex_unlock+0x80>)
    e268:	689b      	ldr	r3, [r3, #8]
    e26a:	429a      	cmp	r2, r3
    e26c:	d132      	bne.n	e2d4 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    e26e:	7bda      	ldrb	r2, [r3, #15]
    e270:	3a01      	subs	r2, #1
    e272:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    e274:	68c3      	ldr	r3, [r0, #12]
    e276:	2b01      	cmp	r3, #1
    e278:	d905      	bls.n	e286 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    e27a:	3b01      	subs	r3, #1
    e27c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    e27e:	f000 fc95 	bl	ebac <k_sched_unlock>

	return 0;
    e282:	2000      	movs	r0, #0
}
    e284:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    e286:	f04f 0320 	mov.w	r3, #32
    e28a:	f3ef 8511 	mrs	r5, BASEPRI
    e28e:	f383 8812 	msr	BASEPRI_MAX, r3
    e292:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    e296:	6901      	ldr	r1, [r0, #16]
    e298:	f005 fd14 	bl	13cc4 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    e29c:	4620      	mov	r0, r4
    e29e:	f005 ff17 	bl	140d0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    e2a2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    e2a4:	b160      	cbz	r0, e2c0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    e2a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e2aa:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    e2ac:	2300      	movs	r3, #0
    e2ae:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    e2b2:	f005 fe4b 	bl	13f4c <z_ready_thread>
		z_reschedule(&lock, key);
    e2b6:	4629      	mov	r1, r5
    e2b8:	4809      	ldr	r0, [pc, #36]	; (e2e0 <z_impl_k_mutex_unlock+0x84>)
    e2ba:	f000 fa5d 	bl	e778 <z_reschedule>
    e2be:	e7de      	b.n	e27e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    e2c0:	2300      	movs	r3, #0
    e2c2:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    e2c4:	f385 8811 	msr	BASEPRI, r5
    e2c8:	f3bf 8f6f 	isb	sy
    e2cc:	e7d7      	b.n	e27e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    e2ce:	f06f 0015 	mvn.w	r0, #21
}
    e2d2:	4770      	bx	lr
		return -EPERM;
    e2d4:	f04f 30ff 	mov.w	r0, #4294967295
    e2d8:	e7d4      	b.n	e284 <z_impl_k_mutex_unlock+0x28>
    e2da:	bf00      	nop
    e2dc:	20002e78 	.word	0x20002e78
    e2e0:	20002ea4 	.word	0x20002ea4

0000e2e4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    e2e4:	b5d0      	push	{r4, r6, r7, lr}
    e2e6:	b082      	sub	sp, #8
    e2e8:	4601      	mov	r1, r0
    e2ea:	4616      	mov	r6, r2
    e2ec:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e2ee:	4602      	mov	r2, r0
	__asm__ volatile(
    e2f0:	f04f 0320 	mov.w	r3, #32
    e2f4:	f3ef 8411 	mrs	r4, BASEPRI
    e2f8:	f383 8812 	msr	BASEPRI_MAX, r3
    e2fc:	f3bf 8f6f 	isb	sy
    e300:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    e304:	b188      	cbz	r0, e32a <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e306:	6803      	ldr	r3, [r0, #0]
    e308:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    e30c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    e30e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    e310:	4290      	cmp	r0, r2
    e312:	d008      	beq.n	e326 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    e314:	2101      	movs	r1, #1
    e316:	f005 fd55 	bl	13dc4 <z_queue_node_peek>
	__asm__ volatile(
    e31a:	f384 8811 	msr	BASEPRI, r4
    e31e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    e322:	b002      	add	sp, #8
    e324:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
    e326:	604b      	str	r3, [r1, #4]
}
    e328:	e7f4      	b.n	e314 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e32a:	ea56 0307 	orrs.w	r3, r6, r7
    e32e:	d00a      	beq.n	e346 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    e330:	e9cd 6700 	strd	r6, r7, [sp]
    e334:	4621      	mov	r1, r4
    e336:	4610      	mov	r0, r2
    e338:	f000 fb82 	bl	ea40 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    e33c:	b948      	cbnz	r0, e352 <z_impl_k_queue_get+0x6e>
    e33e:	4b06      	ldr	r3, [pc, #24]	; (e358 <z_impl_k_queue_get+0x74>)
    e340:	689b      	ldr	r3, [r3, #8]
    e342:	6958      	ldr	r0, [r3, #20]
    e344:	e7ed      	b.n	e322 <z_impl_k_queue_get+0x3e>
    e346:	f384 8811 	msr	BASEPRI, r4
    e34a:	f3bf 8f6f 	isb	sy
		return NULL;
    e34e:	2000      	movs	r0, #0
    e350:	e7e7      	b.n	e322 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
    e352:	2000      	movs	r0, #0
    e354:	e7e5      	b.n	e322 <z_impl_k_queue_get+0x3e>
    e356:	bf00      	nop
    e358:	20002e78 	.word	0x20002e78

0000e35c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    e35c:	b538      	push	{r3, r4, r5, lr}
    e35e:	4604      	mov	r4, r0
	__asm__ volatile(
    e360:	f04f 0320 	mov.w	r3, #32
    e364:	f3ef 8511 	mrs	r5, BASEPRI
    e368:	f383 8812 	msr	BASEPRI_MAX, r3
    e36c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    e370:	f005 feae 	bl	140d0 <z_unpend_first_thread>

	if (thread != NULL) {
    e374:	b148      	cbz	r0, e38a <z_impl_k_sem_give+0x2e>
    e376:	2200      	movs	r2, #0
    e378:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    e37c:	f005 fde6 	bl	13f4c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    e380:	4629      	mov	r1, r5
    e382:	4807      	ldr	r0, [pc, #28]	; (e3a0 <z_impl_k_sem_give+0x44>)
    e384:	f000 f9f8 	bl	e778 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    e388:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    e38a:	68a3      	ldr	r3, [r4, #8]
    e38c:	68e2      	ldr	r2, [r4, #12]
    e38e:	4293      	cmp	r3, r2
    e390:	d003      	beq.n	e39a <z_impl_k_sem_give+0x3e>
    e392:	2201      	movs	r2, #1
    e394:	4413      	add	r3, r2
    e396:	60a3      	str	r3, [r4, #8]
}
    e398:	e7f2      	b.n	e380 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    e39a:	2200      	movs	r2, #0
    e39c:	e7fa      	b.n	e394 <z_impl_k_sem_give+0x38>
    e39e:	bf00      	nop
    e3a0:	20002ea4 	.word	0x20002ea4

0000e3a4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    e3a4:	b530      	push	{r4, r5, lr}
    e3a6:	b083      	sub	sp, #12
    e3a8:	461d      	mov	r5, r3
    e3aa:	f04f 0320 	mov.w	r3, #32
    e3ae:	f3ef 8111 	mrs	r1, BASEPRI
    e3b2:	f383 8812 	msr	BASEPRI_MAX, r3
    e3b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    e3ba:	6883      	ldr	r3, [r0, #8]
    e3bc:	b143      	cbz	r3, e3d0 <z_impl_k_sem_take+0x2c>
		sem->count--;
    e3be:	3b01      	subs	r3, #1
    e3c0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    e3c2:	f381 8811 	msr	BASEPRI, r1
    e3c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    e3ca:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    e3cc:	b003      	add	sp, #12
    e3ce:	bd30      	pop	{r4, r5, pc}
    e3d0:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e3d2:	ea54 0305 	orrs.w	r3, r4, r5
    e3d6:	d006      	beq.n	e3e6 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    e3d8:	e9cd 4500 	strd	r4, r5, [sp]
    e3dc:	4602      	mov	r2, r0
    e3de:	4805      	ldr	r0, [pc, #20]	; (e3f4 <z_impl_k_sem_take+0x50>)
    e3e0:	f000 fb2e 	bl	ea40 <z_pend_curr>
	return ret;
    e3e4:	e7f2      	b.n	e3cc <z_impl_k_sem_take+0x28>
    e3e6:	f381 8811 	msr	BASEPRI, r1
    e3ea:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    e3ee:	f06f 000f 	mvn.w	r0, #15
    e3f2:	e7eb      	b.n	e3cc <z_impl_k_sem_take+0x28>
    e3f4:	20002ea4 	.word	0x20002ea4

0000e3f8 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3fa:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    e3fc:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    e3fe:	f013 0f02 	tst.w	r3, #2
    e402:	d15b      	bne.n	e4bc <submit_to_queue_locked+0xc4>
    e404:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    e406:	f013 0f04 	tst.w	r3, #4
    e40a:	d15c      	bne.n	e4c6 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    e40c:	680b      	ldr	r3, [r1, #0]
    e40e:	2b00      	cmp	r3, #0
    e410:	d037      	beq.n	e482 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
    e412:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    e414:	f013 0f01 	tst.w	r3, #1
    e418:	d036      	beq.n	e488 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    e41a:	68a3      	ldr	r3, [r4, #8]
    e41c:	602b      	str	r3, [r5, #0]
			ret = 2;
    e41e:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    e420:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    e422:	2e00      	cmp	r6, #0
    e424:	d03e      	beq.n	e4a4 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    e426:	4b29      	ldr	r3, [pc, #164]	; (e4cc <submit_to_queue_locked+0xd4>)
    e428:	689b      	ldr	r3, [r3, #8]
    e42a:	42b3      	cmp	r3, r6
    e42c:	d02e      	beq.n	e48c <submit_to_queue_locked+0x94>
    e42e:	2300      	movs	r3, #0
    e430:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    e432:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    e436:	f3c3 0180 	ubfx	r1, r3, #2, #1
    e43a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    e43e:	f013 0f01 	tst.w	r3, #1
    e442:	d032      	beq.n	e4aa <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
    e444:	b101      	cbz	r1, e448 <submit_to_queue_locked+0x50>
    e446:	b39a      	cbz	r2, e4b0 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
    e448:	b100      	cbz	r0, e44c <submit_to_queue_locked+0x54>
    e44a:	b3a1      	cbz	r1, e4b6 <submit_to_queue_locked+0xbe>
	parent->next = child;
    e44c:	2300      	movs	r3, #0
    e44e:	6023      	str	r3, [r4, #0]
	return list->tail;
    e450:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    e454:	b30b      	cbz	r3, e49a <submit_to_queue_locked+0xa2>
	parent->next = child;
    e456:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e458:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    e45c:	2200      	movs	r2, #0
    e45e:	4611      	mov	r1, r2
    e460:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    e464:	f005 fe70 	bl	14148 <z_sched_wake>
		ret = 1;
    e468:	2001      	movs	r0, #1

		if (rc < 0) {
    e46a:	2800      	cmp	r0, #0
    e46c:	db06      	blt.n	e47c <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
    e46e:	68e3      	ldr	r3, [r4, #12]
    e470:	f043 0304 	orr.w	r3, r3, #4
    e474:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    e476:	682b      	ldr	r3, [r5, #0]
    e478:	60a3      	str	r3, [r4, #8]
    e47a:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    e47c:	2800      	cmp	r0, #0
    e47e:	dc21      	bgt.n	e4c4 <submit_to_queue_locked+0xcc>
    e480:	e01e      	b.n	e4c0 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
    e482:	6883      	ldr	r3, [r0, #8]
    e484:	600b      	str	r3, [r1, #0]
    e486:	e7c4      	b.n	e412 <submit_to_queue_locked+0x1a>
		ret = 1;
    e488:	2701      	movs	r7, #1
    e48a:	e7c9      	b.n	e420 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    e48c:	f005 fbc4 	bl	13c18 <k_is_in_isr>
    e490:	b908      	cbnz	r0, e496 <submit_to_queue_locked+0x9e>
    e492:	2301      	movs	r3, #1
    e494:	e7cc      	b.n	e430 <submit_to_queue_locked+0x38>
    e496:	2300      	movs	r3, #0
    e498:	e7ca      	b.n	e430 <submit_to_queue_locked+0x38>
    e49a:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    e49e:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    e4a2:	e7db      	b.n	e45c <submit_to_queue_locked+0x64>
		return -EINVAL;
    e4a4:	f06f 0015 	mvn.w	r0, #21
    e4a8:	e7df      	b.n	e46a <submit_to_queue_locked+0x72>
		ret = -ENODEV;
    e4aa:	f06f 0012 	mvn.w	r0, #18
    e4ae:	e7dc      	b.n	e46a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    e4b0:	f06f 000f 	mvn.w	r0, #15
    e4b4:	e7d9      	b.n	e46a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    e4b6:	f06f 000f 	mvn.w	r0, #15
    e4ba:	e7d6      	b.n	e46a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    e4bc:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    e4c0:	2300      	movs	r3, #0
    e4c2:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    e4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    e4c6:	2000      	movs	r0, #0
    e4c8:	e7fa      	b.n	e4c0 <submit_to_queue_locked+0xc8>
    e4ca:	bf00      	nop
    e4cc:	20002e78 	.word	0x20002e78

0000e4d0 <finalize_cancel_locked>:
{
    e4d0:	b570      	push	{r4, r5, r6, lr}
    e4d2:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    e4d4:	68c3      	ldr	r3, [r0, #12]
    e4d6:	f023 0302 	bic.w	r3, r3, #2
    e4da:	60c3      	str	r3, [r0, #12]
	return list->head;
    e4dc:	4b19      	ldr	r3, [pc, #100]	; (e544 <finalize_cancel_locked+0x74>)
    e4de:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    e4e0:	b1e8      	cbz	r0, e51e <finalize_cancel_locked+0x4e>
    e4e2:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    e4e4:	b100      	cbz	r0, e4e8 <finalize_cancel_locked+0x18>
	return node->next;
    e4e6:	6804      	ldr	r4, [r0, #0]
    e4e8:	2600      	movs	r6, #0
    e4ea:	e01d      	b.n	e528 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    e4ec:	b15e      	cbz	r6, e506 <finalize_cancel_locked+0x36>
	return node->next;
    e4ee:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    e4f0:	6033      	str	r3, [r6, #0]
	return list->tail;
    e4f2:	4b14      	ldr	r3, [pc, #80]	; (e544 <finalize_cancel_locked+0x74>)
    e4f4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    e4f6:	4298      	cmp	r0, r3
    e4f8:	d00e      	beq.n	e518 <finalize_cancel_locked+0x48>
	parent->next = child;
    e4fa:	2300      	movs	r3, #0
    e4fc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    e500:	f7ff ff2c 	bl	e35c <z_impl_k_sem_give>
}
    e504:	e015      	b.n	e532 <finalize_cancel_locked+0x62>
	return node->next;
    e506:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    e508:	4b0e      	ldr	r3, [pc, #56]	; (e544 <finalize_cancel_locked+0x74>)
    e50a:	601a      	str	r2, [r3, #0]
	return list->tail;
    e50c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    e50e:	4298      	cmp	r0, r3
    e510:	d1f3      	bne.n	e4fa <finalize_cancel_locked+0x2a>
	list->tail = node;
    e512:	4b0c      	ldr	r3, [pc, #48]	; (e544 <finalize_cancel_locked+0x74>)
    e514:	605a      	str	r2, [r3, #4]
}
    e516:	e7f0      	b.n	e4fa <finalize_cancel_locked+0x2a>
	list->tail = node;
    e518:	4b0a      	ldr	r3, [pc, #40]	; (e544 <finalize_cancel_locked+0x74>)
    e51a:	605e      	str	r6, [r3, #4]
}
    e51c:	e7ed      	b.n	e4fa <finalize_cancel_locked+0x2a>
    e51e:	4604      	mov	r4, r0
    e520:	e7e2      	b.n	e4e8 <finalize_cancel_locked+0x18>
    e522:	4623      	mov	r3, r4
    e524:	4620      	mov	r0, r4
    e526:	461c      	mov	r4, r3
    e528:	b150      	cbz	r0, e540 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    e52a:	6843      	ldr	r3, [r0, #4]
    e52c:	42ab      	cmp	r3, r5
    e52e:	d0dd      	beq.n	e4ec <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    e530:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    e532:	2c00      	cmp	r4, #0
    e534:	d0f5      	beq.n	e522 <finalize_cancel_locked+0x52>
    e536:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    e538:	2c00      	cmp	r4, #0
    e53a:	d0f3      	beq.n	e524 <finalize_cancel_locked+0x54>
	return node->next;
    e53c:	6823      	ldr	r3, [r4, #0]
    e53e:	e7f1      	b.n	e524 <finalize_cancel_locked+0x54>
}
    e540:	bd70      	pop	{r4, r5, r6, pc}
    e542:	bf00      	nop
    e544:	20002ea4 	.word	0x20002ea4

0000e548 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    e548:	b5f0      	push	{r4, r5, r6, r7, lr}
    e54a:	b085      	sub	sp, #20
    e54c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    e54e:	e016      	b.n	e57e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    e550:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    e554:	f023 0204 	bic.w	r2, r3, #4
    e558:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    e55c:	f013 0f04 	tst.w	r3, #4
    e560:	d158      	bne.n	e614 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    e562:	2300      	movs	r3, #0
    e564:	9302      	str	r3, [sp, #8]
    e566:	f04f 32ff 	mov.w	r2, #4294967295
    e56a:	f04f 33ff 	mov.w	r3, #4294967295
    e56e:	e9cd 2300 	strd	r2, r3, [sp]
    e572:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    e576:	4631      	mov	r1, r6
    e578:	482e      	ldr	r0, [pc, #184]	; (e634 <work_queue_main+0xec>)
    e57a:	f000 fc97 	bl	eeac <z_sched_wait>
	__asm__ volatile(
    e57e:	f04f 0320 	mov.w	r3, #32
    e582:	f3ef 8611 	mrs	r6, BASEPRI
    e586:	f383 8812 	msr	BASEPRI_MAX, r3
    e58a:	f3bf 8f6f 	isb	sy
	return list->head;
    e58e:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    e592:	2c00      	cmp	r4, #0
    e594:	d0dc      	beq.n	e550 <work_queue_main+0x8>
	return node->next;
    e596:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    e598:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    e59c:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e5a0:	4294      	cmp	r4, r2
    e5a2:	d034      	beq.n	e60e <work_queue_main+0xc6>
	*flagp |= BIT(bit);
    e5a4:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    e5a8:	f043 0302 	orr.w	r3, r3, #2
    e5ac:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    e5b0:	68e3      	ldr	r3, [r4, #12]
    e5b2:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    e5b6:	f023 0304 	bic.w	r3, r3, #4
    e5ba:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    e5bc:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    e5be:	2c00      	cmp	r4, #0
    e5c0:	d0cf      	beq.n	e562 <work_queue_main+0x1a>
	__asm__ volatile(
    e5c2:	f386 8811 	msr	BASEPRI, r6
    e5c6:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    e5ca:	4620      	mov	r0, r4
    e5cc:	4798      	blx	r3
	__asm__ volatile(
    e5ce:	f04f 0320 	mov.w	r3, #32
    e5d2:	f3ef 8611 	mrs	r6, BASEPRI
    e5d6:	f383 8812 	msr	BASEPRI_MAX, r3
    e5da:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    e5de:	68e3      	ldr	r3, [r4, #12]
    e5e0:	f023 0301 	bic.w	r3, r3, #1
    e5e4:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    e5e6:	f013 0f02 	tst.w	r3, #2
    e5ea:	d11e      	bne.n	e62a <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
    e5ec:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    e5f0:	f023 0302 	bic.w	r3, r3, #2
    e5f4:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    e5f8:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    e5fc:	f386 8811 	msr	BASEPRI, r6
    e600:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    e604:	2b00      	cmp	r3, #0
    e606:	d1ba      	bne.n	e57e <work_queue_main+0x36>
	z_impl_k_yield();
    e608:	f000 fb52 	bl	ecb0 <z_impl_k_yield>
}
    e60c:	e7b7      	b.n	e57e <work_queue_main+0x36>
	list->tail = node;
    e60e:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    e612:	e7c7      	b.n	e5a4 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    e614:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    e618:	2200      	movs	r2, #0
    e61a:	2101      	movs	r1, #1
    e61c:	4638      	mov	r0, r7
    e61e:	f005 fd93 	bl	14148 <z_sched_wake>
    e622:	2800      	cmp	r0, #0
    e624:	d1f8      	bne.n	e618 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
    e626:	2300      	movs	r3, #0
    e628:	e7c9      	b.n	e5be <work_queue_main+0x76>
				finalize_cancel_locked(work);
    e62a:	4620      	mov	r0, r4
    e62c:	f7ff ff50 	bl	e4d0 <finalize_cancel_locked>
    e630:	e7dc      	b.n	e5ec <work_queue_main+0xa4>
    e632:	bf00      	nop
    e634:	20002ea4 	.word	0x20002ea4

0000e638 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    e638:	b5f0      	push	{r4, r5, r6, r7, lr}
    e63a:	b089      	sub	sp, #36	; 0x24
    e63c:	4604      	mov	r4, r0
    e63e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    e640:	2000      	movs	r0, #0
    e642:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    e646:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    e64a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    e64e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    e652:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    e656:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    e65a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    e65e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    e662:	b1fd      	cbz	r5, e6a4 <k_work_queue_start+0x6c>
    e664:	7928      	ldrb	r0, [r5, #4]
    e666:	b9f8      	cbnz	r0, e6a8 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    e668:	2001      	movs	r0, #1
	*flagp = flags;
    e66a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e66e:	f04f 36ff 	mov.w	r6, #4294967295
    e672:	f04f 37ff 	mov.w	r7, #4294967295
    e676:	e9cd 6706 	strd	r6, r7, [sp, #24]
    e67a:	2000      	movs	r0, #0
    e67c:	9004      	str	r0, [sp, #16]
    e67e:	9303      	str	r3, [sp, #12]
    e680:	9002      	str	r0, [sp, #8]
    e682:	9001      	str	r0, [sp, #4]
    e684:	9400      	str	r4, [sp, #0]
    e686:	4b0a      	ldr	r3, [pc, #40]	; (e6b0 <k_work_queue_start+0x78>)
    e688:	4620      	mov	r0, r4
    e68a:	f005 fadc 	bl	13c46 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    e68e:	b125      	cbz	r5, e69a <k_work_queue_start+0x62>
    e690:	6829      	ldr	r1, [r5, #0]
    e692:	b111      	cbz	r1, e69a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    e694:	4620      	mov	r0, r4
    e696:	f7ff fc73 	bl	df80 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    e69a:	4620      	mov	r0, r4
    e69c:	f005 fac4 	bl	13c28 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    e6a0:	b009      	add	sp, #36	; 0x24
    e6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    e6a4:	2001      	movs	r0, #1
    e6a6:	e7e0      	b.n	e66a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    e6a8:	f240 1001 	movw	r0, #257	; 0x101
    e6ac:	e7dd      	b.n	e66a <k_work_queue_start+0x32>
    e6ae:	bf00      	nop
    e6b0:	0000e549 	.word	0x0000e549

0000e6b4 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    e6b4:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
    e6ba:	bf08      	it	eq
    e6bc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    e6c0:	d100      	bne.n	e6c4 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    e6c2:	bd38      	pop	{r3, r4, r5, pc}
    e6c4:	4902      	ldr	r1, [pc, #8]	; (e6d0 <add_thread_timeout+0x1c>)
    e6c6:	3018      	adds	r0, #24
    e6c8:	f000 fc64 	bl	ef94 <z_add_timeout>
    e6cc:	e7f9      	b.n	e6c2 <add_thread_timeout+0xe>
    e6ce:	bf00      	nop
    e6d0:	00013f85 	.word	0x00013f85

0000e6d4 <z_reset_time_slice>:
{
    e6d4:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    e6d6:	4b08      	ldr	r3, [pc, #32]	; (e6f8 <z_reset_time_slice+0x24>)
    e6d8:	681b      	ldr	r3, [r3, #0]
    e6da:	b903      	cbnz	r3, e6de <z_reset_time_slice+0xa>
}
    e6dc:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    e6de:	f7fa f915 	bl	890c <sys_clock_elapsed>
    e6e2:	4603      	mov	r3, r0
    e6e4:	4a04      	ldr	r2, [pc, #16]	; (e6f8 <z_reset_time_slice+0x24>)
    e6e6:	6810      	ldr	r0, [r2, #0]
    e6e8:	4403      	add	r3, r0
    e6ea:	4a04      	ldr	r2, [pc, #16]	; (e6fc <z_reset_time_slice+0x28>)
    e6ec:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    e6ee:	2100      	movs	r1, #0
    e6f0:	f005 fdac 	bl	1424c <z_set_timeout_expiry>
}
    e6f4:	e7f2      	b.n	e6dc <z_reset_time_slice+0x8>
    e6f6:	bf00      	nop
    e6f8:	20002eb4 	.word	0x20002eb4
    e6fc:	20002e78 	.word	0x20002e78

0000e700 <k_sched_time_slice_set>:
{
    e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e704:	4606      	mov	r6, r0
    e706:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    e708:	2300      	movs	r3, #0
	__asm__ volatile(
    e70a:	f04f 0220 	mov.w	r2, #32
    e70e:	f3ef 8711 	mrs	r7, BASEPRI
    e712:	f382 8812 	msr	BASEPRI_MAX, r2
    e716:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    e71a:	e009      	b.n	e730 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    e71c:	4b13      	ldr	r3, [pc, #76]	; (e76c <k_sched_time_slice_set+0x6c>)
    e71e:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    e722:	f7ff ffd7 	bl	e6d4 <z_reset_time_slice>
	__asm__ volatile(
    e726:	f387 8811 	msr	BASEPRI, r7
    e72a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e72e:	2301      	movs	r3, #1
    e730:	b9cb      	cbnz	r3, e766 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    e732:	2300      	movs	r3, #0
    e734:	4a0e      	ldr	r2, [pc, #56]	; (e770 <k_sched_time_slice_set+0x70>)
    e736:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    e738:	0c75      	lsrs	r5, r6, #17
    e73a:	03f4      	lsls	r4, r6, #15
    e73c:	f240 30e7 	movw	r0, #999	; 0x3e7
    e740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e744:	2300      	movs	r3, #0
    e746:	1820      	adds	r0, r4, r0
    e748:	f04f 0100 	mov.w	r1, #0
    e74c:	eb45 0101 	adc.w	r1, r5, r1
    e750:	f7f1 fe0a 	bl	368 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    e754:	4b07      	ldr	r3, [pc, #28]	; (e774 <k_sched_time_slice_set+0x74>)
    e756:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    e758:	2e00      	cmp	r6, #0
    e75a:	dddf      	ble.n	e71c <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    e75c:	2802      	cmp	r0, #2
    e75e:	bfb8      	it	lt
    e760:	2002      	movlt	r0, #2
    e762:	6018      	str	r0, [r3, #0]
    e764:	e7da      	b.n	e71c <k_sched_time_slice_set+0x1c>
}
    e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e76a:	bf00      	nop
    e76c:	20002eb0 	.word	0x20002eb0
    e770:	20002e78 	.word	0x20002e78
    e774:	20002eb4 	.word	0x20002eb4

0000e778 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    e778:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    e77a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e77c:	b921      	cbnz	r1, e788 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e77e:	f3ef 8305 	mrs	r3, IPSR
    e782:	b913      	cbnz	r3, e78a <z_reschedule+0x12>
    e784:	2101      	movs	r1, #1
    e786:	e000      	b.n	e78a <z_reschedule+0x12>
    e788:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    e78a:	f011 0f01 	tst.w	r1, #1
    e78e:	d007      	beq.n	e7a0 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    e790:	4b06      	ldr	r3, [pc, #24]	; (e7ac <z_reschedule+0x34>)
    e792:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    e794:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    e796:	429a      	cmp	r2, r3
    e798:	d002      	beq.n	e7a0 <z_reschedule+0x28>
	ret = arch_swap(key);
    e79a:	f7f5 fe11 	bl	43c0 <arch_swap>
		z_swap(lock, key);
    e79e:	e003      	b.n	e7a8 <z_reschedule+0x30>
    e7a0:	f380 8811 	msr	BASEPRI, r0
    e7a4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    e7a8:	bd08      	pop	{r3, pc}
    e7aa:	bf00      	nop
    e7ac:	20002e78 	.word	0x20002e78

0000e7b0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    e7b0:	2300      	movs	r3, #0
	__asm__ volatile(
    e7b2:	f04f 0220 	mov.w	r2, #32
    e7b6:	f3ef 8111 	mrs	r1, BASEPRI
    e7ba:	f382 8812 	msr	BASEPRI_MAX, r2
    e7be:	f3bf 8f6f 	isb	sy
    e7c2:	b953      	cbnz	r3, e7da <k_sched_lock+0x2a>
	--_current->base.sched_locked;
    e7c4:	4b05      	ldr	r3, [pc, #20]	; (e7dc <k_sched_lock+0x2c>)
    e7c6:	689a      	ldr	r2, [r3, #8]
    e7c8:	7bd3      	ldrb	r3, [r2, #15]
    e7ca:	3b01      	subs	r3, #1
    e7cc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    e7ce:	f381 8811 	msr	BASEPRI, r1
    e7d2:	f3bf 8f6f 	isb	sy
    e7d6:	2301      	movs	r3, #1
    e7d8:	e7f3      	b.n	e7c2 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    e7da:	4770      	bx	lr
    e7dc:	20002e78 	.word	0x20002e78

0000e7e0 <update_cache>:
{
    e7e0:	b538      	push	{r3, r4, r5, lr}
    e7e2:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    e7e4:	480f      	ldr	r0, [pc, #60]	; (e824 <update_cache+0x44>)
    e7e6:	f005 fbaa 	bl	13f3e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    e7ea:	4605      	mov	r5, r0
    e7ec:	b170      	cbz	r0, e80c <update_cache+0x2c>
	if (preempt_ok != 0) {
    e7ee:	b984      	cbnz	r4, e812 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    e7f0:	4b0d      	ldr	r3, [pc, #52]	; (e828 <update_cache+0x48>)
    e7f2:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    e7f4:	7b5a      	ldrb	r2, [r3, #13]
    e7f6:	f012 0f1f 	tst.w	r2, #31
    e7fa:	d10a      	bne.n	e812 <update_cache+0x32>
	return node->next != NULL;
    e7fc:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    e7fe:	b942      	cbnz	r2, e812 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    e800:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    e802:	2a7f      	cmp	r2, #127	; 0x7f
    e804:	d905      	bls.n	e812 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    e806:	4a08      	ldr	r2, [pc, #32]	; (e828 <update_cache+0x48>)
    e808:	61d3      	str	r3, [r2, #28]
    e80a:	e00a      	b.n	e822 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    e80c:	4b06      	ldr	r3, [pc, #24]	; (e828 <update_cache+0x48>)
    e80e:	68dd      	ldr	r5, [r3, #12]
    e810:	e7ed      	b.n	e7ee <update_cache+0xe>
		if (thread != _current) {
    e812:	4b05      	ldr	r3, [pc, #20]	; (e828 <update_cache+0x48>)
    e814:	689b      	ldr	r3, [r3, #8]
    e816:	42ab      	cmp	r3, r5
    e818:	d001      	beq.n	e81e <update_cache+0x3e>
			z_reset_time_slice();
    e81a:	f7ff ff5b 	bl	e6d4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    e81e:	4b02      	ldr	r3, [pc, #8]	; (e828 <update_cache+0x48>)
    e820:	61dd      	str	r5, [r3, #28]
}
    e822:	bd38      	pop	{r3, r4, r5, pc}
    e824:	20002e98 	.word	0x20002e98
    e828:	20002e78 	.word	0x20002e78

0000e82c <move_thread_to_end_of_prio_q>:
{
    e82c:	b538      	push	{r3, r4, r5, lr}
    e82e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    e830:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    e832:	f990 300d 	ldrsb.w	r3, [r0, #13]
    e836:	2b00      	cmp	r3, #0
    e838:	db28      	blt.n	e88c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    e83a:	7b6b      	ldrb	r3, [r5, #13]
    e83c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e840:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    e842:	4b1a      	ldr	r3, [pc, #104]	; (e8ac <move_thread_to_end_of_prio_q+0x80>)
    e844:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e848:	429c      	cmp	r4, r3
    e84a:	d02d      	beq.n	e8a8 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e84c:	b16c      	cbz	r4, e86a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e84e:	4621      	mov	r1, r4
    e850:	4628      	mov	r0, r5
    e852:	f005 fb0b 	bl	13e6c <z_sched_prio_cmp>
    e856:	2800      	cmp	r0, #0
    e858:	dc20      	bgt.n	e89c <move_thread_to_end_of_prio_q+0x70>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e85a:	b134      	cbz	r4, e86a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    e85c:	4b13      	ldr	r3, [pc, #76]	; (e8ac <move_thread_to_end_of_prio_q+0x80>)
    e85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e860:	429c      	cmp	r4, r3
    e862:	d002      	beq.n	e86a <move_thread_to_end_of_prio_q+0x3e>
    e864:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e866:	2c00      	cmp	r4, #0
    e868:	d1f0      	bne.n	e84c <move_thread_to_end_of_prio_q+0x20>
	sys_dnode_t *const tail = list->tail;
    e86a:	4b10      	ldr	r3, [pc, #64]	; (e8ac <move_thread_to_end_of_prio_q+0x80>)
    e86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    e86e:	f103 0120 	add.w	r1, r3, #32
    e872:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    e874:	606a      	str	r2, [r5, #4]
	tail->next = node;
    e876:	6015      	str	r5, [r2, #0]
	list->tail = node;
    e878:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    e87a:	4b0c      	ldr	r3, [pc, #48]	; (e8ac <move_thread_to_end_of_prio_q+0x80>)
    e87c:	6898      	ldr	r0, [r3, #8]
    e87e:	42a8      	cmp	r0, r5
    e880:	bf14      	ite	ne
    e882:	2000      	movne	r0, #0
    e884:	2001      	moveq	r0, #1
    e886:	f7ff ffab 	bl	e7e0 <update_cache>
}
    e88a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e88c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e890:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    e892:	4601      	mov	r1, r0
    e894:	4806      	ldr	r0, [pc, #24]	; (e8b0 <move_thread_to_end_of_prio_q+0x84>)
    e896:	f005 fb27 	bl	13ee8 <z_priq_dumb_remove>
}
    e89a:	e7ce      	b.n	e83a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    e89c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    e89e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e8a0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e8a2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e8a4:	6065      	str	r5, [r4, #4]
}
    e8a6:	e7e8      	b.n	e87a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e8a8:	2400      	movs	r4, #0
    e8aa:	e7cf      	b.n	e84c <move_thread_to_end_of_prio_q+0x20>
    e8ac:	20002e78 	.word	0x20002e78
    e8b0:	20002e98 	.word	0x20002e98

0000e8b4 <z_time_slice>:
{
    e8b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    e8b6:	f04f 0320 	mov.w	r3, #32
    e8ba:	f3ef 8411 	mrs	r4, BASEPRI
    e8be:	f383 8812 	msr	BASEPRI_MAX, r3
    e8c2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    e8c6:	4b1c      	ldr	r3, [pc, #112]	; (e938 <z_time_slice+0x84>)
    e8c8:	689b      	ldr	r3, [r3, #8]
    e8ca:	4a1c      	ldr	r2, [pc, #112]	; (e93c <z_time_slice+0x88>)
    e8cc:	6812      	ldr	r2, [r2, #0]
    e8ce:	4293      	cmp	r3, r2
    e8d0:	d01d      	beq.n	e90e <z_time_slice+0x5a>
	pending_current = NULL;
    e8d2:	4a1a      	ldr	r2, [pc, #104]	; (e93c <z_time_slice+0x88>)
    e8d4:	2100      	movs	r1, #0
    e8d6:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    e8d8:	4a19      	ldr	r2, [pc, #100]	; (e940 <z_time_slice+0x8c>)
    e8da:	6812      	ldr	r2, [r2, #0]
    e8dc:	b322      	cbz	r2, e928 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    e8de:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    e8e0:	2a7f      	cmp	r2, #127	; 0x7f
    e8e2:	d821      	bhi.n	e928 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    e8e4:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    e8e6:	f012 0f1f 	tst.w	r2, #31
    e8ea:	d11d      	bne.n	e928 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    e8ec:	f993 100e 	ldrsb.w	r1, [r3, #14]
    e8f0:	4a14      	ldr	r2, [pc, #80]	; (e944 <z_time_slice+0x90>)
    e8f2:	6812      	ldr	r2, [r2, #0]
    e8f4:	4291      	cmp	r1, r2
    e8f6:	db17      	blt.n	e928 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    e8f8:	4a13      	ldr	r2, [pc, #76]	; (e948 <z_time_slice+0x94>)
    e8fa:	4293      	cmp	r3, r2
    e8fc:	d014      	beq.n	e928 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    e8fe:	4a0e      	ldr	r2, [pc, #56]	; (e938 <z_time_slice+0x84>)
    e900:	6912      	ldr	r2, [r2, #16]
    e902:	4282      	cmp	r2, r0
    e904:	dd0a      	ble.n	e91c <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    e906:	1a10      	subs	r0, r2, r0
    e908:	4b0b      	ldr	r3, [pc, #44]	; (e938 <z_time_slice+0x84>)
    e90a:	6118      	str	r0, [r3, #16]
    e90c:	e00f      	b.n	e92e <z_time_slice+0x7a>
		z_reset_time_slice();
    e90e:	f7ff fee1 	bl	e6d4 <z_reset_time_slice>
	__asm__ volatile(
    e912:	f384 8811 	msr	BASEPRI, r4
    e916:	f3bf 8f6f 	isb	sy
		return;
    e91a:	e00c      	b.n	e936 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    e91c:	4618      	mov	r0, r3
    e91e:	f7ff ff85 	bl	e82c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    e922:	f7ff fed7 	bl	e6d4 <z_reset_time_slice>
    e926:	e002      	b.n	e92e <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    e928:	4b03      	ldr	r3, [pc, #12]	; (e938 <z_time_slice+0x84>)
    e92a:	2200      	movs	r2, #0
    e92c:	611a      	str	r2, [r3, #16]
    e92e:	f384 8811 	msr	BASEPRI, r4
    e932:	f3bf 8f6f 	isb	sy
}
    e936:	bd10      	pop	{r4, pc}
    e938:	20002e78 	.word	0x20002e78
    e93c:	20002eac 	.word	0x20002eac
    e940:	20002eb4 	.word	0x20002eb4
    e944:	20002eb0 	.word	0x20002eb0
    e948:	20000788 	.word	0x20000788

0000e94c <ready_thread>:
{
    e94c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    e94e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    e950:	f990 200d 	ldrsb.w	r2, [r0, #13]
    e954:	2a00      	cmp	r2, #0
    e956:	db2d      	blt.n	e9b4 <ready_thread+0x68>
    e958:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e95a:	f013 0f1f 	tst.w	r3, #31
    e95e:	d105      	bne.n	e96c <ready_thread+0x20>
	return node->next != NULL;
    e960:	6982      	ldr	r2, [r0, #24]
    e962:	b10a      	cbz	r2, e968 <ready_thread+0x1c>
    e964:	2200      	movs	r2, #0
    e966:	e002      	b.n	e96e <ready_thread+0x22>
    e968:	2201      	movs	r2, #1
    e96a:	e000      	b.n	e96e <ready_thread+0x22>
    e96c:	2200      	movs	r2, #0
    e96e:	b30a      	cbz	r2, e9b4 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    e970:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e974:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    e976:	4b14      	ldr	r3, [pc, #80]	; (e9c8 <ready_thread+0x7c>)
    e978:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e97c:	429d      	cmp	r5, r3
    e97e:	d020      	beq.n	e9c2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e980:	b16d      	cbz	r5, e99e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e982:	4629      	mov	r1, r5
    e984:	4620      	mov	r0, r4
    e986:	f005 fa71 	bl	13e6c <z_sched_prio_cmp>
    e98a:	2800      	cmp	r0, #0
    e98c:	dc13      	bgt.n	e9b6 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e98e:	b135      	cbz	r5, e99e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    e990:	4b0d      	ldr	r3, [pc, #52]	; (e9c8 <ready_thread+0x7c>)
    e992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e994:	429d      	cmp	r5, r3
    e996:	d002      	beq.n	e99e <ready_thread+0x52>
    e998:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e99a:	2d00      	cmp	r5, #0
    e99c:	d1f0      	bne.n	e980 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    e99e:	4b0a      	ldr	r3, [pc, #40]	; (e9c8 <ready_thread+0x7c>)
    e9a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    e9a2:	f103 0120 	add.w	r1, r3, #32
    e9a6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    e9a8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    e9aa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    e9ac:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    e9ae:	2000      	movs	r0, #0
    e9b0:	f7ff ff16 	bl	e7e0 <update_cache>
}
    e9b4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    e9b6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    e9b8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    e9ba:	6025      	str	r5, [r4, #0]
	prev->next = node;
    e9bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    e9be:	606c      	str	r4, [r5, #4]
}
    e9c0:	e7f5      	b.n	e9ae <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e9c2:	2500      	movs	r5, #0
    e9c4:	e7dc      	b.n	e980 <ready_thread+0x34>
    e9c6:	bf00      	nop
    e9c8:	20002e78 	.word	0x20002e78

0000e9cc <z_sched_start>:
{
    e9cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    e9ce:	f04f 0320 	mov.w	r3, #32
    e9d2:	f3ef 8411 	mrs	r4, BASEPRI
    e9d6:	f383 8812 	msr	BASEPRI_MAX, r3
    e9da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    e9de:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    e9e0:	f013 0f04 	tst.w	r3, #4
    e9e4:	d104      	bne.n	e9f0 <z_sched_start+0x24>
	__asm__ volatile(
    e9e6:	f384 8811 	msr	BASEPRI, r4
    e9ea:	f3bf 8f6f 	isb	sy
}
    e9ee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e9f0:	f023 0304 	bic.w	r3, r3, #4
    e9f4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    e9f6:	f7ff ffa9 	bl	e94c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    e9fa:	4621      	mov	r1, r4
    e9fc:	4801      	ldr	r0, [pc, #4]	; (ea04 <z_sched_start+0x38>)
    e9fe:	f7ff febb 	bl	e778 <z_reschedule>
    ea02:	e7f4      	b.n	e9ee <z_sched_start+0x22>
    ea04:	20002eb0 	.word	0x20002eb0

0000ea08 <unready_thread>:
{
    ea08:	b510      	push	{r4, lr}
    ea0a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    ea0c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    ea0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ea12:	2b00      	cmp	r3, #0
    ea14:	db08      	blt.n	ea28 <unready_thread+0x20>
	update_cache(thread == _current);
    ea16:	4b08      	ldr	r3, [pc, #32]	; (ea38 <unready_thread+0x30>)
    ea18:	6898      	ldr	r0, [r3, #8]
    ea1a:	42a0      	cmp	r0, r4
    ea1c:	bf14      	ite	ne
    ea1e:	2000      	movne	r0, #0
    ea20:	2001      	moveq	r0, #1
    ea22:	f7ff fedd 	bl	e7e0 <update_cache>
}
    ea26:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ea28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ea2c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    ea2e:	4601      	mov	r1, r0
    ea30:	4802      	ldr	r0, [pc, #8]	; (ea3c <unready_thread+0x34>)
    ea32:	f005 fa59 	bl	13ee8 <z_priq_dumb_remove>
}
    ea36:	e7ee      	b.n	ea16 <unready_thread+0xe>
    ea38:	20002e78 	.word	0x20002e78
    ea3c:	20002e98 	.word	0x20002e98

0000ea40 <z_pend_curr>:
{
    ea40:	b510      	push	{r4, lr}
    ea42:	460c      	mov	r4, r1
    ea44:	4611      	mov	r1, r2
	pending_current = _current;
    ea46:	4b06      	ldr	r3, [pc, #24]	; (ea60 <z_pend_curr+0x20>)
    ea48:	6898      	ldr	r0, [r3, #8]
    ea4a:	4b06      	ldr	r3, [pc, #24]	; (ea64 <z_pend_curr+0x24>)
    ea4c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    ea4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ea52:	f005 faf5 	bl	14040 <pend>
    ea56:	4620      	mov	r0, r4
    ea58:	f7f5 fcb2 	bl	43c0 <arch_swap>
}
    ea5c:	bd10      	pop	{r4, pc}
    ea5e:	bf00      	nop
    ea60:	20002e78 	.word	0x20002e78
    ea64:	20002eac 	.word	0x20002eac

0000ea68 <z_set_prio>:
{
    ea68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ea6c:	4604      	mov	r4, r0
    ea6e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    ea70:	2300      	movs	r3, #0
	__asm__ volatile(
    ea72:	f04f 0220 	mov.w	r2, #32
    ea76:	f3ef 8611 	mrs	r6, BASEPRI
    ea7a:	f382 8812 	msr	BASEPRI_MAX, r2
    ea7e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    ea82:	4698      	mov	r8, r3
    ea84:	e008      	b.n	ea98 <z_set_prio+0x30>
		if (need_sched) {
    ea86:	f012 0801 	ands.w	r8, r2, #1
    ea8a:	d111      	bne.n	eab0 <z_set_prio+0x48>
			thread->base.prio = prio;
    ea8c:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    ea8e:	f386 8811 	msr	BASEPRI, r6
    ea92:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ea96:	2301      	movs	r3, #1
    ea98:	461a      	mov	r2, r3
    ea9a:	2b00      	cmp	r3, #0
    ea9c:	d13d      	bne.n	eb1a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    ea9e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    eaa0:	f013 0f1f 	tst.w	r3, #31
    eaa4:	d1ef      	bne.n	ea86 <z_set_prio+0x1e>
	return node->next != NULL;
    eaa6:	69a1      	ldr	r1, [r4, #24]
    eaa8:	2900      	cmp	r1, #0
    eaaa:	d1ec      	bne.n	ea86 <z_set_prio+0x1e>
    eaac:	2201      	movs	r2, #1
    eaae:	e7ea      	b.n	ea86 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    eab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    eab4:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    eab6:	f8df 906c 	ldr.w	r9, [pc, #108]	; eb24 <z_set_prio+0xbc>
    eaba:	4621      	mov	r1, r4
    eabc:	4648      	mov	r0, r9
    eabe:	f005 fa13 	bl	13ee8 <z_priq_dumb_remove>
				thread->base.prio = prio;
    eac2:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    eac4:	7b63      	ldrb	r3, [r4, #13]
    eac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    eaca:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    eacc:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ead0:	454d      	cmp	r5, r9
    ead2:	d020      	beq.n	eb16 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ead4:	b16d      	cbz	r5, eaf2 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ead6:	4629      	mov	r1, r5
    ead8:	4620      	mov	r0, r4
    eada:	f005 f9c7 	bl	13e6c <z_sched_prio_cmp>
    eade:	2800      	cmp	r0, #0
    eae0:	dc13      	bgt.n	eb0a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    eae2:	b135      	cbz	r5, eaf2 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    eae4:	4b0e      	ldr	r3, [pc, #56]	; (eb20 <z_set_prio+0xb8>)
    eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eae8:	429d      	cmp	r5, r3
    eaea:	d002      	beq.n	eaf2 <z_set_prio+0x8a>
    eaec:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eaee:	2d00      	cmp	r5, #0
    eaf0:	d1f0      	bne.n	ead4 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    eaf2:	4b0b      	ldr	r3, [pc, #44]	; (eb20 <z_set_prio+0xb8>)
    eaf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    eaf6:	f103 0120 	add.w	r1, r3, #32
    eafa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    eafc:	6062      	str	r2, [r4, #4]
	tail->next = node;
    eafe:	6014      	str	r4, [r2, #0]
	list->tail = node;
    eb00:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    eb02:	2001      	movs	r0, #1
    eb04:	f7ff fe6c 	bl	e7e0 <update_cache>
    eb08:	e7c1      	b.n	ea8e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    eb0a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    eb0c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    eb0e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    eb10:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    eb12:	606c      	str	r4, [r5, #4]
}
    eb14:	e7f5      	b.n	eb02 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eb16:	2500      	movs	r5, #0
    eb18:	e7dc      	b.n	ead4 <z_set_prio+0x6c>
}
    eb1a:	4640      	mov	r0, r8
    eb1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eb20:	20002e78 	.word	0x20002e78
    eb24:	20002e98 	.word	0x20002e98

0000eb28 <z_impl_k_thread_suspend>:
{
    eb28:	b538      	push	{r3, r4, r5, lr}
    eb2a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    eb2c:	3018      	adds	r0, #24
    eb2e:	f005 fb59 	bl	141e4 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    eb32:	2300      	movs	r3, #0
	__asm__ volatile(
    eb34:	f04f 0220 	mov.w	r2, #32
    eb38:	f3ef 8511 	mrs	r5, BASEPRI
    eb3c:	f382 8812 	msr	BASEPRI_MAX, r2
    eb40:	f3bf 8f6f 	isb	sy
    eb44:	e010      	b.n	eb68 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    eb46:	7b63      	ldrb	r3, [r4, #13]
    eb48:	f043 0310 	orr.w	r3, r3, #16
    eb4c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    eb4e:	4b15      	ldr	r3, [pc, #84]	; (eba4 <z_impl_k_thread_suspend+0x7c>)
    eb50:	6898      	ldr	r0, [r3, #8]
    eb52:	42a0      	cmp	r0, r4
    eb54:	bf14      	ite	ne
    eb56:	2000      	movne	r0, #0
    eb58:	2001      	moveq	r0, #1
    eb5a:	f7ff fe41 	bl	e7e0 <update_cache>
	__asm__ volatile(
    eb5e:	f385 8811 	msr	BASEPRI, r5
    eb62:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    eb66:	2301      	movs	r3, #1
    eb68:	b963      	cbnz	r3, eb84 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    eb6a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    eb6c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    eb70:	2b00      	cmp	r3, #0
    eb72:	dae8      	bge.n	eb46 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    eb74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    eb78:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    eb7a:	4621      	mov	r1, r4
    eb7c:	480a      	ldr	r0, [pc, #40]	; (eba8 <z_impl_k_thread_suspend+0x80>)
    eb7e:	f005 f9b3 	bl	13ee8 <z_priq_dumb_remove>
}
    eb82:	e7e0      	b.n	eb46 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    eb84:	4b07      	ldr	r3, [pc, #28]	; (eba4 <z_impl_k_thread_suspend+0x7c>)
    eb86:	689b      	ldr	r3, [r3, #8]
    eb88:	42a3      	cmp	r3, r4
    eb8a:	d000      	beq.n	eb8e <z_impl_k_thread_suspend+0x66>
}
    eb8c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    eb8e:	f04f 0320 	mov.w	r3, #32
    eb92:	f3ef 8011 	mrs	r0, BASEPRI
    eb96:	f383 8812 	msr	BASEPRI_MAX, r3
    eb9a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    eb9e:	f005 f98e 	bl	13ebe <z_reschedule_irqlock>
    eba2:	e7f3      	b.n	eb8c <z_impl_k_thread_suspend+0x64>
    eba4:	20002e78 	.word	0x20002e78
    eba8:	20002e98 	.word	0x20002e98

0000ebac <k_sched_unlock>:

void k_sched_unlock(void)
{
    ebac:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    ebae:	2300      	movs	r3, #0
    ebb0:	f04f 0220 	mov.w	r2, #32
    ebb4:	f3ef 8411 	mrs	r4, BASEPRI
    ebb8:	f382 8812 	msr	BASEPRI_MAX, r2
    ebbc:	f3bf 8f6f 	isb	sy
    ebc0:	b96b      	cbnz	r3, ebde <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    ebc2:	4b0c      	ldr	r3, [pc, #48]	; (ebf4 <k_sched_unlock+0x48>)
    ebc4:	689a      	ldr	r2, [r3, #8]
    ebc6:	7bd3      	ldrb	r3, [r2, #15]
    ebc8:	3301      	adds	r3, #1
    ebca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    ebcc:	2000      	movs	r0, #0
    ebce:	f7ff fe07 	bl	e7e0 <update_cache>
	__asm__ volatile(
    ebd2:	f384 8811 	msr	BASEPRI, r4
    ebd6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ebda:	2301      	movs	r3, #1
    ebdc:	e7f0      	b.n	ebc0 <k_sched_unlock+0x14>
	__asm__ volatile(
    ebde:	f04f 0320 	mov.w	r3, #32
    ebe2:	f3ef 8011 	mrs	r0, BASEPRI
    ebe6:	f383 8812 	msr	BASEPRI_MAX, r3
    ebea:	f3bf 8f6f 	isb	sy
    ebee:	f005 f966 	bl	13ebe <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    ebf2:	bd10      	pop	{r4, pc}
    ebf4:	20002e78 	.word	0x20002e78

0000ebf8 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    ebfa:	7b43      	ldrb	r3, [r0, #13]
    ebfc:	f013 0f08 	tst.w	r3, #8
    ec00:	d145      	bne.n	ec8e <end_thread+0x96>
    ec02:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    ec04:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    ec08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ec0c:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    ec0e:	f013 0f80 	tst.w	r3, #128	; 0x80
    ec12:	d114      	bne.n	ec3e <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    ec14:	68ab      	ldr	r3, [r5, #8]
    ec16:	b15b      	cbz	r3, ec30 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ec18:	4628      	mov	r0, r5
    ec1a:	f005 f925 	bl	13e68 <pended_on_thread>
    ec1e:	4629      	mov	r1, r5
    ec20:	f005 f962 	bl	13ee8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ec24:	7b6b      	ldrb	r3, [r5, #13]
    ec26:	f023 0302 	bic.w	r3, r3, #2
    ec2a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    ec2c:	2300      	movs	r3, #0
    ec2e:	60ab      	str	r3, [r5, #8]
    ec30:	f105 0018 	add.w	r0, r5, #24
    ec34:	f005 fad6 	bl	141e4 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    ec38:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    ec3c:	e01c      	b.n	ec78 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ec3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ec42:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    ec44:	4601      	mov	r1, r0
    ec46:	4812      	ldr	r0, [pc, #72]	; (ec90 <end_thread+0x98>)
    ec48:	f005 f94e 	bl	13ee8 <z_priq_dumb_remove>
}
    ec4c:	e7e2      	b.n	ec14 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ec4e:	4620      	mov	r0, r4
    ec50:	f005 f90a 	bl	13e68 <pended_on_thread>
    ec54:	4621      	mov	r1, r4
    ec56:	f005 f947 	bl	13ee8 <z_priq_dumb_remove>
    ec5a:	7b63      	ldrb	r3, [r4, #13]
    ec5c:	f023 0302 	bic.w	r3, r3, #2
    ec60:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    ec62:	2600      	movs	r6, #0
    ec64:	60a6      	str	r6, [r4, #8]
    ec66:	f104 0018 	add.w	r0, r4, #24
    ec6a:	f005 fabb 	bl	141e4 <z_abort_timeout>
    ec6e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    ec72:	4620      	mov	r0, r4
    ec74:	f7ff fe6a 	bl	e94c <ready_thread>
	return list->head == list;
    ec78:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ec7a:	42bc      	cmp	r4, r7
    ec7c:	d001      	beq.n	ec82 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    ec7e:	2c00      	cmp	r4, #0
    ec80:	d1e5      	bne.n	ec4e <end_thread+0x56>
		update_cache(1);
    ec82:	2001      	movs	r0, #1
    ec84:	f7ff fdac 	bl	e7e0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    ec88:	4628      	mov	r0, r5
    ec8a:	f7ff f959 	bl	df40 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    ec8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec90:	20002e98 	.word	0x20002e98

0000ec94 <z_sched_init>:
{
    ec94:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    ec96:	4b05      	ldr	r3, [pc, #20]	; (ecac <z_sched_init+0x18>)
    ec98:	f103 0220 	add.w	r2, r3, #32
    ec9c:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    ec9e:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    eca0:	2100      	movs	r1, #0
    eca2:	4608      	mov	r0, r1
    eca4:	f7ff fd2c 	bl	e700 <k_sched_time_slice_set>
}
    eca8:	bd08      	pop	{r3, pc}
    ecaa:	bf00      	nop
    ecac:	20002e78 	.word	0x20002e78

0000ecb0 <z_impl_k_yield>:
{
    ecb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecb2:	f04f 0320 	mov.w	r3, #32
    ecb6:	f3ef 8611 	mrs	r6, BASEPRI
    ecba:	f383 8812 	msr	BASEPRI_MAX, r3
    ecbe:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    ecc2:	4c1c      	ldr	r4, [pc, #112]	; (ed34 <z_impl_k_yield+0x84>)
    ecc4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ecc6:	7b4b      	ldrb	r3, [r1, #13]
    ecc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    eccc:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    ecce:	f104 0720 	add.w	r7, r4, #32
    ecd2:	4638      	mov	r0, r7
    ecd4:	f005 f908 	bl	13ee8 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    ecd8:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    ecda:	7b6b      	ldrb	r3, [r5, #13]
    ecdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ece0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    ece2:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ece4:	42bc      	cmp	r4, r7
    ece6:	d023      	beq.n	ed30 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ece8:	b16c      	cbz	r4, ed06 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ecea:	4621      	mov	r1, r4
    ecec:	4628      	mov	r0, r5
    ecee:	f005 f8bd 	bl	13e6c <z_sched_prio_cmp>
    ecf2:	2800      	cmp	r0, #0
    ecf4:	dc16      	bgt.n	ed24 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ecf6:	b134      	cbz	r4, ed06 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    ecf8:	4b0e      	ldr	r3, [pc, #56]	; (ed34 <z_impl_k_yield+0x84>)
    ecfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ecfc:	429c      	cmp	r4, r3
    ecfe:	d002      	beq.n	ed06 <z_impl_k_yield+0x56>
    ed00:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ed02:	2c00      	cmp	r4, #0
    ed04:	d1f0      	bne.n	ece8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    ed06:	4b0b      	ldr	r3, [pc, #44]	; (ed34 <z_impl_k_yield+0x84>)
    ed08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    ed0a:	f103 0120 	add.w	r1, r3, #32
    ed0e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    ed10:	606a      	str	r2, [r5, #4]
	tail->next = node;
    ed12:	6015      	str	r5, [r2, #0]
	list->tail = node;
    ed14:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    ed16:	2001      	movs	r0, #1
    ed18:	f7ff fd62 	bl	e7e0 <update_cache>
    ed1c:	4630      	mov	r0, r6
    ed1e:	f7f5 fb4f 	bl	43c0 <arch_swap>
}
    ed22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    ed24:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    ed26:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ed28:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ed2a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ed2c:	6065      	str	r5, [r4, #4]
}
    ed2e:	e7f2      	b.n	ed16 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ed30:	2400      	movs	r4, #0
    ed32:	e7d9      	b.n	ece8 <z_impl_k_yield+0x38>
    ed34:	20002e78 	.word	0x20002e78

0000ed38 <z_tick_sleep>:
{
    ed38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed3c:	4604      	mov	r4, r0
    ed3e:	460d      	mov	r5, r1
	if (ticks == 0) {
    ed40:	ea54 0105 	orrs.w	r1, r4, r5
    ed44:	d037      	beq.n	edb6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    ed46:	f06f 0101 	mvn.w	r1, #1
    ed4a:	1a0a      	subs	r2, r1, r0
    ed4c:	f04f 31ff 	mov.w	r1, #4294967295
    ed50:	eb61 0305 	sbc.w	r3, r1, r5
    ed54:	2a01      	cmp	r2, #1
    ed56:	f173 0300 	sbcs.w	r3, r3, #0
    ed5a:	db30      	blt.n	edbe <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    ed5c:	f06f 0601 	mvn.w	r6, #1
    ed60:	1a36      	subs	r6, r6, r0
    ed62:	f04f 0320 	mov.w	r3, #32
    ed66:	f3ef 8811 	mrs	r8, BASEPRI
    ed6a:	f383 8812 	msr	BASEPRI_MAX, r3
    ed6e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    ed72:	4f16      	ldr	r7, [pc, #88]	; (edcc <z_tick_sleep+0x94>)
    ed74:	68b8      	ldr	r0, [r7, #8]
    ed76:	4b16      	ldr	r3, [pc, #88]	; (edd0 <z_tick_sleep+0x98>)
    ed78:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    ed7a:	f7ff fe45 	bl	ea08 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    ed7e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ed80:	4622      	mov	r2, r4
    ed82:	462b      	mov	r3, r5
    ed84:	4913      	ldr	r1, [pc, #76]	; (edd4 <z_tick_sleep+0x9c>)
    ed86:	3018      	adds	r0, #24
    ed88:	f000 f904 	bl	ef94 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ed8c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ed8e:	7b53      	ldrb	r3, [r2, #13]
    ed90:	f043 0310 	orr.w	r3, r3, #16
    ed94:	7353      	strb	r3, [r2, #13]
    ed96:	4640      	mov	r0, r8
    ed98:	f7f5 fb12 	bl	43c0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ed9c:	2500      	movs	r5, #0
    ed9e:	f005 fa80 	bl	142a2 <sys_clock_tick_get_32>
    eda2:	1a34      	subs	r4, r6, r0
    eda4:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    eda8:	2c01      	cmp	r4, #1
    edaa:	f175 0300 	sbcs.w	r3, r5, #0
    edae:	da0a      	bge.n	edc6 <z_tick_sleep+0x8e>
	return 0;
    edb0:	2000      	movs	r0, #0
}
    edb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    edb6:	f7ff ff7b 	bl	ecb0 <z_impl_k_yield>
		return 0;
    edba:	2000      	movs	r0, #0
    edbc:	e7f9      	b.n	edb2 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    edbe:	f005 fa70 	bl	142a2 <sys_clock_tick_get_32>
    edc2:	1906      	adds	r6, r0, r4
    edc4:	e7cd      	b.n	ed62 <z_tick_sleep+0x2a>
		return ticks;
    edc6:	4620      	mov	r0, r4
    edc8:	e7f3      	b.n	edb2 <z_tick_sleep+0x7a>
    edca:	bf00      	nop
    edcc:	20002e78 	.word	0x20002e78
    edd0:	20002eac 	.word	0x20002eac
    edd4:	00013f85 	.word	0x00013f85

0000edd8 <z_impl_k_sleep>:
{
    edd8:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    edda:	f1b1 3fff 	cmp.w	r1, #4294967295
    edde:	bf08      	it	eq
    ede0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    ede4:	d01a      	beq.n	ee1c <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    ede6:	f7ff ffa7 	bl	ed38 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    edea:	4604      	mov	r4, r0
    edec:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    edee:	0169      	lsls	r1, r5, #5
    edf0:	0143      	lsls	r3, r0, #5
    edf2:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    edf6:	1a18      	subs	r0, r3, r0
    edf8:	eb62 0305 	sbc.w	r3, r2, r5
    edfc:	009a      	lsls	r2, r3, #2
    edfe:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    ee02:	0081      	lsls	r1, r0, #2
    ee04:	4613      	mov	r3, r2
    ee06:	1908      	adds	r0, r1, r4
    ee08:	eb45 0303 	adc.w	r3, r5, r3
    ee0c:	00da      	lsls	r2, r3, #3
    ee0e:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    ee12:	00c1      	lsls	r1, r0, #3
    ee14:	0bc8      	lsrs	r0, r1, #15
    ee16:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    ee1a:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    ee1c:	4b03      	ldr	r3, [pc, #12]	; (ee2c <z_impl_k_sleep+0x54>)
    ee1e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    ee20:	f7ff fe82 	bl	eb28 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    ee24:	f04f 30ff 	mov.w	r0, #4294967295
    ee28:	e7f7      	b.n	ee1a <z_impl_k_sleep+0x42>
    ee2a:	bf00      	nop
    ee2c:	20002e78 	.word	0x20002e78

0000ee30 <z_impl_z_current_get>:
}
    ee30:	4b01      	ldr	r3, [pc, #4]	; (ee38 <z_impl_z_current_get+0x8>)
    ee32:	6898      	ldr	r0, [r3, #8]
    ee34:	4770      	bx	lr
    ee36:	bf00      	nop
    ee38:	20002e78 	.word	0x20002e78

0000ee3c <z_impl_k_is_preempt_thread>:
    ee3c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
    ee40:	b933      	cbnz	r3, ee50 <z_impl_k_is_preempt_thread+0x14>
    ee42:	4b05      	ldr	r3, [pc, #20]	; (ee58 <z_impl_k_is_preempt_thread+0x1c>)
    ee44:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ee46:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
    ee48:	2b7f      	cmp	r3, #127	; 0x7f
    ee4a:	d803      	bhi.n	ee54 <z_impl_k_is_preempt_thread+0x18>
    ee4c:	2001      	movs	r0, #1
    ee4e:	4770      	bx	lr
    ee50:	2000      	movs	r0, #0
    ee52:	4770      	bx	lr
    ee54:	2000      	movs	r0, #0
}
    ee56:	4770      	bx	lr
    ee58:	20002e78 	.word	0x20002e78

0000ee5c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    ee5c:	b538      	push	{r3, r4, r5, lr}
    ee5e:	f04f 0320 	mov.w	r3, #32
    ee62:	f3ef 8511 	mrs	r5, BASEPRI
    ee66:	f383 8812 	msr	BASEPRI_MAX, r3
    ee6a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    ee6e:	7b43      	ldrb	r3, [r0, #13]
    ee70:	f013 0f08 	tst.w	r3, #8
    ee74:	d004      	beq.n	ee80 <z_thread_abort+0x24>
	__asm__ volatile(
    ee76:	f385 8811 	msr	BASEPRI, r5
    ee7a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    ee7e:	bd38      	pop	{r3, r4, r5, pc}
    ee80:	4604      	mov	r4, r0
	end_thread(thread);
    ee82:	f7ff feb9 	bl	ebf8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    ee86:	4b08      	ldr	r3, [pc, #32]	; (eea8 <z_thread_abort+0x4c>)
    ee88:	689b      	ldr	r3, [r3, #8]
    ee8a:	42a3      	cmp	r3, r4
    ee8c:	d004      	beq.n	ee98 <z_thread_abort+0x3c>
    ee8e:	f385 8811 	msr	BASEPRI, r5
    ee92:	f3bf 8f6f 	isb	sy
    ee96:	e7f2      	b.n	ee7e <z_thread_abort+0x22>
    ee98:	f3ef 8305 	mrs	r3, IPSR
    ee9c:	2b00      	cmp	r3, #0
    ee9e:	d1f6      	bne.n	ee8e <z_thread_abort+0x32>
    eea0:	4628      	mov	r0, r5
    eea2:	f7f5 fa8d 	bl	43c0 <arch_swap>
	return ret;
    eea6:	e7f2      	b.n	ee8e <z_thread_abort+0x32>
    eea8:	20002e78 	.word	0x20002e78

0000eeac <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    eeac:	b5d0      	push	{r4, r6, r7, lr}
    eeae:	b082      	sub	sp, #8
    eeb0:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    eeb2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    eeb6:	e9cd 6700 	strd	r6, r7, [sp]
    eeba:	f7ff fdc1 	bl	ea40 <z_pend_curr>

	if (data != NULL) {
    eebe:	b11c      	cbz	r4, eec8 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
    eec0:	4b02      	ldr	r3, [pc, #8]	; (eecc <z_sched_wait+0x20>)
    eec2:	689b      	ldr	r3, [r3, #8]
    eec4:	695b      	ldr	r3, [r3, #20]
    eec6:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    eec8:	b002      	add	sp, #8
    eeca:	bdd0      	pop	{r4, r6, r7, pc}
    eecc:	20002e78 	.word	0x20002e78

0000eed0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    eed0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    eed2:	4806      	ldr	r0, [pc, #24]	; (eeec <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    eed4:	4a06      	ldr	r2, [pc, #24]	; (eef0 <z_data_copy+0x20>)
    eed6:	1a12      	subs	r2, r2, r0
    eed8:	4906      	ldr	r1, [pc, #24]	; (eef4 <z_data_copy+0x24>)
    eeda:	f002 fb3f 	bl	1155c <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    eede:	4a06      	ldr	r2, [pc, #24]	; (eef8 <z_data_copy+0x28>)
    eee0:	4906      	ldr	r1, [pc, #24]	; (eefc <z_data_copy+0x2c>)
    eee2:	4807      	ldr	r0, [pc, #28]	; (ef00 <z_data_copy+0x30>)
    eee4:	f002 fb3a 	bl	1155c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    eee8:	bd08      	pop	{r3, pc}
    eeea:	bf00      	nop
    eeec:	20000000 	.word	0x20000000
    eef0:	200004e0 	.word	0x200004e0
    eef4:	00015f80 	.word	0x00015f80
    eef8:	00000000 	.word	0x00000000
    eefc:	00015f80 	.word	0x00015f80
    ef00:	20000000 	.word	0x20000000

0000ef04 <first>:
	return list->head == list;
    ef04:	4b03      	ldr	r3, [pc, #12]	; (ef14 <first+0x10>)
    ef06:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ef08:	4298      	cmp	r0, r3
    ef0a:	d000      	beq.n	ef0e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    ef0c:	4770      	bx	lr
    ef0e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    ef10:	e7fc      	b.n	ef0c <first+0x8>
    ef12:	bf00      	nop
    ef14:	20000260 	.word	0x20000260

0000ef18 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ef18:	b130      	cbz	r0, ef28 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    ef1a:	4a04      	ldr	r2, [pc, #16]	; (ef2c <next+0x14>)
    ef1c:	6852      	ldr	r2, [r2, #4]
    ef1e:	4290      	cmp	r0, r2
    ef20:	d001      	beq.n	ef26 <next+0xe>
    ef22:	6800      	ldr	r0, [r0, #0]
    ef24:	4770      	bx	lr
    ef26:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    ef28:	4770      	bx	lr
    ef2a:	bf00      	nop
    ef2c:	20000260 	.word	0x20000260

0000ef30 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    ef30:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ef32:	4b04      	ldr	r3, [pc, #16]	; (ef44 <elapsed+0x14>)
    ef34:	681b      	ldr	r3, [r3, #0]
    ef36:	b10b      	cbz	r3, ef3c <elapsed+0xc>
    ef38:	2000      	movs	r0, #0
}
    ef3a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ef3c:	f7f9 fce6 	bl	890c <sys_clock_elapsed>
    ef40:	e7fb      	b.n	ef3a <elapsed+0xa>
    ef42:	bf00      	nop
    ef44:	20002eb8 	.word	0x20002eb8

0000ef48 <next_timeout>:

static int32_t next_timeout(void)
{
    ef48:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    ef4a:	f7ff ffdb 	bl	ef04 <first>
    ef4e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    ef50:	f7ff ffee 	bl	ef30 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    ef54:	b18c      	cbz	r4, ef7a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ef56:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ef5a:	1a12      	subs	r2, r2, r0
    ef5c:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    ef60:	2a01      	cmp	r2, #1
    ef62:	f173 0100 	sbcs.w	r1, r3, #0
    ef66:	db11      	blt.n	ef8c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ef68:	4610      	mov	r0, r2
    ef6a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ef6e:	f173 0300 	sbcs.w	r3, r3, #0
    ef72:	db04      	blt.n	ef7e <next_timeout+0x36>
    ef74:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ef78:	e001      	b.n	ef7e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    ef7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    ef7e:	4b04      	ldr	r3, [pc, #16]	; (ef90 <next_timeout+0x48>)
    ef80:	691b      	ldr	r3, [r3, #16]
    ef82:	b113      	cbz	r3, ef8a <next_timeout+0x42>
    ef84:	4283      	cmp	r3, r0
    ef86:	da00      	bge.n	ef8a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    ef88:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    ef8a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    ef8c:	2000      	movs	r0, #0
    ef8e:	e7f6      	b.n	ef7e <next_timeout+0x36>
    ef90:	20002e78 	.word	0x20002e78

0000ef94 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    ef94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef98:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ef9a:	f1b3 3fff 	cmp.w	r3, #4294967295
    ef9e:	bf08      	it	eq
    efa0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    efa4:	f000 8096 	beq.w	f0d4 <z_add_timeout+0x140>
    efa8:	4682      	mov	sl, r0
    efaa:	4614      	mov	r4, r2
    efac:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    efae:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    efb0:	2300      	movs	r3, #0
	__asm__ volatile(
    efb2:	f04f 0220 	mov.w	r2, #32
    efb6:	f3ef 8b11 	mrs	fp, BASEPRI
    efba:	f382 8812 	msr	BASEPRI_MAX, r2
    efbe:	f3bf 8f6f 	isb	sy
    efc2:	e02e      	b.n	f022 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    efc4:	2201      	movs	r2, #1
    efc6:	2300      	movs	r3, #0
    efc8:	e04b      	b.n	f062 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    efca:	f7ff ffb1 	bl	ef30 <elapsed>
    efce:	1822      	adds	r2, r4, r0
    efd0:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    efd4:	3201      	adds	r2, #1
    efd6:	f143 0300 	adc.w	r3, r3, #0
    efda:	f8ca 2010 	str.w	r2, [sl, #16]
    efde:	f8ca 3014 	str.w	r3, [sl, #20]
    efe2:	e042      	b.n	f06a <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    efe4:	9b00      	ldr	r3, [sp, #0]
    efe6:	1ac2      	subs	r2, r0, r3
    efe8:	9b01      	ldr	r3, [sp, #4]
    efea:	eb61 0303 	sbc.w	r3, r1, r3
    efee:	f8cc 2010 	str.w	r2, [ip, #16]
    eff2:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    eff6:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    effa:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    effe:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    f002:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    f006:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    f00a:	f1bc 0f00 	cmp.w	ip, #0
    f00e:	d049      	beq.n	f0a4 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    f010:	f7ff ff78 	bl	ef04 <first>
    f014:	4582      	cmp	sl, r0
    f016:	d050      	beq.n	f0ba <z_add_timeout+0x126>
	__asm__ volatile(
    f018:	f38b 8811 	msr	BASEPRI, fp
    f01c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f020:	2301      	movs	r3, #1
    f022:	2b00      	cmp	r3, #0
    f024:	d156      	bne.n	f0d4 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    f026:	f06f 0301 	mvn.w	r3, #1
    f02a:	ebb3 0804 	subs.w	r8, r3, r4
    f02e:	f04f 30ff 	mov.w	r0, #4294967295
    f032:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    f036:	f1b8 0f00 	cmp.w	r8, #0
    f03a:	f179 0300 	sbcs.w	r3, r9, #0
    f03e:	dbc4      	blt.n	efca <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    f040:	4a26      	ldr	r2, [pc, #152]	; (f0dc <z_add_timeout+0x148>)
    f042:	6813      	ldr	r3, [r2, #0]
    f044:	6852      	ldr	r2, [r2, #4]
    f046:	18e3      	adds	r3, r4, r3
    f048:	eb45 0202 	adc.w	r2, r5, r2
    f04c:	f06f 0101 	mvn.w	r1, #1
    f050:	1ace      	subs	r6, r1, r3
    f052:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    f056:	4632      	mov	r2, r6
    f058:	463b      	mov	r3, r7
    f05a:	2e01      	cmp	r6, #1
    f05c:	f177 0100 	sbcs.w	r1, r7, #0
    f060:	dbb0      	blt.n	efc4 <z_add_timeout+0x30>
    f062:	f8ca 2010 	str.w	r2, [sl, #16]
    f066:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    f06a:	f7ff ff4b 	bl	ef04 <first>
    f06e:	4684      	mov	ip, r0
    f070:	f1bc 0f00 	cmp.w	ip, #0
    f074:	d0c9      	beq.n	f00a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    f076:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    f07a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    f07e:	e9cd 2300 	strd	r2, r3, [sp]
    f082:	4282      	cmp	r2, r0
    f084:	418b      	sbcs	r3, r1
    f086:	dbad      	blt.n	efe4 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    f088:	9b00      	ldr	r3, [sp, #0]
    f08a:	1a1a      	subs	r2, r3, r0
    f08c:	9b01      	ldr	r3, [sp, #4]
    f08e:	eb63 0301 	sbc.w	r3, r3, r1
    f092:	f8ca 2010 	str.w	r2, [sl, #16]
    f096:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    f09a:	4660      	mov	r0, ip
    f09c:	f7ff ff3c 	bl	ef18 <next>
    f0a0:	4684      	mov	ip, r0
    f0a2:	e7e5      	b.n	f070 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    f0a4:	4b0e      	ldr	r3, [pc, #56]	; (f0e0 <z_add_timeout+0x14c>)
    f0a6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    f0a8:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    f0ac:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    f0b0:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    f0b4:	f8c3 a004 	str.w	sl, [r3, #4]
}
    f0b8:	e7aa      	b.n	f010 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    f0ba:	f7ff ff45 	bl	ef48 <next_timeout>

			if (next_time == 0 ||
    f0be:	4603      	mov	r3, r0
    f0c0:	b118      	cbz	r0, f0ca <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    f0c2:	4a08      	ldr	r2, [pc, #32]	; (f0e4 <z_add_timeout+0x150>)
    f0c4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    f0c6:	4282      	cmp	r2, r0
    f0c8:	d0a6      	beq.n	f018 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    f0ca:	2100      	movs	r1, #0
    f0cc:	4618      	mov	r0, r3
    f0ce:	f7f9 fbe9 	bl	88a4 <sys_clock_set_timeout>
    f0d2:	e7a1      	b.n	f018 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    f0d4:	b003      	add	sp, #12
    f0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0da:	bf00      	nop
    f0dc:	200008e8 	.word	0x200008e8
    f0e0:	20000260 	.word	0x20000260
    f0e4:	20002e78 	.word	0x20002e78

0000f0e8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    f0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0ea:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    f0ec:	f7ff fbe2 	bl	e8b4 <z_time_slice>
	__asm__ volatile(
    f0f0:	f04f 0320 	mov.w	r3, #32
    f0f4:	f3ef 8511 	mrs	r5, BASEPRI
    f0f8:	f383 8812 	msr	BASEPRI_MAX, r3
    f0fc:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    f100:	4b28      	ldr	r3, [pc, #160]	; (f1a4 <sys_clock_announce+0xbc>)
    f102:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    f104:	f7ff fefe 	bl	ef04 <first>
    f108:	4604      	mov	r4, r0
    f10a:	b350      	cbz	r0, f162 <sys_clock_announce+0x7a>
    f10c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    f110:	4b24      	ldr	r3, [pc, #144]	; (f1a4 <sys_clock_announce+0xbc>)
    f112:	681b      	ldr	r3, [r3, #0]
    f114:	17d9      	asrs	r1, r3, #31
    f116:	42b3      	cmp	r3, r6
    f118:	eb71 0207 	sbcs.w	r2, r1, r7
    f11c:	db21      	blt.n	f162 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    f11e:	4a22      	ldr	r2, [pc, #136]	; (f1a8 <sys_clock_announce+0xc0>)
    f120:	e9d2 0100 	ldrd	r0, r1, [r2]
    f124:	1980      	adds	r0, r0, r6
    f126:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    f12a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    f12e:	1b9b      	subs	r3, r3, r6
    f130:	4a1c      	ldr	r2, [pc, #112]	; (f1a4 <sys_clock_announce+0xbc>)
    f132:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    f134:	2200      	movs	r2, #0
    f136:	2300      	movs	r3, #0
    f138:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    f13c:	4620      	mov	r0, r4
    f13e:	f005 f83a 	bl	141b6 <remove_timeout>
	__asm__ volatile(
    f142:	f385 8811 	msr	BASEPRI, r5
    f146:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    f14a:	68a3      	ldr	r3, [r4, #8]
    f14c:	4620      	mov	r0, r4
    f14e:	4798      	blx	r3
	__asm__ volatile(
    f150:	f04f 0320 	mov.w	r3, #32
    f154:	f3ef 8511 	mrs	r5, BASEPRI
    f158:	f383 8812 	msr	BASEPRI_MAX, r3
    f15c:	f3bf 8f6f 	isb	sy
    f160:	e7d0      	b.n	f104 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    f162:	b144      	cbz	r4, f176 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    f164:	4b0f      	ldr	r3, [pc, #60]	; (f1a4 <sys_clock_announce+0xbc>)
    f166:	6819      	ldr	r1, [r3, #0]
    f168:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f16c:	1a52      	subs	r2, r2, r1
    f16e:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    f172:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    f176:	480c      	ldr	r0, [pc, #48]	; (f1a8 <sys_clock_announce+0xc0>)
    f178:	490a      	ldr	r1, [pc, #40]	; (f1a4 <sys_clock_announce+0xbc>)
    f17a:	680c      	ldr	r4, [r1, #0]
    f17c:	e9d0 2300 	ldrd	r2, r3, [r0]
    f180:	1912      	adds	r2, r2, r4
    f182:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    f186:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    f18a:	2400      	movs	r4, #0
    f18c:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    f18e:	f7ff fedb 	bl	ef48 <next_timeout>
    f192:	4621      	mov	r1, r4
    f194:	f7f9 fb86 	bl	88a4 <sys_clock_set_timeout>
	__asm__ volatile(
    f198:	f385 8811 	msr	BASEPRI, r5
    f19c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    f1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f1a2:	bf00      	nop
    f1a4:	20002eb8 	.word	0x20002eb8
    f1a8:	200008e8 	.word	0x200008e8

0000f1ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    f1ac:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    f1ae:	2100      	movs	r1, #0
	__asm__ volatile(
    f1b0:	f04f 0320 	mov.w	r3, #32
    f1b4:	f3ef 8411 	mrs	r4, BASEPRI
    f1b8:	f383 8812 	msr	BASEPRI_MAX, r3
    f1bc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    f1c0:	2200      	movs	r2, #0
    f1c2:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    f1c4:	b969      	cbnz	r1, f1e2 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    f1c6:	f7f9 fba1 	bl	890c <sys_clock_elapsed>
    f1ca:	4b07      	ldr	r3, [pc, #28]	; (f1e8 <sys_clock_tick_get+0x3c>)
    f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    f1d0:	1812      	adds	r2, r2, r0
    f1d2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    f1d6:	f384 8811 	msr	BASEPRI, r4
    f1da:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    f1de:	2101      	movs	r1, #1
    f1e0:	e7f0      	b.n	f1c4 <sys_clock_tick_get+0x18>
	}
	return t;
}
    f1e2:	4610      	mov	r0, r2
    f1e4:	4619      	mov	r1, r3
    f1e6:	bd10      	pop	{r4, pc}
    f1e8:	200008e8 	.word	0x200008e8

0000f1ec <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    f1ec:	b538      	push	{r3, r4, r5, lr}
    f1ee:	4604      	mov	r4, r0
	__asm__ volatile(
    f1f0:	f04f 0320 	mov.w	r3, #32
    f1f4:	f3ef 8511 	mrs	r5, BASEPRI
    f1f8:	f383 8812 	msr	BASEPRI_MAX, r3
    f1fc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    f200:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    f204:	ea52 0103 	orrs.w	r1, r2, r3
    f208:	d005      	beq.n	f216 <z_timer_expiration_handler+0x2a>
    f20a:	f1b3 3fff 	cmp.w	r3, #4294967295
    f20e:	bf08      	it	eq
    f210:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    f214:	d11a      	bne.n	f24c <z_timer_expiration_handler+0x60>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    f216:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f218:	3301      	adds	r3, #1
    f21a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    f21c:	6a23      	ldr	r3, [r4, #32]
    f21e:	b10b      	cbz	r3, f224 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
    f220:	4620      	mov	r0, r4
    f222:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    f224:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    f228:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f22a:	42a3      	cmp	r3, r4
    f22c:	d012      	beq.n	f254 <z_timer_expiration_handler+0x68>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    f22e:	b18c      	cbz	r4, f254 <z_timer_expiration_handler+0x68>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    f230:	4620      	mov	r0, r4
    f232:	f004 fe25 	bl	13e80 <z_unpend_thread_no_timeout>
    f236:	2300      	movs	r3, #0
    f238:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    f23c:	f385 8811 	msr	BASEPRI, r5
    f240:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    f244:	4620      	mov	r0, r4
    f246:	f004 fe81 	bl	13f4c <z_ready_thread>
}
    f24a:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    f24c:	4904      	ldr	r1, [pc, #16]	; (f260 <z_timer_expiration_handler+0x74>)
    f24e:	f7ff fea1 	bl	ef94 <z_add_timeout>
    f252:	e7e0      	b.n	f216 <z_timer_expiration_handler+0x2a>
    f254:	f385 8811 	msr	BASEPRI, r5
    f258:	f3bf 8f6f 	isb	sy
		return;
    f25c:	e7f5      	b.n	f24a <z_timer_expiration_handler+0x5e>
    f25e:	bf00      	nop
    f260:	0000f1ed 	.word	0x0000f1ed

0000f264 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f268:	b087      	sub	sp, #28
    f26a:	4614      	mov	r4, r2
    f26c:	461d      	mov	r5, r3
    f26e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    f272:	f1b3 3fff 	cmp.w	r3, #4294967295
    f276:	bf08      	it	eq
    f278:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    f27c:	d035      	beq.n	f2ea <z_impl_k_timer_start+0x86>
    f27e:	4606      	mov	r6, r0
    f280:	4613      	mov	r3, r2
    f282:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    f284:	f1b9 3fff 	cmp.w	r9, #4294967295
    f288:	bf08      	it	eq
    f28a:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    f28e:	d012      	beq.n	f2b6 <z_impl_k_timer_start+0x52>
    f290:	ea58 0109 	orrs.w	r1, r8, r9
    f294:	d00f      	beq.n	f2b6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    f296:	f06f 0701 	mvn.w	r7, #1
    f29a:	ebb7 0708 	subs.w	r7, r7, r8
    f29e:	9702      	str	r7, [sp, #8]
    f2a0:	f04f 31ff 	mov.w	r1, #4294967295
    f2a4:	eb61 0709 	sbc.w	r7, r1, r9
    f2a8:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    f2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f2ae:	2800      	cmp	r0, #0
    f2b0:	f171 0100 	sbcs.w	r1, r1, #0
    f2b4:	db1c      	blt.n	f2f0 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    f2b6:	f06f 0101 	mvn.w	r1, #1
    f2ba:	ebb1 0a03 	subs.w	sl, r1, r3
    f2be:	f04f 31ff 	mov.w	r1, #4294967295
    f2c2:	eb61 0b02 	sbc.w	fp, r1, r2
    f2c6:	f1ba 0f00 	cmp.w	sl, #0
    f2ca:	f17b 0100 	sbcs.w	r1, fp, #0
    f2ce:	db23      	blt.n	f318 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    f2d0:	4630      	mov	r0, r6
    f2d2:	f004 ff87 	bl	141e4 <z_abort_timeout>
	timer->period = period;
    f2d6:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    f2da:	2300      	movs	r3, #0
    f2dc:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    f2de:	4622      	mov	r2, r4
    f2e0:	462b      	mov	r3, r5
    f2e2:	4917      	ldr	r1, [pc, #92]	; (f340 <z_impl_k_timer_start+0xdc>)
    f2e4:	4630      	mov	r0, r6
    f2e6:	f7ff fe55 	bl	ef94 <z_add_timeout>
		     duration);
}
    f2ea:	b007      	add	sp, #28
    f2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    f2f0:	f118 31ff 	adds.w	r1, r8, #4294967295
    f2f4:	9104      	str	r1, [sp, #16]
    f2f6:	f149 31ff 	adc.w	r1, r9, #4294967295
    f2fa:	9105      	str	r1, [sp, #20]
    f2fc:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    f300:	4638      	mov	r0, r7
    f302:	4641      	mov	r1, r8
    f304:	2f01      	cmp	r7, #1
    f306:	f178 0700 	sbcs.w	r7, r8, #0
    f30a:	db02      	blt.n	f312 <z_impl_k_timer_start+0xae>
    f30c:	4680      	mov	r8, r0
    f30e:	4689      	mov	r9, r1
    f310:	e7d1      	b.n	f2b6 <z_impl_k_timer_start+0x52>
    f312:	2001      	movs	r0, #1
    f314:	2100      	movs	r1, #0
    f316:	e7f9      	b.n	f30c <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    f318:	f113 33ff 	adds.w	r3, r3, #4294967295
    f31c:	9300      	str	r3, [sp, #0]
    f31e:	f142 33ff 	adc.w	r3, r2, #4294967295
    f322:	9301      	str	r3, [sp, #4]
    f324:	e9dd 0100 	ldrd	r0, r1, [sp]
    f328:	4602      	mov	r2, r0
    f32a:	460b      	mov	r3, r1
    f32c:	2800      	cmp	r0, #0
    f32e:	f171 0100 	sbcs.w	r1, r1, #0
    f332:	db02      	blt.n	f33a <z_impl_k_timer_start+0xd6>
    f334:	4614      	mov	r4, r2
    f336:	461d      	mov	r5, r3
    f338:	e7ca      	b.n	f2d0 <z_impl_k_timer_start+0x6c>
    f33a:	2200      	movs	r2, #0
    f33c:	4613      	mov	r3, r2
    f33e:	e7f9      	b.n	f334 <z_impl_k_timer_start+0xd0>
    f340:	0000f1ed 	.word	0x0000f1ed

0000f344 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    f344:	b538      	push	{r3, r4, r5, lr}
    f346:	4604      	mov	r4, r0
    f348:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    f34a:	f004 fc65 	bl	13c18 <k_is_in_isr>
    f34e:	b948      	cbnz	r0, f364 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    f350:	4b05      	ldr	r3, [pc, #20]	; (f368 <z_thread_aligned_alloc+0x24>)
    f352:	689b      	ldr	r3, [r3, #8]
    f354:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    f358:	b118      	cbz	r0, f362 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    f35a:	462a      	mov	r2, r5
    f35c:	4621      	mov	r1, r4
    f35e:	f005 f801 	bl	14364 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    f362:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
    f364:	4801      	ldr	r0, [pc, #4]	; (f36c <z_thread_aligned_alloc+0x28>)
    f366:	e7f7      	b.n	f358 <z_thread_aligned_alloc+0x14>
    f368:	20002e78 	.word	0x20002e78
    f36c:	2000033c 	.word	0x2000033c

0000f370 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    f370:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    f372:	4a03      	ldr	r2, [pc, #12]	; (f380 <boot_banner+0x10>)
    f374:	4903      	ldr	r1, [pc, #12]	; (f384 <boot_banner+0x14>)
    f376:	4804      	ldr	r0, [pc, #16]	; (f388 <boot_banner+0x18>)
    f378:	f000 fa76 	bl	f868 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    f37c:	bd08      	pop	{r3, pc}
    f37e:	bf00      	nop
    f380:	00015e84 	.word	0x00015e84
    f384:	00015eb8 	.word	0x00015eb8
    f388:	00015ec4 	.word	0x00015ec4

0000f38c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    f38c:	b510      	push	{r4, lr}
    f38e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    f390:	4b08      	ldr	r3, [pc, #32]	; (f3b4 <k_sys_work_q_init+0x28>)
    f392:	9302      	str	r3, [sp, #8]
    f394:	2400      	movs	r4, #0
    f396:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    f39a:	ab02      	add	r3, sp, #8
    f39c:	9300      	str	r3, [sp, #0]
    f39e:	f04f 33ff 	mov.w	r3, #4294967295
    f3a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f3a6:	4904      	ldr	r1, [pc, #16]	; (f3b8 <k_sys_work_q_init+0x2c>)
    f3a8:	4804      	ldr	r0, [pc, #16]	; (f3bc <k_sys_work_q_init+0x30>)
    f3aa:	f7ff f945 	bl	e638 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    f3ae:	4620      	mov	r0, r4
    f3b0:	b004      	add	sp, #16
    f3b2:	bd10      	pop	{r4, pc}
    f3b4:	00015eec 	.word	0x00015eec
    f3b8:	20004da0 	.word	0x20004da0
    f3bc:	200008f0 	.word	0x200008f0

0000f3c0 <nrf_cc3xx_platform_init_no_rng>:
    f3c0:	b510      	push	{r4, lr}
    f3c2:	4c0a      	ldr	r4, [pc, #40]	; (f3ec <nrf_cc3xx_platform_init_no_rng+0x2c>)
    f3c4:	6823      	ldr	r3, [r4, #0]
    f3c6:	b11b      	cbz	r3, f3d0 <nrf_cc3xx_platform_init_no_rng+0x10>
    f3c8:	2301      	movs	r3, #1
    f3ca:	6023      	str	r3, [r4, #0]
    f3cc:	2000      	movs	r0, #0
    f3ce:	bd10      	pop	{r4, pc}
    f3d0:	f000 f8d6 	bl	f580 <CC_LibInitNoRng>
    f3d4:	2800      	cmp	r0, #0
    f3d6:	d0f7      	beq.n	f3c8 <nrf_cc3xx_platform_init_no_rng+0x8>
    f3d8:	3801      	subs	r0, #1
    f3da:	2806      	cmp	r0, #6
    f3dc:	d803      	bhi.n	f3e6 <nrf_cc3xx_platform_init_no_rng+0x26>
    f3de:	4b04      	ldr	r3, [pc, #16]	; (f3f0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    f3e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f3e4:	bd10      	pop	{r4, pc}
    f3e6:	4803      	ldr	r0, [pc, #12]	; (f3f4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    f3e8:	bd10      	pop	{r4, pc}
    f3ea:	bf00      	nop
    f3ec:	20002ebc 	.word	0x20002ebc
    f3f0:	00015ef8 	.word	0x00015ef8
    f3f4:	ffff8ffe 	.word	0xffff8ffe

0000f3f8 <nrf_cc3xx_platform_abort>:
    f3f8:	f3bf 8f4f 	dsb	sy
    f3fc:	4905      	ldr	r1, [pc, #20]	; (f414 <nrf_cc3xx_platform_abort+0x1c>)
    f3fe:	4b06      	ldr	r3, [pc, #24]	; (f418 <nrf_cc3xx_platform_abort+0x20>)
    f400:	68ca      	ldr	r2, [r1, #12]
    f402:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f406:	4313      	orrs	r3, r2
    f408:	60cb      	str	r3, [r1, #12]
    f40a:	f3bf 8f4f 	dsb	sy
    f40e:	bf00      	nop
    f410:	e7fd      	b.n	f40e <nrf_cc3xx_platform_abort+0x16>
    f412:	bf00      	nop
    f414:	e000ed00 	.word	0xe000ed00
    f418:	05fa0004 	.word	0x05fa0004

0000f41c <CC_PalAbort>:
    f41c:	b4f0      	push	{r4, r5, r6, r7}
    f41e:	4f09      	ldr	r7, [pc, #36]	; (f444 <CC_PalAbort+0x28>)
    f420:	4e09      	ldr	r6, [pc, #36]	; (f448 <CC_PalAbort+0x2c>)
    f422:	4c0a      	ldr	r4, [pc, #40]	; (f44c <CC_PalAbort+0x30>)
    f424:	4a0a      	ldr	r2, [pc, #40]	; (f450 <CC_PalAbort+0x34>)
    f426:	4d0b      	ldr	r5, [pc, #44]	; (f454 <CC_PalAbort+0x38>)
    f428:	490b      	ldr	r1, [pc, #44]	; (f458 <CC_PalAbort+0x3c>)
    f42a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    f42e:	603b      	str	r3, [r7, #0]
    f430:	6852      	ldr	r2, [r2, #4]
    f432:	6033      	str	r3, [r6, #0]
    f434:	6023      	str	r3, [r4, #0]
    f436:	2400      	movs	r4, #0
    f438:	602b      	str	r3, [r5, #0]
    f43a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    f43e:	bcf0      	pop	{r4, r5, r6, r7}
    f440:	4710      	bx	r2
    f442:	bf00      	nop
    f444:	5002b400 	.word	0x5002b400
    f448:	5002b404 	.word	0x5002b404
    f44c:	5002b408 	.word	0x5002b408
    f450:	20000268 	.word	0x20000268
    f454:	5002b40c 	.word	0x5002b40c
    f458:	5002a000 	.word	0x5002a000

0000f45c <nrf_cc3xx_platform_set_abort>:
    f45c:	e9d0 1200 	ldrd	r1, r2, [r0]
    f460:	4b01      	ldr	r3, [pc, #4]	; (f468 <nrf_cc3xx_platform_set_abort+0xc>)
    f462:	e9c3 1200 	strd	r1, r2, [r3]
    f466:	4770      	bx	lr
    f468:	20000268 	.word	0x20000268

0000f46c <mutex_free>:
    f46c:	b510      	push	{r4, lr}
    f46e:	4604      	mov	r4, r0
    f470:	b130      	cbz	r0, f480 <mutex_free+0x14>
    f472:	6863      	ldr	r3, [r4, #4]
    f474:	06db      	lsls	r3, r3, #27
    f476:	d502      	bpl.n	f47e <mutex_free+0x12>
    f478:	2300      	movs	r3, #0
    f47a:	6023      	str	r3, [r4, #0]
    f47c:	6063      	str	r3, [r4, #4]
    f47e:	bd10      	pop	{r4, pc}
    f480:	4b02      	ldr	r3, [pc, #8]	; (f48c <mutex_free+0x20>)
    f482:	4803      	ldr	r0, [pc, #12]	; (f490 <mutex_free+0x24>)
    f484:	685b      	ldr	r3, [r3, #4]
    f486:	4798      	blx	r3
    f488:	e7f3      	b.n	f472 <mutex_free+0x6>
    f48a:	bf00      	nop
    f48c:	20000268 	.word	0x20000268
    f490:	00015f14 	.word	0x00015f14

0000f494 <mutex_unlock>:
    f494:	b168      	cbz	r0, f4b2 <mutex_unlock+0x1e>
    f496:	6843      	ldr	r3, [r0, #4]
    f498:	b13b      	cbz	r3, f4aa <mutex_unlock+0x16>
    f49a:	06db      	lsls	r3, r3, #27
    f49c:	d507      	bpl.n	f4ae <mutex_unlock+0x1a>
    f49e:	f3bf 8f5f 	dmb	sy
    f4a2:	2300      	movs	r3, #0
    f4a4:	6003      	str	r3, [r0, #0]
    f4a6:	4618      	mov	r0, r3
    f4a8:	4770      	bx	lr
    f4aa:	4803      	ldr	r0, [pc, #12]	; (f4b8 <mutex_unlock+0x24>)
    f4ac:	4770      	bx	lr
    f4ae:	4803      	ldr	r0, [pc, #12]	; (f4bc <mutex_unlock+0x28>)
    f4b0:	4770      	bx	lr
    f4b2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    f4b6:	4770      	bx	lr
    f4b8:	ffff8fea 	.word	0xffff8fea
    f4bc:	ffff8fe9 	.word	0xffff8fe9

0000f4c0 <mutex_init>:
    f4c0:	b510      	push	{r4, lr}
    f4c2:	4604      	mov	r4, r0
    f4c4:	b120      	cbz	r0, f4d0 <mutex_init+0x10>
    f4c6:	2200      	movs	r2, #0
    f4c8:	2311      	movs	r3, #17
    f4ca:	6022      	str	r2, [r4, #0]
    f4cc:	6063      	str	r3, [r4, #4]
    f4ce:	bd10      	pop	{r4, pc}
    f4d0:	4801      	ldr	r0, [pc, #4]	; (f4d8 <mutex_init+0x18>)
    f4d2:	f7ff ffa3 	bl	f41c <CC_PalAbort>
    f4d6:	e7f6      	b.n	f4c6 <mutex_init+0x6>
    f4d8:	00015f3c 	.word	0x00015f3c

0000f4dc <mutex_lock>:
    f4dc:	b1c0      	cbz	r0, f510 <mutex_lock+0x34>
    f4de:	6843      	ldr	r3, [r0, #4]
    f4e0:	b1a3      	cbz	r3, f50c <mutex_lock+0x30>
    f4e2:	06db      	lsls	r3, r3, #27
    f4e4:	d510      	bpl.n	f508 <mutex_lock+0x2c>
    f4e6:	2201      	movs	r2, #1
    f4e8:	f3bf 8f5b 	dmb	ish
    f4ec:	e850 3f00 	ldrex	r3, [r0]
    f4f0:	e840 2100 	strex	r1, r2, [r0]
    f4f4:	2900      	cmp	r1, #0
    f4f6:	d1f9      	bne.n	f4ec <mutex_lock+0x10>
    f4f8:	f3bf 8f5b 	dmb	ish
    f4fc:	2b01      	cmp	r3, #1
    f4fe:	d0f3      	beq.n	f4e8 <mutex_lock+0xc>
    f500:	f3bf 8f5f 	dmb	sy
    f504:	2000      	movs	r0, #0
    f506:	4770      	bx	lr
    f508:	4803      	ldr	r0, [pc, #12]	; (f518 <mutex_lock+0x3c>)
    f50a:	4770      	bx	lr
    f50c:	4803      	ldr	r0, [pc, #12]	; (f51c <mutex_lock+0x40>)
    f50e:	4770      	bx	lr
    f510:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    f514:	4770      	bx	lr
    f516:	bf00      	nop
    f518:	ffff8fe9 	.word	0xffff8fe9
    f51c:	ffff8fea 	.word	0xffff8fea

0000f520 <nrf_cc3xx_platform_set_mutexes>:
    f520:	b570      	push	{r4, r5, r6, lr}
    f522:	e9d0 2300 	ldrd	r2, r3, [r0]
    f526:	4c13      	ldr	r4, [pc, #76]	; (f574 <nrf_cc3xx_platform_set_mutexes+0x54>)
    f528:	4d13      	ldr	r5, [pc, #76]	; (f578 <nrf_cc3xx_platform_set_mutexes+0x58>)
    f52a:	e9c4 2300 	strd	r2, r3, [r4]
    f52e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    f532:	e9c4 6302 	strd	r6, r3, [r4, #8]
    f536:	4b11      	ldr	r3, [pc, #68]	; (f57c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    f538:	6808      	ldr	r0, [r1, #0]
    f53a:	6018      	str	r0, [r3, #0]
    f53c:	6848      	ldr	r0, [r1, #4]
    f53e:	6058      	str	r0, [r3, #4]
    f540:	6888      	ldr	r0, [r1, #8]
    f542:	6098      	str	r0, [r3, #8]
    f544:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    f548:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    f54c:	60de      	str	r6, [r3, #12]
    f54e:	6118      	str	r0, [r3, #16]
    f550:	06cb      	lsls	r3, r1, #27
    f552:	d50d      	bpl.n	f570 <nrf_cc3xx_platform_set_mutexes+0x50>
    f554:	2300      	movs	r3, #0
    f556:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    f55a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    f55e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    f562:	4790      	blx	r2
    f564:	6823      	ldr	r3, [r4, #0]
    f566:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    f56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f56e:	4718      	bx	r3
    f570:	bd70      	pop	{r4, r5, r6, pc}
    f572:	bf00      	nop
    f574:	20000278 	.word	0x20000278
    f578:	20002ee4 	.word	0x20002ee4
    f57c:	20000288 	.word	0x20000288

0000f580 <CC_LibInitNoRng>:
    f580:	b510      	push	{r4, lr}
    f582:	f000 f833 	bl	f5ec <CC_HalInit>
    f586:	b120      	cbz	r0, f592 <CC_LibInitNoRng+0x12>
    f588:	2403      	movs	r4, #3
    f58a:	f000 f867 	bl	f65c <CC_PalTerminate>
    f58e:	4620      	mov	r0, r4
    f590:	bd10      	pop	{r4, pc}
    f592:	f000 f835 	bl	f600 <CC_PalInit>
    f596:	b990      	cbnz	r0, f5be <CC_LibInitNoRng+0x3e>
    f598:	f000 f8b0 	bl	f6fc <CC_PalPowerSaveModeSelect>
    f59c:	b990      	cbnz	r0, f5c4 <CC_LibInitNoRng+0x44>
    f59e:	4b0f      	ldr	r3, [pc, #60]	; (f5dc <CC_LibInitNoRng+0x5c>)
    f5a0:	681b      	ldr	r3, [r3, #0]
    f5a2:	0e1b      	lsrs	r3, r3, #24
    f5a4:	2bf0      	cmp	r3, #240	; 0xf0
    f5a6:	d108      	bne.n	f5ba <CC_LibInitNoRng+0x3a>
    f5a8:	4a0d      	ldr	r2, [pc, #52]	; (f5e0 <CC_LibInitNoRng+0x60>)
    f5aa:	4b0e      	ldr	r3, [pc, #56]	; (f5e4 <CC_LibInitNoRng+0x64>)
    f5ac:	6812      	ldr	r2, [r2, #0]
    f5ae:	429a      	cmp	r2, r3
    f5b0:	d00a      	beq.n	f5c8 <CC_LibInitNoRng+0x48>
    f5b2:	2407      	movs	r4, #7
    f5b4:	f000 f81c 	bl	f5f0 <CC_HalTerminate>
    f5b8:	e7e7      	b.n	f58a <CC_LibInitNoRng+0xa>
    f5ba:	2406      	movs	r4, #6
    f5bc:	e7fa      	b.n	f5b4 <CC_LibInitNoRng+0x34>
    f5be:	2404      	movs	r4, #4
    f5c0:	4620      	mov	r0, r4
    f5c2:	bd10      	pop	{r4, pc}
    f5c4:	2400      	movs	r4, #0
    f5c6:	e7f5      	b.n	f5b4 <CC_LibInitNoRng+0x34>
    f5c8:	2001      	movs	r0, #1
    f5ca:	f000 f897 	bl	f6fc <CC_PalPowerSaveModeSelect>
    f5ce:	4604      	mov	r4, r0
    f5d0:	2800      	cmp	r0, #0
    f5d2:	d1f7      	bne.n	f5c4 <CC_LibInitNoRng+0x44>
    f5d4:	4b04      	ldr	r3, [pc, #16]	; (f5e8 <CC_LibInitNoRng+0x68>)
    f5d6:	6018      	str	r0, [r3, #0]
    f5d8:	e7d9      	b.n	f58e <CC_LibInitNoRng+0xe>
    f5da:	bf00      	nop
    f5dc:	5002b928 	.word	0x5002b928
    f5e0:	5002ba24 	.word	0x5002ba24
    f5e4:	20e00000 	.word	0x20e00000
    f5e8:	5002ba0c 	.word	0x5002ba0c

0000f5ec <CC_HalInit>:
    f5ec:	2000      	movs	r0, #0
    f5ee:	4770      	bx	lr

0000f5f0 <CC_HalTerminate>:
    f5f0:	2000      	movs	r0, #0
    f5f2:	4770      	bx	lr

0000f5f4 <CC_HalMaskInterrupt>:
    f5f4:	4b01      	ldr	r3, [pc, #4]	; (f5fc <CC_HalMaskInterrupt+0x8>)
    f5f6:	6018      	str	r0, [r3, #0]
    f5f8:	4770      	bx	lr
    f5fa:	bf00      	nop
    f5fc:	5002ba04 	.word	0x5002ba04

0000f600 <CC_PalInit>:
    f600:	b510      	push	{r4, lr}
    f602:	4811      	ldr	r0, [pc, #68]	; (f648 <CC_PalInit+0x48>)
    f604:	f000 f848 	bl	f698 <CC_PalMutexCreate>
    f608:	b100      	cbz	r0, f60c <CC_PalInit+0xc>
    f60a:	bd10      	pop	{r4, pc}
    f60c:	480f      	ldr	r0, [pc, #60]	; (f64c <CC_PalInit+0x4c>)
    f60e:	f000 f843 	bl	f698 <CC_PalMutexCreate>
    f612:	2800      	cmp	r0, #0
    f614:	d1f9      	bne.n	f60a <CC_PalInit+0xa>
    f616:	4c0e      	ldr	r4, [pc, #56]	; (f650 <CC_PalInit+0x50>)
    f618:	4620      	mov	r0, r4
    f61a:	f000 f83d 	bl	f698 <CC_PalMutexCreate>
    f61e:	2800      	cmp	r0, #0
    f620:	d1f3      	bne.n	f60a <CC_PalInit+0xa>
    f622:	4b0c      	ldr	r3, [pc, #48]	; (f654 <CC_PalInit+0x54>)
    f624:	480c      	ldr	r0, [pc, #48]	; (f658 <CC_PalInit+0x58>)
    f626:	601c      	str	r4, [r3, #0]
    f628:	f000 f836 	bl	f698 <CC_PalMutexCreate>
    f62c:	4601      	mov	r1, r0
    f62e:	2800      	cmp	r0, #0
    f630:	d1eb      	bne.n	f60a <CC_PalInit+0xa>
    f632:	f000 f82d 	bl	f690 <CC_PalDmaInit>
    f636:	4604      	mov	r4, r0
    f638:	b108      	cbz	r0, f63e <CC_PalInit+0x3e>
    f63a:	4620      	mov	r0, r4
    f63c:	bd10      	pop	{r4, pc}
    f63e:	f000 f83f 	bl	f6c0 <CC_PalPowerSaveModeInit>
    f642:	4620      	mov	r0, r4
    f644:	e7fa      	b.n	f63c <CC_PalInit+0x3c>
    f646:	bf00      	nop
    f648:	200002c0 	.word	0x200002c0
    f64c:	200002b4 	.word	0x200002b4
    f650:	200002bc 	.word	0x200002bc
    f654:	200002c4 	.word	0x200002c4
    f658:	200002b8 	.word	0x200002b8

0000f65c <CC_PalTerminate>:
    f65c:	b508      	push	{r3, lr}
    f65e:	4808      	ldr	r0, [pc, #32]	; (f680 <CC_PalTerminate+0x24>)
    f660:	f000 f824 	bl	f6ac <CC_PalMutexDestroy>
    f664:	4807      	ldr	r0, [pc, #28]	; (f684 <CC_PalTerminate+0x28>)
    f666:	f000 f821 	bl	f6ac <CC_PalMutexDestroy>
    f66a:	4807      	ldr	r0, [pc, #28]	; (f688 <CC_PalTerminate+0x2c>)
    f66c:	f000 f81e 	bl	f6ac <CC_PalMutexDestroy>
    f670:	4806      	ldr	r0, [pc, #24]	; (f68c <CC_PalTerminate+0x30>)
    f672:	f000 f81b 	bl	f6ac <CC_PalMutexDestroy>
    f676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f67a:	f000 b80b 	b.w	f694 <CC_PalDmaTerminate>
    f67e:	bf00      	nop
    f680:	200002c0 	.word	0x200002c0
    f684:	200002b4 	.word	0x200002b4
    f688:	200002bc 	.word	0x200002bc
    f68c:	200002b8 	.word	0x200002b8

0000f690 <CC_PalDmaInit>:
    f690:	2000      	movs	r0, #0
    f692:	4770      	bx	lr

0000f694 <CC_PalDmaTerminate>:
    f694:	4770      	bx	lr
    f696:	bf00      	nop

0000f698 <CC_PalMutexCreate>:
    f698:	b508      	push	{r3, lr}
    f69a:	4b03      	ldr	r3, [pc, #12]	; (f6a8 <CC_PalMutexCreate+0x10>)
    f69c:	6802      	ldr	r2, [r0, #0]
    f69e:	681b      	ldr	r3, [r3, #0]
    f6a0:	6810      	ldr	r0, [r2, #0]
    f6a2:	4798      	blx	r3
    f6a4:	2000      	movs	r0, #0
    f6a6:	bd08      	pop	{r3, pc}
    f6a8:	20000278 	.word	0x20000278

0000f6ac <CC_PalMutexDestroy>:
    f6ac:	b508      	push	{r3, lr}
    f6ae:	4b03      	ldr	r3, [pc, #12]	; (f6bc <CC_PalMutexDestroy+0x10>)
    f6b0:	6802      	ldr	r2, [r0, #0]
    f6b2:	685b      	ldr	r3, [r3, #4]
    f6b4:	6810      	ldr	r0, [r2, #0]
    f6b6:	4798      	blx	r3
    f6b8:	2000      	movs	r0, #0
    f6ba:	bd08      	pop	{r3, pc}
    f6bc:	20000278 	.word	0x20000278

0000f6c0 <CC_PalPowerSaveModeInit>:
    f6c0:	b570      	push	{r4, r5, r6, lr}
    f6c2:	4c09      	ldr	r4, [pc, #36]	; (f6e8 <CC_PalPowerSaveModeInit+0x28>)
    f6c4:	4d09      	ldr	r5, [pc, #36]	; (f6ec <CC_PalPowerSaveModeInit+0x2c>)
    f6c6:	6920      	ldr	r0, [r4, #16]
    f6c8:	68ab      	ldr	r3, [r5, #8]
    f6ca:	4798      	blx	r3
    f6cc:	b118      	cbz	r0, f6d6 <CC_PalPowerSaveModeInit+0x16>
    f6ce:	4b08      	ldr	r3, [pc, #32]	; (f6f0 <CC_PalPowerSaveModeInit+0x30>)
    f6d0:	4808      	ldr	r0, [pc, #32]	; (f6f4 <CC_PalPowerSaveModeInit+0x34>)
    f6d2:	685b      	ldr	r3, [r3, #4]
    f6d4:	4798      	blx	r3
    f6d6:	4a08      	ldr	r2, [pc, #32]	; (f6f8 <CC_PalPowerSaveModeInit+0x38>)
    f6d8:	68eb      	ldr	r3, [r5, #12]
    f6da:	6920      	ldr	r0, [r4, #16]
    f6dc:	2100      	movs	r1, #0
    f6de:	6011      	str	r1, [r2, #0]
    f6e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6e4:	4718      	bx	r3
    f6e6:	bf00      	nop
    f6e8:	20000288 	.word	0x20000288
    f6ec:	20000278 	.word	0x20000278
    f6f0:	20000268 	.word	0x20000268
    f6f4:	00015f60 	.word	0x00015f60
    f6f8:	20002ed0 	.word	0x20002ed0

0000f6fc <CC_PalPowerSaveModeSelect>:
    f6fc:	b570      	push	{r4, r5, r6, lr}
    f6fe:	4d1a      	ldr	r5, [pc, #104]	; (f768 <CC_PalPowerSaveModeSelect+0x6c>)
    f700:	4e1a      	ldr	r6, [pc, #104]	; (f76c <CC_PalPowerSaveModeSelect+0x70>)
    f702:	4604      	mov	r4, r0
    f704:	68b2      	ldr	r2, [r6, #8]
    f706:	6928      	ldr	r0, [r5, #16]
    f708:	4790      	blx	r2
    f70a:	b9f0      	cbnz	r0, f74a <CC_PalPowerSaveModeSelect+0x4e>
    f70c:	b15c      	cbz	r4, f726 <CC_PalPowerSaveModeSelect+0x2a>
    f70e:	4c18      	ldr	r4, [pc, #96]	; (f770 <CC_PalPowerSaveModeSelect+0x74>)
    f710:	6823      	ldr	r3, [r4, #0]
    f712:	b1ab      	cbz	r3, f740 <CC_PalPowerSaveModeSelect+0x44>
    f714:	2b01      	cmp	r3, #1
    f716:	d01a      	beq.n	f74e <CC_PalPowerSaveModeSelect+0x52>
    f718:	3b01      	subs	r3, #1
    f71a:	6023      	str	r3, [r4, #0]
    f71c:	6928      	ldr	r0, [r5, #16]
    f71e:	68f3      	ldr	r3, [r6, #12]
    f720:	4798      	blx	r3
    f722:	2000      	movs	r0, #0
    f724:	bd70      	pop	{r4, r5, r6, pc}
    f726:	4c12      	ldr	r4, [pc, #72]	; (f770 <CC_PalPowerSaveModeSelect+0x74>)
    f728:	6821      	ldr	r1, [r4, #0]
    f72a:	b939      	cbnz	r1, f73c <CC_PalPowerSaveModeSelect+0x40>
    f72c:	4b11      	ldr	r3, [pc, #68]	; (f774 <CC_PalPowerSaveModeSelect+0x78>)
    f72e:	4a12      	ldr	r2, [pc, #72]	; (f778 <CC_PalPowerSaveModeSelect+0x7c>)
    f730:	2001      	movs	r0, #1
    f732:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    f736:	6813      	ldr	r3, [r2, #0]
    f738:	2b00      	cmp	r3, #0
    f73a:	d1fc      	bne.n	f736 <CC_PalPowerSaveModeSelect+0x3a>
    f73c:	3101      	adds	r1, #1
    f73e:	6021      	str	r1, [r4, #0]
    f740:	68f3      	ldr	r3, [r6, #12]
    f742:	6928      	ldr	r0, [r5, #16]
    f744:	4798      	blx	r3
    f746:	2000      	movs	r0, #0
    f748:	bd70      	pop	{r4, r5, r6, pc}
    f74a:	480c      	ldr	r0, [pc, #48]	; (f77c <CC_PalPowerSaveModeSelect+0x80>)
    f74c:	bd70      	pop	{r4, r5, r6, pc}
    f74e:	4a0a      	ldr	r2, [pc, #40]	; (f778 <CC_PalPowerSaveModeSelect+0x7c>)
    f750:	6813      	ldr	r3, [r2, #0]
    f752:	2b00      	cmp	r3, #0
    f754:	d1fc      	bne.n	f750 <CC_PalPowerSaveModeSelect+0x54>
    f756:	4a07      	ldr	r2, [pc, #28]	; (f774 <CC_PalPowerSaveModeSelect+0x78>)
    f758:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    f75c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    f760:	f7ff ff48 	bl	f5f4 <CC_HalMaskInterrupt>
    f764:	6823      	ldr	r3, [r4, #0]
    f766:	e7d7      	b.n	f718 <CC_PalPowerSaveModeSelect+0x1c>
    f768:	20000288 	.word	0x20000288
    f76c:	20000278 	.word	0x20000278
    f770:	20002ed0 	.word	0x20002ed0
    f774:	5002a000 	.word	0x5002a000
    f778:	5002b910 	.word	0x5002b910
    f77c:	ffff8fe9 	.word	0xffff8fe9

0000f780 <crc16calc>:
 uint16_t crc16calc(char* pData, int length){
    f780:	b410      	push	{r4}
    f782:	4604      	mov	r4, r0
     uint16_t wCrc = 0xffff;
    f784:	f64f 70ff 	movw	r0, #65535	; 0xffff
     while (length--) {
    f788:	460b      	mov	r3, r1
    f78a:	3901      	subs	r1, #1
    f78c:	b1a3      	cbz	r3, f7b8 <crc16calc+0x38>
         wCrc ^= *(unsigned char *)pData++ << 8;
    f78e:	f814 3b01 	ldrb.w	r3, [r4], #1
    f792:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
         for (i=0; i < 8; i++)
    f796:	2300      	movs	r3, #0
    f798:	e006      	b.n	f7a8 <crc16calc+0x28>
             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
    f79a:	f241 0221 	movw	r2, #4129	; 0x1021
    f79e:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
    f7a2:	b280      	uxth	r0, r0
         for (i=0; i < 8; i++)
    f7a4:	3301      	adds	r3, #1
    f7a6:	b2db      	uxtb	r3, r3
    f7a8:	2b07      	cmp	r3, #7
    f7aa:	d8ed      	bhi.n	f788 <crc16calc+0x8>
             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
    f7ac:	f410 4f00 	tst.w	r0, #32768	; 0x8000
    f7b0:	d1f3      	bne.n	f79a <crc16calc+0x1a>
    f7b2:	0040      	lsls	r0, r0, #1
    f7b4:	b280      	uxth	r0, r0
    f7b6:	e7f5      	b.n	f7a4 <crc16calc+0x24>
 }
    f7b8:	bc10      	pop	{r4}
    f7ba:	4770      	bx	lr

0000f7bc <EncapsulationMsgs>:
 void EncapsulationMsgs(char *data1,char *data2,int len){
    f7bc:	b538      	push	{r3, r4, r5, lr}
    f7be:	460d      	mov	r5, r1
    f7c0:	4611      	mov	r1, r2
	 data2[0]=0x7E;
    f7c2:	237e      	movs	r3, #126	; 0x7e
    f7c4:	702b      	strb	r3, [r5, #0]
	 int i = 1;
    f7c6:	2401      	movs	r4, #1
	 for(;i<=len;i++)data2[i]=data1[i-1];
    f7c8:	428c      	cmp	r4, r1
    f7ca:	dc05      	bgt.n	f7d8 <EncapsulationMsgs+0x1c>
    f7cc:	1903      	adds	r3, r0, r4
    f7ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    f7d2:	552b      	strb	r3, [r5, r4]
    f7d4:	3401      	adds	r4, #1
    f7d6:	e7f7      	b.n	f7c8 <EncapsulationMsgs+0xc>
	 aux=crc16calc(data1,len);
    f7d8:	f7ff ffd2 	bl	f780 <crc16calc>
	 data2[i+1] = aux;
    f7dc:	1c63      	adds	r3, r4, #1
    f7de:	54e8      	strb	r0, [r5, r3]
	 data2[i]= aux>>8;
    f7e0:	0a00      	lsrs	r0, r0, #8
    f7e2:	5528      	strb	r0, [r5, r4]
	 data2[i+2] = 0xFF;
    f7e4:	3402      	adds	r4, #2
    f7e6:	23ff      	movs	r3, #255	; 0xff
    f7e8:	552b      	strb	r3, [r5, r4]
 }
    f7ea:	bd38      	pop	{r3, r4, r5, pc}

0000f7ec <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    f7ec:	4602      	mov	r2, r0
    f7ee:	b158      	cbz	r0, f808 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f7f0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f7f2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    f7f6:	2b01      	cmp	r3, #1
    f7f8:	d003      	beq.n	f802 <sys_notify_validate+0x16>
    f7fa:	2b03      	cmp	r3, #3
    f7fc:	d107      	bne.n	f80e <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    f7fe:	6803      	ldr	r3, [r0, #0]
    f800:	b143      	cbz	r3, f814 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    f802:	2000      	movs	r0, #0
    f804:	6090      	str	r0, [r2, #8]
    f806:	4770      	bx	lr
		return -EINVAL;
    f808:	f06f 0015 	mvn.w	r0, #21
    f80c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    f80e:	f06f 0015 	mvn.w	r0, #21
    f812:	4770      	bx	lr
			rv = -EINVAL;
    f814:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    f818:	4770      	bx	lr

0000f81a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    f81a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f81c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f81e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    f822:	6081      	str	r1, [r0, #8]
	switch (method) {
    f824:	2a03      	cmp	r2, #3
    f826:	d103      	bne.n	f830 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    f828:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    f82a:	2200      	movs	r2, #0
    f82c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    f82e:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    f830:	2000      	movs	r0, #0
    f832:	e7fa      	b.n	f82a <sys_notify_finalize+0x10>

0000f834 <arch_printk_char_out>:
}
    f834:	2000      	movs	r0, #0
    f836:	4770      	bx	lr

0000f838 <str_out>:
{
    f838:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    f83a:	680c      	ldr	r4, [r1, #0]
    f83c:	b154      	cbz	r4, f854 <str_out+0x1c>
    f83e:	688a      	ldr	r2, [r1, #8]
    f840:	684b      	ldr	r3, [r1, #4]
    f842:	429a      	cmp	r2, r3
    f844:	da06      	bge.n	f854 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    f846:	3b01      	subs	r3, #1
    f848:	429a      	cmp	r2, r3
    f84a:	d008      	beq.n	f85e <str_out+0x26>
		ctx->str[ctx->count++] = c;
    f84c:	1c53      	adds	r3, r2, #1
    f84e:	608b      	str	r3, [r1, #8]
    f850:	54a0      	strb	r0, [r4, r2]
    f852:	e002      	b.n	f85a <str_out+0x22>
		ctx->count++;
    f854:	688b      	ldr	r3, [r1, #8]
    f856:	3301      	adds	r3, #1
    f858:	608b      	str	r3, [r1, #8]
}
    f85a:	bc10      	pop	{r4}
    f85c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    f85e:	1c53      	adds	r3, r2, #1
    f860:	608b      	str	r3, [r1, #8]
    f862:	2300      	movs	r3, #0
    f864:	54a3      	strb	r3, [r4, r2]
    f866:	e7f8      	b.n	f85a <str_out+0x22>

0000f868 <printk>:
{
    f868:	b40f      	push	{r0, r1, r2, r3}
    f86a:	b500      	push	{lr}
    f86c:	b083      	sub	sp, #12
    f86e:	a904      	add	r1, sp, #16
    f870:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    f874:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    f876:	f7f1 fa23 	bl	cc0 <vprintk>
}
    f87a:	b003      	add	sp, #12
    f87c:	f85d eb04 	ldr.w	lr, [sp], #4
    f880:	b004      	add	sp, #16
    f882:	4770      	bx	lr

0000f884 <snprintk>:
{
    f884:	b40c      	push	{r2, r3}
    f886:	b500      	push	{lr}
    f888:	b083      	sub	sp, #12
    f88a:	ab04      	add	r3, sp, #16
    f88c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    f890:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    f892:	f7f1 fa25 	bl	ce0 <vsnprintk>
}
    f896:	b003      	add	sp, #12
    f898:	f85d eb04 	ldr.w	lr, [sp], #4
    f89c:	b002      	add	sp, #8
    f89e:	4770      	bx	lr

0000f8a0 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    f8a0:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f8a4:	8b01      	ldrh	r1, [r0, #24]
    f8a6:	f021 0107 	bic.w	r1, r1, #7
    f8aa:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    f8ac:	8301      	strh	r1, [r0, #24]
}
    f8ae:	4770      	bx	lr

0000f8b0 <notify_monitors>:
{
    f8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8b4:	4606      	mov	r6, r0
    f8b6:	460f      	mov	r7, r1
    f8b8:	4690      	mov	r8, r2
	return list->head;
    f8ba:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f8bc:	b119      	cbz	r1, f8c6 <notify_monitors+0x16>
    f8be:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    f8c0:	b131      	cbz	r1, f8d0 <notify_monitors+0x20>
	return node->next;
    f8c2:	680c      	ldr	r4, [r1, #0]
    f8c4:	e004      	b.n	f8d0 <notify_monitors+0x20>
    f8c6:	460c      	mov	r4, r1
    f8c8:	e002      	b.n	f8d0 <notify_monitors+0x20>
    f8ca:	4623      	mov	r3, r4
    f8cc:	4621      	mov	r1, r4
    f8ce:	461c      	mov	r4, r3
    f8d0:	b159      	cbz	r1, f8ea <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    f8d2:	684d      	ldr	r5, [r1, #4]
    f8d4:	4643      	mov	r3, r8
    f8d6:	463a      	mov	r2, r7
    f8d8:	4630      	mov	r0, r6
    f8da:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f8dc:	2c00      	cmp	r4, #0
    f8de:	d0f4      	beq.n	f8ca <notify_monitors+0x1a>
    f8e0:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    f8e2:	2c00      	cmp	r4, #0
    f8e4:	d0f2      	beq.n	f8cc <notify_monitors+0x1c>
	return node->next;
    f8e6:	6823      	ldr	r3, [r4, #0]
    f8e8:	e7f0      	b.n	f8cc <notify_monitors+0x1c>
}
    f8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f8ee <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f8ee:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    f8f0:	f013 0307 	ands.w	r3, r3, #7
    f8f4:	d103      	bne.n	f8fe <process_recheck+0x10>
	return list->head;
    f8f6:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    f8f8:	b10a      	cbz	r2, f8fe <process_recheck+0x10>
		evt = EVT_START;
    f8fa:	2003      	movs	r0, #3
    f8fc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    f8fe:	2b02      	cmp	r3, #2
    f900:	d003      	beq.n	f90a <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    f902:	2b01      	cmp	r3, #1
    f904:	d006      	beq.n	f914 <process_recheck+0x26>
	int evt = EVT_NOP;
    f906:	2000      	movs	r0, #0
    f908:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    f90a:	8b42      	ldrh	r2, [r0, #26]
    f90c:	2a00      	cmp	r2, #0
    f90e:	d1f8      	bne.n	f902 <process_recheck+0x14>
		evt = EVT_STOP;
    f910:	2004      	movs	r0, #4
    f912:	4770      	bx	lr
    f914:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    f916:	b10b      	cbz	r3, f91c <process_recheck+0x2e>
		evt = EVT_RESET;
    f918:	2005      	movs	r0, #5
}
    f91a:	4770      	bx	lr
	int evt = EVT_NOP;
    f91c:	2000      	movs	r0, #0
    f91e:	4770      	bx	lr

0000f920 <process_complete>:
{
    f920:	b538      	push	{r3, r4, r5, lr}
    f922:	4604      	mov	r4, r0
    f924:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f926:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    f928:	2a00      	cmp	r2, #0
    f92a:	db07      	blt.n	f93c <process_complete+0x1c>
    f92c:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    f930:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    f932:	2a01      	cmp	r2, #1
    f934:	d90e      	bls.n	f954 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    f936:	2b04      	cmp	r3, #4
    f938:	d032      	beq.n	f9a0 <process_complete+0x80>
}
    f93a:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    f93c:	e9d0 0100 	ldrd	r0, r1, [r0]
    f940:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    f944:	2300      	movs	r3, #0
    f946:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    f948:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    f94a:	2101      	movs	r1, #1
    f94c:	4620      	mov	r0, r4
    f94e:	f7ff ffa7 	bl	f8a0 <set_state>
    f952:	e7f2      	b.n	f93a <process_complete+0x1a>
		*clients = mgr->clients;
    f954:	e9d0 0100 	ldrd	r0, r1, [r0]
    f958:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    f95c:	2200      	movs	r2, #0
    f95e:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    f960:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    f962:	2b06      	cmp	r3, #6
    f964:	d117      	bne.n	f996 <process_complete+0x76>
	return list->head;
    f966:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f968:	b13b      	cbz	r3, f97a <process_complete+0x5a>
				mgr->refs += 1U;
    f96a:	8b62      	ldrh	r2, [r4, #26]
    f96c:	3201      	adds	r2, #1
    f96e:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    f970:	2b00      	cmp	r3, #0
    f972:	d0f9      	beq.n	f968 <process_complete+0x48>
	return node->next;
    f974:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f976:	2b00      	cmp	r3, #0
    f978:	d1f6      	bne.n	f968 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    f97a:	2102      	movs	r1, #2
    f97c:	4620      	mov	r0, r4
    f97e:	f7ff ff8f 	bl	f8a0 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    f982:	4620      	mov	r0, r4
    f984:	f7ff ffb3 	bl	f8ee <process_recheck>
    f988:	2800      	cmp	r0, #0
    f98a:	d0d6      	beq.n	f93a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f98c:	8b23      	ldrh	r3, [r4, #24]
    f98e:	f043 0320 	orr.w	r3, r3, #32
    f992:	8323      	strh	r3, [r4, #24]
    f994:	e7d1      	b.n	f93a <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    f996:	2100      	movs	r1, #0
    f998:	4620      	mov	r0, r4
    f99a:	f7ff ff81 	bl	f8a0 <set_state>
    f99e:	e7f0      	b.n	f982 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    f9a0:	2100      	movs	r1, #0
    f9a2:	f7ff ff7d 	bl	f8a0 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    f9a6:	4620      	mov	r0, r4
    f9a8:	f7ff ffa1 	bl	f8ee <process_recheck>
    f9ac:	2800      	cmp	r0, #0
    f9ae:	d0c4      	beq.n	f93a <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f9b0:	8b23      	ldrh	r3, [r4, #24]
    f9b2:	f043 0320 	orr.w	r3, r3, #32
    f9b6:	8323      	strh	r3, [r4, #24]
}
    f9b8:	e7bf      	b.n	f93a <process_complete+0x1a>

0000f9ba <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    f9ba:	b158      	cbz	r0, f9d4 <validate_args+0x1a>
{
    f9bc:	b510      	push	{r4, lr}
    f9be:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f9c0:	b159      	cbz	r1, f9da <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    f9c2:	1d08      	adds	r0, r1, #4
    f9c4:	f7ff ff12 	bl	f7ec <sys_notify_validate>
	if ((rv == 0)
    f9c8:	b918      	cbnz	r0, f9d2 <validate_args+0x18>
	    && ((cli->notify.flags
    f9ca:	68a3      	ldr	r3, [r4, #8]
    f9cc:	f033 0303 	bics.w	r3, r3, #3
    f9d0:	d106      	bne.n	f9e0 <validate_args+0x26>
}
    f9d2:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f9d4:	f06f 0015 	mvn.w	r0, #21
}
    f9d8:	4770      	bx	lr
		return -EINVAL;
    f9da:	f06f 0015 	mvn.w	r0, #21
    f9de:	e7f8      	b.n	f9d2 <validate_args+0x18>
		rv = -EINVAL;
    f9e0:	f06f 0015 	mvn.w	r0, #21
    f9e4:	e7f5      	b.n	f9d2 <validate_args+0x18>

0000f9e6 <notify_one>:
{
    f9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9ea:	4607      	mov	r7, r0
    f9ec:	460c      	mov	r4, r1
    f9ee:	4616      	mov	r6, r2
    f9f0:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f9f2:	4619      	mov	r1, r3
    f9f4:	1d20      	adds	r0, r4, #4
    f9f6:	f7ff ff10 	bl	f81a <sys_notify_finalize>
	if (cb) {
    f9fa:	b128      	cbz	r0, fa08 <notify_one+0x22>
    f9fc:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    f9fe:	462b      	mov	r3, r5
    fa00:	4632      	mov	r2, r6
    fa02:	4621      	mov	r1, r4
    fa04:	4638      	mov	r0, r7
    fa06:	47c0      	blx	r8
}
    fa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fa0c <notify_all>:
{
    fa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa10:	4681      	mov	r9, r0
    fa12:	460c      	mov	r4, r1
    fa14:	4690      	mov	r8, r2
    fa16:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    fa18:	e005      	b.n	fa26 <notify_all+0x1a>
	list->tail = node;
    fa1a:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    fa1c:	463b      	mov	r3, r7
    fa1e:	4642      	mov	r2, r8
    fa20:	4648      	mov	r0, r9
    fa22:	f7ff ffe0 	bl	f9e6 <notify_one>
	return list->head;
    fa26:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    fa28:	b129      	cbz	r1, fa36 <notify_all+0x2a>
	return node->next;
    fa2a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    fa2c:	6025      	str	r5, [r4, #0]
	return list->tail;
    fa2e:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fa30:	428e      	cmp	r6, r1
    fa32:	d1f3      	bne.n	fa1c <notify_all+0x10>
    fa34:	e7f1      	b.n	fa1a <notify_all+0xe>
}
    fa36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000fa3a <transition_complete>:
{
    fa3a:	b510      	push	{r4, lr}
	__asm__ volatile(
    fa3c:	f04f 0420 	mov.w	r4, #32
    fa40:	f3ef 8211 	mrs	r2, BASEPRI
    fa44:	f384 8812 	msr	BASEPRI_MAX, r4
    fa48:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    fa4c:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    fa4e:	2101      	movs	r1, #1
    fa50:	f7f1 f95c 	bl	d0c <process_event>
}
    fa54:	bd10      	pop	{r4, pc}

0000fa56 <onoff_manager_init>:
	if ((mgr == NULL)
    fa56:	4603      	mov	r3, r0
    fa58:	b168      	cbz	r0, fa76 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    fa5a:	b179      	cbz	r1, fa7c <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    fa5c:	680a      	ldr	r2, [r1, #0]
    fa5e:	b182      	cbz	r2, fa82 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    fa60:	684a      	ldr	r2, [r1, #4]
    fa62:	b18a      	cbz	r2, fa88 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    fa64:	2000      	movs	r0, #0
    fa66:	6018      	str	r0, [r3, #0]
    fa68:	6058      	str	r0, [r3, #4]
    fa6a:	6098      	str	r0, [r3, #8]
    fa6c:	60d8      	str	r0, [r3, #12]
    fa6e:	6158      	str	r0, [r3, #20]
    fa70:	6198      	str	r0, [r3, #24]
    fa72:	6119      	str	r1, [r3, #16]
	return 0;
    fa74:	4770      	bx	lr
		return -EINVAL;
    fa76:	f06f 0015 	mvn.w	r0, #21
    fa7a:	4770      	bx	lr
    fa7c:	f06f 0015 	mvn.w	r0, #21
    fa80:	4770      	bx	lr
    fa82:	f06f 0015 	mvn.w	r0, #21
    fa86:	4770      	bx	lr
    fa88:	f06f 0015 	mvn.w	r0, #21
}
    fa8c:	4770      	bx	lr

0000fa8e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    fa8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa90:	4604      	mov	r4, r0
    fa92:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    fa94:	f7ff ff91 	bl	f9ba <validate_args>

	if (rv < 0) {
    fa98:	1e06      	subs	r6, r0, #0
    fa9a:	db37      	blt.n	fb0c <onoff_request+0x7e>
    fa9c:	f04f 0320 	mov.w	r3, #32
    faa0:	f3ef 8211 	mrs	r2, BASEPRI
    faa4:	f383 8812 	msr	BASEPRI_MAX, r3
    faa8:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    faac:	8b25      	ldrh	r5, [r4, #24]
    faae:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    fab2:	8b63      	ldrh	r3, [r4, #26]
    fab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fab8:	428b      	cmp	r3, r1
    faba:	d02f      	beq.n	fb1c <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    fabc:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    fabe:	2d02      	cmp	r5, #2
    fac0:	d00c      	beq.n	fadc <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    fac2:	b18d      	cbz	r5, fae8 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    fac4:	2d04      	cmp	r5, #4
    fac6:	d00f      	beq.n	fae8 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    fac8:	2d06      	cmp	r5, #6
    faca:	d00d      	beq.n	fae8 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    facc:	2d05      	cmp	r5, #5
    face:	d01f      	beq.n	fb10 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    fad0:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    fad4:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    fad6:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    fad8:	4608      	mov	r0, r1
    fada:	e00a      	b.n	faf2 <onoff_request+0x64>
		mgr->refs += 1U;
    fadc:	3301      	adds	r3, #1
    fade:	8363      	strh	r3, [r4, #26]
		notify = true;
    fae0:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    fae2:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    fae4:	4618      	mov	r0, r3
    fae6:	e004      	b.n	faf2 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    fae8:	fab5 f385 	clz	r3, r5
    faec:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    faee:	2100      	movs	r1, #0
		add_client = true;
    faf0:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    faf2:	b128      	cbz	r0, fb00 <onoff_request+0x72>
	parent->next = child;
    faf4:	2000      	movs	r0, #0
    faf6:	6038      	str	r0, [r7, #0]
	return list->tail;
    faf8:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    fafa:	b1a8      	cbz	r0, fb28 <onoff_request+0x9a>
	parent->next = child;
    fafc:	6007      	str	r7, [r0, #0]
	list->tail = node;
    fafe:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    fb00:	b9ab      	cbnz	r3, fb2e <onoff_request+0xa0>
	__asm__ volatile(
    fb02:	f382 8811 	msr	BASEPRI, r2
    fb06:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    fb0a:	b9a9      	cbnz	r1, fb38 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    fb0c:	4630      	mov	r0, r6
    fb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    fb10:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    fb14:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    fb16:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    fb18:	4608      	mov	r0, r1
    fb1a:	e7ea      	b.n	faf2 <onoff_request+0x64>
		rv = -EAGAIN;
    fb1c:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    fb20:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    fb22:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    fb24:	4608      	mov	r0, r1
    fb26:	e7e4      	b.n	faf2 <onoff_request+0x64>
    fb28:	6067      	str	r7, [r4, #4]
	list->head = node;
    fb2a:	6027      	str	r7, [r4, #0]
}
    fb2c:	e7e8      	b.n	fb00 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    fb2e:	2102      	movs	r1, #2
    fb30:	4620      	mov	r0, r4
    fb32:	f7f1 f8eb 	bl	d0c <process_event>
    fb36:	e7e9      	b.n	fb0c <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    fb38:	2300      	movs	r3, #0
    fb3a:	462a      	mov	r2, r5
    fb3c:	4639      	mov	r1, r7
    fb3e:	4620      	mov	r0, r4
    fb40:	f7ff ff51 	bl	f9e6 <notify_one>
    fb44:	e7e2      	b.n	fb0c <onoff_request+0x7e>

0000fb46 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    fb46:	b510      	push	{r4, lr}
	__asm__ volatile(
    fb48:	f04f 0320 	mov.w	r3, #32
    fb4c:	f3ef 8211 	mrs	r2, BASEPRI
    fb50:	f383 8812 	msr	BASEPRI_MAX, r3
    fb54:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fb58:	8b03      	ldrh	r3, [r0, #24]
    fb5a:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    fb5e:	2b02      	cmp	r3, #2
    fb60:	d007      	beq.n	fb72 <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
    fb62:	2b01      	cmp	r3, #1
    fb64:	d002      	beq.n	fb6c <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    fb66:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    fb6a:	e008      	b.n	fb7e <onoff_release+0x38>
			rv = -EIO;
    fb6c:	f06f 0404 	mvn.w	r4, #4
    fb70:	e005      	b.n	fb7e <onoff_release+0x38>
    fb72:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    fb74:	8b43      	ldrh	r3, [r0, #26]
    fb76:	3b01      	subs	r3, #1
    fb78:	b29b      	uxth	r3, r3
    fb7a:	8343      	strh	r3, [r0, #26]
	if (stop) {
    fb7c:	b12b      	cbz	r3, fb8a <onoff_release+0x44>
	__asm__ volatile(
    fb7e:	f382 8811 	msr	BASEPRI, r2
    fb82:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    fb86:	4620      	mov	r0, r4
    fb88:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    fb8a:	2102      	movs	r1, #2
    fb8c:	f7f1 f8be 	bl	d0c <process_event>
    fb90:	e7f9      	b.n	fb86 <onoff_release+0x40>

0000fb92 <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
    fb92:	2800      	cmp	r0, #0
    fb94:	d031      	beq.n	fbfa <onoff_cancel+0x68>
{
    fb96:	b470      	push	{r4, r5, r6}
    fb98:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
    fb9a:	2900      	cmp	r1, #0
    fb9c:	d030      	beq.n	fc00 <onoff_cancel+0x6e>
	__asm__ volatile(
    fb9e:	f04f 0320 	mov.w	r3, #32
    fba2:	f3ef 8611 	mrs	r6, BASEPRI
    fba6:	f383 8812 	msr	BASEPRI_MAX, r3
    fbaa:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fbae:	8b00      	ldrh	r0, [r0, #24]
    fbb0:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    fbb4:	460c      	mov	r4, r1
	return list->head;
    fbb6:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    fbb8:	2200      	movs	r2, #0
    fbba:	b1b3      	cbz	r3, fbea <onoff_cancel+0x58>
    fbbc:	429c      	cmp	r4, r3
    fbbe:	d002      	beq.n	fbc6 <onoff_cancel+0x34>
    fbc0:	461a      	mov	r2, r3
    fbc2:	681b      	ldr	r3, [r3, #0]
    fbc4:	e7f9      	b.n	fbba <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
    fbc6:	b13a      	cbz	r2, fbd8 <onoff_cancel+0x46>
	return node->next;
    fbc8:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    fbca:	6013      	str	r3, [r2, #0]
	return list->tail;
    fbcc:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    fbce:	4299      	cmp	r1, r3
    fbd0:	d009      	beq.n	fbe6 <onoff_cancel+0x54>
	parent->next = child;
    fbd2:	2300      	movs	r3, #0
    fbd4:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    fbd6:	e00a      	b.n	fbee <onoff_cancel+0x5c>
	return node->next;
    fbd8:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    fbda:	602b      	str	r3, [r5, #0]
	return list->tail;
    fbdc:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    fbde:	4291      	cmp	r1, r2
    fbe0:	d1f7      	bne.n	fbd2 <onoff_cancel+0x40>
	list->tail = node;
    fbe2:	606b      	str	r3, [r5, #4]
}
    fbe4:	e7f5      	b.n	fbd2 <onoff_cancel+0x40>
	list->tail = node;
    fbe6:	606a      	str	r2, [r5, #4]
}
    fbe8:	e7f3      	b.n	fbd2 <onoff_cancel+0x40>
	int rv = -EALREADY;
    fbea:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
    fbee:	f386 8811 	msr	BASEPRI, r6
    fbf2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    fbf6:	bc70      	pop	{r4, r5, r6}
    fbf8:	4770      	bx	lr
		return -EINVAL;
    fbfa:	f06f 0015 	mvn.w	r0, #21
}
    fbfe:	4770      	bx	lr
		return -EINVAL;
    fc00:	f06f 0015 	mvn.w	r0, #21
    fc04:	e7f7      	b.n	fbf6 <onoff_cancel+0x64>

0000fc06 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    fc06:	b508      	push	{r3, lr}
    fc08:	4604      	mov	r4, r0
    fc0a:	4608      	mov	r0, r1
    fc0c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    fc0e:	461a      	mov	r2, r3
    fc10:	47a0      	blx	r4
	return z_impl_z_current_get();
    fc12:	f7ff f90d 	bl	ee30 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    fc16:	f7f5 f901 	bl	4e1c <z_impl_k_thread_abort>

0000fc1a <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    fc1a:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
    fc1c:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    fc1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fc22:	d303      	bcc.n	fc2c <chunk_mem+0x12>
    fc24:	2308      	movs	r3, #8
    fc26:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    fc28:	4408      	add	r0, r1
    fc2a:	4770      	bx	lr
    fc2c:	2304      	movs	r3, #4
    fc2e:	e7fa      	b.n	fc26 <chunk_mem+0xc>

0000fc30 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    fc30:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
    fc32:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    fc36:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    fc38:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fc3c:	d317      	bcc.n	fc6e <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
    fc3e:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
    fc40:	4299      	cmp	r1, r3
    fc42:	d016      	beq.n	fc72 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
    fc44:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fc48:	d320      	bcc.n	fc8c <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
    fc4a:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    fc4c:	3204      	adds	r2, #4
    fc4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    fc52:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    fc56:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fc5a:	d319      	bcc.n	fc90 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
    fc5c:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
    fc5e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    fc62:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    fc64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    fc68:	d314      	bcc.n	fc94 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
    fc6a:	6099      	str	r1, [r3, #8]
    fc6c:	e00c      	b.n	fc88 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
    fc6e:	88eb      	ldrh	r3, [r5, #6]
    fc70:	e7e6      	b.n	fc40 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
    fc72:	2301      	movs	r3, #1
    fc74:	fa03 f102 	lsl.w	r1, r3, r2
    fc78:	68c3      	ldr	r3, [r0, #12]
    fc7a:	ea23 0301 	bic.w	r3, r3, r1
    fc7e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    fc80:	3204      	adds	r2, #4
    fc82:	2300      	movs	r3, #0
    fc84:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
    fc88:	bc30      	pop	{r4, r5}
    fc8a:	4770      	bx	lr
    fc8c:	88a9      	ldrh	r1, [r5, #4]
    fc8e:	e7dd      	b.n	fc4c <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
    fc90:	80d3      	strh	r3, [r2, #6]
    fc92:	e7e4      	b.n	fc5e <free_list_remove_bidx+0x2e>
    fc94:	8099      	strh	r1, [r3, #4]
    fc96:	e7f7      	b.n	fc88 <free_list_remove_bidx+0x58>

0000fc98 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    fc98:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    fc9a:	1d13      	adds	r3, r2, #4
    fc9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    fca0:	b9d3      	cbnz	r3, fcd8 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    fca2:	2301      	movs	r3, #1
    fca4:	fa03 f402 	lsl.w	r4, r3, r2
    fca8:	68c3      	ldr	r3, [r0, #12]
    fcaa:	4323      	orrs	r3, r4
    fcac:	60c3      	str	r3, [r0, #12]
		b->next = c;
    fcae:	3204      	adds	r2, #4
    fcb0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    fcb4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    fcb8:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    fcba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    fcbe:	d307      	bcc.n	fcd0 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
    fcc0:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    fcc2:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    fcc4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    fcc8:	d304      	bcc.n	fcd4 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    fcca:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    fccc:	bc70      	pop	{r4, r5, r6}
    fcce:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
    fcd0:	8099      	strh	r1, [r3, #4]
    fcd2:	e7f6      	b.n	fcc2 <free_list_add_bidx+0x2a>
    fcd4:	80d9      	strh	r1, [r3, #6]
    fcd6:	e7f9      	b.n	fccc <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    fcd8:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    fcdc:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    fcde:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    fce2:	d318      	bcc.n	fd16 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    fce4:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    fce6:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    fcea:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    fcee:	d314      	bcc.n	fd1a <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    fcf0:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
    fcf2:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    fcf4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    fcf8:	d311      	bcc.n	fd1e <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    fcfa:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    fcfc:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    fd00:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    fd02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd06:	d30c      	bcc.n	fd22 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    fd08:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    fd0a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    fd0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd10:	d309      	bcc.n	fd26 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    fd12:	60a1      	str	r1, [r4, #8]
    fd14:	e7da      	b.n	fccc <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    fd16:	88a2      	ldrh	r2, [r4, #4]
    fd18:	e7e5      	b.n	fce6 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    fd1a:	80aa      	strh	r2, [r5, #4]
    fd1c:	e7e9      	b.n	fcf2 <free_list_add_bidx+0x5a>
    fd1e:	80eb      	strh	r3, [r5, #6]
    fd20:	e7ec      	b.n	fcfc <free_list_add_bidx+0x64>
    fd22:	80d1      	strh	r1, [r2, #6]
    fd24:	e7f1      	b.n	fd0a <free_list_add_bidx+0x72>
    fd26:	80a1      	strh	r1, [r4, #4]
    fd28:	e7d0      	b.n	fccc <free_list_add_bidx+0x34>

0000fd2a <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    fd2a:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    fd2c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    fd30:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    fd32:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    fd36:	d325      	bcc.n	fd84 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
    fd38:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    fd3a:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
    fd3c:	1a89      	subs	r1, r1, r2
    fd3e:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    fd42:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    fd44:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    fd48:	d31e      	bcc.n	fd88 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
    fd4a:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    fd4c:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
    fd4e:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    fd52:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    fd54:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    fd58:	d318      	bcc.n	fd8c <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
    fd5a:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    fd5c:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    fd5e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    fd62:	d315      	bcc.n	fd90 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
    fd64:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
    fd68:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    fd6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd6e:	d312      	bcc.n	fd96 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
    fd70:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
    fd72:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    fd76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd7a:	d30e      	bcc.n	fd9a <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
    fd7c:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    fd80:	bc70      	pop	{r4, r5, r6}
    fd82:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    fd84:	8866      	ldrh	r6, [r4, #2]
    fd86:	e7d8      	b.n	fd3a <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
    fd88:	8066      	strh	r6, [r4, #2]
    fd8a:	e7df      	b.n	fd4c <split_chunks+0x22>
    fd8c:	8065      	strh	r5, [r4, #2]
    fd8e:	e7e5      	b.n	fd5c <split_chunks+0x32>
    fd90:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    fd94:	e7e8      	b.n	fd68 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
    fd96:	8864      	ldrh	r4, [r4, #2]
    fd98:	e7eb      	b.n	fd72 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
    fd9a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
    fd9e:	e7ef      	b.n	fd80 <split_chunks+0x56>

0000fda0 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    fda0:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    fda2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    fda6:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    fda8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fdac:	d31c      	bcc.n	fde8 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
    fdae:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fdb0:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
    fdb2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
    fdb6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fdba:	d317      	bcc.n	fdec <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
    fdbc:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    fdbe:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    fdc2:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    fdc4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fdc8:	d312      	bcc.n	fdf0 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
    fdca:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
    fdcc:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
    fdce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    fdd2:	d30f      	bcc.n	fdf4 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
    fdd4:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
    fdd6:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    fdda:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    fdde:	d30b      	bcc.n	fdf8 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
    fde0:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    fde4:	bc70      	pop	{r4, r5, r6}
    fde6:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    fde8:	884b      	ldrh	r3, [r1, #2]
    fdea:	e7e1      	b.n	fdb0 <merge_chunks+0x10>
    fdec:	886e      	ldrh	r6, [r5, #2]
    fdee:	e7e6      	b.n	fdbe <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
    fdf0:	804e      	strh	r6, [r1, #2]
    fdf2:	e7eb      	b.n	fdcc <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
    fdf4:	886c      	ldrh	r4, [r5, #2]
    fdf6:	e7ee      	b.n	fdd6 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
    fdf8:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    fdfc:	e7f2      	b.n	fde4 <merge_chunks+0x44>

0000fdfe <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
    fdfe:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
    fe00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe04:	d304      	bcc.n	fe10 <mem_to_chunkid+0x12>
    fe06:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    fe08:	1ac9      	subs	r1, r1, r3
    fe0a:	1a08      	subs	r0, r1, r0
}
    fe0c:	08c0      	lsrs	r0, r0, #3
    fe0e:	4770      	bx	lr
    fe10:	2304      	movs	r3, #4
    fe12:	e7f9      	b.n	fe08 <mem_to_chunkid+0xa>

0000fe14 <free_list_remove>:
{
    fe14:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    fe16:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    fe18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe1c:	d307      	bcc.n	fe2e <free_list_remove+0x1a>
	void *cmem = &buf[c];
    fe1e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    fe22:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fe24:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    fe26:	2a01      	cmp	r2, #1
    fe28:	d002      	beq.n	fe30 <free_list_remove+0x1c>
    fe2a:	2200      	movs	r2, #0
    fe2c:	e000      	b.n	fe30 <free_list_remove+0x1c>
    fe2e:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    fe30:	b9a2      	cbnz	r2, fe5c <free_list_remove+0x48>
	void *cmem = &buf[c];
    fe32:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    fe36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe3a:	d310      	bcc.n	fe5e <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
    fe3c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fe3e:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    fe40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe44:	d30d      	bcc.n	fe62 <free_list_remove+0x4e>
    fe46:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    fe48:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    fe4a:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    fe4e:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    fe50:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    fe54:	f1c2 021f 	rsb	r2, r2, #31
    fe58:	f7ff feea 	bl	fc30 <free_list_remove_bidx>
}
    fe5c:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    fe5e:	8852      	ldrh	r2, [r2, #2]
    fe60:	e7ed      	b.n	fe3e <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
    fe62:	2304      	movs	r3, #4
    fe64:	e7f0      	b.n	fe48 <free_list_remove+0x34>

0000fe66 <free_list_add>:
{
    fe66:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    fe68:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    fe6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe6e:	d307      	bcc.n	fe80 <free_list_add+0x1a>
	void *cmem = &buf[c];
    fe70:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    fe74:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fe76:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    fe78:	2a01      	cmp	r2, #1
    fe7a:	d002      	beq.n	fe82 <free_list_add+0x1c>
    fe7c:	2200      	movs	r2, #0
    fe7e:	e000      	b.n	fe82 <free_list_add+0x1c>
    fe80:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    fe82:	b9a2      	cbnz	r2, feae <free_list_add+0x48>
	void *cmem = &buf[c];
    fe84:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    fe88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe8c:	d310      	bcc.n	feb0 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    fe8e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fe90:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    fe92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe96:	d30d      	bcc.n	feb4 <free_list_add+0x4e>
    fe98:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    fe9a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    fe9c:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    fea0:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    fea2:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    fea6:	f1c2 021f 	rsb	r2, r2, #31
    feaa:	f7ff fef5 	bl	fc98 <free_list_add_bidx>
}
    feae:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    feb0:	8852      	ldrh	r2, [r2, #2]
    feb2:	e7ed      	b.n	fe90 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    feb4:	2304      	movs	r3, #4
    feb6:	e7f0      	b.n	fe9a <free_list_add+0x34>

0000feb8 <free_chunk>:
{
    feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    feba:	4604      	mov	r4, r0
    febc:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    febe:	00ce      	lsls	r6, r1, #3
    fec0:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    fec4:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    fec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    feca:	d31f      	bcc.n	ff0c <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
    fecc:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
    fece:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
    fed2:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    fed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    feda:	d319      	bcc.n	ff10 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
    fedc:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
    fede:	f013 0f01 	tst.w	r3, #1
    fee2:	d017      	beq.n	ff14 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
    fee4:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    fee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    feea:	d324      	bcc.n	ff36 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
    feec:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    feee:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
    fef0:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    fef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fef8:	d31f      	bcc.n	ff3a <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
    fefa:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
    fefc:	f013 0f01 	tst.w	r3, #1
    ff00:	d01d      	beq.n	ff3e <free_chunk+0x86>
	free_list_add(h, c);
    ff02:	4629      	mov	r1, r5
    ff04:	4620      	mov	r0, r4
    ff06:	f7ff ffae 	bl	fe66 <free_list_add>
}
    ff0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
    ff0c:	8879      	ldrh	r1, [r7, #2]
    ff0e:	e7de      	b.n	fece <free_chunk+0x16>
    ff10:	8853      	ldrh	r3, [r2, #2]
    ff12:	e7e4      	b.n	fede <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
    ff14:	4620      	mov	r0, r4
    ff16:	f7ff ff7d 	bl	fe14 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    ff1a:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    ff1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ff20:	d307      	bcc.n	ff32 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
    ff22:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
    ff24:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    ff28:	4629      	mov	r1, r5
    ff2a:	4620      	mov	r0, r4
    ff2c:	f7ff ff38 	bl	fda0 <merge_chunks>
    ff30:	e7d8      	b.n	fee4 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
    ff32:	887a      	ldrh	r2, [r7, #2]
    ff34:	e7f6      	b.n	ff24 <free_chunk+0x6c>
    ff36:	5ba1      	ldrh	r1, [r4, r6]
    ff38:	e7d9      	b.n	feee <free_chunk+0x36>
    ff3a:	8853      	ldrh	r3, [r2, #2]
    ff3c:	e7de      	b.n	fefc <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
    ff3e:	4620      	mov	r0, r4
    ff40:	f7ff ff68 	bl	fe14 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    ff44:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    ff46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ff4a:	d30c      	bcc.n	ff66 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
    ff4c:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    ff4e:	462a      	mov	r2, r5
    ff50:	1a69      	subs	r1, r5, r1
    ff52:	4620      	mov	r0, r4
    ff54:	f7ff ff24 	bl	fda0 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
    ff58:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    ff5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ff5e:	d304      	bcc.n	ff6a <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
    ff60:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    ff62:	1aed      	subs	r5, r5, r3
    ff64:	e7cd      	b.n	ff02 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
    ff66:	5ba1      	ldrh	r1, [r4, r6]
    ff68:	e7f1      	b.n	ff4e <free_chunk+0x96>
    ff6a:	5ba3      	ldrh	r3, [r4, r6]
    ff6c:	e7f9      	b.n	ff62 <free_chunk+0xaa>

0000ff6e <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    ff6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
    ff70:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
    ff72:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    ff76:	d311      	bcc.n	ff9c <alloc_chunk+0x2e>
    ff78:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ff7a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    ff7c:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
    ff80:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    ff82:	fab3 f383 	clz	r3, r3
    ff86:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    ff8a:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    ff8e:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
    ff92:	f1bc 0f00 	cmp.w	ip, #0
    ff96:	d024      	beq.n	ffe2 <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    ff98:	2603      	movs	r6, #3
    ff9a:	e010      	b.n	ffbe <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
    ff9c:	2304      	movs	r3, #4
    ff9e:	e7ec      	b.n	ff7a <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
    ffa0:	f8b7 e002 	ldrh.w	lr, [r7, #2]
    ffa4:	e015      	b.n	ffd2 <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
    ffa6:	4621      	mov	r1, r4
    ffa8:	f7ff fe42 	bl	fc30 <free_list_remove_bidx>
				return c;
    ffac:	e021      	b.n	fff2 <alloc_chunk+0x84>
    ffae:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
    ffb0:	1d17      	adds	r7, r2, #4
    ffb2:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    ffb6:	3e01      	subs	r6, #1
    ffb8:	d013      	beq.n	ffe2 <alloc_chunk+0x74>
    ffba:	45a4      	cmp	ip, r4
    ffbc:	d011      	beq.n	ffe2 <alloc_chunk+0x74>
			chunkid_t c = b->next;
    ffbe:	1d14      	adds	r4, r2, #4
    ffc0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    ffc4:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
    ffc8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    ffcc:	d3e8      	bcc.n	ffa0 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
    ffce:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
    ffd2:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
    ffd6:	d9e6      	bls.n	ffa6 <alloc_chunk+0x38>
	if (big_heap(h)) {
    ffd8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    ffdc:	d3e7      	bcc.n	ffae <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
    ffde:	68fc      	ldr	r4, [r7, #12]
    ffe0:	e7e6      	b.n	ffb0 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
    ffe2:	68c4      	ldr	r4, [r0, #12]
    ffe4:	f1c3 0220 	rsb	r2, r3, #32
    ffe8:	2301      	movs	r3, #1
    ffea:	4093      	lsls	r3, r2
    ffec:	425b      	negs	r3, r3

	if (bmask != 0U) {
    ffee:	401c      	ands	r4, r3
    fff0:	d101      	bne.n	fff6 <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    fff2:	4620      	mov	r0, r4
    fff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
    fff6:	fa94 f2a4 	rbit	r2, r4
    fffa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    fffe:	1d13      	adds	r3, r2, #4
   10000:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   10004:	4621      	mov	r1, r4
   10006:	f7ff fe13 	bl	fc30 <free_list_remove_bidx>
		return c;
   1000a:	e7f2      	b.n	fff2 <alloc_chunk+0x84>

0001000c <sys_heap_free>:
	if (mem == NULL) {
   1000c:	b1c1      	cbz	r1, 10040 <sys_heap_free+0x34>
{
   1000e:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   10010:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   10012:	4620      	mov	r0, r4
   10014:	f7ff fef3 	bl	fdfe <mem_to_chunkid>
   10018:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1001a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   1001e:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   10020:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   10024:	d307      	bcc.n	10036 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10026:	685a      	ldr	r2, [r3, #4]
   10028:	f022 0201 	bic.w	r2, r2, #1
   1002c:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   1002e:	4620      	mov	r0, r4
   10030:	f7ff ff42 	bl	feb8 <free_chunk>
}
   10034:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10036:	885a      	ldrh	r2, [r3, #2]
   10038:	f022 0201 	bic.w	r2, r2, #1
   1003c:	805a      	strh	r2, [r3, #2]
   1003e:	e7f6      	b.n	1002e <sys_heap_free+0x22>
   10040:	4770      	bx	lr

00010042 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   10042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   10044:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   10046:	2900      	cmp	r1, #0
   10048:	d03c      	beq.n	100c4 <sys_heap_alloc+0x82>
   1004a:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1004c:	68aa      	ldr	r2, [r5, #8]
   1004e:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   10052:	d939      	bls.n	100c8 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   10054:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   10058:	d320      	bcc.n	1009c <sys_heap_alloc+0x5a>
   1005a:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   1005c:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1005e:	3407      	adds	r4, #7
   10060:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   10062:	4621      	mov	r1, r4
   10064:	4628      	mov	r0, r5
   10066:	f7ff ff82 	bl	ff6e <alloc_chunk>
	if (c == 0U) {
   1006a:	4607      	mov	r7, r0
   1006c:	b370      	cbz	r0, 100cc <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   1006e:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   10072:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   10074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10078:	d312      	bcc.n	100a0 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   1007a:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1007c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   10080:	d310      	bcc.n	100a4 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   10082:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   10084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10088:	d317      	bcc.n	100ba <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1008a:	6873      	ldr	r3, [r6, #4]
   1008c:	f043 0301 	orr.w	r3, r3, #1
   10090:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   10092:	4639      	mov	r1, r7
   10094:	4628      	mov	r0, r5
   10096:	f7ff fdc0 	bl	fc1a <chunk_mem>
}
   1009a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   1009c:	2404      	movs	r4, #4
   1009e:	e7dd      	b.n	1005c <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   100a0:	8873      	ldrh	r3, [r6, #2]
   100a2:	e7eb      	b.n	1007c <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   100a4:	443c      	add	r4, r7
   100a6:	4622      	mov	r2, r4
   100a8:	4639      	mov	r1, r7
   100aa:	4628      	mov	r0, r5
   100ac:	f7ff fe3d 	bl	fd2a <split_chunks>
		free_list_add(h, c + chunk_sz);
   100b0:	4621      	mov	r1, r4
   100b2:	4628      	mov	r0, r5
   100b4:	f7ff fed7 	bl	fe66 <free_list_add>
   100b8:	e7e3      	b.n	10082 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   100ba:	8873      	ldrh	r3, [r6, #2]
   100bc:	f043 0301 	orr.w	r3, r3, #1
   100c0:	8073      	strh	r3, [r6, #2]
   100c2:	e7e6      	b.n	10092 <sys_heap_alloc+0x50>
		return NULL;
   100c4:	2000      	movs	r0, #0
   100c6:	e7e8      	b.n	1009a <sys_heap_alloc+0x58>
   100c8:	2000      	movs	r0, #0
   100ca:	e7e6      	b.n	1009a <sys_heap_alloc+0x58>
		return NULL;
   100cc:	2000      	movs	r0, #0
   100ce:	e7e4      	b.n	1009a <sys_heap_alloc+0x58>

000100d0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   100d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100d4:	460d      	mov	r5, r1
   100d6:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   100d8:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   100da:	424b      	negs	r3, r1
   100dc:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   100e0:	ea31 0303 	bics.w	r3, r1, r3
   100e4:	d04e      	beq.n	10184 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   100e6:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   100ea:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   100ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   100f0:	d346      	bcc.n	10180 <sys_heap_aligned_alloc+0xb0>
   100f2:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   100f4:	4598      	cmp	r8, r3
   100f6:	d200      	bcs.n	100fa <sys_heap_aligned_alloc+0x2a>
   100f8:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   100fa:	2c00      	cmp	r4, #0
   100fc:	d070      	beq.n	101e0 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   100fe:	68b2      	ldr	r2, [r6, #8]
   10100:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   10104:	d96e      	bls.n	101e4 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   10106:	1929      	adds	r1, r5, r4
   10108:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   1010a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1010e:	d34a      	bcc.n	101a6 <sys_heap_aligned_alloc+0xd6>
   10110:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   10112:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10114:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   10116:	08c9      	lsrs	r1, r1, #3
   10118:	4630      	mov	r0, r6
   1011a:	f7ff ff28 	bl	ff6e <alloc_chunk>

	if (c0 == 0) {
   1011e:	4607      	mov	r7, r0
   10120:	2800      	cmp	r0, #0
   10122:	d061      	beq.n	101e8 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   10124:	4601      	mov	r1, r0
   10126:	4630      	mov	r0, r6
   10128:	f7ff fd77 	bl	fc1a <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1012c:	4440      	add	r0, r8
   1012e:	4428      	add	r0, r5
   10130:	3801      	subs	r0, #1
   10132:	426d      	negs	r5, r5
   10134:	4005      	ands	r5, r0
   10136:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1013a:	442c      	add	r4, r5
   1013c:	3407      	adds	r4, #7
   1013e:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   10142:	4629      	mov	r1, r5
   10144:	4630      	mov	r0, r6
   10146:	f7ff fe5a 	bl	fdfe <mem_to_chunkid>
   1014a:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   1014c:	1ba4      	subs	r4, r4, r6
   1014e:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   10150:	4287      	cmp	r7, r0
   10152:	d32a      	bcc.n	101aa <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   10154:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   10158:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   1015a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1015e:	d32e      	bcc.n	101be <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   10160:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   10162:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   10166:	429c      	cmp	r4, r3
   10168:	d32b      	bcc.n	101c2 <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   1016a:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   1016c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10170:	d331      	bcc.n	101d6 <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   10172:	687b      	ldr	r3, [r7, #4]
   10174:	f043 0301 	orr.w	r3, r3, #1
   10178:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1017a:	4628      	mov	r0, r5
   1017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   10180:	2304      	movs	r3, #4
   10182:	e7b7      	b.n	100f4 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   10184:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   10186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1018a:	d305      	bcc.n	10198 <sys_heap_aligned_alloc+0xc8>
   1018c:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   1018e:	429d      	cmp	r5, r3
   10190:	d904      	bls.n	1019c <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   10192:	f04f 0800 	mov.w	r8, #0
   10196:	e7b0      	b.n	100fa <sys_heap_aligned_alloc+0x2a>
   10198:	2304      	movs	r3, #4
   1019a:	e7f8      	b.n	1018e <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   1019c:	4621      	mov	r1, r4
   1019e:	f7ff ff50 	bl	10042 <sys_heap_alloc>
   101a2:	4605      	mov	r5, r0
   101a4:	e7e9      	b.n	1017a <sys_heap_aligned_alloc+0xaa>
   101a6:	2304      	movs	r3, #4
   101a8:	e7b3      	b.n	10112 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   101aa:	4602      	mov	r2, r0
   101ac:	4639      	mov	r1, r7
   101ae:	4630      	mov	r0, r6
   101b0:	f7ff fdbb 	bl	fd2a <split_chunks>
		free_list_add(h, c0);
   101b4:	4639      	mov	r1, r7
   101b6:	4630      	mov	r0, r6
   101b8:	f7ff fe55 	bl	fe66 <free_list_add>
   101bc:	e7ca      	b.n	10154 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   101be:	887b      	ldrh	r3, [r7, #2]
   101c0:	e7cf      	b.n	10162 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   101c2:	4622      	mov	r2, r4
   101c4:	4641      	mov	r1, r8
   101c6:	4630      	mov	r0, r6
   101c8:	f7ff fdaf 	bl	fd2a <split_chunks>
		free_list_add(h, c_end);
   101cc:	4621      	mov	r1, r4
   101ce:	4630      	mov	r0, r6
   101d0:	f7ff fe49 	bl	fe66 <free_list_add>
   101d4:	e7c9      	b.n	1016a <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   101d6:	887b      	ldrh	r3, [r7, #2]
   101d8:	f043 0301 	orr.w	r3, r3, #1
   101dc:	807b      	strh	r3, [r7, #2]
   101de:	e7cc      	b.n	1017a <sys_heap_aligned_alloc+0xaa>
		return NULL;
   101e0:	2500      	movs	r5, #0
   101e2:	e7ca      	b.n	1017a <sys_heap_aligned_alloc+0xaa>
   101e4:	2500      	movs	r5, #0
   101e6:	e7c8      	b.n	1017a <sys_heap_aligned_alloc+0xaa>
		return NULL;
   101e8:	2500      	movs	r5, #0
   101ea:	e7c6      	b.n	1017a <sys_heap_aligned_alloc+0xaa>

000101ec <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   101ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101ee:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   101f0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   101f4:	d32a      	bcc.n	1024c <sys_heap_init+0x60>
   101f6:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   101f8:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   101fa:	1dc8      	adds	r0, r1, #7
   101fc:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10200:	440d      	add	r5, r1
   10202:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10206:	1a2d      	subs	r5, r5, r0
   10208:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   1020a:	4606      	mov	r6, r0
	heap->heap = h;
   1020c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1020e:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   10210:	2300      	movs	r3, #0
   10212:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   10214:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   10218:	d31a      	bcc.n	10250 <sys_heap_init+0x64>
   1021a:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1021c:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1021e:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   10222:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   10224:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   10228:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1022c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   10230:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10232:	f103 0e07 	add.w	lr, r3, #7
   10236:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1023a:	2300      	movs	r3, #0
   1023c:	4563      	cmp	r3, ip
   1023e:	da09      	bge.n	10254 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   10240:	1d1a      	adds	r2, r3, #4
   10242:	2400      	movs	r4, #0
   10244:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   10248:	3301      	adds	r3, #1
   1024a:	e7f7      	b.n	1023c <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   1024c:	2504      	movs	r5, #4
   1024e:	e7d3      	b.n	101f8 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   10250:	2304      	movs	r3, #4
   10252:	e7e3      	b.n	1021c <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10254:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   10256:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1025a:	d333      	bcc.n	102c4 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   1025c:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   1025e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   10262:	d331      	bcc.n	102c8 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   10264:	2300      	movs	r3, #0
   10266:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   10268:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1026c:	d32f      	bcc.n	102ce <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1026e:	6843      	ldr	r3, [r0, #4]
   10270:	f043 0301 	orr.w	r3, r3, #1
   10274:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10276:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10278:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   1027a:	f02e 0307 	bic.w	r3, lr, #7
   1027e:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   10280:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   10284:	d328      	bcc.n	102d8 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   10286:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   10288:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1028a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1028e:	d325      	bcc.n	102dc <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   10290:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   10292:	f025 0307 	bic.w	r3, r5, #7
   10296:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   10298:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1029a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1029e:	d31f      	bcc.n	102e0 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   102a0:	2400      	movs	r4, #0
   102a2:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   102a4:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   102a6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   102aa:	d31c      	bcc.n	102e6 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   102ac:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   102ae:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   102b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   102b4:	d319      	bcc.n	102ea <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   102b6:	686b      	ldr	r3, [r5, #4]
   102b8:	f043 0301 	orr.w	r3, r3, #1
   102bc:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   102be:	f7ff fdd2 	bl	fe66 <free_list_add>
}
   102c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   102c4:	8043      	strh	r3, [r0, #2]
   102c6:	e7ca      	b.n	1025e <sys_heap_init+0x72>
   102c8:	2300      	movs	r3, #0
   102ca:	8003      	strh	r3, [r0, #0]
   102cc:	e7cc      	b.n	10268 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   102ce:	8843      	ldrh	r3, [r0, #2]
   102d0:	f043 0301 	orr.w	r3, r3, #1
   102d4:	8043      	strh	r3, [r0, #2]
   102d6:	e7ce      	b.n	10276 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   102d8:	8066      	strh	r6, [r4, #2]
   102da:	e7d5      	b.n	10288 <sys_heap_init+0x9c>
   102dc:	52c1      	strh	r1, [r0, r3]
   102de:	e7d8      	b.n	10292 <sys_heap_init+0xa6>
   102e0:	2400      	movs	r4, #0
   102e2:	806c      	strh	r4, [r5, #2]
   102e4:	e7de      	b.n	102a4 <sys_heap_init+0xb8>
   102e6:	52c2      	strh	r2, [r0, r3]
   102e8:	e7e1      	b.n	102ae <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   102ea:	886b      	ldrh	r3, [r5, #2]
   102ec:	f043 0301 	orr.w	r3, r3, #1
   102f0:	806b      	strh	r3, [r5, #2]
   102f2:	e7e4      	b.n	102be <sys_heap_init+0xd2>

000102f4 <extract_decimal>:
{
   102f4:	b410      	push	{r4}
   102f6:	4604      	mov	r4, r0
	const char *sp = *str;
   102f8:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   102fa:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   102fc:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   102fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   10302:	2909      	cmp	r1, #9
   10304:	d806      	bhi.n	10314 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   10306:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1030a:	3201      	adds	r2, #1
   1030c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   10310:	3830      	subs	r0, #48	; 0x30
   10312:	e7f3      	b.n	102fc <extract_decimal+0x8>
	*str = sp;
   10314:	6022      	str	r2, [r4, #0]
}
   10316:	bc10      	pop	{r4}
   10318:	4770      	bx	lr

0001031a <encode_uint>:
{
   1031a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1031e:	b083      	sub	sp, #12
   10320:	4604      	mov	r4, r0
   10322:	460d      	mov	r5, r1
   10324:	9201      	str	r2, [sp, #4]
   10326:	469a      	mov	sl, r3
   10328:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   1032c:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1032e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   10332:	2b6f      	cmp	r3, #111	; 0x6f
   10334:	d00f      	beq.n	10356 <encode_uint+0x3c>
   10336:	d906      	bls.n	10346 <encode_uint+0x2c>
   10338:	2b70      	cmp	r3, #112	; 0x70
   1033a:	d00f      	beq.n	1035c <encode_uint+0x42>
   1033c:	2b78      	cmp	r3, #120	; 0x78
   1033e:	d110      	bne.n	10362 <encode_uint+0x48>
		return 16;
   10340:	f04f 0910 	mov.w	r9, #16
   10344:	e026      	b.n	10394 <encode_uint+0x7a>
	switch (specifier) {
   10346:	2b58      	cmp	r3, #88	; 0x58
   10348:	d002      	beq.n	10350 <encode_uint+0x36>
   1034a:	f04f 090a 	mov.w	r9, #10
   1034e:	e021      	b.n	10394 <encode_uint+0x7a>
		return 16;
   10350:	f04f 0910 	mov.w	r9, #16
   10354:	e01e      	b.n	10394 <encode_uint+0x7a>
		return 8;
   10356:	f04f 0908 	mov.w	r9, #8
   1035a:	e01b      	b.n	10394 <encode_uint+0x7a>
		return 16;
   1035c:	f04f 0910 	mov.w	r9, #16
   10360:	e018      	b.n	10394 <encode_uint+0x7a>
	switch (specifier) {
   10362:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   10366:	e015      	b.n	10394 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10368:	f1bb 0f19 	cmp.w	fp, #25
   1036c:	d820      	bhi.n	103b0 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1036e:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10370:	3237      	adds	r2, #55	; 0x37
   10372:	b2d2      	uxtb	r2, r2
   10374:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   10378:	4632      	mov	r2, r6
   1037a:	463b      	mov	r3, r7
   1037c:	4620      	mov	r0, r4
   1037e:	4629      	mov	r1, r5
   10380:	f7ef fff2 	bl	368 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   10384:	42bd      	cmp	r5, r7
   10386:	bf08      	it	eq
   10388:	42b4      	cmpeq	r4, r6
   1038a:	d315      	bcc.n	103b8 <encode_uint+0x9e>
   1038c:	45d0      	cmp	r8, sl
   1038e:	d913      	bls.n	103b8 <encode_uint+0x9e>
		value /= radix;
   10390:	4604      	mov	r4, r0
   10392:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   10394:	464e      	mov	r6, r9
   10396:	2700      	movs	r7, #0
   10398:	464a      	mov	r2, r9
   1039a:	463b      	mov	r3, r7
   1039c:	4620      	mov	r0, r4
   1039e:	4629      	mov	r1, r5
   103a0:	f7ef ffe2 	bl	368 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   103a4:	2a09      	cmp	r2, #9
   103a6:	d8df      	bhi.n	10368 <encode_uint+0x4e>
   103a8:	b2d2      	uxtb	r2, r2
   103aa:	3230      	adds	r2, #48	; 0x30
   103ac:	b2d2      	uxtb	r2, r2
   103ae:	e7e1      	b.n	10374 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   103b0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   103b2:	3257      	adds	r2, #87	; 0x57
   103b4:	b2d2      	uxtb	r2, r2
   103b6:	e7dd      	b.n	10374 <encode_uint+0x5a>
	if (conv->flag_hash) {
   103b8:	9b01      	ldr	r3, [sp, #4]
   103ba:	781b      	ldrb	r3, [r3, #0]
   103bc:	f013 0f20 	tst.w	r3, #32
   103c0:	d005      	beq.n	103ce <encode_uint+0xb4>
		if (radix == 8) {
   103c2:	f1b9 0f08 	cmp.w	r9, #8
   103c6:	d006      	beq.n	103d6 <encode_uint+0xbc>
		} else if (radix == 16) {
   103c8:	f1b9 0f10 	cmp.w	r9, #16
   103cc:	d009      	beq.n	103e2 <encode_uint+0xc8>
}
   103ce:	4640      	mov	r0, r8
   103d0:	b003      	add	sp, #12
   103d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   103d6:	9a01      	ldr	r2, [sp, #4]
   103d8:	7893      	ldrb	r3, [r2, #2]
   103da:	f043 0308 	orr.w	r3, r3, #8
   103de:	7093      	strb	r3, [r2, #2]
   103e0:	e7f5      	b.n	103ce <encode_uint+0xb4>
			conv->altform_0c = true;
   103e2:	9a01      	ldr	r2, [sp, #4]
   103e4:	7893      	ldrb	r3, [r2, #2]
   103e6:	f043 0310 	orr.w	r3, r3, #16
   103ea:	7093      	strb	r3, [r2, #2]
   103ec:	e7ef      	b.n	103ce <encode_uint+0xb4>

000103ee <outs>:
{
   103ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103f2:	4607      	mov	r7, r0
   103f4:	460e      	mov	r6, r1
   103f6:	4614      	mov	r4, r2
   103f8:	4698      	mov	r8, r3
	size_t count = 0;
   103fa:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   103fc:	e006      	b.n	1040c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   103fe:	4631      	mov	r1, r6
   10400:	f814 0b01 	ldrb.w	r0, [r4], #1
   10404:	47b8      	blx	r7
		if (rc < 0) {
   10406:	2800      	cmp	r0, #0
   10408:	db09      	blt.n	1041e <outs+0x30>
		++count;
   1040a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1040c:	4544      	cmp	r4, r8
   1040e:	d3f6      	bcc.n	103fe <outs+0x10>
   10410:	f1b8 0f00 	cmp.w	r8, #0
   10414:	d102      	bne.n	1041c <outs+0x2e>
   10416:	7823      	ldrb	r3, [r4, #0]
   10418:	2b00      	cmp	r3, #0
   1041a:	d1f0      	bne.n	103fe <outs+0x10>
	return (int)count;
   1041c:	4628      	mov	r0, r5
}
   1041e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010422 <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
   10422:	fbb1 f1f0 	udiv	r1, r1, r0
}
   10426:	fb00 f001 	mul.w	r0, r0, r1
   1042a:	4770      	bx	lr

0001042c <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1042c:	6983      	ldr	r3, [r0, #24]
   1042e:	b113      	cbz	r3, 10436 <mod+0xa>
   10430:	ea03 0001 	and.w	r0, r3, r1
   10434:	4770      	bx	lr
   10436:	6900      	ldr	r0, [r0, #16]
   10438:	fbb1 f3f0 	udiv	r3, r1, r0
   1043c:	fb00 1013 	mls	r0, r0, r3, r1
}
   10440:	4770      	bx	lr

00010442 <ring_buf_get_rewind_threshold>:
}
   10442:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   10446:	4770      	bx	lr

00010448 <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
   10448:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   1044a:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   1044c:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   1044e:	42ac      	cmp	r4, r5
   10450:	d304      	bcc.n	1045c <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   10452:	42ac      	cmp	r4, r5
   10454:	bf14      	ite	ne
   10456:	2000      	movne	r0, #0
   10458:	2001      	moveq	r0, #1
   1045a:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   1045c:	6906      	ldr	r6, [r0, #16]
   1045e:	f7ff fff0 	bl	10442 <ring_buf_get_rewind_threshold>
   10462:	4601      	mov	r1, r0
   10464:	4630      	mov	r0, r6
   10466:	f7ff ffdc 	bl	10422 <get_rewind_value>
   1046a:	4404      	add	r4, r0
   1046c:	e7f1      	b.n	10452 <ring_buf_is_empty+0xa>

0001046e <ring_buf_size_get>:

uint32_t ring_buf_size_get(struct ring_buf *buf)
{
   1046e:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   10470:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   10472:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   10474:	42ac      	cmp	r4, r5
   10476:	d301      	bcc.n	1047c <ring_buf_size_get+0xe>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return tail - head;
}
   10478:	1b60      	subs	r0, r4, r5
   1047a:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   1047c:	6906      	ldr	r6, [r0, #16]
   1047e:	f7ff ffe0 	bl	10442 <ring_buf_get_rewind_threshold>
   10482:	4601      	mov	r1, r0
   10484:	4630      	mov	r0, r6
   10486:	f7ff ffcc 	bl	10422 <get_rewind_value>
   1048a:	4404      	add	r4, r0
   1048c:	e7f4      	b.n	10478 <ring_buf_size_get+0xa>

0001048e <ring_buf_space_get>:

uint32_t ring_buf_space_get(struct ring_buf *buf)
{
   1048e:	b510      	push	{r4, lr}
	return buf->size - ring_buf_size_get(buf);
   10490:	6904      	ldr	r4, [r0, #16]
   10492:	f7ff ffec 	bl	1046e <ring_buf_size_get>
}
   10496:	1a20      	subs	r0, r4, r0
   10498:	bd10      	pop	{r4, pc}

0001049a <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1049a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1049e:	4604      	mov	r4, r0
   104a0:	460e      	mov	r6, r1
   104a2:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   104a4:	f8d0 8008 	ldr.w	r8, [r0, #8]
   104a8:	4641      	mov	r1, r8
   104aa:	f7ff ffbf 	bl	1042c <mod>
   104ae:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   104b0:	6825      	ldr	r5, [r4, #0]
   104b2:	6920      	ldr	r0, [r4, #16]
   104b4:	4405      	add	r5, r0
   104b6:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
   104ba:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
   104bc:	42ba      	cmp	r2, r7
   104be:	bf28      	it	cs
   104c0:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   104c2:	4290      	cmp	r0, r2
   104c4:	bf28      	it	cs
   104c6:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   104c8:	6963      	ldr	r3, [r4, #20]
   104ca:	4419      	add	r1, r3
   104cc:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   104ce:	68a3      	ldr	r3, [r4, #8]
   104d0:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
   104d2:	60a3      	str	r3, [r4, #8]

	return allocated;
}
   104d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000104d8 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   104d8:	b570      	push	{r4, r5, r6, lr}
   104da:	4604      	mov	r4, r0
   104dc:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   104de:	f7ff ffb0 	bl	10442 <ring_buf_get_rewind_threshold>
   104e2:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
   104e4:	6866      	ldr	r6, [r4, #4]
   104e6:	1972      	adds	r2, r6, r5
   104e8:	6823      	ldr	r3, [r4, #0]
   104ea:	6920      	ldr	r0, [r4, #16]
   104ec:	4403      	add	r3, r0
   104ee:	429a      	cmp	r2, r3
   104f0:	d80b      	bhi.n	1050a <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   104f2:	428e      	cmp	r6, r1
   104f4:	d907      	bls.n	10506 <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
   104f6:	f7ff ff94 	bl	10422 <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
   104fa:	1a2d      	subs	r5, r5, r0
   104fc:	442e      	add	r6, r5
   104fe:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
   10500:	60a6      	str	r6, [r4, #8]

	return 0;
   10502:	2000      	movs	r0, #0
}
   10504:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
   10506:	2000      	movs	r0, #0
   10508:	e7f7      	b.n	104fa <ring_buf_put_finish+0x22>
		return -EINVAL;
   1050a:	f06f 0015 	mvn.w	r0, #21
   1050e:	e7f9      	b.n	10504 <ring_buf_put_finish+0x2c>

00010510 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   10510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10514:	b082      	sub	sp, #8
   10516:	4680      	mov	r8, r0
   10518:	460e      	mov	r6, r1
   1051a:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1051c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1051e:	462a      	mov	r2, r5
   10520:	a901      	add	r1, sp, #4
   10522:	4640      	mov	r0, r8
   10524:	f7ff ffb9 	bl	1049a <ring_buf_put_claim>
   10528:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   1052a:	4602      	mov	r2, r0
   1052c:	4631      	mov	r1, r6
   1052e:	9801      	ldr	r0, [sp, #4]
   10530:	f001 f814 	bl	1155c <memcpy>
		total_size += partial_size;
   10534:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   10536:	4426      	add	r6, r4
	} while (size && partial_size);
   10538:	1b2d      	subs	r5, r5, r4
   1053a:	d001      	beq.n	10540 <ring_buf_put+0x30>
   1053c:	2c00      	cmp	r4, #0
   1053e:	d1ee      	bne.n	1051e <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   10540:	4639      	mov	r1, r7
   10542:	4640      	mov	r0, r8
   10544:	f7ff ffc8 	bl	104d8 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   10548:	4638      	mov	r0, r7
   1054a:	b002      	add	sp, #8
   1054c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010550 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   10550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10554:	4604      	mov	r4, r0
   10556:	460e      	mov	r6, r1
   10558:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
   1055a:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   1055c:	68c3      	ldr	r3, [r0, #12]
   1055e:	42ab      	cmp	r3, r5
   10560:	d818      	bhi.n	10594 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   10562:	f8d4 800c 	ldr.w	r8, [r4, #12]
   10566:	4641      	mov	r1, r8
   10568:	4620      	mov	r0, r4
   1056a:	f7ff ff5f 	bl	1042c <mod>
   1056e:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
   10570:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
   10574:	6923      	ldr	r3, [r4, #16]
   10576:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   10578:	42bd      	cmp	r5, r7
   1057a:	bf28      	it	cs
   1057c:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   1057e:	42a8      	cmp	r0, r5
   10580:	bf28      	it	cs
   10582:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
   10584:	6963      	ldr	r3, [r4, #20]
   10586:	4419      	add	r1, r3
   10588:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   1058a:	68e3      	ldr	r3, [r4, #12]
   1058c:	4403      	add	r3, r0
   1058e:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
   10590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
   10594:	f8d0 8010 	ldr.w	r8, [r0, #16]
   10598:	f7ff ff53 	bl	10442 <ring_buf_get_rewind_threshold>
   1059c:	4601      	mov	r1, r0
   1059e:	4640      	mov	r0, r8
   105a0:	f7ff ff3f 	bl	10422 <get_rewind_value>
   105a4:	4405      	add	r5, r0
   105a6:	e7dc      	b.n	10562 <ring_buf_get_claim+0x12>

000105a8 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   105a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105aa:	4604      	mov	r4, r0
   105ac:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
   105ae:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   105b0:	68c3      	ldr	r3, [r0, #12]
   105b2:	42b3      	cmp	r3, r6
   105b4:	d80a      	bhi.n	105cc <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
   105b6:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
   105b8:	6823      	ldr	r3, [r4, #0]
   105ba:	195a      	adds	r2, r3, r5
   105bc:	42b2      	cmp	r2, r6
   105be:	d80e      	bhi.n	105de <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   105c0:	1a2d      	subs	r5, r5, r0
   105c2:	442b      	add	r3, r5
   105c4:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   105c6:	60e3      	str	r3, [r4, #12]

	return 0;
   105c8:	2000      	movs	r0, #0
}
   105ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
   105cc:	6907      	ldr	r7, [r0, #16]
   105ce:	f7ff ff38 	bl	10442 <ring_buf_get_rewind_threshold>
   105d2:	4601      	mov	r1, r0
   105d4:	4638      	mov	r0, r7
   105d6:	f7ff ff24 	bl	10422 <get_rewind_value>
		tail += rew;
   105da:	4406      	add	r6, r0
   105dc:	e7ec      	b.n	105b8 <ring_buf_get_finish+0x10>
		return -EINVAL;
   105de:	f06f 0015 	mvn.w	r0, #21
   105e2:	e7f2      	b.n	105ca <ring_buf_get_finish+0x22>

000105e4 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   105e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105e8:	b082      	sub	sp, #8
   105ea:	4680      	mov	r8, r0
   105ec:	460e      	mov	r6, r1
   105ee:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   105f0:	2700      	movs	r7, #0
   105f2:	e009      	b.n	10608 <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
   105f4:	4602      	mov	r2, r0
   105f6:	9901      	ldr	r1, [sp, #4]
   105f8:	4630      	mov	r0, r6
   105fa:	f000 ffaf 	bl	1155c <memcpy>
			data += partial_size;
   105fe:	4426      	add	r6, r4
		}
		total_size += partial_size;
   10600:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   10602:	1b2d      	subs	r5, r5, r4
   10604:	d009      	beq.n	1061a <ring_buf_get+0x36>
   10606:	b144      	cbz	r4, 1061a <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   10608:	462a      	mov	r2, r5
   1060a:	a901      	add	r1, sp, #4
   1060c:	4640      	mov	r0, r8
   1060e:	f7ff ff9f 	bl	10550 <ring_buf_get_claim>
   10612:	4604      	mov	r4, r0
		if (data) {
   10614:	2e00      	cmp	r6, #0
   10616:	d1ed      	bne.n	105f4 <ring_buf_get+0x10>
   10618:	e7f2      	b.n	10600 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   1061a:	4639      	mov	r1, r7
   1061c:	4640      	mov	r0, r8
   1061e:	f7ff ffc3 	bl	105a8 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   10622:	4638      	mov	r0, r7
   10624:	b002      	add	sp, #8
   10626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001062a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1062a:	4770      	bx	lr

0001062c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1062c:	2300      	movs	r3, #0
   1062e:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   10630:	6003      	str	r3, [r0, #0]
}
   10632:	4770      	bx	lr

00010634 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   10634:	6803      	ldr	r3, [r0, #0]
   10636:	b12b      	cbz	r3, 10644 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   10638:	6843      	ldr	r3, [r0, #4]
   1063a:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   1063c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1063e:	2300      	movs	r3, #0
   10640:	600b      	str	r3, [r1, #0]
}
   10642:	4770      	bx	lr
		list->head = msg;
   10644:	6001      	str	r1, [r0, #0]
   10646:	e7f9      	b.n	1063c <log_list_add_tail+0x8>

00010648 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   10648:	6800      	ldr	r0, [r0, #0]
   1064a:	4770      	bx	lr

0001064c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1064c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1064e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   10650:	b108      	cbz	r0, 10656 <log_list_head_get+0xa>
		list->head = list->head->next;
   10652:	6802      	ldr	r2, [r0, #0]
   10654:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   10656:	4770      	bx	lr

00010658 <dummy_timestamp>:
}
   10658:	2000      	movs	r0, #0
   1065a:	4770      	bx	lr

0001065c <msg_filter_check>:
}
   1065c:	2001      	movs	r0, #1
   1065e:	4770      	bx	lr

00010660 <default_get_timestamp>:
{
   10660:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   10662:	f001 ffbc 	bl	125de <sys_clock_cycle_get_32>
}
   10666:	bd08      	pop	{r3, pc}

00010668 <z_log_get_s_mask>:
{
   10668:	b470      	push	{r4, r5, r6}
   1066a:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   1066c:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1066e:	4605      	mov	r5, r0
	bool arm = false;
   10670:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   10672:	e001      	b.n	10678 <z_log_get_s_mask+0x10>
			arm = !arm;
   10674:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   10678:	f813 2b01 	ldrb.w	r2, [r3], #1
   1067c:	b19a      	cbz	r2, 106a6 <z_log_get_s_mask+0x3e>
   1067e:	428d      	cmp	r5, r1
   10680:	d211      	bcs.n	106a6 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   10682:	2a25      	cmp	r2, #37	; 0x25
   10684:	d0f6      	beq.n	10674 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   10686:	2c00      	cmp	r4, #0
   10688:	d0f6      	beq.n	10678 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1068a:	f042 0620 	orr.w	r6, r2, #32
   1068e:	3e61      	subs	r6, #97	; 0x61
   10690:	2e19      	cmp	r6, #25
   10692:	d8f1      	bhi.n	10678 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   10694:	2a73      	cmp	r2, #115	; 0x73
   10696:	d002      	beq.n	1069e <z_log_get_s_mask+0x36>
			arg++;
   10698:	3501      	adds	r5, #1
			arm = false;
   1069a:	2400      	movs	r4, #0
   1069c:	e7ec      	b.n	10678 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   1069e:	2201      	movs	r2, #1
   106a0:	40aa      	lsls	r2, r5
   106a2:	4310      	orrs	r0, r2
   106a4:	e7f8      	b.n	10698 <z_log_get_s_mask+0x30>
}
   106a6:	bc70      	pop	{r4, r5, r6}
   106a8:	4770      	bx	lr

000106aa <block_on_alloc>:
}
   106aa:	2000      	movs	r0, #0
   106ac:	4770      	bx	lr

000106ae <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   106ae:	2901      	cmp	r1, #1
   106b0:	d906      	bls.n	106c0 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   106b2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   106b4:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   106b6:	2906      	cmp	r1, #6
   106b8:	d907      	bls.n	106ca <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   106ba:	3907      	subs	r1, #7
		cont = cont->next;
   106bc:	681b      	ldr	r3, [r3, #0]
   106be:	e7fa      	b.n	106b6 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   106c0:	3104      	adds	r1, #4
   106c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   106c6:	6888      	ldr	r0, [r1, #8]
   106c8:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   106ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   106ce:	6848      	ldr	r0, [r1, #4]
}
   106d0:	4770      	bx	lr

000106d2 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   106d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106d6:	460d      	mov	r5, r1
   106d8:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   106da:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   106dc:	2a03      	cmp	r2, #3
   106de:	d917      	bls.n	10710 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   106e0:	2208      	movs	r2, #8
   106e2:	3018      	adds	r0, #24
   106e4:	f000 ff3a 	bl	1155c <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   106e8:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   106ea:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   106ec:	b1b4      	cbz	r4, 1071c <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   106ee:	46a0      	mov	r8, r4
   106f0:	2c07      	cmp	r4, #7
   106f2:	bf28      	it	cs
   106f4:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   106f8:	ea4f 0788 	mov.w	r7, r8, lsl #2
   106fc:	463a      	mov	r2, r7
   106fe:	4629      	mov	r1, r5
   10700:	1d30      	adds	r0, r6, #4
   10702:	f000 ff2b 	bl	1155c <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   10706:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   1070a:	443d      	add	r5, r7
		cont = cont->next;
   1070c:	6836      	ldr	r6, [r6, #0]
   1070e:	e7ed      	b.n	106ec <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   10710:	0092      	lsls	r2, r2, #2
   10712:	3014      	adds	r0, #20
   10714:	f000 ff22 	bl	1155c <memcpy>
		nargs  = 0U;
   10718:	2400      	movs	r4, #0
   1071a:	e7e7      	b.n	106ec <copy_args_to_msg+0x1a>
	}
}
   1071c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010720 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   10720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10724:	461c      	mov	r4, r3
   10726:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1072a:	8903      	ldrh	r3, [r0, #8]
   1072c:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   10730:	42a3      	cmp	r3, r4
   10732:	d91f      	bls.n	10774 <log_msg_hexdump_data_op+0x54>
   10734:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   10736:	6811      	ldr	r1, [r2, #0]
   10738:	4421      	add	r1, r4
   1073a:	4299      	cmp	r1, r3
   1073c:	d901      	bls.n	10742 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   1073e:	1b19      	subs	r1, r3, r4
   10740:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   10742:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   10744:	2b0c      	cmp	r3, #12
   10746:	d919      	bls.n	1077c <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   10748:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   1074c:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1074e:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   10750:	42a3      	cmp	r3, r4
   10752:	d91e      	bls.n	10792 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   10754:	42bb      	cmp	r3, r7
   10756:	bf28      	it	cs
   10758:	463b      	movcs	r3, r7
   1075a:	461d      	mov	r5, r3

		if (put_op) {
   1075c:	f1b9 0f00 	cmp.w	r9, #0
   10760:	d010      	beq.n	10784 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   10762:	461a      	mov	r2, r3
   10764:	4641      	mov	r1, r8
   10766:	eb0c 0004 	add.w	r0, ip, r4
   1076a:	f000 fef7 	bl	1155c <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   1076e:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   10770:	44a8      	add	r8, r5
   10772:	e021      	b.n	107b8 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   10774:	2300      	movs	r3, #0
   10776:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   10778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   1077c:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   10780:	2600      	movs	r6, #0
   10782:	e7e5      	b.n	10750 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   10784:	461a      	mov	r2, r3
   10786:	eb0c 0104 	add.w	r1, ip, r4
   1078a:	4640      	mov	r0, r8
   1078c:	f000 fee6 	bl	1155c <memcpy>
   10790:	e7ed      	b.n	1076e <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   10792:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   10794:	b91e      	cbnz	r6, 1079e <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   10796:	6946      	ldr	r6, [r0, #20]
   10798:	e001      	b.n	1079e <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   1079a:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   1079c:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   1079e:	2c1b      	cmp	r4, #27
   107a0:	d8fb      	bhi.n	1079a <log_msg_hexdump_data_op+0x7a>
   107a2:	e009      	b.n	107b8 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   107a4:	1931      	adds	r1, r6, r4
   107a6:	462a      	mov	r2, r5
   107a8:	3104      	adds	r1, #4
   107aa:	4640      	mov	r0, r8
   107ac:	f000 fed6 	bl	1155c <memcpy>
		cont = cont->next;
   107b0:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   107b2:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   107b4:	44a8      	add	r8, r5
		offset = 0;
   107b6:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   107b8:	2f00      	cmp	r7, #0
   107ba:	d0dd      	beq.n	10778 <log_msg_hexdump_data_op+0x58>
   107bc:	2e00      	cmp	r6, #0
   107be:	d0db      	beq.n	10778 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   107c0:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   107c4:	42bd      	cmp	r5, r7
   107c6:	bf28      	it	cs
   107c8:	463d      	movcs	r5, r7
		if (put_op) {
   107ca:	f1b9 0f00 	cmp.w	r9, #0
   107ce:	d0e9      	beq.n	107a4 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   107d0:	1930      	adds	r0, r6, r4
   107d2:	462a      	mov	r2, r5
   107d4:	4641      	mov	r1, r8
   107d6:	3004      	adds	r0, #4
   107d8:	f000 fec0 	bl	1155c <memcpy>
   107dc:	e7e8      	b.n	107b0 <log_msg_hexdump_data_op+0x90>

000107de <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   107de:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   107e0:	f3bf 8f5b 	dmb	ish
   107e4:	e850 3f00 	ldrex	r3, [r0]
   107e8:	3301      	adds	r3, #1
   107ea:	e840 3200 	strex	r2, r3, [r0]
   107ee:	2a00      	cmp	r2, #0
   107f0:	d1f8      	bne.n	107e4 <log_msg_get+0x6>
   107f2:	f3bf 8f5b 	dmb	ish
}
   107f6:	4770      	bx	lr

000107f8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   107f8:	7a40      	ldrb	r0, [r0, #9]
}
   107fa:	0900      	lsrs	r0, r0, #4
   107fc:	4770      	bx	lr

000107fe <log_msg_arg_get>:
{
   107fe:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   10800:	7a43      	ldrb	r3, [r0, #9]
   10802:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   10806:	d20a      	bcs.n	1081e <log_msg_arg_get+0x20>
   10808:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1080a:	2a03      	cmp	r2, #3
   1080c:	d804      	bhi.n	10818 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   1080e:	3104      	adds	r1, #4
   10810:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   10814:	6840      	ldr	r0, [r0, #4]
   10816:	e003      	b.n	10820 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   10818:	f7ff ff49 	bl	106ae <cont_arg_get>
   1081c:	e000      	b.n	10820 <log_msg_arg_get+0x22>
		return 0;
   1081e:	2000      	movs	r0, #0
}
   10820:	bd08      	pop	{r3, pc}

00010822 <log_msg_str_get>:
}
   10822:	6900      	ldr	r0, [r0, #16]
   10824:	4770      	bx	lr

00010826 <log_msg_put>:
{
   10826:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   10828:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1082a:	f3bf 8f5b 	dmb	ish
   1082e:	e853 2f00 	ldrex	r2, [r3]
   10832:	3a01      	subs	r2, #1
   10834:	e843 2100 	strex	r1, r2, [r3]
   10838:	2900      	cmp	r1, #0
   1083a:	d1f8      	bne.n	1082e <log_msg_put+0x8>
   1083c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   10840:	6843      	ldr	r3, [r0, #4]
   10842:	b103      	cbz	r3, 10846 <log_msg_put+0x20>
}
   10844:	bd08      	pop	{r3, pc}
		msg_free(msg);
   10846:	f7f1 fc49 	bl	20dc <msg_free>
}
   1084a:	e7fb      	b.n	10844 <log_msg_put+0x1e>

0001084c <msg_alloc>:
{
   1084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1084e:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10850:	f7f1 fc28 	bl	20a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   10854:	4607      	mov	r7, r0
   10856:	b140      	cbz	r0, 1086a <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   10858:	2301      	movs	r3, #1
   1085a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1085c:	2200      	movs	r2, #0
   1085e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   10860:	f04f 0300 	mov.w	r3, #0
   10864:	f362 0300 	bfi	r3, r2, #0, #1
   10868:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1086a:	b1f7      	cbz	r7, 108aa <msg_alloc+0x5e>
   1086c:	2d03      	cmp	r5, #3
   1086e:	d91c      	bls.n	108aa <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   10870:	7a7b      	ldrb	r3, [r7, #9]
   10872:	f36f 1307 	bfc	r3, #4, #4
   10876:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   10878:	7a3b      	ldrb	r3, [r7, #8]
   1087a:	f043 0302 	orr.w	r3, r3, #2
   1087e:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   10880:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   10882:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   10886:	2300      	movs	r3, #0
   10888:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   1088a:	2d00      	cmp	r5, #0
   1088c:	dd0d      	ble.n	108aa <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1088e:	f7f1 fc09 	bl	20a4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   10892:	4604      	mov	r4, r0
   10894:	b128      	cbz	r0, 108a2 <msg_alloc+0x56>
		*next = cont;
   10896:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   10898:	2300      	movs	r3, #0
   1089a:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   1089c:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   1089e:	3d07      	subs	r5, #7
   108a0:	e7f3      	b.n	1088a <msg_alloc+0x3e>
			msg_free(msg);
   108a2:	4638      	mov	r0, r7
   108a4:	f7f1 fc1a 	bl	20dc <msg_free>
			return NULL;
   108a8:	4627      	mov	r7, r4
}
   108aa:	4638      	mov	r0, r7
   108ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000108ae <log_msg_create_n>:
{
   108ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108b0:	4607      	mov	r7, r0
   108b2:	460e      	mov	r6, r1
   108b4:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   108b6:	4610      	mov	r0, r2
   108b8:	f7ff ffc8 	bl	1084c <msg_alloc>
	if (msg != NULL) {
   108bc:	4605      	mov	r5, r0
   108be:	b140      	cbz	r0, 108d2 <log_msg_create_n+0x24>
		msg->str = str;
   108c0:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   108c2:	7a43      	ldrb	r3, [r0, #9]
   108c4:	f364 1307 	bfi	r3, r4, #4, #4
   108c8:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   108ca:	4622      	mov	r2, r4
   108cc:	4631      	mov	r1, r6
   108ce:	f7ff ff00 	bl	106d2 <copy_args_to_msg>
}
   108d2:	4628      	mov	r0, r5
   108d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000108d6 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   108d6:	b510      	push	{r4, lr}
   108d8:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   108da:	2400      	movs	r4, #0
   108dc:	9400      	str	r4, [sp, #0]
   108de:	f7ff ff1f 	bl	10720 <log_msg_hexdump_data_op>
}
   108e2:	b002      	add	sp, #8
   108e4:	bd10      	pop	{r4, pc}

000108e6 <buffer_write>:
{
   108e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108e8:	4607      	mov	r7, r0
   108ea:	460d      	mov	r5, r1
   108ec:	4614      	mov	r4, r2
   108ee:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   108f0:	4632      	mov	r2, r6
   108f2:	4621      	mov	r1, r4
   108f4:	4628      	mov	r0, r5
   108f6:	47b8      	blx	r7
		buf += processed;
   108f8:	4405      	add	r5, r0
	} while (len != 0);
   108fa:	1a24      	subs	r4, r4, r0
   108fc:	d1f8      	bne.n	108f0 <buffer_write+0xa>
}
   108fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010900 <color_prefix>:
{
   10900:	b508      	push	{r3, lr}
   10902:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   10904:	2201      	movs	r2, #1
   10906:	f7f1 fc81 	bl	220c <color_print>
}
   1090a:	bd08      	pop	{r3, pc}

0001090c <color_postfix>:
{
   1090c:	b508      	push	{r3, lr}
   1090e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   10910:	2200      	movs	r2, #0
   10912:	f7f1 fc7b 	bl	220c <color_print>
}
   10916:	bd08      	pop	{r3, pc}

00010918 <postfix_print>:
{
   10918:	b538      	push	{r3, r4, r5, lr}
   1091a:	4605      	mov	r5, r0
   1091c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   1091e:	f001 0101 	and.w	r1, r1, #1
   10922:	f7ff fff3 	bl	1090c <color_postfix>
	newline_print(output, flags);
   10926:	4621      	mov	r1, r4
   10928:	4628      	mov	r0, r5
   1092a:	f7f1 fc85 	bl	2238 <newline_print>
}
   1092e:	bd38      	pop	{r3, r4, r5, pc}

00010930 <prefix_print>:
{
   10930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10934:	b083      	sub	sp, #12
   10936:	4604      	mov	r4, r0
   10938:	4615      	mov	r5, r2
   1093a:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1093e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   10942:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   10946:	f011 0702 	ands.w	r7, r1, #2
   1094a:	d113      	bne.n	10974 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
   1094c:	4632      	mov	r2, r6
   1094e:	4649      	mov	r1, r9
   10950:	4620      	mov	r0, r4
   10952:	f7ff ffd5 	bl	10900 <color_prefix>
	length += ids_print(output, level_on, func_on,
   10956:	9601      	str	r6, [sp, #4]
   10958:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1095c:	9300      	str	r3, [sp, #0]
   1095e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   10962:	462a      	mov	r2, r5
   10964:	4641      	mov	r1, r8
   10966:	4620      	mov	r0, r4
   10968:	f7f1 fcd8 	bl	231c <ids_print>
}
   1096c:	4438      	add	r0, r7
   1096e:	b003      	add	sp, #12
   10970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
   10974:	461a      	mov	r2, r3
   10976:	f7f1 fc03 	bl	2180 <timestamp_print>
   1097a:	4607      	mov	r7, r0
   1097c:	e7e6      	b.n	1094c <prefix_print+0x1c>

0001097e <std_print>:
{
   1097e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10982:	b08e      	sub	sp, #56	; 0x38
   10984:	af0e      	add	r7, sp, #56	; 0x38
   10986:	4606      	mov	r6, r0
   10988:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   1098a:	f7ff ff4a 	bl	10822 <log_msg_str_get>
   1098e:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   10990:	4630      	mov	r0, r6
   10992:	f7ff ff31 	bl	107f8 <log_msg_nargs_get>
   10996:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   10998:	0083      	lsls	r3, r0, #2
   1099a:	3307      	adds	r3, #7
   1099c:	f023 0307 	bic.w	r3, r3, #7
   109a0:	ebad 0d03 	sub.w	sp, sp, r3
   109a4:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   109a6:	2400      	movs	r4, #0
   109a8:	4544      	cmp	r4, r8
   109aa:	d207      	bcs.n	109bc <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   109ac:	4621      	mov	r1, r4
   109ae:	4630      	mov	r0, r6
   109b0:	f7ff ff25 	bl	107fe <log_msg_arg_get>
   109b4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   109b8:	3401      	adds	r4, #1
   109ba:	e7f5      	b.n	109a8 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   109bc:	4630      	mov	r0, r6
   109be:	f7ff ff1b 	bl	107f8 <log_msg_nargs_get>
   109c2:	280f      	cmp	r0, #15
   109c4:	d815      	bhi.n	109f2 <std_print+0x74>
   109c6:	e8df f010 	tbh	[pc, r0, lsl #1]
   109ca:	0010      	.short	0x0010
   109cc:	001d0017 	.word	0x001d0017
   109d0:	002d0024 	.word	0x002d0024
   109d4:	00450038 	.word	0x00450038
   109d8:	00650054 	.word	0x00650054
   109dc:	008d0078 	.word	0x008d0078
   109e0:	00bd00a4 	.word	0x00bd00a4
   109e4:	00f500d8 	.word	0x00f500d8
   109e8:	0114      	.short	0x0114
		print_formatted(output, str);
   109ea:	4651      	mov	r1, sl
   109ec:	4648      	mov	r0, r9
   109ee:	f7f1 fbb5 	bl	215c <print_formatted>
}
   109f2:	46bd      	mov	sp, r7
   109f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   109f8:	682a      	ldr	r2, [r5, #0]
   109fa:	4651      	mov	r1, sl
   109fc:	4648      	mov	r0, r9
   109fe:	f7f1 fbad 	bl	215c <print_formatted>
		break;
   10a02:	e7f6      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   10a04:	686b      	ldr	r3, [r5, #4]
   10a06:	682a      	ldr	r2, [r5, #0]
   10a08:	4651      	mov	r1, sl
   10a0a:	4648      	mov	r0, r9
   10a0c:	f7f1 fba6 	bl	215c <print_formatted>
		break;
   10a10:	e7ef      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   10a12:	686b      	ldr	r3, [r5, #4]
   10a14:	682a      	ldr	r2, [r5, #0]
   10a16:	68a9      	ldr	r1, [r5, #8]
   10a18:	9100      	str	r1, [sp, #0]
   10a1a:	4651      	mov	r1, sl
   10a1c:	4648      	mov	r0, r9
   10a1e:	f7f1 fb9d 	bl	215c <print_formatted>
		break;
   10a22:	e7e6      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10a24:	686b      	ldr	r3, [r5, #4]
   10a26:	682a      	ldr	r2, [r5, #0]
   10a28:	68e9      	ldr	r1, [r5, #12]
   10a2a:	9101      	str	r1, [sp, #4]
   10a2c:	68a9      	ldr	r1, [r5, #8]
   10a2e:	9100      	str	r1, [sp, #0]
   10a30:	4651      	mov	r1, sl
   10a32:	4648      	mov	r0, r9
   10a34:	f7f1 fb92 	bl	215c <print_formatted>
		break;
   10a38:	e7db      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10a3a:	686b      	ldr	r3, [r5, #4]
   10a3c:	682a      	ldr	r2, [r5, #0]
   10a3e:	6929      	ldr	r1, [r5, #16]
   10a40:	9102      	str	r1, [sp, #8]
   10a42:	68e9      	ldr	r1, [r5, #12]
   10a44:	9101      	str	r1, [sp, #4]
   10a46:	68a9      	ldr	r1, [r5, #8]
   10a48:	9100      	str	r1, [sp, #0]
   10a4a:	4651      	mov	r1, sl
   10a4c:	4648      	mov	r0, r9
   10a4e:	f7f1 fb85 	bl	215c <print_formatted>
		break;
   10a52:	e7ce      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10a54:	686b      	ldr	r3, [r5, #4]
   10a56:	682a      	ldr	r2, [r5, #0]
   10a58:	6969      	ldr	r1, [r5, #20]
   10a5a:	9103      	str	r1, [sp, #12]
   10a5c:	6929      	ldr	r1, [r5, #16]
   10a5e:	9102      	str	r1, [sp, #8]
   10a60:	68e9      	ldr	r1, [r5, #12]
   10a62:	9101      	str	r1, [sp, #4]
   10a64:	68a9      	ldr	r1, [r5, #8]
   10a66:	9100      	str	r1, [sp, #0]
   10a68:	4651      	mov	r1, sl
   10a6a:	4648      	mov	r0, r9
   10a6c:	f7f1 fb76 	bl	215c <print_formatted>
		break;
   10a70:	e7bf      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10a72:	686b      	ldr	r3, [r5, #4]
   10a74:	682a      	ldr	r2, [r5, #0]
   10a76:	69a9      	ldr	r1, [r5, #24]
   10a78:	9104      	str	r1, [sp, #16]
   10a7a:	6969      	ldr	r1, [r5, #20]
   10a7c:	9103      	str	r1, [sp, #12]
   10a7e:	6929      	ldr	r1, [r5, #16]
   10a80:	9102      	str	r1, [sp, #8]
   10a82:	68e9      	ldr	r1, [r5, #12]
   10a84:	9101      	str	r1, [sp, #4]
   10a86:	68a9      	ldr	r1, [r5, #8]
   10a88:	9100      	str	r1, [sp, #0]
   10a8a:	4651      	mov	r1, sl
   10a8c:	4648      	mov	r0, r9
   10a8e:	f7f1 fb65 	bl	215c <print_formatted>
		break;
   10a92:	e7ae      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10a94:	686b      	ldr	r3, [r5, #4]
   10a96:	682a      	ldr	r2, [r5, #0]
   10a98:	69e9      	ldr	r1, [r5, #28]
   10a9a:	9105      	str	r1, [sp, #20]
   10a9c:	69a9      	ldr	r1, [r5, #24]
   10a9e:	9104      	str	r1, [sp, #16]
   10aa0:	6969      	ldr	r1, [r5, #20]
   10aa2:	9103      	str	r1, [sp, #12]
   10aa4:	6929      	ldr	r1, [r5, #16]
   10aa6:	9102      	str	r1, [sp, #8]
   10aa8:	68e9      	ldr	r1, [r5, #12]
   10aaa:	9101      	str	r1, [sp, #4]
   10aac:	68a9      	ldr	r1, [r5, #8]
   10aae:	9100      	str	r1, [sp, #0]
   10ab0:	4651      	mov	r1, sl
   10ab2:	4648      	mov	r0, r9
   10ab4:	f7f1 fb52 	bl	215c <print_formatted>
		break;
   10ab8:	e79b      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10aba:	686b      	ldr	r3, [r5, #4]
   10abc:	682a      	ldr	r2, [r5, #0]
   10abe:	6a29      	ldr	r1, [r5, #32]
   10ac0:	9106      	str	r1, [sp, #24]
   10ac2:	69e9      	ldr	r1, [r5, #28]
   10ac4:	9105      	str	r1, [sp, #20]
   10ac6:	69a9      	ldr	r1, [r5, #24]
   10ac8:	9104      	str	r1, [sp, #16]
   10aca:	6969      	ldr	r1, [r5, #20]
   10acc:	9103      	str	r1, [sp, #12]
   10ace:	6929      	ldr	r1, [r5, #16]
   10ad0:	9102      	str	r1, [sp, #8]
   10ad2:	68e9      	ldr	r1, [r5, #12]
   10ad4:	9101      	str	r1, [sp, #4]
   10ad6:	68a9      	ldr	r1, [r5, #8]
   10ad8:	9100      	str	r1, [sp, #0]
   10ada:	4651      	mov	r1, sl
   10adc:	4648      	mov	r0, r9
   10ade:	f7f1 fb3d 	bl	215c <print_formatted>
		break;
   10ae2:	e786      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10ae4:	686b      	ldr	r3, [r5, #4]
   10ae6:	682a      	ldr	r2, [r5, #0]
   10ae8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10aea:	9107      	str	r1, [sp, #28]
   10aec:	6a29      	ldr	r1, [r5, #32]
   10aee:	9106      	str	r1, [sp, #24]
   10af0:	69e9      	ldr	r1, [r5, #28]
   10af2:	9105      	str	r1, [sp, #20]
   10af4:	69a9      	ldr	r1, [r5, #24]
   10af6:	9104      	str	r1, [sp, #16]
   10af8:	6969      	ldr	r1, [r5, #20]
   10afa:	9103      	str	r1, [sp, #12]
   10afc:	6929      	ldr	r1, [r5, #16]
   10afe:	9102      	str	r1, [sp, #8]
   10b00:	68e9      	ldr	r1, [r5, #12]
   10b02:	9101      	str	r1, [sp, #4]
   10b04:	68a9      	ldr	r1, [r5, #8]
   10b06:	9100      	str	r1, [sp, #0]
   10b08:	4651      	mov	r1, sl
   10b0a:	4648      	mov	r0, r9
   10b0c:	f7f1 fb26 	bl	215c <print_formatted>
		break;
   10b10:	e76f      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10b12:	686b      	ldr	r3, [r5, #4]
   10b14:	682a      	ldr	r2, [r5, #0]
   10b16:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10b18:	9108      	str	r1, [sp, #32]
   10b1a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10b1c:	9107      	str	r1, [sp, #28]
   10b1e:	6a29      	ldr	r1, [r5, #32]
   10b20:	9106      	str	r1, [sp, #24]
   10b22:	69e9      	ldr	r1, [r5, #28]
   10b24:	9105      	str	r1, [sp, #20]
   10b26:	69a9      	ldr	r1, [r5, #24]
   10b28:	9104      	str	r1, [sp, #16]
   10b2a:	6969      	ldr	r1, [r5, #20]
   10b2c:	9103      	str	r1, [sp, #12]
   10b2e:	6929      	ldr	r1, [r5, #16]
   10b30:	9102      	str	r1, [sp, #8]
   10b32:	68e9      	ldr	r1, [r5, #12]
   10b34:	9101      	str	r1, [sp, #4]
   10b36:	68a9      	ldr	r1, [r5, #8]
   10b38:	9100      	str	r1, [sp, #0]
   10b3a:	4651      	mov	r1, sl
   10b3c:	4648      	mov	r0, r9
   10b3e:	f7f1 fb0d 	bl	215c <print_formatted>
		break;
   10b42:	e756      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10b44:	686b      	ldr	r3, [r5, #4]
   10b46:	682a      	ldr	r2, [r5, #0]
   10b48:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   10b4a:	9109      	str	r1, [sp, #36]	; 0x24
   10b4c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10b4e:	9108      	str	r1, [sp, #32]
   10b50:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10b52:	9107      	str	r1, [sp, #28]
   10b54:	6a29      	ldr	r1, [r5, #32]
   10b56:	9106      	str	r1, [sp, #24]
   10b58:	69e9      	ldr	r1, [r5, #28]
   10b5a:	9105      	str	r1, [sp, #20]
   10b5c:	69a9      	ldr	r1, [r5, #24]
   10b5e:	9104      	str	r1, [sp, #16]
   10b60:	6969      	ldr	r1, [r5, #20]
   10b62:	9103      	str	r1, [sp, #12]
   10b64:	6929      	ldr	r1, [r5, #16]
   10b66:	9102      	str	r1, [sp, #8]
   10b68:	68e9      	ldr	r1, [r5, #12]
   10b6a:	9101      	str	r1, [sp, #4]
   10b6c:	68a9      	ldr	r1, [r5, #8]
   10b6e:	9100      	str	r1, [sp, #0]
   10b70:	4651      	mov	r1, sl
   10b72:	4648      	mov	r0, r9
   10b74:	f7f1 faf2 	bl	215c <print_formatted>
		break;
   10b78:	e73b      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10b7a:	686b      	ldr	r3, [r5, #4]
   10b7c:	682a      	ldr	r2, [r5, #0]
   10b7e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10b80:	910a      	str	r1, [sp, #40]	; 0x28
   10b82:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   10b84:	9109      	str	r1, [sp, #36]	; 0x24
   10b86:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10b88:	9108      	str	r1, [sp, #32]
   10b8a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10b8c:	9107      	str	r1, [sp, #28]
   10b8e:	6a29      	ldr	r1, [r5, #32]
   10b90:	9106      	str	r1, [sp, #24]
   10b92:	69e9      	ldr	r1, [r5, #28]
   10b94:	9105      	str	r1, [sp, #20]
   10b96:	69a9      	ldr	r1, [r5, #24]
   10b98:	9104      	str	r1, [sp, #16]
   10b9a:	6969      	ldr	r1, [r5, #20]
   10b9c:	9103      	str	r1, [sp, #12]
   10b9e:	6929      	ldr	r1, [r5, #16]
   10ba0:	9102      	str	r1, [sp, #8]
   10ba2:	68e9      	ldr	r1, [r5, #12]
   10ba4:	9101      	str	r1, [sp, #4]
   10ba6:	68a9      	ldr	r1, [r5, #8]
   10ba8:	9100      	str	r1, [sp, #0]
   10baa:	4651      	mov	r1, sl
   10bac:	4648      	mov	r0, r9
   10bae:	f7f1 fad5 	bl	215c <print_formatted>
		break;
   10bb2:	e71e      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10bb4:	686b      	ldr	r3, [r5, #4]
   10bb6:	682a      	ldr	r2, [r5, #0]
   10bb8:	6b69      	ldr	r1, [r5, #52]	; 0x34
   10bba:	910b      	str	r1, [sp, #44]	; 0x2c
   10bbc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10bbe:	910a      	str	r1, [sp, #40]	; 0x28
   10bc0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   10bc2:	9109      	str	r1, [sp, #36]	; 0x24
   10bc4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10bc6:	9108      	str	r1, [sp, #32]
   10bc8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10bca:	9107      	str	r1, [sp, #28]
   10bcc:	6a29      	ldr	r1, [r5, #32]
   10bce:	9106      	str	r1, [sp, #24]
   10bd0:	69e9      	ldr	r1, [r5, #28]
   10bd2:	9105      	str	r1, [sp, #20]
   10bd4:	69a9      	ldr	r1, [r5, #24]
   10bd6:	9104      	str	r1, [sp, #16]
   10bd8:	6969      	ldr	r1, [r5, #20]
   10bda:	9103      	str	r1, [sp, #12]
   10bdc:	6929      	ldr	r1, [r5, #16]
   10bde:	9102      	str	r1, [sp, #8]
   10be0:	68e9      	ldr	r1, [r5, #12]
   10be2:	9101      	str	r1, [sp, #4]
   10be4:	68a9      	ldr	r1, [r5, #8]
   10be6:	9100      	str	r1, [sp, #0]
   10be8:	4651      	mov	r1, sl
   10bea:	4648      	mov	r0, r9
   10bec:	f7f1 fab6 	bl	215c <print_formatted>
		break;
   10bf0:	e6ff      	b.n	109f2 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10bf2:	686b      	ldr	r3, [r5, #4]
   10bf4:	682a      	ldr	r2, [r5, #0]
   10bf6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   10bf8:	910c      	str	r1, [sp, #48]	; 0x30
   10bfa:	6b69      	ldr	r1, [r5, #52]	; 0x34
   10bfc:	910b      	str	r1, [sp, #44]	; 0x2c
   10bfe:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10c00:	910a      	str	r1, [sp, #40]	; 0x28
   10c02:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   10c04:	9109      	str	r1, [sp, #36]	; 0x24
   10c06:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10c08:	9108      	str	r1, [sp, #32]
   10c0a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10c0c:	9107      	str	r1, [sp, #28]
   10c0e:	6a29      	ldr	r1, [r5, #32]
   10c10:	9106      	str	r1, [sp, #24]
   10c12:	69e9      	ldr	r1, [r5, #28]
   10c14:	9105      	str	r1, [sp, #20]
   10c16:	69a9      	ldr	r1, [r5, #24]
   10c18:	9104      	str	r1, [sp, #16]
   10c1a:	6969      	ldr	r1, [r5, #20]
   10c1c:	9103      	str	r1, [sp, #12]
   10c1e:	6929      	ldr	r1, [r5, #16]
   10c20:	9102      	str	r1, [sp, #8]
   10c22:	68e9      	ldr	r1, [r5, #12]
   10c24:	9101      	str	r1, [sp, #4]
   10c26:	68a9      	ldr	r1, [r5, #8]
   10c28:	9100      	str	r1, [sp, #0]
   10c2a:	4651      	mov	r1, sl
   10c2c:	4648      	mov	r0, r9
   10c2e:	f7f1 fa95 	bl	215c <print_formatted>
}
   10c32:	e6de      	b.n	109f2 <std_print+0x74>

00010c34 <log_output_flush>:
{
   10c34:	b510      	push	{r4, lr}
   10c36:	4604      	mov	r4, r0
		     output->control_block->offset,
   10c38:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   10c3a:	6853      	ldr	r3, [r2, #4]
   10c3c:	6812      	ldr	r2, [r2, #0]
   10c3e:	6881      	ldr	r1, [r0, #8]
   10c40:	6800      	ldr	r0, [r0, #0]
   10c42:	f7ff fe50 	bl	108e6 <buffer_write>
	output->control_block->offset = 0;
   10c46:	6863      	ldr	r3, [r4, #4]
   10c48:	2200      	movs	r2, #0
   10c4a:	601a      	str	r2, [r3, #0]
}
   10c4c:	bd10      	pop	{r4, pc}

00010c4e <out_func>:
{
   10c4e:	b538      	push	{r3, r4, r5, lr}
   10c50:	4605      	mov	r5, r0
   10c52:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   10c54:	684b      	ldr	r3, [r1, #4]
   10c56:	681a      	ldr	r2, [r3, #0]
   10c58:	68cb      	ldr	r3, [r1, #12]
   10c5a:	429a      	cmp	r2, r3
   10c5c:	d00f      	beq.n	10c7e <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   10c5e:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10c60:	f3bf 8f5b 	dmb	ish
   10c64:	e853 2f00 	ldrex	r2, [r3]
   10c68:	1c51      	adds	r1, r2, #1
   10c6a:	e843 1000 	strex	r0, r1, [r3]
   10c6e:	2800      	cmp	r0, #0
   10c70:	d1f8      	bne.n	10c64 <out_func+0x16>
   10c72:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   10c76:	68a3      	ldr	r3, [r4, #8]
   10c78:	549d      	strb	r5, [r3, r2]
}
   10c7a:	2000      	movs	r0, #0
   10c7c:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   10c7e:	4608      	mov	r0, r1
   10c80:	f7ff ffd8 	bl	10c34 <log_output_flush>
   10c84:	e7eb      	b.n	10c5e <out_func+0x10>

00010c86 <log_output_msg_process>:
{
   10c86:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c88:	b085      	sub	sp, #20
   10c8a:	4606      	mov	r6, r0
   10c8c:	460c      	mov	r4, r1
   10c8e:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10c90:	7a0b      	ldrb	r3, [r1, #8]
   10c92:	f083 0301 	eor.w	r3, r3, #1
   10c96:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   10c9a:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   10c9c:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   10c9e:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   10ca2:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   10ca4:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   10ca8:	f011 0507 	ands.w	r5, r1, #7
   10cac:	d10f      	bne.n	10cce <log_output_msg_process+0x48>
   10cae:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10cb0:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   10cb2:	f013 0f01 	tst.w	r3, #1
   10cb6:	d014      	beq.n	10ce2 <log_output_msg_process+0x5c>
	} else if (raw_string) {
   10cb8:	b9c5      	cbnz	r5, 10cec <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   10cba:	4631      	mov	r1, r6
   10cbc:	4620      	mov	r0, r4
   10cbe:	f7f1 fb8d 	bl	23dc <raw_string_print>
	if (!raw_string) {
   10cc2:	b9cd      	cbnz	r5, 10cf8 <log_output_msg_process+0x72>
	log_output_flush(output);
   10cc4:	4630      	mov	r0, r6
   10cc6:	f7ff ffb5 	bl	10c34 <log_output_flush>
}
   10cca:	b005      	add	sp, #20
   10ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   10cce:	9002      	str	r0, [sp, #8]
   10cd0:	f8cd c004 	str.w	ip, [sp, #4]
   10cd4:	9500      	str	r5, [sp, #0]
   10cd6:	4639      	mov	r1, r7
   10cd8:	4630      	mov	r0, r6
   10cda:	f7ff fe29 	bl	10930 <prefix_print>
   10cde:	4602      	mov	r2, r0
   10ce0:	e7e6      	b.n	10cb0 <log_output_msg_process+0x2a>
		std_print(msg, output);
   10ce2:	4631      	mov	r1, r6
   10ce4:	4620      	mov	r0, r4
   10ce6:	f7ff fe4a 	bl	1097e <std_print>
   10cea:	e7ea      	b.n	10cc2 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   10cec:	463b      	mov	r3, r7
   10cee:	4631      	mov	r1, r6
   10cf0:	4620      	mov	r0, r4
   10cf2:	f7f1 fb49 	bl	2388 <hexdump_print>
   10cf6:	e7e4      	b.n	10cc2 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   10cf8:	462a      	mov	r2, r5
   10cfa:	4639      	mov	r1, r7
   10cfc:	4630      	mov	r0, r6
   10cfe:	f7ff fe0b 	bl	10918 <postfix_print>
   10d02:	e7df      	b.n	10cc4 <log_output_msg_process+0x3e>

00010d04 <usb_get_status>:
	uint8_t *data = *data_buf;
   10d04:	6813      	ldr	r3, [r2, #0]
	data[1] = 0U;
   10d06:	2200      	movs	r2, #0
   10d08:	705a      	strb	r2, [r3, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   10d0a:	2001      	movs	r0, #1
   10d0c:	7018      	strb	r0, [r3, #0]
	*len = 2;
   10d0e:	2302      	movs	r3, #2
   10d10:	600b      	str	r3, [r1, #0]
}
   10d12:	4770      	bx	lr

00010d14 <usb_vbus_set>:
}
   10d14:	2000      	movs	r0, #0
   10d16:	4770      	bx	lr

00010d18 <usb_eps_reconfigure>:
{
   10d18:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
   10d1a:	4291      	cmp	r1, r2
   10d1c:	d002      	beq.n	10d24 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
   10d1e:	f7f1 ff65 	bl	2bec <reset_endpoint>
}
   10d22:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
   10d24:	f7f1 fe86 	bl	2a34 <set_endpoint>
   10d28:	e7fb      	b.n	10d22 <usb_eps_reconfigure+0xa>

00010d2a <usb_handle_std_interface_req>:
{
   10d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d2c:	4604      	mov	r4, r0
   10d2e:	460e      	mov	r6, r1
   10d30:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
   10d32:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
   10d34:	f7f1 fd24 	bl	2780 <is_device_configured>
   10d38:	b900      	cbnz	r0, 10d3c <usb_handle_std_interface_req+0x12>
}
   10d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   10d3c:	7920      	ldrb	r0, [r4, #4]
   10d3e:	f7f1 fd29 	bl	2794 <is_interface_valid>
	if (!is_device_configured() ||
   10d42:	2800      	cmp	r0, #0
   10d44:	d0f9      	beq.n	10d3a <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
   10d46:	f994 3000 	ldrsb.w	r3, [r4]
   10d4a:	2b00      	cmp	r3, #0
   10d4c:	db04      	blt.n	10d58 <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   10d4e:	7863      	ldrb	r3, [r4, #1]
   10d50:	2b0b      	cmp	r3, #11
   10d52:	d013      	beq.n	10d7c <usb_handle_std_interface_req+0x52>
	return false;
   10d54:	2000      	movs	r0, #0
   10d56:	e7f0      	b.n	10d3a <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
   10d58:	7863      	ldrb	r3, [r4, #1]
   10d5a:	b11b      	cbz	r3, 10d64 <usb_handle_std_interface_req+0x3a>
   10d5c:	2b0a      	cmp	r3, #10
   10d5e:	d007      	beq.n	10d70 <usb_handle_std_interface_req+0x46>
   10d60:	2000      	movs	r0, #0
   10d62:	e7ea      	b.n	10d3a <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
   10d64:	2300      	movs	r3, #0
   10d66:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
   10d68:	707b      	strb	r3, [r7, #1]
			*len = 2;
   10d6a:	2302      	movs	r3, #2
   10d6c:	6033      	str	r3, [r6, #0]
			return true;
   10d6e:	e7e4      	b.n	10d3a <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
   10d70:	462a      	mov	r2, r5
   10d72:	4631      	mov	r1, r6
   10d74:	4620      	mov	r0, r4
   10d76:	f7f1 fce5 	bl	2744 <usb_get_interface>
   10d7a:	e7de      	b.n	10d3a <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
   10d7c:	4620      	mov	r0, r4
   10d7e:	f7f1 ff5f 	bl	2c40 <usb_set_interface>
   10d82:	e7da      	b.n	10d3a <usb_handle_std_interface_req+0x10>

00010d84 <disable_interface_ep>:
{
   10d84:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
   10d86:	7900      	ldrb	r0, [r0, #4]
   10d88:	f7f6 f930 	bl	6fec <usb_dc_ep_disable>
}
   10d8c:	bd08      	pop	{r3, pc}

00010d8e <usb_get_status_endpoint>:
{
   10d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d90:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   10d92:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
   10d94:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
   10d96:	4620      	mov	r0, r4
   10d98:	f7f1 fd0e 	bl	27b8 <is_ep_valid>
   10d9c:	4605      	mov	r5, r0
   10d9e:	b130      	cbz	r0, 10dae <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   10da0:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   10da4:	d005      	beq.n	10db2 <usb_get_status_endpoint+0x24>
   10da6:	f7f1 fceb 	bl	2780 <is_device_configured>
   10daa:	b910      	cbnz	r0, 10db2 <usb_get_status_endpoint+0x24>
	return false;
   10dac:	4605      	mov	r5, r0
}
   10dae:	4628      	mov	r0, r5
   10db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
   10db2:	4639      	mov	r1, r7
   10db4:	4620      	mov	r0, r4
   10db6:	f7f6 f8c7 	bl	6f48 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   10dba:	2300      	movs	r3, #0
   10dbc:	707b      	strb	r3, [r7, #1]
		*len = 2;
   10dbe:	2302      	movs	r3, #2
   10dc0:	6033      	str	r3, [r6, #0]
		return true;
   10dc2:	e7f4      	b.n	10dae <usb_get_status_endpoint+0x20>

00010dc4 <usb_handle_std_endpoint_req>:
{
   10dc4:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
   10dc6:	f990 3000 	ldrsb.w	r3, [r0]
   10dca:	2b00      	cmp	r3, #0
   10dcc:	db06      	blt.n	10ddc <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
   10dce:	7843      	ldrb	r3, [r0, #1]
   10dd0:	2b01      	cmp	r3, #1
   10dd2:	d00a      	beq.n	10dea <usb_handle_std_endpoint_req+0x26>
   10dd4:	2b03      	cmp	r3, #3
   10dd6:	d010      	beq.n	10dfa <usb_handle_std_endpoint_req+0x36>
   10dd8:	2000      	movs	r0, #0
   10dda:	e002      	b.n	10de2 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   10ddc:	7843      	ldrb	r3, [r0, #1]
   10dde:	b10b      	cbz	r3, 10de4 <usb_handle_std_endpoint_req+0x20>
	return false;
   10de0:	2000      	movs	r0, #0
}
   10de2:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
   10de4:	f7ff ffd3 	bl	10d8e <usb_get_status_endpoint>
   10de8:	e7fb      	b.n	10de2 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   10dea:	8843      	ldrh	r3, [r0, #2]
   10dec:	b10b      	cbz	r3, 10df2 <usb_handle_std_endpoint_req+0x2e>
	return false;
   10dee:	2000      	movs	r0, #0
   10df0:	e7f7      	b.n	10de2 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
   10df2:	2100      	movs	r1, #0
   10df4:	f7f1 fdee 	bl	29d4 <usb_halt_endpoint_req>
   10df8:	e7f3      	b.n	10de2 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   10dfa:	8843      	ldrh	r3, [r0, #2]
   10dfc:	b10b      	cbz	r3, 10e02 <usb_handle_std_endpoint_req+0x3e>
	return false;
   10dfe:	2000      	movs	r0, #0
   10e00:	e7ef      	b.n	10de2 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
   10e02:	2101      	movs	r1, #1
   10e04:	f7f1 fde6 	bl	29d4 <usb_halt_endpoint_req>
   10e08:	e7eb      	b.n	10de2 <usb_handle_std_endpoint_req+0x1e>

00010e0a <usb_write>:
{
   10e0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10e0e:	4681      	mov	r9, r0
   10e10:	4688      	mov	r8, r1
   10e12:	4617      	mov	r7, r2
   10e14:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
   10e16:	2503      	movs	r5, #3
   10e18:	e000      	b.n	10e1c <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
   10e1a:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   10e1c:	4633      	mov	r3, r6
   10e1e:	463a      	mov	r2, r7
   10e20:	4641      	mov	r1, r8
   10e22:	4648      	mov	r0, r9
   10e24:	f7f6 f90c 	bl	7040 <usb_dc_ep_write>
   10e28:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   10e2a:	f110 0f0b 	cmn.w	r0, #11
   10e2e:	d008      	beq.n	10e42 <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
   10e30:	f114 0f0b 	cmn.w	r4, #11
   10e34:	d102      	bne.n	10e3c <usb_write+0x32>
   10e36:	1e6b      	subs	r3, r5, #1
   10e38:	2d00      	cmp	r5, #0
   10e3a:	d1ee      	bne.n	10e1a <usb_write+0x10>
}
   10e3c:	4620      	mov	r0, r4
   10e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
   10e42:	f7fd ff35 	bl	ecb0 <z_impl_k_yield>
}
   10e46:	e7f3      	b.n	10e30 <usb_write+0x26>

00010e48 <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   10e48:	f810 2b02 	ldrb.w	r2, [r0], #2
   10e4c:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   10e4e:	0852      	lsrs	r2, r2, #1
   10e50:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
   10e52:	2b00      	cmp	r3, #0
   10e54:	db0b      	blt.n	10e6e <ascii7_to_utf16le+0x26>
{
   10e56:	b410      	push	{r4}
		buf[i] = 0U;
   10e58:	2100      	movs	r1, #0
   10e5a:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
   10e5c:	1e59      	subs	r1, r3, #1
   10e5e:	5c84      	ldrb	r4, [r0, r2]
   10e60:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
   10e62:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
   10e64:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
   10e66:	2b00      	cmp	r3, #0
   10e68:	daf6      	bge.n	10e58 <ascii7_to_utf16le+0x10>
}
   10e6a:	bc10      	pop	{r4}
   10e6c:	4770      	bx	lr
   10e6e:	4770      	bx	lr

00010e70 <usb_validate_ep_cfg_data>:
{
   10e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10e74:	b083      	sub	sp, #12
   10e76:	4605      	mov	r5, r0
   10e78:	4689      	mov	r9, r1
   10e7a:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   10e7c:	2700      	movs	r7, #0
   10e7e:	e04a      	b.n	10f16 <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   10e80:	f8d8 2000 	ldr.w	r2, [r8]
   10e84:	f104 0110 	add.w	r1, r4, #16
   10e88:	2301      	movs	r3, #1
   10e8a:	408b      	lsls	r3, r1
   10e8c:	421a      	tst	r2, r3
   10e8e:	d108      	bne.n	10ea2 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   10e90:	f064 037f 	orn	r3, r4, #127	; 0x7f
   10e94:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   10e98:	4668      	mov	r0, sp
   10e9a:	f7f5 ff67 	bl	6d6c <usb_dc_ep_check_cap>
   10e9e:	4603      	mov	r3, r0
   10ea0:	b1d0      	cbz	r0, 10ed8 <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   10ea2:	3401      	adds	r4, #1
   10ea4:	b2e4      	uxtb	r4, r4
   10ea6:	2c0f      	cmp	r4, #15
   10ea8:	d834      	bhi.n	10f14 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   10eaa:	78eb      	ldrb	r3, [r5, #3]
   10eac:	f003 0303 	and.w	r3, r3, #3
   10eb0:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   10eb4:	88ab      	ldrh	r3, [r5, #4]
   10eb6:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   10eba:	78ab      	ldrb	r3, [r5, #2]
   10ebc:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   10ec0:	f013 0f80 	tst.w	r3, #128	; 0x80
   10ec4:	d1dc      	bne.n	10e80 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
   10ec6:	f8d8 2000 	ldr.w	r2, [r8]
   10eca:	2301      	movs	r3, #1
   10ecc:	40a3      	lsls	r3, r4
   10ece:	421a      	tst	r2, r3
   10ed0:	d1e7      	bne.n	10ea2 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   10ed2:	f88d 4000 	strb.w	r4, [sp]
   10ed6:	e7df      	b.n	10e98 <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   10ed8:	f89d 2000 	ldrb.w	r2, [sp]
   10edc:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   10ede:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   10ee0:	f012 0f80 	tst.w	r2, #128	; 0x80
   10ee4:	d10b      	bne.n	10efe <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
   10ee6:	2201      	movs	r2, #1
   10ee8:	fa02 f404 	lsl.w	r4, r2, r4
   10eec:	f8d8 2000 	ldr.w	r2, [r8]
   10ef0:	4322      	orrs	r2, r4
   10ef2:	f8c8 2000 	str.w	r2, [r8]
}
   10ef6:	4618      	mov	r0, r3
   10ef8:	b003      	add	sp, #12
   10efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
   10efe:	f104 0110 	add.w	r1, r4, #16
   10f02:	2201      	movs	r2, #1
   10f04:	fa02 f101 	lsl.w	r1, r2, r1
   10f08:	f8d8 2000 	ldr.w	r2, [r8]
   10f0c:	430a      	orrs	r2, r1
   10f0e:	f8c8 2000 	str.w	r2, [r8]
   10f12:	e7f0      	b.n	10ef6 <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   10f14:	3701      	adds	r7, #1
   10f16:	f899 301c 	ldrb.w	r3, [r9, #28]
   10f1a:	429f      	cmp	r7, r3
   10f1c:	d209      	bcs.n	10f32 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   10f1e:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   10f22:	78aa      	ldrb	r2, [r5, #2]
   10f24:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   10f28:	7933      	ldrb	r3, [r6, #4]
   10f2a:	429a      	cmp	r2, r3
   10f2c:	d1f2      	bne.n	10f14 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   10f2e:	2401      	movs	r4, #1
   10f30:	e7b9      	b.n	10ea6 <usb_validate_ep_cfg_data+0x36>
	return -1;
   10f32:	f04f 33ff 	mov.w	r3, #4294967295
   10f36:	e7de      	b.n	10ef6 <usb_validate_ep_cfg_data+0x86>

00010f38 <usb_get_dev_data_by_cfg>:
	return list->head;
   10f38:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10f3a:	b110      	cbz	r0, 10f42 <usb_get_dev_data_by_cfg+0xa>
   10f3c:	3804      	subs	r0, #4
   10f3e:	e000      	b.n	10f42 <usb_get_dev_data_by_cfg+0xa>
   10f40:	3804      	subs	r0, #4
   10f42:	b140      	cbz	r0, 10f56 <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
   10f44:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
   10f46:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
   10f48:	428b      	cmp	r3, r1
   10f4a:	d004      	beq.n	10f56 <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10f4c:	1d03      	adds	r3, r0, #4
   10f4e:	d003      	beq.n	10f58 <usb_get_dev_data_by_cfg+0x20>
	return node->next;
   10f50:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10f52:	2800      	cmp	r0, #0
   10f54:	d1f4      	bne.n	10f40 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   10f56:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10f58:	4618      	mov	r0, r3
   10f5a:	e7f2      	b.n	10f42 <usb_get_dev_data_by_cfg+0xa>

00010f5c <usb_get_dev_data_by_iface>:
	return list->head;
   10f5c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10f5e:	b110      	cbz	r0, 10f66 <usb_get_dev_data_by_iface+0xa>
   10f60:	3804      	subs	r0, #4
   10f62:	e000      	b.n	10f66 <usb_get_dev_data_by_iface+0xa>
   10f64:	3804      	subs	r0, #4
   10f66:	b150      	cbz	r0, 10f7e <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
   10f68:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   10f6a:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
   10f6c:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   10f6e:	789b      	ldrb	r3, [r3, #2]
   10f70:	428b      	cmp	r3, r1
   10f72:	d004      	beq.n	10f7e <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10f74:	1d03      	adds	r3, r0, #4
   10f76:	d003      	beq.n	10f80 <usb_get_dev_data_by_iface+0x24>
	return node->next;
   10f78:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10f7a:	2800      	cmp	r0, #0
   10f7c:	d1f2      	bne.n	10f64 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   10f7e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10f80:	4618      	mov	r0, r3
   10f82:	e7f0      	b.n	10f66 <usb_get_dev_data_by_iface+0xa>

00010f84 <usb_get_dev_data_by_ep>:
	return list->head;
   10f84:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10f86:	b100      	cbz	r0, 10f8a <usb_get_dev_data_by_ep+0x6>
   10f88:	3804      	subs	r0, #4
   10f8a:	b1d0      	cbz	r0, 10fc2 <usb_get_dev_data_by_ep+0x3e>
{
   10f8c:	b430      	push	{r4, r5}
   10f8e:	e005      	b.n	10f9c <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10f90:	1d03      	adds	r3, r0, #4
   10f92:	d012      	beq.n	10fba <usb_get_dev_data_by_ep+0x36>
	return node->next;
   10f94:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10f96:	b190      	cbz	r0, 10fbe <usb_get_dev_data_by_ep+0x3a>
   10f98:	3804      	subs	r0, #4
   10f9a:	b180      	cbz	r0, 10fbe <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
   10f9c:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   10f9e:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   10fa0:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   10fa2:	2300      	movs	r3, #0
   10fa4:	7f22      	ldrb	r2, [r4, #28]
   10fa6:	429a      	cmp	r2, r3
   10fa8:	d9f2      	bls.n	10f90 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   10faa:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   10fae:	7912      	ldrb	r2, [r2, #4]
   10fb0:	428a      	cmp	r2, r1
   10fb2:	d004      	beq.n	10fbe <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   10fb4:	3301      	adds	r3, #1
   10fb6:	b2db      	uxtb	r3, r3
   10fb8:	e7f4      	b.n	10fa4 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10fba:	4618      	mov	r0, r3
   10fbc:	e7ed      	b.n	10f9a <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   10fbe:	bc30      	pop	{r4, r5}
   10fc0:	4770      	bx	lr
   10fc2:	4770      	bx	lr

00010fc4 <usb_transfer_is_busy>:
{
   10fc4:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   10fc6:	f7f2 fa25 	bl	3414 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   10fca:	b128      	cbz	r0, 10fd8 <usb_transfer_is_busy+0x14>
   10fcc:	6843      	ldr	r3, [r0, #4]
   10fce:	f113 0f10 	cmn.w	r3, #16
   10fd2:	d003      	beq.n	10fdc <usb_transfer_is_busy+0x18>
	return false;
   10fd4:	2000      	movs	r0, #0
}
   10fd6:	bd08      	pop	{r3, pc}
	return false;
   10fd8:	2000      	movs	r0, #0
   10fda:	e7fc      	b.n	10fd6 <usb_transfer_is_busy+0x12>
		return true;
   10fdc:	2001      	movs	r0, #1
   10fde:	e7fa      	b.n	10fd6 <usb_transfer_is_busy+0x12>

00010fe0 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   10fe0:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   10fe2:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   10fe4:	1c4b      	adds	r3, r1, #1
   10fe6:	b2db      	uxtb	r3, r3
   10fe8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   10fec:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   10fee:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   10ff2:	4770      	bx	lr

00010ff4 <cdc_acm_irq_callback_work_handler>:
{
   10ff4:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   10ff6:	f850 3c08 	ldr.w	r3, [r0, #-8]
   10ffa:	f850 1c04 	ldr.w	r1, [r0, #-4]
   10ffe:	6f80      	ldr	r0, [r0, #120]	; 0x78
   11000:	4798      	blx	r3
}
   11002:	bd08      	pop	{r3, pc}

00011004 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   11004:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   11006:	2200      	movs	r2, #0
   11008:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   1100c:	4770      	bx	lr

0001100e <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1100e:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   11010:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   11014:	b122      	cbz	r2, 11020 <cdc_acm_irq_tx_ready+0x12>
   11016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1101a:	b91b      	cbnz	r3, 11024 <cdc_acm_irq_tx_ready+0x16>
	return 0;
   1101c:	2000      	movs	r0, #0
   1101e:	4770      	bx	lr
   11020:	2000      	movs	r0, #0
   11022:	4770      	bx	lr
		return 1;
   11024:	2001      	movs	r0, #1
}
   11026:	4770      	bx	lr

00011028 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   11028:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   1102a:	2200      	movs	r2, #0
   1102c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   11030:	4770      	bx	lr

00011032 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   11032:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
   11034:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   11038:	b90b      	cbnz	r3, 1103e <cdc_acm_irq_rx_ready+0xc>
	return 0;
   1103a:	2000      	movs	r0, #0
   1103c:	4770      	bx	lr
		return 1;
   1103e:	2001      	movs	r0, #1
}
   11040:	4770      	bx	lr

00011042 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   11042:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   11044:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   11048:	b112      	cbz	r2, 11050 <cdc_acm_irq_is_pending+0xe>
   1104a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   1104e:	b93a      	cbnz	r2, 11060 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   11050:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   11054:	b132      	cbz	r2, 11064 <cdc_acm_irq_is_pending+0x22>
   11056:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   1105a:	b92b      	cbnz	r3, 11068 <cdc_acm_irq_is_pending+0x26>
		return 0;
   1105c:	2000      	movs	r0, #0
   1105e:	4770      	bx	lr
		return 1;
   11060:	2001      	movs	r0, #1
   11062:	4770      	bx	lr
		return 0;
   11064:	2000      	movs	r0, #0
   11066:	4770      	bx	lr
		return 1;
   11068:	2001      	movs	r0, #1
}
   1106a:	4770      	bx	lr

0001106c <cdc_acm_irq_update>:
}
   1106c:	2001      	movs	r0, #1
   1106e:	4770      	bx	lr

00011070 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   11070:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
   11072:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
   11074:	605a      	str	r2, [r3, #4]
}
   11076:	4770      	bx	lr

00011078 <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   11078:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   1107a:	6759      	str	r1, [r3, #116]	; 0x74
}
   1107c:	4770      	bx	lr

0001107e <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1107e:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   11080:	2902      	cmp	r1, #2
   11082:	d00a      	beq.n	1109a <cdc_acm_line_ctrl_get+0x1c>
   11084:	2904      	cmp	r1, #4
   11086:	d00f      	beq.n	110a8 <cdc_acm_line_ctrl_get+0x2a>
   11088:	2901      	cmp	r1, #1
   1108a:	d002      	beq.n	11092 <cdc_acm_line_ctrl_get+0x14>
   1108c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11090:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   11092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11094:	6013      	str	r3, [r2, #0]
		return 0;
   11096:	2000      	movs	r0, #0
   11098:	4770      	bx	lr
		*val = (dev_data->line_state &
   1109a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   1109e:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
   110a2:	6013      	str	r3, [r2, #0]
		return 0;
   110a4:	2000      	movs	r0, #0
   110a6:	4770      	bx	lr
		*val = (dev_data->line_state &
   110a8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   110ac:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
   110b0:	6013      	str	r3, [r2, #0]
		return 0;
   110b2:	2000      	movs	r0, #0
   110b4:	4770      	bx	lr

000110b6 <cdc_acm_line_ctrl_set>:
{
   110b6:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   110b8:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
   110ba:	2940      	cmp	r1, #64	; 0x40
   110bc:	f000 8081 	beq.w	111c2 <cdc_acm_line_ctrl_set+0x10c>
   110c0:	d81b      	bhi.n	110fa <cdc_acm_line_ctrl_set+0x44>
   110c2:	2920      	cmp	r1, #32
   110c4:	f200 809f 	bhi.w	11206 <cdc_acm_line_ctrl_set+0x150>
   110c8:	2900      	cmp	r1, #0
   110ca:	f000 809f 	beq.w	1120c <cdc_acm_line_ctrl_set+0x156>
   110ce:	1e4b      	subs	r3, r1, #1
   110d0:	2b1f      	cmp	r3, #31
   110d2:	f200 809e 	bhi.w	11212 <cdc_acm_line_ctrl_set+0x15c>
   110d6:	e8df f003 	tbb	[pc, r3]
   110da:	9c3d      	.short	0x9c3d
   110dc:	9c9c9c9c 	.word	0x9c9c9c9c
   110e0:	9c9c429c 	.word	0x9c9c429c
   110e4:	9c9c9c9c 	.word	0x9c9c9c9c
   110e8:	9c9c529c 	.word	0x9c9c529c
   110ec:	9c9c9c9c 	.word	0x9c9c9c9c
   110f0:	9c9c9c9c 	.word	0x9c9c9c9c
   110f4:	9c9c9c9c 	.word	0x9c9c9c9c
   110f8:	639c      	.short	0x639c
   110fa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   110fe:	d071      	beq.n	111e4 <cdc_acm_line_ctrl_set+0x12e>
   11100:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   11104:	d110      	bne.n	11128 <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   11106:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   1110a:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   1110e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   11112:	b11a      	cbz	r2, 1111c <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   11114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11118:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   1111c:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   11120:	f7f2 fdb6 	bl	3c90 <cdc_acm_send_notification>
		return 0;
   11124:	2000      	movs	r0, #0
   11126:	e019      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   11128:	2980      	cmp	r1, #128	; 0x80
   1112a:	d110      	bne.n	1114e <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   1112c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   11130:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11134:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   11138:	b11a      	cbz	r2, 11142 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   1113a:	f043 0310 	orr.w	r3, r3, #16
   1113e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   11142:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   11146:	f7f2 fda3 	bl	3c90 <cdc_acm_send_notification>
		return 0;
   1114a:	2000      	movs	r0, #0
   1114c:	e006      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   1114e:	f06f 0012 	mvn.w	r0, #18
   11152:	e003      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
   11154:	4611      	mov	r1, r2
   11156:	f7ff ff8f 	bl	11078 <cdc_acm_baudrate_set>
		return 0;
   1115a:	2000      	movs	r0, #0
}
   1115c:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   1115e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   11162:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   11166:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   1116a:	b11a      	cbz	r2, 11174 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   1116c:	f043 0301 	orr.w	r3, r3, #1
   11170:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   11174:	2101      	movs	r1, #1
   11176:	f7f2 fd8b 	bl	3c90 <cdc_acm_send_notification>
		return 0;
   1117a:	2000      	movs	r0, #0
   1117c:	e7ee      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   1117e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   11182:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   11186:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   1118a:	b11a      	cbz	r2, 11194 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   1118c:	f043 0302 	orr.w	r3, r3, #2
   11190:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   11194:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   11198:	f7f2 fd7a 	bl	3c90 <cdc_acm_send_notification>
		return 0;
   1119c:	2000      	movs	r0, #0
   1119e:	e7dd      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   111a0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   111a4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   111a8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   111ac:	b11a      	cbz	r2, 111b6 <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   111ae:	f043 0304 	orr.w	r3, r3, #4
   111b2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   111b6:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   111ba:	f7f2 fd69 	bl	3c90 <cdc_acm_send_notification>
		return 0;
   111be:	2000      	movs	r0, #0
   111c0:	e7cc      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   111c2:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   111c6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   111ca:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   111ce:	b11a      	cbz	r2, 111d8 <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   111d0:	f043 0308 	orr.w	r3, r3, #8
   111d4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   111d8:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   111dc:	f7f2 fd58 	bl	3c90 <cdc_acm_send_notification>
		return 0;
   111e0:	2000      	movs	r0, #0
   111e2:	e7bb      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   111e4:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   111e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   111ec:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   111f0:	b11a      	cbz	r2, 111fa <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   111f2:	f043 0320 	orr.w	r3, r3, #32
   111f6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   111fa:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   111fe:	f7f2 fd47 	bl	3c90 <cdc_acm_send_notification>
		return 0;
   11202:	2000      	movs	r0, #0
   11204:	e7aa      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   11206:	f06f 0012 	mvn.w	r0, #18
   1120a:	e7a7      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
   1120c:	f06f 0012 	mvn.w	r0, #18
   11210:	e7a4      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>
   11212:	f06f 0012 	mvn.w	r0, #18
   11216:	e7a1      	b.n	1115c <cdc_acm_line_ctrl_set+0xa6>

00011218 <cdc_acm_fifo_read>:
{
   11218:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1121a:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   1121c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   1121e:	f7ff f9e1 	bl	105e4 <ring_buf_get>
   11222:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   11224:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   11226:	f7ff f90f 	bl	10448 <ring_buf_is_empty>
   1122a:	b110      	cbz	r0, 11232 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   1122c:	2300      	movs	r3, #0
   1122e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   11232:	4620      	mov	r0, r4
   11234:	bd38      	pop	{r3, r4, r5, pc}

00011236 <cdc_acm_poll_in>:
{
   11236:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   11238:	2201      	movs	r2, #1
   1123a:	f7ff ffed 	bl	11218 <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
   1123e:	2801      	cmp	r0, #1
   11240:	d101      	bne.n	11246 <cdc_acm_poll_in+0x10>
   11242:	2000      	movs	r0, #0
}
   11244:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
   11246:	f04f 30ff 	mov.w	r0, #4294967295
   1124a:	e7fb      	b.n	11244 <cdc_acm_poll_in+0xe>

0001124c <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   1124c:	4770      	bx	lr

0001124e <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   1124e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11252:	4680      	mov	r8, r0
   11254:	4617      	mov	r7, r2
   11256:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   11258:	1e0d      	subs	r5, r1, #0
   1125a:	db05      	blt.n	11268 <flash_area_read+0x1a>
   1125c:	18eb      	adds	r3, r5, r3
   1125e:	6882      	ldr	r2, [r0, #8]
   11260:	4293      	cmp	r3, r2
   11262:	d911      	bls.n	11288 <flash_area_read+0x3a>
   11264:	2300      	movs	r3, #0
   11266:	e000      	b.n	1126a <flash_area_read+0x1c>
   11268:	2300      	movs	r3, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   1126a:	b17b      	cbz	r3, 1128c <flash_area_read+0x3e>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   1126c:	f8d8 000c 	ldr.w	r0, [r8, #12]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11270:	f7fc fc22 	bl	dab8 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   11274:	f8d8 1004 	ldr.w	r1, [r8, #4]
   11278:	4429      	add	r1, r5

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
   1127a:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   1127c:	681c      	ldr	r4, [r3, #0]
   1127e:	4633      	mov	r3, r6
   11280:	463a      	mov	r2, r7
   11282:	47a0      	blx	r4
}
   11284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   11288:	2301      	movs	r3, #1
   1128a:	e7ee      	b.n	1126a <flash_area_read+0x1c>
		return -EINVAL;
   1128c:	f06f 0015 	mvn.w	r0, #21
   11290:	e7f8      	b.n	11284 <flash_area_read+0x36>

00011292 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   11292:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11296:	4606      	mov	r6, r0
   11298:	4690      	mov	r8, r2
   1129a:	461f      	mov	r7, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   1129c:	f1b1 0900 	subs.w	r9, r1, #0
   112a0:	db05      	blt.n	112ae <flash_area_write+0x1c>
   112a2:	444b      	add	r3, r9
   112a4:	6882      	ldr	r2, [r0, #8]
   112a6:	4293      	cmp	r3, r2
   112a8:	d91f      	bls.n	112ea <flash_area_write+0x58>
   112aa:	2300      	movs	r3, #0
   112ac:	e000      	b.n	112b0 <flash_area_write+0x1e>
   112ae:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   112b0:	b1eb      	cbz	r3, 112ee <flash_area_write+0x5c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   112b2:	68f0      	ldr	r0, [r6, #12]
   112b4:	f7fc fc00 	bl	dab8 <z_impl_device_get_binding>
   112b8:	4604      	mov	r4, r0

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   112ba:	6871      	ldr	r1, [r6, #4]
   112bc:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
   112be:	6886      	ldr	r6, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   112c0:	68f3      	ldr	r3, [r6, #12]
   112c2:	b11b      	cbz	r3, 112cc <flash_area_write+0x3a>
		rc = api->write_protection(dev, false);
   112c4:	2100      	movs	r1, #0
   112c6:	4798      	blx	r3
		if (rc) {
   112c8:	4605      	mov	r5, r0
   112ca:	b958      	cbnz	r0, 112e4 <flash_area_write+0x52>
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
   112cc:	6875      	ldr	r5, [r6, #4]
   112ce:	463b      	mov	r3, r7
   112d0:	4642      	mov	r2, r8
   112d2:	4649      	mov	r1, r9
   112d4:	4620      	mov	r0, r4
   112d6:	47a8      	blx	r5
   112d8:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   112da:	68f3      	ldr	r3, [r6, #12]
   112dc:	b113      	cbz	r3, 112e4 <flash_area_write+0x52>
		(void) api->write_protection(dev, true);
   112de:	2101      	movs	r1, #1
   112e0:	4620      	mov	r0, r4
   112e2:	4798      	blx	r3

	return rc;
}
   112e4:	4628      	mov	r0, r5
   112e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   112ea:	2301      	movs	r3, #1
   112ec:	e7e0      	b.n	112b0 <flash_area_write+0x1e>
		return -EINVAL;
   112ee:	f06f 0515 	mvn.w	r5, #21
   112f2:	e7f7      	b.n	112e4 <flash_area_write+0x52>

000112f4 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   112f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112f8:	4605      	mov	r5, r0
   112fa:	4690      	mov	r8, r2
	return (off >= 0) && ((off + len) <= fa->fa_size);
   112fc:	1e0e      	subs	r6, r1, #0
   112fe:	db05      	blt.n	1130c <flash_area_erase+0x18>
   11300:	18b3      	adds	r3, r6, r2
   11302:	6882      	ldr	r2, [r0, #8]
   11304:	4293      	cmp	r3, r2
   11306:	d91e      	bls.n	11346 <flash_area_erase+0x52>
   11308:	2300      	movs	r3, #0
   1130a:	e000      	b.n	1130e <flash_area_erase+0x1a>
   1130c:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   1130e:	b1e3      	cbz	r3, 1134a <flash_area_erase+0x56>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   11310:	68e8      	ldr	r0, [r5, #12]
   11312:	f7fc fbd1 	bl	dab8 <z_impl_device_get_binding>
   11316:	4604      	mov	r4, r0

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   11318:	686b      	ldr	r3, [r5, #4]
   1131a:	441e      	add	r6, r3
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   1131c:	6887      	ldr	r7, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   1131e:	68fb      	ldr	r3, [r7, #12]
   11320:	b11b      	cbz	r3, 1132a <flash_area_erase+0x36>
		rc = api->write_protection(dev, false);
   11322:	2100      	movs	r1, #0
   11324:	4798      	blx	r3
		if (rc) {
   11326:	4605      	mov	r5, r0
   11328:	b950      	cbnz	r0, 11340 <flash_area_erase+0x4c>
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   1132a:	68bb      	ldr	r3, [r7, #8]
   1132c:	4642      	mov	r2, r8
   1132e:	4631      	mov	r1, r6
   11330:	4620      	mov	r0, r4
   11332:	4798      	blx	r3
   11334:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   11336:	68fb      	ldr	r3, [r7, #12]
   11338:	b113      	cbz	r3, 11340 <flash_area_erase+0x4c>
		(void) api->write_protection(dev, true);
   1133a:	2101      	movs	r1, #1
   1133c:	4620      	mov	r0, r4
   1133e:	4798      	blx	r3

	return rc;
}
   11340:	4628      	mov	r0, r5
   11342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   11346:	2301      	movs	r3, #1
   11348:	e7e1      	b.n	1130e <flash_area_erase+0x1a>
		return -EINVAL;
   1134a:	f06f 0515 	mvn.w	r5, #21
   1134e:	e7f7      	b.n	11340 <flash_area_erase+0x4c>

00011350 <flash_area_get_device>:

	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
   11350:	b508      	push	{r3, lr}
	return device_get_binding(fa->fa_dev_name);
   11352:	68c0      	ldr	r0, [r0, #12]
   11354:	f7fc fbb0 	bl	dab8 <z_impl_device_get_binding>
}
   11358:	bd08      	pop	{r3, pc}

0001135a <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1135a:	2200      	movs	r2, #0
   1135c:	6002      	str	r2, [r0, #0]
   1135e:	6042      	str	r2, [r0, #4]
   11360:	6082      	str	r2, [r0, #8]
}
   11362:	4770      	bx	lr

00011364 <abort_function>:
	while(1);
   11364:	e7fe      	b.n	11364 <abort_function>

00011366 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11366:	b538      	push	{r3, r4, r5, lr}
   11368:	4604      	mov	r4, r0

	if (esf != NULL) {
   1136a:	460d      	mov	r5, r1
   1136c:	b111      	cbz	r1, 11374 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   1136e:	4608      	mov	r0, r1
   11370:	f7f2 ff70 	bl	4254 <esf_dump>
	}
	z_fatal_error(reason, esf);
   11374:	4629      	mov	r1, r5
   11376:	4620      	mov	r0, r4
   11378:	f7fc fc24 	bl	dbc4 <z_fatal_error>
}
   1137c:	bd38      	pop	{r3, r4, r5, pc}

0001137e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1137e:	b508      	push	{r3, lr}
   11380:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   11382:	6800      	ldr	r0, [r0, #0]
   11384:	f7ff ffef 	bl	11366 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   11388:	bd08      	pop	{r3, pc}

0001138a <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   1138a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1138c:	2100      	movs	r1, #0
   1138e:	2001      	movs	r0, #1
   11390:	f7ff ffe9 	bl	11366 <z_arm_fatal_error>
}
   11394:	bd08      	pop	{r3, pc}

00011396 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   11396:	b508      	push	{r3, lr}
	handler();
   11398:	f7f2 fff2 	bl	4380 <z_SysNmiOnReset>
	z_arm_int_exit();
   1139c:	f7f3 f8ee 	bl	457c <z_arm_exc_exit>
}
   113a0:	bd08      	pop	{r3, pc}

000113a2 <memory_fault_recoverable>:
}
   113a2:	2000      	movs	r0, #0
   113a4:	4770      	bx	lr

000113a6 <fault_handle>:
{
   113a6:	b508      	push	{r3, lr}
	*recoverable = false;
   113a8:	2300      	movs	r3, #0
   113aa:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   113ac:	1ecb      	subs	r3, r1, #3
   113ae:	2b09      	cmp	r3, #9
   113b0:	d81a      	bhi.n	113e8 <fault_handle+0x42>
   113b2:	e8df f003 	tbb	[pc, r3]
   113b6:	0905      	.short	0x0905
   113b8:	1919110d 	.word	0x1919110d
   113bc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   113c0:	4611      	mov	r1, r2
   113c2:	f7f3 fb6f 	bl	4aa4 <hard_fault>
}
   113c6:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   113c8:	2100      	movs	r1, #0
   113ca:	f7f3 fa89 	bl	48e0 <mem_manage_fault>
		break;
   113ce:	e7fa      	b.n	113c6 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   113d0:	2100      	movs	r1, #0
   113d2:	f7f3 f9ad 	bl	4730 <bus_fault>
		break;
   113d6:	e7f6      	b.n	113c6 <fault_handle+0x20>
		reason = usage_fault(esf);
   113d8:	f7f3 f8de 	bl	4598 <usage_fault>
		break;
   113dc:	e7f3      	b.n	113c6 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   113de:	4611      	mov	r1, r2
   113e0:	f7f3 f98c 	bl	46fc <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   113e4:	2000      	movs	r0, #0
		break;
   113e6:	e7ee      	b.n	113c6 <fault_handle+0x20>
		reserved_exception(esf, fault);
   113e8:	f7f3 fc02 	bl	4bf0 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   113ec:	2000      	movs	r0, #0
	return reason;
   113ee:	e7ea      	b.n	113c6 <fault_handle+0x20>

000113f0 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   113f0:	6843      	ldr	r3, [r0, #4]
   113f2:	1e5a      	subs	r2, r3, #1
		&&
   113f4:	4213      	tst	r3, r2
   113f6:	d106      	bne.n	11406 <mpu_partition_is_valid+0x16>
		&&
   113f8:	2b1f      	cmp	r3, #31
   113fa:	d906      	bls.n	1140a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   113fc:	6803      	ldr	r3, [r0, #0]
		&&
   113fe:	421a      	tst	r2, r3
   11400:	d005      	beq.n	1140e <mpu_partition_is_valid+0x1e>
   11402:	2000      	movs	r0, #0
   11404:	4770      	bx	lr
   11406:	2000      	movs	r0, #0
   11408:	4770      	bx	lr
   1140a:	2000      	movs	r0, #0
   1140c:	4770      	bx	lr
   1140e:	2001      	movs	r0, #1
}
   11410:	4770      	bx	lr

00011412 <mpu_configure_region>:
{
   11412:	b500      	push	{lr}
   11414:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   11416:	680b      	ldr	r3, [r1, #0]
   11418:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1141a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1141c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   1141e:	2b20      	cmp	r3, #32
   11420:	d912      	bls.n	11448 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   11422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   11426:	d811      	bhi.n	1144c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   11428:	3b01      	subs	r3, #1
   1142a:	fab3 f383 	clz	r3, r3
   1142e:	f1c3 031f 	rsb	r3, r3, #31
   11432:	005b      	lsls	r3, r3, #1
   11434:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11438:	4313      	orrs	r3, r2
   1143a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   1143c:	a901      	add	r1, sp, #4
   1143e:	f7f3 fd33 	bl	4ea8 <region_allocate_and_init>
}
   11442:	b005      	add	sp, #20
   11444:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   11448:	2308      	movs	r3, #8
   1144a:	e7f5      	b.n	11438 <mpu_configure_region+0x26>
		return REGION_4G;
   1144c:	233e      	movs	r3, #62	; 0x3e
   1144e:	e7f3      	b.n	11438 <mpu_configure_region+0x26>

00011450 <arm_core_mpu_configure_static_mpu_regions>:
{
   11450:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   11452:	f7f3 fd8b 	bl	4f6c <mpu_configure_static_mpu_regions>
}
   11456:	bd08      	pop	{r3, pc}

00011458 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   11458:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   1145a:	f7f3 fd91 	bl	4f80 <mpu_configure_dynamic_mpu_regions>
}
   1145e:	bd08      	pop	{r3, pc}

00011460 <free>:

void free(void *ptr)
{
	ARG_UNUSED(ptr);
}
   11460:	4770      	bx	lr

00011462 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   11462:	4602      	mov	r2, r0
   11464:	780b      	ldrb	r3, [r1, #0]
   11466:	b11b      	cbz	r3, 11470 <strcpy+0xe>
		*d = *s;
   11468:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   1146c:	3101      	adds	r1, #1
   1146e:	e7f9      	b.n	11464 <strcpy+0x2>
	}

	*d = '\0';
   11470:	7013      	strb	r3, [r2, #0]

	return dest;
}
   11472:	4770      	bx	lr

00011474 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   11474:	4603      	mov	r3, r0
   11476:	b1a2      	cbz	r2, 114a2 <strncpy+0x2e>
{
   11478:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   1147a:	780c      	ldrb	r4, [r1, #0]
   1147c:	b12c      	cbz	r4, 1148a <strncpy+0x16>
		*d = *s;
   1147e:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   11482:	3101      	adds	r1, #1
		d++;
		n--;
   11484:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   11486:	2a00      	cmp	r2, #0
   11488:	d1f7      	bne.n	1147a <strncpy+0x6>
	}

	while (n > 0) {
   1148a:	b122      	cbz	r2, 11496 <strncpy+0x22>
		*d = '\0';
   1148c:	2100      	movs	r1, #0
   1148e:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   11492:	3a01      	subs	r2, #1
   11494:	e7f9      	b.n	1148a <strncpy+0x16>
	}

	return dest;
}
   11496:	bc10      	pop	{r4}
   11498:	4770      	bx	lr
		*d = '\0';
   1149a:	2100      	movs	r1, #0
   1149c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   114a0:	3a01      	subs	r2, #1
	while (n > 0) {
   114a2:	2a00      	cmp	r2, #0
   114a4:	d1f9      	bne.n	1149a <strncpy+0x26>
   114a6:	4770      	bx	lr

000114a8 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   114a8:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   114aa:	7803      	ldrb	r3, [r0, #0]
   114ac:	428b      	cmp	r3, r1
   114ae:	d002      	beq.n	114b6 <strchr+0xe>
   114b0:	b10b      	cbz	r3, 114b6 <strchr+0xe>
		s++;
   114b2:	3001      	adds	r0, #1
   114b4:	e7f9      	b.n	114aa <strchr+0x2>
	}

	return (*s == tmp) ? (char *) s : NULL;
   114b6:	428b      	cmp	r3, r1
   114b8:	d100      	bne.n	114bc <strchr+0x14>
}
   114ba:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
   114bc:	2000      	movs	r0, #0
   114be:	e7fc      	b.n	114ba <strchr+0x12>

000114c0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   114c0:	4603      	mov	r3, r0
	size_t n = 0;
   114c2:	2000      	movs	r0, #0

	while (*s != '\0') {
   114c4:	781a      	ldrb	r2, [r3, #0]
   114c6:	b112      	cbz	r2, 114ce <strlen+0xe>
		s++;
   114c8:	3301      	adds	r3, #1
		n++;
   114ca:	3001      	adds	r0, #1
   114cc:	e7fa      	b.n	114c4 <strlen+0x4>
	}

	return n;
}
   114ce:	4770      	bx	lr

000114d0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   114d0:	4603      	mov	r3, r0
	size_t n = 0;
   114d2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   114d4:	781a      	ldrb	r2, [r3, #0]
   114d6:	b122      	cbz	r2, 114e2 <strnlen+0x12>
   114d8:	4288      	cmp	r0, r1
   114da:	d202      	bcs.n	114e2 <strnlen+0x12>
		s++;
   114dc:	3301      	adds	r3, #1
		n++;
   114de:	3001      	adds	r0, #1
   114e0:	e7f8      	b.n	114d4 <strnlen+0x4>
	}

	return n;
}
   114e2:	4770      	bx	lr

000114e4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   114e4:	7803      	ldrb	r3, [r0, #0]
   114e6:	780a      	ldrb	r2, [r1, #0]
   114e8:	4293      	cmp	r3, r2
   114ea:	d103      	bne.n	114f4 <strcmp+0x10>
   114ec:	b113      	cbz	r3, 114f4 <strcmp+0x10>
		s1++;
   114ee:	3001      	adds	r0, #1
		s2++;
   114f0:	3101      	adds	r1, #1
   114f2:	e7f7      	b.n	114e4 <strcmp>
	}

	return *s1 - *s2;
}
   114f4:	1a98      	subs	r0, r3, r2
   114f6:	4770      	bx	lr

000114f8 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   114f8:	b192      	cbz	r2, 11520 <strncmp+0x28>
{
   114fa:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   114fc:	7803      	ldrb	r3, [r0, #0]
   114fe:	780c      	ldrb	r4, [r1, #0]
   11500:	42a3      	cmp	r3, r4
   11502:	d105      	bne.n	11510 <strncmp+0x18>
   11504:	b123      	cbz	r3, 11510 <strncmp+0x18>
		s1++;
   11506:	3001      	adds	r0, #1
		s2++;
   11508:	3101      	adds	r1, #1
		n--;
   1150a:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1150c:	2a00      	cmp	r2, #0
   1150e:	d1f5      	bne.n	114fc <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   11510:	b122      	cbz	r2, 1151c <strncmp+0x24>
   11512:	7800      	ldrb	r0, [r0, #0]
   11514:	780b      	ldrb	r3, [r1, #0]
   11516:	1ac0      	subs	r0, r0, r3
}
   11518:	bc10      	pop	{r4}
   1151a:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
   1151c:	2000      	movs	r0, #0
   1151e:	e7fb      	b.n	11518 <strncmp+0x20>
   11520:	b11a      	cbz	r2, 1152a <strncmp+0x32>
   11522:	7800      	ldrb	r0, [r0, #0]
   11524:	780b      	ldrb	r3, [r1, #0]
   11526:	1ac0      	subs	r0, r0, r3
   11528:	4770      	bx	lr
   1152a:	2000      	movs	r0, #0
}
   1152c:	4770      	bx	lr

0001152e <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1152e:	b17a      	cbz	r2, 11550 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   11530:	1e53      	subs	r3, r2, #1
   11532:	d00f      	beq.n	11554 <memcmp+0x26>
{
   11534:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   11536:	7804      	ldrb	r4, [r0, #0]
   11538:	780a      	ldrb	r2, [r1, #0]
   1153a:	4294      	cmp	r4, r2
   1153c:	d103      	bne.n	11546 <memcmp+0x18>
		c1++;
   1153e:	3001      	adds	r0, #1
		c2++;
   11540:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   11542:	3b01      	subs	r3, #1
   11544:	d1f7      	bne.n	11536 <memcmp+0x8>
	}

	return *c1 - *c2;
   11546:	7800      	ldrb	r0, [r0, #0]
   11548:	780b      	ldrb	r3, [r1, #0]
   1154a:	1ac0      	subs	r0, r0, r3
}
   1154c:	bc10      	pop	{r4}
   1154e:	4770      	bx	lr
		return 0;
   11550:	2000      	movs	r0, #0
   11552:	4770      	bx	lr
	return *c1 - *c2;
   11554:	7800      	ldrb	r0, [r0, #0]
   11556:	780b      	ldrb	r3, [r1, #0]
   11558:	1ac0      	subs	r0, r0, r3
}
   1155a:	4770      	bx	lr

0001155c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1155c:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1155e:	ea80 0301 	eor.w	r3, r0, r1
   11562:	f013 0f03 	tst.w	r3, #3
   11566:	d001      	beq.n	1156c <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   11568:	4603      	mov	r3, r0
   1156a:	e017      	b.n	1159c <memcpy+0x40>
   1156c:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   1156e:	f013 0f03 	tst.w	r3, #3
   11572:	d00b      	beq.n	1158c <memcpy+0x30>
			if (n == 0) {
   11574:	b1a2      	cbz	r2, 115a0 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   11576:	f811 4b01 	ldrb.w	r4, [r1], #1
   1157a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1157e:	3a01      	subs	r2, #1
   11580:	e7f5      	b.n	1156e <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   11582:	f851 4b04 	ldr.w	r4, [r1], #4
   11586:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   1158a:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   1158c:	2a03      	cmp	r2, #3
   1158e:	d8f8      	bhi.n	11582 <memcpy+0x26>
   11590:	e004      	b.n	1159c <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   11592:	f811 4b01 	ldrb.w	r4, [r1], #1
   11596:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1159a:	3a01      	subs	r2, #1
	while (n > 0) {
   1159c:	2a00      	cmp	r2, #0
   1159e:	d1f8      	bne.n	11592 <memcpy+0x36>
	}

	return d;
}
   115a0:	bc10      	pop	{r4}
   115a2:	4770      	bx	lr

000115a4 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   115a4:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   115a6:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   115a8:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   115aa:	f013 0f03 	tst.w	r3, #3
   115ae:	d004      	beq.n	115ba <memset+0x16>
		if (n == 0) {
   115b0:	b19a      	cbz	r2, 115da <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   115b2:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   115b6:	3a01      	subs	r2, #1
   115b8:	e7f7      	b.n	115aa <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   115ba:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   115bc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   115c0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   115c4:	2a03      	cmp	r2, #3
   115c6:	d906      	bls.n	115d6 <memset+0x32>
		*(d_word++) = c_word;
   115c8:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   115cc:	3a04      	subs	r2, #4
   115ce:	e7f9      	b.n	115c4 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   115d0:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   115d4:	3a01      	subs	r2, #1
	while (n > 0) {
   115d6:	2a00      	cmp	r2, #0
   115d8:	d1fa      	bne.n	115d0 <memset+0x2c>
	}

	return buf;
}
   115da:	bc10      	pop	{r4}
   115dc:	4770      	bx	lr

000115de <strspn>:
#include <string.h>
#include <string.h>

size_t strspn(const char *s,
	      const char *accept)
{
   115de:	b570      	push	{r4, r5, r6, lr}
   115e0:	4606      	mov	r6, r0
   115e2:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(accept, *s) != NULL)) {
   115e4:	4604      	mov	r4, r0
   115e6:	7821      	ldrb	r1, [r4, #0]
   115e8:	b129      	cbz	r1, 115f6 <strspn+0x18>
   115ea:	4628      	mov	r0, r5
   115ec:	f7ff ff5c 	bl	114a8 <strchr>
   115f0:	b108      	cbz	r0, 115f6 <strspn+0x18>
		++s;
   115f2:	3401      	adds	r4, #1
   115f4:	e7f7      	b.n	115e6 <strspn+0x8>
	}

	return s - ins;
}
   115f6:	1ba0      	subs	r0, r4, r6
   115f8:	bd70      	pop	{r4, r5, r6, pc}

000115fa <strcspn>:

size_t strcspn(const char *s,
	       const char *reject)
{
   115fa:	b570      	push	{r4, r5, r6, lr}
   115fc:	4606      	mov	r6, r0
   115fe:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(reject, *s) == NULL)) {
   11600:	4604      	mov	r4, r0
   11602:	7821      	ldrb	r1, [r4, #0]
   11604:	b129      	cbz	r1, 11612 <strcspn+0x18>
   11606:	4628      	mov	r0, r5
   11608:	f7ff ff4e 	bl	114a8 <strchr>
   1160c:	b908      	cbnz	r0, 11612 <strcspn+0x18>
		++s;
   1160e:	3401      	adds	r4, #1
   11610:	e7f7      	b.n	11602 <strcspn+0x8>
	}

	return s - ins;
}
   11612:	1ba0      	subs	r0, r4, r6
   11614:	bd70      	pop	{r4, r5, r6, pc}

00011616 <_stdout_hook_default>:
}
   11616:	f04f 30ff 	mov.w	r0, #4294967295
   1161a:	4770      	bx	lr

0001161c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1161c:	684b      	ldr	r3, [r1, #4]
   1161e:	2b01      	cmp	r3, #1
   11620:	dd07      	ble.n	11632 <sprintf_out+0x16>
		*(p->ptr) = c;
   11622:	680b      	ldr	r3, [r1, #0]
   11624:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   11626:	680b      	ldr	r3, [r1, #0]
   11628:	3301      	adds	r3, #1
   1162a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1162c:	684b      	ldr	r3, [r1, #4]
   1162e:	3b01      	subs	r3, #1
   11630:	604b      	str	r3, [r1, #4]
}
   11632:	2000      	movs	r0, #0
   11634:	4770      	bx	lr

00011636 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   11636:	b084      	sub	sp, #16
   11638:	ab04      	add	r3, sp, #16
   1163a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1163e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11642:	2b06      	cmp	r3, #6
   11644:	d001      	beq.n	1164a <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   11646:	b004      	add	sp, #16
   11648:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1164a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1164e:	2201      	movs	r2, #1
   11650:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   11654:	f3bf 8f4f 	dsb	sy
        __WFE();
   11658:	bf20      	wfe
    while (true)
   1165a:	e7fd      	b.n	11658 <pm_power_state_set+0x22>

0001165c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1165c:	b084      	sub	sp, #16
   1165e:	ab04      	add	r3, sp, #16
   11660:	e903 0007 	stmdb	r3, {r0, r1, r2}
   11664:	2300      	movs	r3, #0
   11666:	f383 8811 	msr	BASEPRI, r3
   1166a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1166e:	b004      	add	sp, #16
   11670:	4770      	bx	lr

00011672 <fs_type_get>:
{
   11672:	b508      	push	{r3, lr}
	struct registry_entry *ep = registry_find(type);
   11674:	f7f3 fd4a 	bl	510c <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   11678:	4603      	mov	r3, r0
   1167a:	b100      	cbz	r0, 1167e <fs_type_get+0xc>
   1167c:	6843      	ldr	r3, [r0, #4]
}
   1167e:	4618      	mov	r0, r3
   11680:	bd08      	pop	{r3, pc}

00011682 <lfs_to_errno>:
	if (error >= 0) {
   11682:	2800      	cmp	r0, #0
   11684:	da37      	bge.n	116f6 <lfs_to_errno+0x74>
	switch (error) {
   11686:	f100 0354 	add.w	r3, r0, #84	; 0x54
   1168a:	2b52      	cmp	r3, #82	; 0x52
   1168c:	d82b      	bhi.n	116e6 <lfs_to_errno+0x64>
   1168e:	e8df f003 	tbb	[pc, r3]
   11692:	2a30      	.short	0x2a30
   11694:	2a2a2a2a 	.word	0x2a2a2a2a
   11698:	2a2a2a2a 	.word	0x2a2a2a2a
   1169c:	2a2a2a2a 	.word	0x2a2a2a2a
   116a0:	2a2a2a2a 	.word	0x2a2a2a2a
   116a4:	2a2a2a2a 	.word	0x2a2a2a2a
   116a8:	2a2a2a2a 	.word	0x2a2a2a2a
   116ac:	2a2a2a2a 	.word	0x2a2a2a2a
   116b0:	2a2a2a2a 	.word	0x2a2a2a2a
   116b4:	2a2a2a2a 	.word	0x2a2a2a2a
   116b8:	2a2a2a2a 	.word	0x2a2a2a2a
   116bc:	2d2a2a2a 	.word	0x2d2a2a2a
   116c0:	2a2a2a2a 	.word	0x2a2a2a2a
   116c4:	2a2a2a2a 	.word	0x2a2a2a2a
   116c8:	32322a2a 	.word	0x32322a2a
   116cc:	2a2a2a2a 	.word	0x2a2a2a2a
   116d0:	2a323232 	.word	0x2a323232
   116d4:	2a2a322a 	.word	0x2a2a322a
   116d8:	2a322a2a 	.word	0x2a322a2a
   116dc:	2a2a322a 	.word	0x2a2a322a
   116e0:	2a2a2a2a 	.word	0x2a2a2a2a
   116e4:	32          	.byte	0x32
   116e5:	00          	.byte	0x00
	if (error >= 0) {
   116e6:	f06f 0004 	mvn.w	r0, #4
   116ea:	4770      	bx	lr
		return -ENOTEMPTY;
   116ec:	f06f 0059 	mvn.w	r0, #89	; 0x59
   116f0:	4770      	bx	lr
		return -EFAULT;
   116f2:	f06f 000d 	mvn.w	r0, #13
}
   116f6:	4770      	bx	lr

000116f8 <errno_to_lfs>:
	if (error >= 0) {
   116f8:	2800      	cmp	r0, #0
   116fa:	da20      	bge.n	1173e <errno_to_lfs+0x46>
	switch (error) {
   116fc:	f110 0f5a 	cmn.w	r0, #90	; 0x5a
   11700:	d01f      	beq.n	11742 <errno_to_lfs+0x4a>
   11702:	db21      	blt.n	11748 <errno_to_lfs+0x50>
   11704:	f110 0f02 	cmn.w	r0, #2
   11708:	dc21      	bgt.n	1174e <errno_to_lfs+0x56>
   1170a:	f110 0f1c 	cmn.w	r0, #28
   1170e:	db21      	blt.n	11754 <errno_to_lfs+0x5c>
   11710:	f100 031c 	add.w	r3, r0, #28
   11714:	2b1a      	cmp	r3, #26
   11716:	d80f      	bhi.n	11738 <errno_to_lfs+0x40>
   11718:	e8df f003 	tbb	[pc, r3]
   1171c:	0e0e2121 	.word	0x0e0e2121
   11720:	21210e0e 	.word	0x21210e0e
   11724:	210e0e21 	.word	0x210e0e21
   11728:	0e1f0e0e 	.word	0x0e1f0e0e
   1172c:	210e0e21 	.word	0x210e0e21
   11730:	0e0e0e0e 	.word	0x0e0e0e0e
   11734:	0e0e      	.short	0x0e0e
   11736:	21          	.byte	0x21
   11737:	00          	.byte	0x00
   11738:	f06f 0004 	mvn.w	r0, #4
   1173c:	4770      	bx	lr
		return LFS_ERR_OK;
   1173e:	2000      	movs	r0, #0
   11740:	4770      	bx	lr
		return LFS_ERR_NOTEMPTY;
   11742:	f06f 0026 	mvn.w	r0, #38	; 0x26
   11746:	4770      	bx	lr
	switch (error) {
   11748:	f06f 0004 	mvn.w	r0, #4
   1174c:	4770      	bx	lr
   1174e:	f06f 0004 	mvn.w	r0, #4
   11752:	4770      	bx	lr
   11754:	f06f 0004 	mvn.w	r0, #4
   11758:	4770      	bx	lr
		return LFS_ERR_CORRUPT;
   1175a:	f06f 0053 	mvn.w	r0, #83	; 0x53
}
   1175e:	4770      	bx	lr

00011760 <lfs_api_sync>:
}
   11760:	2000      	movs	r0, #0
   11762:	4770      	bx	lr

00011764 <lfs_flags_from_zephyr>:
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   11764:	0102      	lsls	r2, r0, #4
   11766:	f402 7280 	and.w	r2, r2, #256	; 0x100
	flags |= (zflags & FS_O_READ) ? LFS_O_RDONLY : 0;
   1176a:	f000 0301 	and.w	r3, r0, #1
   1176e:	431a      	orrs	r2, r3
	flags |= (zflags & FS_O_WRITE) ? LFS_O_WRONLY : 0;
   11770:	f000 0302 	and.w	r3, r0, #2
   11774:	4313      	orrs	r3, r2
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   11776:	0180      	lsls	r0, r0, #6
   11778:	f400 6000 	and.w	r0, r0, #2048	; 0x800
}
   1177c:	4318      	orrs	r0, r3
   1177e:	4770      	bx	lr

00011780 <get_page_cb>:
{
   11780:	b430      	push	{r4, r5}
	size_t info_start = info->start_offset;
   11782:	6804      	ldr	r4, [r0, #0]
	size_t info_end = info_start + info->size - 1U;
   11784:	6845      	ldr	r5, [r0, #4]
   11786:	192a      	adds	r2, r5, r4
   11788:	3a01      	subs	r2, #1
	size_t area_start = ctx->area->fa_off;
   1178a:	680b      	ldr	r3, [r1, #0]
   1178c:	6858      	ldr	r0, [r3, #4]
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   1178e:	689b      	ldr	r3, [r3, #8]
   11790:	4403      	add	r3, r0
	if (info_end < area_start) {
   11792:	4282      	cmp	r2, r0
   11794:	d308      	bcc.n	117a8 <get_page_cb+0x28>
   11796:	3b01      	subs	r3, #1
	if (info_start > area_end) {
   11798:	429c      	cmp	r4, r3
   1179a:	d808      	bhi.n	117ae <get_page_cb+0x2e>
	if (info->size > ctx->max_size) {
   1179c:	684b      	ldr	r3, [r1, #4]
   1179e:	429d      	cmp	r5, r3
   117a0:	d907      	bls.n	117b2 <get_page_cb+0x32>
		ctx->max_size = info->size;
   117a2:	604d      	str	r5, [r1, #4]
	return true;
   117a4:	2001      	movs	r0, #1
   117a6:	e000      	b.n	117aa <get_page_cb+0x2a>
		return true;
   117a8:	2001      	movs	r0, #1
}
   117aa:	bc30      	pop	{r4, r5}
   117ac:	4770      	bx	lr
		return false;
   117ae:	2000      	movs	r0, #0
   117b0:	e7fb      	b.n	117aa <get_page_cb+0x2a>
	return true;
   117b2:	2001      	movs	r0, #1
   117b4:	e7f9      	b.n	117aa <get_page_cb+0x2a>

000117b6 <info_to_dirent>:
{
   117b6:	b510      	push	{r4, lr}
   117b8:	460c      	mov	r4, r1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   117ba:	7803      	ldrb	r3, [r0, #0]
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   117bc:	2b02      	cmp	r3, #2
   117be:	bf14      	ite	ne
   117c0:	2300      	movne	r3, #0
   117c2:	2301      	moveq	r3, #1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   117c4:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   117c6:	6843      	ldr	r3, [r0, #4]
   117c8:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
	strncpy(entry->name, info->name, sizeof(entry->name));
   117cc:	f240 1201 	movw	r2, #257	; 0x101
   117d0:	f100 0108 	add.w	r1, r0, #8
   117d4:	1c60      	adds	r0, r4, #1
   117d6:	f7ff fe4d 	bl	11474 <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   117da:	2300      	movs	r3, #0
   117dc:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   117e0:	bd10      	pop	{r4, pc}

000117e2 <lfs_api_erase>:
{
   117e2:	b508      	push	{r3, lr}
	size_t offset = block * c->block_size;
   117e4:	69c2      	ldr	r2, [r0, #28]
	int rc = flash_area_erase(fa, offset, c->block_size);
   117e6:	fb01 f102 	mul.w	r1, r1, r2
   117ea:	6800      	ldr	r0, [r0, #0]
   117ec:	f7ff fd82 	bl	112f4 <flash_area_erase>
	return errno_to_lfs(rc);
   117f0:	f7ff ff82 	bl	116f8 <errno_to_lfs>
}
   117f4:	bd08      	pop	{r3, pc}

000117f6 <lfs_api_prog>:
{
   117f6:	b538      	push	{r3, r4, r5, lr}
   117f8:	4614      	mov	r4, r2
   117fa:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   117fc:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_write(fa, offset, buffer, size);
   117fe:	9b04      	ldr	r3, [sp, #16]
   11800:	fb01 4105 	mla	r1, r1, r5, r4
   11804:	6800      	ldr	r0, [r0, #0]
   11806:	f7ff fd44 	bl	11292 <flash_area_write>
	return errno_to_lfs(rc);
   1180a:	f7ff ff75 	bl	116f8 <errno_to_lfs>
}
   1180e:	bd38      	pop	{r3, r4, r5, pc}

00011810 <lfs_api_read>:
{
   11810:	b538      	push	{r3, r4, r5, lr}
   11812:	4614      	mov	r4, r2
   11814:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   11816:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_read(fa, offset, buffer, size);
   11818:	9b04      	ldr	r3, [sp, #16]
   1181a:	fb01 4105 	mla	r1, r1, r5, r4
   1181e:	6800      	ldr	r0, [r0, #0]
   11820:	f7ff fd15 	bl	1124e <flash_area_read>
	return errno_to_lfs(rc);
   11824:	f7ff ff68 	bl	116f8 <errno_to_lfs>
}
   11828:	bd38      	pop	{r3, r4, r5, pc}

0001182a <littlefs_tell>:
{
   1182a:	b570      	push	{r4, r5, r6, lr}
   1182c:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   1182e:	6843      	ldr	r3, [r0, #4]
   11830:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11832:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11836:	f04f 32ff 	mov.w	r2, #4294967295
   1183a:	f04f 33ff 	mov.w	r3, #4294967295
   1183e:	4628      	mov	r0, r5
   11840:	f7fc fc82 	bl	e148 <z_impl_k_mutex_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   11844:	6821      	ldr	r1, [r4, #0]
   11846:	f106 0070 	add.w	r0, r6, #112	; 0x70
   1184a:	f001 fd79 	bl	13340 <lfs_file_tell>
   1184e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11850:	4628      	mov	r0, r5
   11852:	f7fc fd03 	bl	e25c <z_impl_k_mutex_unlock>
}
   11856:	4620      	mov	r0, r4
   11858:	bd70      	pop	{r4, r5, r6, pc}

0001185a <littlefs_sync>:
{
   1185a:	b570      	push	{r4, r5, r6, lr}
   1185c:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   1185e:	6843      	ldr	r3, [r0, #4]
   11860:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11862:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11866:	f04f 32ff 	mov.w	r2, #4294967295
   1186a:	f04f 33ff 	mov.w	r3, #4294967295
   1186e:	4628      	mov	r0, r5
   11870:	f7fc fc6a 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   11874:	6821      	ldr	r1, [r4, #0]
   11876:	f106 0070 	add.w	r0, r6, #112	; 0x70
   1187a:	f002 f818 	bl	138ae <lfs_file_sync>
   1187e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11880:	4628      	mov	r0, r5
   11882:	f7fc fceb 	bl	e25c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   11886:	4620      	mov	r0, r4
   11888:	f7ff fefb 	bl	11682 <lfs_to_errno>
}
   1188c:	bd70      	pop	{r4, r5, r6, pc}

0001188e <littlefs_truncate>:
{
   1188e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11890:	4604      	mov	r4, r0
   11892:	460d      	mov	r5, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
   11894:	6843      	ldr	r3, [r0, #4]
   11896:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11898:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1189c:	f04f 32ff 	mov.w	r2, #4294967295
   118a0:	f04f 33ff 	mov.w	r3, #4294967295
   118a4:	4630      	mov	r0, r6
   118a6:	f7fc fc4f 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   118aa:	462a      	mov	r2, r5
   118ac:	6821      	ldr	r1, [r4, #0]
   118ae:	f107 0070 	add.w	r0, r7, #112	; 0x70
   118b2:	f001 ff75 	bl	137a0 <lfs_file_truncate>
   118b6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   118b8:	4630      	mov	r0, r6
   118ba:	f7fc fccf 	bl	e25c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   118be:	4620      	mov	r0, r4
   118c0:	f7ff fedf 	bl	11682 <lfs_to_errno>
}
   118c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000118c6 <littlefs_mkdir>:
{
   118c6:	b570      	push	{r4, r5, r6, lr}
   118c8:	4603      	mov	r3, r0
   118ca:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   118cc:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   118ce:	4619      	mov	r1, r3
   118d0:	f7f3 ff86 	bl	57e0 <fs_impl_strip_prefix>
   118d4:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   118d6:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   118da:	f04f 32ff 	mov.w	r2, #4294967295
   118de:	f04f 33ff 	mov.w	r3, #4294967295
   118e2:	4628      	mov	r0, r5
   118e4:	f7fc fc30 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   118e8:	4621      	mov	r1, r4
   118ea:	f106 0070 	add.w	r0, r6, #112	; 0x70
   118ee:	f7fb faf7 	bl	cee0 <lfs_mkdir>
   118f2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   118f4:	4628      	mov	r0, r5
   118f6:	f7fc fcb1 	bl	e25c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   118fa:	4620      	mov	r0, r4
   118fc:	f7ff fec1 	bl	11682 <lfs_to_errno>
}
   11900:	bd70      	pop	{r4, r5, r6, pc}

00011902 <littlefs_close>:
{
   11902:	b570      	push	{r4, r5, r6, lr}
   11904:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   11906:	6843      	ldr	r3, [r0, #4]
   11908:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1190a:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1190e:	f04f 32ff 	mov.w	r2, #4294967295
   11912:	f04f 33ff 	mov.w	r3, #4294967295
   11916:	4630      	mov	r0, r6
   11918:	f7fc fc16 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   1191c:	6821      	ldr	r1, [r4, #0]
   1191e:	f105 0070 	add.w	r0, r5, #112	; 0x70
   11922:	f002 f81e 	bl	13962 <lfs_file_close>
   11926:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   11928:	4630      	mov	r0, r6
   1192a:	f7fc fc97 	bl	e25c <z_impl_k_mutex_unlock>
	release_file_data(fp);
   1192e:	4620      	mov	r0, r4
   11930:	f7f4 f92e 	bl	5b90 <release_file_data>
	return lfs_to_errno(ret);
   11934:	4628      	mov	r0, r5
   11936:	f7ff fea4 	bl	11682 <lfs_to_errno>
}
   1193a:	bd70      	pop	{r4, r5, r6, pc}

0001193c <littlefs_unlink>:
{
   1193c:	b570      	push	{r4, r5, r6, lr}
   1193e:	4603      	mov	r3, r0
   11940:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   11942:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   11944:	4619      	mov	r1, r3
   11946:	f7f3 ff4b 	bl	57e0 <fs_impl_strip_prefix>
   1194a:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1194c:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11950:	f04f 32ff 	mov.w	r2, #4294967295
   11954:	f04f 33ff 	mov.w	r3, #4294967295
   11958:	4628      	mov	r0, r5
   1195a:	f7fc fbf5 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_remove(&fs->lfs, path);
   1195e:	4621      	mov	r1, r4
   11960:	f106 0070 	add.w	r0, r6, #112	; 0x70
   11964:	f7fb fd88 	bl	d478 <lfs_remove>
   11968:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1196a:	4628      	mov	r0, r5
   1196c:	f7fc fc76 	bl	e25c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   11970:	4620      	mov	r0, r4
   11972:	f7ff fe86 	bl	11682 <lfs_to_errno>
}
   11976:	bd70      	pop	{r4, r5, r6, pc}

00011978 <littlefs_read>:
{
   11978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1197c:	4604      	mov	r4, r0
   1197e:	460d      	mov	r5, r1
   11980:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   11982:	6843      	ldr	r3, [r0, #4]
   11984:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11988:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1198c:	f04f 32ff 	mov.w	r2, #4294967295
   11990:	f04f 33ff 	mov.w	r3, #4294967295
   11994:	4638      	mov	r0, r7
   11996:	f7fc fbd7 	bl	e148 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   1199a:	4633      	mov	r3, r6
   1199c:	462a      	mov	r2, r5
   1199e:	6821      	ldr	r1, [r4, #0]
   119a0:	f108 0070 	add.w	r0, r8, #112	; 0x70
   119a4:	f7fa fd38 	bl	c418 <lfs_file_read>
   119a8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   119aa:	4638      	mov	r0, r7
   119ac:	f7fc fc56 	bl	e25c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   119b0:	4620      	mov	r0, r4
   119b2:	f7ff fe66 	bl	11682 <lfs_to_errno>
}
   119b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000119ba <littlefs_write>:
{
   119ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119be:	4604      	mov	r4, r0
   119c0:	460d      	mov	r5, r1
   119c2:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   119c4:	6843      	ldr	r3, [r0, #4]
   119c6:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   119ca:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   119ce:	f04f 32ff 	mov.w	r2, #4294967295
   119d2:	f04f 33ff 	mov.w	r3, #4294967295
   119d6:	4638      	mov	r0, r7
   119d8:	f7fc fbb6 	bl	e148 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   119dc:	4633      	mov	r3, r6
   119de:	462a      	mov	r2, r5
   119e0:	6821      	ldr	r1, [r4, #0]
   119e2:	f108 0070 	add.w	r0, r8, #112	; 0x70
   119e6:	f001 fdc6 	bl	13576 <lfs_file_write>
   119ea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   119ec:	4638      	mov	r0, r7
   119ee:	f7fc fc35 	bl	e25c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   119f2:	4620      	mov	r0, r4
   119f4:	f7ff fe45 	bl	11682 <lfs_to_errno>
}
   119f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000119fc <littlefs_seek>:
{
   119fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a00:	4604      	mov	r4, r0
   11a02:	460d      	mov	r5, r1
   11a04:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   11a06:	6843      	ldr	r3, [r0, #4]
   11a08:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11a0c:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11a10:	f04f 32ff 	mov.w	r2, #4294967295
   11a14:	f04f 33ff 	mov.w	r3, #4294967295
   11a18:	4638      	mov	r0, r7
   11a1a:	f7fc fb95 	bl	e148 <z_impl_k_mutex_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   11a1e:	4633      	mov	r3, r6
   11a20:	462a      	mov	r2, r5
   11a22:	6821      	ldr	r1, [r4, #0]
   11a24:	f108 0070 	add.w	r0, r8, #112	; 0x70
   11a28:	f001 fe9e 	bl	13768 <lfs_file_seek>
   11a2c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11a2e:	4638      	mov	r0, r7
   11a30:	f7fc fc14 	bl	e25c <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   11a34:	2c00      	cmp	r4, #0
   11a36:	db00      	blt.n	11a3a <littlefs_seek+0x3e>
		ret = 0;
   11a38:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   11a3a:	4620      	mov	r0, r4
   11a3c:	f7ff fe21 	bl	11682 <lfs_to_errno>
}
   11a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011a44 <littlefs_rename>:
{
   11a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a46:	4604      	mov	r4, r0
   11a48:	4608      	mov	r0, r1
   11a4a:	4616      	mov	r6, r2
	struct fs_littlefs *fs = mountp->fs_data;
   11a4c:	6927      	ldr	r7, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   11a4e:	4621      	mov	r1, r4
   11a50:	f7f3 fec6 	bl	57e0 <fs_impl_strip_prefix>
   11a54:	4605      	mov	r5, r0
	to = fs_impl_strip_prefix(to, mountp);
   11a56:	4621      	mov	r1, r4
   11a58:	4630      	mov	r0, r6
   11a5a:	f7f3 fec1 	bl	57e0 <fs_impl_strip_prefix>
   11a5e:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11a60:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11a64:	f04f 32ff 	mov.w	r2, #4294967295
   11a68:	f04f 33ff 	mov.w	r3, #4294967295
   11a6c:	4630      	mov	r0, r6
   11a6e:	f7fc fb6b 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   11a72:	4622      	mov	r2, r4
   11a74:	4629      	mov	r1, r5
   11a76:	f107 0070 	add.w	r0, r7, #112	; 0x70
   11a7a:	f7fb fd79 	bl	d570 <lfs_rename>
   11a7e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11a80:	4630      	mov	r0, r6
   11a82:	f7fc fbeb 	bl	e25c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   11a86:	4620      	mov	r0, r4
   11a88:	f7ff fdfb 	bl	11682 <lfs_to_errno>
}
   11a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011a8e <littlefs_stat>:
{
   11a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a90:	b0c3      	sub	sp, #268	; 0x10c
   11a92:	4603      	mov	r3, r0
   11a94:	4608      	mov	r0, r1
   11a96:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   11a98:	691f      	ldr	r7, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   11a9a:	4619      	mov	r1, r3
   11a9c:	f7f3 fea0 	bl	57e0 <fs_impl_strip_prefix>
   11aa0:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11aa2:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11aa6:	f04f 32ff 	mov.w	r2, #4294967295
   11aaa:	f04f 33ff 	mov.w	r3, #4294967295
   11aae:	4630      	mov	r0, r6
   11ab0:	f7fc fb4a 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   11ab4:	466a      	mov	r2, sp
   11ab6:	4621      	mov	r1, r4
   11ab8:	f107 0070 	add.w	r0, r7, #112	; 0x70
   11abc:	f001 fc4e 	bl	1335c <lfs_stat>
   11ac0:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11ac2:	4630      	mov	r0, r6
   11ac4:	f7fc fbca 	bl	e25c <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   11ac8:	2c00      	cmp	r4, #0
   11aca:	da04      	bge.n	11ad6 <littlefs_stat+0x48>
	return lfs_to_errno(ret);
   11acc:	4620      	mov	r0, r4
   11ace:	f7ff fdd8 	bl	11682 <lfs_to_errno>
}
   11ad2:	b043      	add	sp, #268	; 0x10c
   11ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info_to_dirent(&info, entry);
   11ad6:	4629      	mov	r1, r5
   11ad8:	4668      	mov	r0, sp
   11ada:	f7ff fe6c 	bl	117b6 <info_to_dirent>
		ret = 0;
   11ade:	2400      	movs	r4, #0
   11ae0:	e7f4      	b.n	11acc <littlefs_stat+0x3e>

00011ae2 <littlefs_readdir>:
{
   11ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ae4:	b0c3      	sub	sp, #268	; 0x10c
   11ae6:	4604      	mov	r4, r0
   11ae8:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
   11aea:	6843      	ldr	r3, [r0, #4]
   11aec:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11aee:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11af2:	f04f 32ff 	mov.w	r2, #4294967295
   11af6:	f04f 33ff 	mov.w	r3, #4294967295
   11afa:	4630      	mov	r0, r6
   11afc:	f7fc fb24 	bl	e148 <z_impl_k_mutex_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   11b00:	466a      	mov	r2, sp
   11b02:	6821      	ldr	r1, [r4, #0]
   11b04:	f107 0070 	add.w	r0, r7, #112	; 0x70
   11b08:	f7fa f8ae 	bl	bc68 <lfs_dir_read>
   11b0c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11b0e:	4630      	mov	r0, r6
   11b10:	f7fc fba4 	bl	e25c <z_impl_k_mutex_unlock>
	if (ret > 0) {
   11b14:	2c00      	cmp	r4, #0
   11b16:	dc03      	bgt.n	11b20 <littlefs_readdir+0x3e>
	} else if (ret == 0) {
   11b18:	b93c      	cbnz	r4, 11b2a <littlefs_readdir+0x48>
		entry->name[0] = 0;
   11b1a:	2300      	movs	r3, #0
   11b1c:	706b      	strb	r3, [r5, #1]
   11b1e:	e004      	b.n	11b2a <littlefs_readdir+0x48>
		info_to_dirent(&info, entry);
   11b20:	4629      	mov	r1, r5
   11b22:	4668      	mov	r0, sp
   11b24:	f7ff fe47 	bl	117b6 <info_to_dirent>
		ret = 0;
   11b28:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   11b2a:	4620      	mov	r0, r4
   11b2c:	f7ff fda9 	bl	11682 <lfs_to_errno>
}
   11b30:	b043      	add	sp, #268	; 0x10c
   11b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011b34 <littlefs_statvfs>:
{
   11b34:	b570      	push	{r4, r5, r6, lr}
   11b36:	4603      	mov	r3, r0
   11b38:	4608      	mov	r0, r1
   11b3a:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   11b3c:	691c      	ldr	r4, [r3, #16]
	struct lfs *lfs = &fs->lfs;
   11b3e:	f104 0670 	add.w	r6, r4, #112	; 0x70
	stat->f_bsize = lfs->cfg->prog_size;
   11b42:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   11b46:	6992      	ldr	r2, [r2, #24]
   11b48:	602a      	str	r2, [r5, #0]
	stat->f_frsize = lfs->cfg->block_size;
   11b4a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   11b4e:	69d2      	ldr	r2, [r2, #28]
   11b50:	606a      	str	r2, [r5, #4]
	stat->f_blocks = lfs->cfg->block_count;
   11b52:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   11b56:	6a12      	ldr	r2, [r2, #32]
   11b58:	60aa      	str	r2, [r5, #8]
	path = fs_impl_strip_prefix(path, mountp);
   11b5a:	4619      	mov	r1, r3
   11b5c:	f7f3 fe40 	bl	57e0 <fs_impl_strip_prefix>
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11b60:	34ec      	adds	r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11b62:	f04f 32ff 	mov.w	r2, #4294967295
   11b66:	f04f 33ff 	mov.w	r3, #4294967295
   11b6a:	4620      	mov	r0, r4
   11b6c:	f7fc faec 	bl	e148 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_fs_size(lfs);
   11b70:	4630      	mov	r0, r6
   11b72:	f7fa fcdf 	bl	c534 <lfs_fs_size>
   11b76:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   11b78:	4620      	mov	r0, r4
   11b7a:	f7fc fb6f 	bl	e25c <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   11b7e:	2e00      	cmp	r6, #0
   11b80:	db03      	blt.n	11b8a <littlefs_statvfs+0x56>
		stat->f_bfree = stat->f_blocks - ret;
   11b82:	68a8      	ldr	r0, [r5, #8]
   11b84:	1b80      	subs	r0, r0, r6
   11b86:	60e8      	str	r0, [r5, #12]
		ret = 0;
   11b88:	2600      	movs	r6, #0
	return lfs_to_errno(ret);
   11b8a:	4630      	mov	r0, r6
   11b8c:	f7ff fd79 	bl	11682 <lfs_to_errno>
}
   11b90:	bd70      	pop	{r4, r5, r6, pc}

00011b92 <in_endpoint_ctx>:
{
   11b92:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   11b94:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   11b98:	f7f4 f8f8 	bl	5d8c <endpoint_ctx>
}
   11b9c:	bd08      	pop	{r3, pc}

00011b9e <out_endpoint_ctx>:
{
   11b9e:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   11ba0:	f7f4 f8f4 	bl	5d8c <endpoint_ctx>
}
   11ba4:	bd08      	pop	{r3, pc}

00011ba6 <ep_ctx_reset>:
{
   11ba6:	b510      	push	{r4, lr}
   11ba8:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   11baa:	6903      	ldr	r3, [r0, #16]
   11bac:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   11bae:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   11bb0:	2300      	movs	r3, #0
   11bb2:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   11bb4:	7f83      	ldrb	r3, [r0, #30]
   11bb6:	b933      	cbnz	r3, 11bc6 <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
   11bb8:	2301      	movs	r3, #1
   11bba:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   11bbc:	2300      	movs	r3, #0
   11bbe:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
   11bc0:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
   11bc2:	77e3      	strb	r3, [r4, #31]
}
   11bc4:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   11bc6:	7a40      	ldrb	r0, [r0, #9]
   11bc8:	f7f9 f882 	bl	acd0 <nrfx_usbd_ep_abort>
   11bcc:	e7f4      	b.n	11bb8 <ep_ctx_reset+0x12>

00011bce <hfxo_stop>:
{
   11bce:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   11bd0:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11bd4:	2200      	movs	r2, #0
   11bd6:	f3bf 8f5b 	dmb	ish
   11bda:	e853 1f00 	ldrex	r1, [r3]
   11bde:	2901      	cmp	r1, #1
   11be0:	d103      	bne.n	11bea <hfxo_stop+0x1c>
   11be2:	e843 2400 	strex	r4, r2, [r3]
   11be6:	2c00      	cmp	r4, #0
   11be8:	d1f7      	bne.n	11bda <hfxo_stop+0xc>
   11bea:	f3bf 8f5b 	dmb	ish
   11bee:	d10d      	bne.n	11c0c <hfxo_stop+0x3e>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   11bf0:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   11bf2:	f100 010c 	add.w	r1, r0, #12
   11bf6:	4620      	mov	r0, r4
   11bf8:	f7fd ffcb 	bl	fb92 <onoff_cancel>

	if (rv == -EALREADY) {
   11bfc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11c00:	d000      	beq.n	11c04 <hfxo_stop+0x36>
}
   11c02:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
   11c04:	4620      	mov	r0, r4
   11c06:	f7fd ff9e 	bl	fb46 <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   11c0a:	e7fa      	b.n	11c02 <hfxo_stop+0x34>
	return 0;
   11c0c:	2000      	movs	r0, #0
   11c0e:	e7f8      	b.n	11c02 <hfxo_stop+0x34>

00011c10 <usbd_enable_endpoints>:
{
   11c10:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   11c12:	2400      	movs	r4, #0
   11c14:	e003      	b.n	11c1e <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   11c16:	7a40      	ldrb	r0, [r0, #9]
   11c18:	f7f8 feb4 	bl	a984 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   11c1c:	3401      	adds	r4, #1
   11c1e:	2c07      	cmp	r4, #7
   11c20:	dc06      	bgt.n	11c30 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
   11c22:	b2e0      	uxtb	r0, r4
   11c24:	f7ff ffb5 	bl	11b92 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   11c28:	7a03      	ldrb	r3, [r0, #8]
   11c2a:	2b00      	cmp	r3, #0
   11c2c:	d0f6      	beq.n	11c1c <usbd_enable_endpoints+0xc>
   11c2e:	e7f2      	b.n	11c16 <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   11c30:	2088      	movs	r0, #136	; 0x88
   11c32:	f7ff ffae 	bl	11b92 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   11c36:	7a03      	ldrb	r3, [r0, #8]
   11c38:	b90b      	cbnz	r3, 11c3e <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   11c3a:	2400      	movs	r4, #0
   11c3c:	e007      	b.n	11c4e <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   11c3e:	7a40      	ldrb	r0, [r0, #9]
   11c40:	f7f8 fea0 	bl	a984 <nrfx_usbd_ep_enable>
   11c44:	e7f9      	b.n	11c3a <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   11c46:	7a40      	ldrb	r0, [r0, #9]
   11c48:	f7f8 fe9c 	bl	a984 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   11c4c:	3401      	adds	r4, #1
   11c4e:	2c07      	cmp	r4, #7
   11c50:	dc06      	bgt.n	11c60 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
   11c52:	b2e0      	uxtb	r0, r4
   11c54:	f7ff ffa3 	bl	11b9e <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   11c58:	7a03      	ldrb	r3, [r0, #8]
   11c5a:	2b00      	cmp	r3, #0
   11c5c:	d0f6      	beq.n	11c4c <usbd_enable_endpoints+0x3c>
   11c5e:	e7f2      	b.n	11c46 <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   11c60:	2008      	movs	r0, #8
   11c62:	f7ff ff9c 	bl	11b9e <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   11c66:	7a03      	ldrb	r3, [r0, #8]
   11c68:	b903      	cbnz	r3, 11c6c <usbd_enable_endpoints+0x5c>
}
   11c6a:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   11c6c:	7a40      	ldrb	r0, [r0, #9]
   11c6e:	f7f8 fe89 	bl	a984 <nrfx_usbd_ep_enable>
}
   11c72:	e7fa      	b.n	11c6a <usbd_enable_endpoints+0x5a>

00011c74 <hfxo_start>:
{
   11c74:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   11c76:	f100 0320 	add.w	r3, r0, #32
   11c7a:	2201      	movs	r2, #1
   11c7c:	f3bf 8f5b 	dmb	ish
   11c80:	e853 1f00 	ldrex	r1, [r3]
   11c84:	2900      	cmp	r1, #0
   11c86:	d104      	bne.n	11c92 <hfxo_start+0x1e>
   11c88:	e843 2c00 	strex	ip, r2, [r3]
   11c8c:	f1bc 0f00 	cmp.w	ip, #0
   11c90:	d1f6      	bne.n	11c80 <hfxo_start+0xc>
   11c92:	f3bf 8f5b 	dmb	ish
   11c96:	d10a      	bne.n	11cae <hfxo_start+0x3a>
	*notify = (struct sys_notify){
   11c98:	2300      	movs	r3, #0
   11c9a:	6103      	str	r3, [r0, #16]
   11c9c:	6183      	str	r3, [r0, #24]
   11c9e:	2301      	movs	r3, #1
   11ca0:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   11ca2:	f100 010c 	add.w	r1, r0, #12
   11ca6:	69c0      	ldr	r0, [r0, #28]
   11ca8:	f7fd fef1 	bl	fa8e <onoff_request>
}
   11cac:	bd08      	pop	{r3, pc}
	return 0;
   11cae:	2000      	movs	r0, #0
   11cb0:	e7fc      	b.n	11cac <hfxo_start+0x38>

00011cb2 <usb_dc_ep_read>:
{
   11cb2:	b570      	push	{r4, r5, r6, lr}
   11cb4:	4605      	mov	r5, r0
   11cb6:	460c      	mov	r4, r1
   11cb8:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   11cba:	f7f5 fa71 	bl	71a0 <usb_dc_ep_read_wait>
	if (ret) {
   11cbe:	b918      	cbnz	r0, 11cc8 <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
   11cc0:	b11c      	cbz	r4, 11cca <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
   11cc2:	4628      	mov	r0, r5
   11cc4:	f7f5 fae6 	bl	7294 <usb_dc_ep_read_continue>
}
   11cc8:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   11cca:	2e00      	cmp	r6, #0
   11ccc:	d1f9      	bne.n	11cc2 <usb_dc_ep_read+0x10>
   11cce:	e7fb      	b.n	11cc8 <usb_dc_ep_read+0x16>

00011cd0 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   11cd0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   11cd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   11cd6:	0089      	lsls	r1, r1, #2
   11cd8:	3138      	adds	r1, #56	; 0x38
}
   11cda:	4408      	add	r0, r1
   11cdc:	4770      	bx	lr

00011cde <get_sub_config>:
	const struct nrf_clock_control_config *config =
   11cde:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   11ce0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   11ce4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11ce8:	4770      	bx	lr

00011cea <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   11cea:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   11cec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   11cf0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11cf4:	4770      	bx	lr

00011cf6 <get_status>:
{
   11cf6:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   11cf8:	b2c9      	uxtb	r1, r1
   11cfa:	f7ff ffe9 	bl	11cd0 <get_sub_data>
   11cfe:	6880      	ldr	r0, [r0, #8]
}
   11d00:	f000 0007 	and.w	r0, r0, #7
   11d04:	bd08      	pop	{r3, pc}

00011d06 <set_off_state>:
	__asm__ volatile(
   11d06:	f04f 0320 	mov.w	r3, #32
   11d0a:	f3ef 8211 	mrs	r2, BASEPRI
   11d0e:	f383 8812 	msr	BASEPRI_MAX, r3
   11d12:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11d16:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   11d18:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   11d1c:	d001      	beq.n	11d22 <set_off_state+0x1c>
   11d1e:	428b      	cmp	r3, r1
   11d20:	d107      	bne.n	11d32 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   11d22:	2301      	movs	r3, #1
   11d24:	6003      	str	r3, [r0, #0]
	int err = 0;
   11d26:	2000      	movs	r0, #0
	__asm__ volatile(
   11d28:	f382 8811 	msr	BASEPRI, r2
   11d2c:	f3bf 8f6f 	isb	sy
}
   11d30:	4770      	bx	lr
		err = -EPERM;
   11d32:	f04f 30ff 	mov.w	r0, #4294967295
   11d36:	e7f7      	b.n	11d28 <set_off_state+0x22>

00011d38 <set_starting_state>:
{
   11d38:	b410      	push	{r4}
	__asm__ volatile(
   11d3a:	f04f 0320 	mov.w	r3, #32
   11d3e:	f3ef 8211 	mrs	r2, BASEPRI
   11d42:	f383 8812 	msr	BASEPRI_MAX, r3
   11d46:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11d4a:	6803      	ldr	r3, [r0, #0]
   11d4c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   11d50:	f003 0307 	and.w	r3, r3, #7
   11d54:	2b01      	cmp	r3, #1
   11d56:	d009      	beq.n	11d6c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   11d58:	428c      	cmp	r4, r1
   11d5a:	d00a      	beq.n	11d72 <set_starting_state+0x3a>
		err = -EPERM;
   11d5c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   11d60:	f382 8811 	msr	BASEPRI, r2
   11d64:	f3bf 8f6f 	isb	sy
}
   11d68:	bc10      	pop	{r4}
   11d6a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   11d6c:	6001      	str	r1, [r0, #0]
	int err = 0;
   11d6e:	2000      	movs	r0, #0
   11d70:	e7f6      	b.n	11d60 <set_starting_state+0x28>
		err = -EALREADY;
   11d72:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11d76:	e7f3      	b.n	11d60 <set_starting_state+0x28>

00011d78 <set_on_state>:
	__asm__ volatile(
   11d78:	f04f 0320 	mov.w	r3, #32
   11d7c:	f3ef 8211 	mrs	r2, BASEPRI
   11d80:	f383 8812 	msr	BASEPRI_MAX, r3
   11d84:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   11d88:	6803      	ldr	r3, [r0, #0]
   11d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11d8e:	f043 0302 	orr.w	r3, r3, #2
   11d92:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   11d94:	f382 8811 	msr	BASEPRI, r2
   11d98:	f3bf 8f6f 	isb	sy
}
   11d9c:	4770      	bx	lr

00011d9e <clkstarted_handle>:
{
   11d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11da0:	4606      	mov	r6, r0
   11da2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   11da4:	f7ff ff94 	bl	11cd0 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   11da8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   11daa:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   11dac:	2300      	movs	r3, #0
   11dae:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   11db2:	f7ff ffe1 	bl	11d78 <set_on_state>
	if (callback) {
   11db6:	b11d      	cbz	r5, 11dc0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11db8:	463a      	mov	r2, r7
   11dba:	4621      	mov	r1, r4
   11dbc:	4630      	mov	r0, r6
   11dbe:	47a8      	blx	r5
}
   11dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011dc2 <stop>:
{
   11dc2:	b570      	push	{r4, r5, r6, lr}
   11dc4:	4606      	mov	r6, r0
   11dc6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   11dc8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   11dca:	4621      	mov	r1, r4
   11dcc:	f7ff ff80 	bl	11cd0 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   11dd0:	4629      	mov	r1, r5
   11dd2:	3008      	adds	r0, #8
   11dd4:	f7ff ff97 	bl	11d06 <set_off_state>
	if (err < 0) {
   11dd8:	2800      	cmp	r0, #0
   11dda:	db06      	blt.n	11dea <stop+0x28>
	get_sub_config(dev, type)->stop();
   11ddc:	4621      	mov	r1, r4
   11dde:	4630      	mov	r0, r6
   11de0:	f7ff ff7d 	bl	11cde <get_sub_config>
   11de4:	6843      	ldr	r3, [r0, #4]
   11de6:	4798      	blx	r3
	return 0;
   11de8:	2000      	movs	r0, #0
}
   11dea:	bd70      	pop	{r4, r5, r6, pc}

00011dec <api_stop>:
{
   11dec:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   11dee:	2280      	movs	r2, #128	; 0x80
   11df0:	f7ff ffe7 	bl	11dc2 <stop>
}
   11df4:	bd08      	pop	{r3, pc}

00011df6 <async_start>:
{
   11df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11dfa:	4606      	mov	r6, r0
   11dfc:	4690      	mov	r8, r2
   11dfe:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   11e00:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   11e02:	4629      	mov	r1, r5
   11e04:	f7ff ff64 	bl	11cd0 <get_sub_data>
   11e08:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   11e0a:	9906      	ldr	r1, [sp, #24]
   11e0c:	3008      	adds	r0, #8
   11e0e:	f7ff ff93 	bl	11d38 <set_starting_state>
	if (err < 0) {
   11e12:	2800      	cmp	r0, #0
   11e14:	db09      	blt.n	11e2a <async_start+0x34>
	subdata->cb = cb;
   11e16:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   11e1a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   11e1c:	4629      	mov	r1, r5
   11e1e:	4630      	mov	r0, r6
   11e20:	f7ff ff5d 	bl	11cde <get_sub_config>
   11e24:	6803      	ldr	r3, [r0, #0]
   11e26:	4798      	blx	r3
	return 0;
   11e28:	2000      	movs	r0, #0
}
   11e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011e2e <api_start>:
{
   11e2e:	b510      	push	{r4, lr}
   11e30:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   11e32:	2480      	movs	r4, #128	; 0x80
   11e34:	9400      	str	r4, [sp, #0]
   11e36:	f7ff ffde 	bl	11df6 <async_start>
}
   11e3a:	b002      	add	sp, #8
   11e3c:	bd10      	pop	{r4, pc}

00011e3e <onoff_started_callback>:
{
   11e3e:	b510      	push	{r4, lr}
   11e40:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   11e42:	b2c9      	uxtb	r1, r1
   11e44:	f7ff ff51 	bl	11cea <get_onoff_manager>
	notify(mgr, 0);
   11e48:	2100      	movs	r1, #0
   11e4a:	47a0      	blx	r4
}
   11e4c:	bd10      	pop	{r4, pc}

00011e4e <hfclk_start>:
{
   11e4e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11e50:	2001      	movs	r0, #1
   11e52:	f7f6 fef5 	bl	8c40 <nrfx_clock_start>
}
   11e56:	bd08      	pop	{r3, pc}

00011e58 <lfclk_start>:
{
   11e58:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   11e5a:	2000      	movs	r0, #0
   11e5c:	f7f6 fef0 	bl	8c40 <nrfx_clock_start>
}
   11e60:	bd08      	pop	{r3, pc}

00011e62 <hfclk_stop>:
{
   11e62:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11e64:	2001      	movs	r0, #1
   11e66:	f7f6 ff23 	bl	8cb0 <nrfx_clock_stop>
}
   11e6a:	bd08      	pop	{r3, pc}

00011e6c <lfclk_stop>:
{
   11e6c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   11e6e:	2000      	movs	r0, #0
   11e70:	f7f6 ff1e 	bl	8cb0 <nrfx_clock_stop>
}
   11e74:	bd08      	pop	{r3, pc}

00011e76 <blocking_start_callback>:
{
   11e76:	b508      	push	{r3, lr}
   11e78:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   11e7a:	f7fc fa6f 	bl	e35c <z_impl_k_sem_give>
}
   11e7e:	bd08      	pop	{r3, pc}

00011e80 <gpio_nrfx_port_get_raw>:
	return port->config;
   11e80:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11e82:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   11e84:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   11e88:	600b      	str	r3, [r1, #0]
}
   11e8a:	2000      	movs	r0, #0
   11e8c:	4770      	bx	lr

00011e8e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   11e8e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11e90:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   11e92:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   11e96:	4042      	eors	r2, r0
   11e98:	400a      	ands	r2, r1
   11e9a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   11e9c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   11ea0:	2000      	movs	r0, #0
   11ea2:	4770      	bx	lr

00011ea4 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   11ea4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11ea6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   11ea8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   11eac:	2000      	movs	r0, #0
   11eae:	4770      	bx	lr

00011eb0 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   11eb0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11eb2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   11eb4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   11eb8:	2000      	movs	r0, #0
   11eba:	4770      	bx	lr

00011ebc <gpio_nrfx_port_toggle_bits>:
	return port->config;
   11ebc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11ebe:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   11ec0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   11ec4:	404b      	eors	r3, r1
    p_reg->OUT = value;
   11ec6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   11eca:	2000      	movs	r0, #0
   11ecc:	4770      	bx	lr

00011ece <gpio_nrfx_manage_callback>:
{
   11ece:	b470      	push	{r4, r5, r6}
	return port->data;
   11ed0:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11ed2:	1d05      	adds	r5, r0, #4
	return list->head;
   11ed4:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   11ed6:	b1db      	cbz	r3, 11f10 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   11ed8:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11eda:	2400      	movs	r4, #0
   11edc:	e00a      	b.n	11ef4 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   11ede:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   11ee0:	6043      	str	r3, [r0, #4]
	return list->tail;
   11ee2:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   11ee4:	42a1      	cmp	r1, r4
   11ee6:	d10f      	bne.n	11f08 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   11ee8:	606b      	str	r3, [r5, #4]
}
   11eea:	e00d      	b.n	11f08 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   11eec:	606c      	str	r4, [r5, #4]
}
   11eee:	e00b      	b.n	11f08 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11ef0:	461c      	mov	r4, r3
   11ef2:	681b      	ldr	r3, [r3, #0]
   11ef4:	b15b      	cbz	r3, 11f0e <gpio_nrfx_manage_callback+0x40>
   11ef6:	429e      	cmp	r6, r3
   11ef8:	d1fa      	bne.n	11ef0 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   11efa:	2c00      	cmp	r4, #0
   11efc:	d0ef      	beq.n	11ede <gpio_nrfx_manage_callback+0x10>
	return node->next;
   11efe:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   11f00:	6023      	str	r3, [r4, #0]
	return list->tail;
   11f02:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   11f04:	4299      	cmp	r1, r3
   11f06:	d0f1      	beq.n	11eec <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   11f08:	2300      	movs	r3, #0
   11f0a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11f0c:	e000      	b.n	11f10 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   11f0e:	b152      	cbz	r2, 11f26 <gpio_nrfx_manage_callback+0x58>
	if (set) {
   11f10:	b162      	cbz	r2, 11f2c <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   11f12:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   11f14:	600b      	str	r3, [r1, #0]
	list->head = node;
   11f16:	6041      	str	r1, [r0, #4]
	return list->tail;
   11f18:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   11f1a:	b10b      	cbz	r3, 11f20 <gpio_nrfx_manage_callback+0x52>
	return 0;
   11f1c:	2000      	movs	r0, #0
   11f1e:	e006      	b.n	11f2e <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   11f20:	6069      	str	r1, [r5, #4]
   11f22:	2000      	movs	r0, #0
}
   11f24:	e003      	b.n	11f2e <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   11f26:	f06f 0015 	mvn.w	r0, #21
   11f2a:	e000      	b.n	11f2e <gpio_nrfx_manage_callback+0x60>
	return 0;
   11f2c:	2000      	movs	r0, #0
}
   11f2e:	bc70      	pop	{r4, r5, r6}
   11f30:	4770      	bx	lr

00011f32 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   11f32:	b510      	push	{r4, lr}
   11f34:	b082      	sub	sp, #8
   11f36:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   11f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11f3c:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11f3e:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   11f40:	0a1b      	lsrs	r3, r3, #8
   11f42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   11f46:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   11f4a:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11f4c:	0209      	lsls	r1, r1, #8
   11f4e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   11f52:	430b      	orrs	r3, r1
   11f54:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11f56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   11f5a:	9300      	str	r3, [sp, #0]
   11f5c:	6e11      	ldr	r1, [r2, #96]	; 0x60
   11f5e:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   11f60:	0a1b      	lsrs	r3, r3, #8
   11f62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   11f66:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   11f6a:	6e11      	ldr	r1, [r2, #96]	; 0x60
   11f6c:	0209      	lsls	r1, r1, #8
   11f6e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   11f72:	430b      	orrs	r3, r1
   11f74:	6e12      	ldr	r2, [r2, #96]	; 0x60
   11f76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   11f7a:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
   11f7c:	2c08      	cmp	r4, #8
   11f7e:	d900      	bls.n	11f82 <z_impl_hwinfo_get_device_id+0x50>
		length = sizeof(dev_id.id);
   11f80:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
   11f82:	4622      	mov	r2, r4
   11f84:	4669      	mov	r1, sp
   11f86:	f7ff fae9 	bl	1155c <memcpy>

	return length;
}
   11f8a:	4620      	mov	r0, r4
   11f8c:	b002      	add	sp, #8
   11f8e:	bd10      	pop	{r4, pc}

00011f90 <shift_write_context>:
	w_ctx->flash_addr += shift;
   11f90:	684b      	ldr	r3, [r1, #4]
   11f92:	4403      	add	r3, r0
   11f94:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   11f96:	680b      	ldr	r3, [r1, #0]
   11f98:	4403      	add	r3, r0
   11f9a:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   11f9c:	688b      	ldr	r3, [r1, #8]
   11f9e:	1a18      	subs	r0, r3, r0
   11fa0:	6088      	str	r0, [r1, #8]
}
   11fa2:	4770      	bx	lr

00011fa4 <erase_op>:
{
   11fa4:	b570      	push	{r4, r5, r6, lr}
   11fa6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   11fa8:	f000 fb67 	bl	1267a <nrfx_nvmc_flash_page_size_get>
   11fac:	4605      	mov	r5, r0
		if (SUSPEND_POFWARN()) {
   11fae:	f7f5 ff33 	bl	7e18 <suspend_pofwarn>
   11fb2:	4606      	mov	r6, r0
   11fb4:	b970      	cbnz	r0, 11fd4 <erase_op+0x30>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   11fb6:	6860      	ldr	r0, [r4, #4]
   11fb8:	f7f6 ffde 	bl	8f78 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   11fbc:	68a3      	ldr	r3, [r4, #8]
   11fbe:	1b5b      	subs	r3, r3, r5
   11fc0:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   11fc2:	6863      	ldr	r3, [r4, #4]
   11fc4:	442b      	add	r3, r5
   11fc6:	6063      	str	r3, [r4, #4]
		RESUME_POFWARN();
   11fc8:	f7f5 ff58 	bl	7e7c <restore_pofwarn>
	} while (e_ctx->len > 0);
   11fcc:	68a3      	ldr	r3, [r4, #8]
   11fce:	2b00      	cmp	r3, #0
   11fd0:	d1ed      	bne.n	11fae <erase_op+0xa>
   11fd2:	e001      	b.n	11fd8 <erase_op+0x34>
			return -ECANCELED;
   11fd4:	f06f 068b 	mvn.w	r6, #139	; 0x8b
}
   11fd8:	4630      	mov	r0, r6
   11fda:	bd70      	pop	{r4, r5, r6, pc}

00011fdc <erase>:
{
   11fdc:	b500      	push	{lr}
   11fde:	b085      	sub	sp, #20
	struct flash_context context = {
   11fe0:	2300      	movs	r3, #0
   11fe2:	9301      	str	r3, [sp, #4]
   11fe4:	9002      	str	r0, [sp, #8]
   11fe6:	9103      	str	r1, [sp, #12]
	return	erase_op(&context);
   11fe8:	a801      	add	r0, sp, #4
   11fea:	f7ff ffdb 	bl	11fa4 <erase_op>
}
   11fee:	b005      	add	sp, #20
   11ff0:	f85d fb04 	ldr.w	pc, [sp], #4

00011ff4 <write_op>:
{
   11ff4:	b510      	push	{r4, lr}
   11ff6:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   11ff8:	68a3      	ldr	r3, [r4, #8]
   11ffa:	2b03      	cmp	r3, #3
   11ffc:	d90e      	bls.n	1201c <write_op+0x28>
		if (SUSPEND_POFWARN()) {
   11ffe:	f7f5 ff0b 	bl	7e18 <suspend_pofwarn>
   12002:	b978      	cbnz	r0, 12024 <write_op+0x30>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   12004:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   12006:	6819      	ldr	r1, [r3, #0]
   12008:	6860      	ldr	r0, [r4, #4]
   1200a:	f000 fb26 	bl	1265a <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   1200e:	f7f5 ff35 	bl	7e7c <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   12012:	4621      	mov	r1, r4
   12014:	2004      	movs	r0, #4
   12016:	f7ff ffbb 	bl	11f90 <shift_write_context>
   1201a:	e7ed      	b.n	11ff8 <write_op+0x4>
	nvmc_wait_ready();
   1201c:	f7f5 fee6 	bl	7dec <nvmc_wait_ready>
	return FLASH_OP_DONE;
   12020:	2000      	movs	r0, #0
}
   12022:	bd10      	pop	{r4, pc}
			return -ECANCELED;
   12024:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   12028:	e7fb      	b.n	12022 <write_op+0x2e>

0001202a <write>:
{
   1202a:	b500      	push	{lr}
   1202c:	b085      	sub	sp, #20
	struct flash_context context = {
   1202e:	9101      	str	r1, [sp, #4]
   12030:	9002      	str	r0, [sp, #8]
   12032:	9203      	str	r2, [sp, #12]
	return write_op(&context);
   12034:	a801      	add	r0, sp, #4
   12036:	f7ff ffdd 	bl	11ff4 <write_op>
}
   1203a:	b005      	add	sp, #20
   1203c:	f85d fb04 	ldr.w	pc, [sp], #4

00012040 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   12040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12044:	b086      	sub	sp, #24
   12046:	4689      	mov	r9, r1
   12048:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   1204a:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   1204c:	695b      	ldr	r3, [r3, #20]
   1204e:	aa01      	add	r2, sp, #4
   12050:	a905      	add	r1, sp, #20
   12052:	4798      	blx	r3
	off_t off = 0;
   12054:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   12056:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   12058:	46a2      	mov	sl, r4
   1205a:	9b01      	ldr	r3, [sp, #4]
   1205c:	4553      	cmp	r3, sl
   1205e:	d916      	bls.n	1208e <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
   12060:	9f05      	ldr	r7, [sp, #20]
   12062:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   12066:	687b      	ldr	r3, [r7, #4]
   12068:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   1206a:	2500      	movs	r5, #0
   1206c:	683b      	ldr	r3, [r7, #0]
   1206e:	42ab      	cmp	r3, r5
   12070:	d90a      	bls.n	12088 <flash_page_foreach+0x48>
			page_info.start_offset = off;
   12072:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   12074:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
   12076:	4641      	mov	r1, r8
   12078:	a802      	add	r0, sp, #8
   1207a:	47c8      	blx	r9
   1207c:	b138      	cbz	r0, 1208e <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
   1207e:	9b03      	ldr	r3, [sp, #12]
   12080:	441c      	add	r4, r3
			page++;
   12082:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   12084:	3501      	adds	r5, #1
   12086:	e7f1      	b.n	1206c <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
   12088:	f10a 0a01 	add.w	sl, sl, #1
   1208c:	e7e5      	b.n	1205a <flash_page_foreach+0x1a>
		}
	}
}
   1208e:	b006      	add	sp, #24
   12090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00012094 <endtx_isr>:
	return dev->config;
   12094:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12096:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   12098:	f04f 0120 	mov.w	r1, #32
   1209c:	f3ef 8211 	mrs	r2, BASEPRI
   120a0:	f381 8812 	msr	BASEPRI_MAX, r1
   120a4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   120a8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   120ac:	b131      	cbz	r1, 120bc <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   120ae:	2100      	movs	r1, #0
   120b0:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   120b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   120b8:	2101      	movs	r1, #1
   120ba:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   120bc:	f382 8811 	msr	BASEPRI, r2
   120c0:	f3bf 8f6f 	isb	sy
}
   120c4:	4770      	bx	lr

000120c6 <uarte_nrfx_isr_int>:
{
   120c6:	b538      	push	{r3, r4, r5, lr}
   120c8:	4604      	mov	r4, r0
	return dev->config;
   120ca:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   120cc:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   120ce:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   120d2:	f413 7f80 	tst.w	r3, #256	; 0x100
   120d6:	d003      	beq.n	120e0 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   120d8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   120dc:	2b00      	cmp	r3, #0
   120de:	d139      	bne.n	12154 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   120e0:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   120e2:	685b      	ldr	r3, [r3, #4]
   120e4:	f013 0f10 	tst.w	r3, #16
   120e8:	d01a      	beq.n	12120 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   120ea:	f04f 0320 	mov.w	r3, #32
   120ee:	f3ef 8211 	mrs	r2, BASEPRI
   120f2:	f383 8812 	msr	BASEPRI_MAX, r3
   120f6:	f3bf 8f6f 	isb	sy
   120fa:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   120fe:	b113      	cbz	r3, 12106 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12100:	2300      	movs	r3, #0
   12102:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   12106:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   12108:	68db      	ldr	r3, [r3, #12]
   1210a:	b10b      	cbz	r3, 12110 <uarte_nrfx_isr_int+0x4a>
   1210c:	691b      	ldr	r3, [r3, #16]
   1210e:	b91b      	cbnz	r3, 12118 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   12110:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   12114:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   12118:	f382 8811 	msr	BASEPRI, r2
   1211c:	f3bf 8f6f 	isb	sy
	return dev->data;
   12120:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   12122:	68da      	ldr	r2, [r3, #12]
   12124:	b1aa      	cbz	r2, 12152 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12126:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1212a:	b121      	cbz	r1, 12136 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   1212c:	2100      	movs	r1, #0
   1212e:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   12130:	68da      	ldr	r2, [r3, #12]
   12132:	7b92      	ldrb	r2, [r2, #14]
   12134:	b98a      	cbnz	r2, 1215a <uarte_nrfx_isr_int+0x94>
   12136:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1213a:	b122      	cbz	r2, 12146 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1213c:	2200      	movs	r2, #0
   1213e:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   12142:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   12146:	68da      	ldr	r2, [r3, #12]
   12148:	6813      	ldr	r3, [r2, #0]
   1214a:	b113      	cbz	r3, 12152 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1214c:	6851      	ldr	r1, [r2, #4]
   1214e:	4620      	mov	r0, r4
   12150:	4798      	blx	r3
}
   12152:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   12154:	f7ff ff9e 	bl	12094 <endtx_isr>
   12158:	e7c2      	b.n	120e0 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   1215a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1215e:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   12162:	68db      	ldr	r3, [r3, #12]
   12164:	7399      	strb	r1, [r3, #14]
			return;
   12166:	e7f4      	b.n	12152 <uarte_nrfx_isr_int+0x8c>

00012168 <uarte_nrfx_configure>:
{
   12168:	b570      	push	{r4, r5, r6, lr}
   1216a:	b082      	sub	sp, #8
   1216c:	4605      	mov	r5, r0
   1216e:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   12170:	794b      	ldrb	r3, [r1, #5]
   12172:	2b01      	cmp	r3, #1
   12174:	d006      	beq.n	12184 <uarte_nrfx_configure+0x1c>
   12176:	2b03      	cmp	r3, #3
   12178:	d011      	beq.n	1219e <uarte_nrfx_configure+0x36>
   1217a:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   1217e:	4618      	mov	r0, r3
   12180:	b002      	add	sp, #8
   12182:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   12184:	2300      	movs	r3, #0
   12186:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1218a:	79a3      	ldrb	r3, [r4, #6]
   1218c:	2b03      	cmp	r3, #3
   1218e:	d140      	bne.n	12212 <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   12190:	79e3      	ldrb	r3, [r4, #7]
   12192:	b143      	cbz	r3, 121a6 <uarte_nrfx_configure+0x3e>
   12194:	2b01      	cmp	r3, #1
   12196:	d010      	beq.n	121ba <uarte_nrfx_configure+0x52>
   12198:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1219c:	e7ef      	b.n	1217e <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1219e:	2310      	movs	r3, #16
   121a0:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   121a4:	e7f1      	b.n	1218a <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   121a6:	2300      	movs	r3, #0
   121a8:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   121ac:	7923      	ldrb	r3, [r4, #4]
   121ae:	b183      	cbz	r3, 121d2 <uarte_nrfx_configure+0x6a>
   121b0:	2b02      	cmp	r3, #2
   121b2:	d02a      	beq.n	1220a <uarte_nrfx_configure+0xa2>
   121b4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   121b8:	e7e1      	b.n	1217e <uarte_nrfx_configure+0x16>
	return dev->config;
   121ba:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   121bc:	685b      	ldr	r3, [r3, #4]
   121be:	f003 0201 	and.w	r2, r3, #1
   121c2:	f003 0302 	and.w	r3, r3, #2
   121c6:	4313      	orrs	r3, r2
   121c8:	d026      	beq.n	12218 <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   121ca:	2301      	movs	r3, #1
   121cc:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   121d0:	e7ec      	b.n	121ac <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   121d2:	2300      	movs	r3, #0
   121d4:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   121d8:	6821      	ldr	r1, [r4, #0]
   121da:	4628      	mov	r0, r5
   121dc:	f7f5 ff74 	bl	80c8 <baudrate_set>
   121e0:	4603      	mov	r3, r0
   121e2:	b9e0      	cbnz	r0, 1221e <uarte_nrfx_configure+0xb6>
	return dev->config;
   121e4:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   121e6:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   121e8:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   121ec:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   121f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
   121f4:	4331      	orrs	r1, r6
   121f6:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   121f8:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   121fc:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   121fe:	3204      	adds	r2, #4
   12200:	e894 0003 	ldmia.w	r4, {r0, r1}
   12204:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   12208:	e7b9      	b.n	1217e <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1220a:	230e      	movs	r3, #14
   1220c:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   12210:	e7e2      	b.n	121d8 <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   12212:	f06f 0385 	mvn.w	r3, #133	; 0x85
   12216:	e7b2      	b.n	1217e <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   12218:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1221c:	e7af      	b.n	1217e <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   1221e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   12222:	e7ac      	b.n	1217e <uarte_nrfx_configure+0x16>

00012224 <uarte_nrfx_config_get>:
{
   12224:	460b      	mov	r3, r1
	return dev->data;
   12226:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   12228:	6891      	ldr	r1, [r2, #8]
   1222a:	6850      	ldr	r0, [r2, #4]
   1222c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12230:	2000      	movs	r0, #0
   12232:	4770      	bx	lr

00012234 <uarte_nrfx_err_check>:
	return dev->config;
   12234:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12236:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12238:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1223c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12240:	4770      	bx	lr

00012242 <is_tx_ready>:
	return dev->config;
   12242:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12244:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   12246:	685b      	ldr	r3, [r3, #4]
   12248:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1224c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12250:	b929      	cbnz	r1, 1225e <is_tx_ready+0x1c>
   12252:	b933      	cbnz	r3, 12262 <is_tx_ready+0x20>
   12254:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   12258:	b92b      	cbnz	r3, 12266 <is_tx_ready+0x24>
   1225a:	2000      	movs	r0, #0
   1225c:	4770      	bx	lr
   1225e:	2001      	movs	r0, #1
   12260:	4770      	bx	lr
   12262:	2000      	movs	r0, #0
   12264:	4770      	bx	lr
   12266:	2001      	movs	r0, #1
}
   12268:	4770      	bx	lr

0001226a <uarte_enable>:
	return dev->config;
   1226a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1226c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1226e:	2208      	movs	r2, #8
   12270:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   12274:	4770      	bx	lr

00012276 <tx_start>:
{
   12276:	b510      	push	{r4, lr}
	return dev->config;
   12278:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1227a:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1227c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12280:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12284:	2300      	movs	r3, #0
   12286:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1228a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   1228e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   12292:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   12296:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12298:	685b      	ldr	r3, [r3, #4]
   1229a:	f013 0f10 	tst.w	r3, #16
   1229e:	d102      	bne.n	122a6 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   122a0:	2301      	movs	r3, #1
   122a2:	60a3      	str	r3, [r4, #8]
}
   122a4:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   122a6:	2101      	movs	r1, #1
   122a8:	f7ff ffdf 	bl	1226a <uarte_enable>
    p_reg->INTENSET = mask;
   122ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   122b0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   122b4:	e7f4      	b.n	122a0 <tx_start+0x2a>

000122b6 <uarte_nrfx_poll_in>:
{
   122b6:	b410      	push	{r4}
	return dev->data;
   122b8:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   122ba:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   122bc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   122be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   122c2:	b152      	cbz	r2, 122da <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   122c4:	7d62      	ldrb	r2, [r4, #21]
   122c6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   122c8:	2000      	movs	r0, #0
   122ca:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   122ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   122d2:	2201      	movs	r2, #1
   122d4:	601a      	str	r2, [r3, #0]
}
   122d6:	bc10      	pop	{r4}
   122d8:	4770      	bx	lr
		return -1;
   122da:	f04f 30ff 	mov.w	r0, #4294967295
   122de:	e7fa      	b.n	122d6 <uarte_nrfx_poll_in+0x20>

000122e0 <uarte_nrfx_fifo_fill>:
{
   122e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122e4:	4680      	mov	r8, r0
	return dev->data;
   122e6:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   122e8:	68fb      	ldr	r3, [r7, #12]
   122ea:	899e      	ldrh	r6, [r3, #12]
   122ec:	4296      	cmp	r6, r2
   122ee:	bfa8      	it	ge
   122f0:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   122f2:	3310      	adds	r3, #16
   122f4:	2201      	movs	r2, #1
   122f6:	f3bf 8f5b 	dmb	ish
   122fa:	e853 0f00 	ldrex	r0, [r3]
   122fe:	2800      	cmp	r0, #0
   12300:	d103      	bne.n	1230a <uarte_nrfx_fifo_fill+0x2a>
   12302:	e843 2400 	strex	r4, r2, [r3]
   12306:	2c00      	cmp	r4, #0
   12308:	d1f7      	bne.n	122fa <uarte_nrfx_fifo_fill+0x1a>
   1230a:	f3bf 8f5b 	dmb	ish
   1230e:	d101      	bne.n	12314 <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   12310:	2300      	movs	r3, #0
   12312:	e006      	b.n	12322 <uarte_nrfx_fifo_fill+0x42>
		return 0;
   12314:	2600      	movs	r6, #0
   12316:	e019      	b.n	1234c <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   12318:	68fc      	ldr	r4, [r7, #12]
   1231a:	68a4      	ldr	r4, [r4, #8]
   1231c:	5ccd      	ldrb	r5, [r1, r3]
   1231e:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   12320:	3301      	adds	r3, #1
   12322:	42b3      	cmp	r3, r6
   12324:	dbf8      	blt.n	12318 <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   12326:	f04f 0320 	mov.w	r3, #32
   1232a:	f3ef 8411 	mrs	r4, BASEPRI
   1232e:	f383 8812 	msr	BASEPRI_MAX, r3
   12332:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   12336:	4640      	mov	r0, r8
   12338:	f7ff ff83 	bl	12242 <is_tx_ready>
   1233c:	b948      	cbnz	r0, 12352 <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   1233e:	68fb      	ldr	r3, [r7, #12]
   12340:	2600      	movs	r6, #0
   12342:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   12344:	f384 8811 	msr	BASEPRI, r4
   12348:	f3bf 8f6f 	isb	sy
}
   1234c:	4630      	mov	r0, r6
   1234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   12352:	68fb      	ldr	r3, [r7, #12]
   12354:	4632      	mov	r2, r6
   12356:	6899      	ldr	r1, [r3, #8]
   12358:	4640      	mov	r0, r8
   1235a:	f7ff ff8c 	bl	12276 <tx_start>
   1235e:	e7f1      	b.n	12344 <uarte_nrfx_fifo_fill+0x64>

00012360 <uarte_nrfx_fifo_read>:
	return dev->config;
   12360:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12362:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   12364:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12366:	2a00      	cmp	r2, #0
   12368:	dd0c      	ble.n	12384 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1236a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1236e:	b15a      	cbz	r2, 12388 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12370:	2200      	movs	r2, #0
   12372:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12376:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1237a:	7d42      	ldrb	r2, [r0, #21]
   1237c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1237e:	2001      	movs	r0, #1
   12380:	6018      	str	r0, [r3, #0]
}
   12382:	4770      	bx	lr
	int num_rx = 0;
   12384:	2000      	movs	r0, #0
   12386:	4770      	bx	lr
   12388:	2000      	movs	r0, #0
}
   1238a:	4770      	bx	lr

0001238c <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   1238c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1238e:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   12390:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   12392:	f04f 0020 	mov.w	r0, #32
   12396:	f3ef 8311 	mrs	r3, BASEPRI
   1239a:	f380 8812 	msr	BASEPRI_MAX, r0
   1239e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   123a2:	68c9      	ldr	r1, [r1, #12]
   123a4:	2000      	movs	r0, #0
   123a6:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   123a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   123ac:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   123b0:	f383 8811 	msr	BASEPRI, r3
   123b4:	f3bf 8f6f 	isb	sy
}
   123b8:	4770      	bx	lr

000123ba <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   123ba:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   123bc:	68db      	ldr	r3, [r3, #12]
   123be:	2201      	movs	r2, #1
   123c0:	739a      	strb	r2, [r3, #14]
}
   123c2:	4770      	bx	lr

000123c4 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   123c4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   123c6:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   123c8:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   123ca:	68db      	ldr	r3, [r3, #12]
   123cc:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   123ce:	b94a      	cbnz	r2, 123e4 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   123d0:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   123d4:	b15a      	cbz	r2, 123ee <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   123d6:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   123da:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   123de:	d008      	beq.n	123f2 <uarte_nrfx_irq_tx_ready_complete+0x2e>
   123e0:	2001      	movs	r0, #1
   123e2:	e000      	b.n	123e6 <uarte_nrfx_irq_tx_ready_complete+0x22>
   123e4:	2000      	movs	r0, #0
	if (ready) {
   123e6:	b108      	cbz	r0, 123ec <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   123e8:	2200      	movs	r2, #0
   123ea:	611a      	str	r2, [r3, #16]
}
   123ec:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   123ee:	2000      	movs	r0, #0
   123f0:	e7f9      	b.n	123e6 <uarte_nrfx_irq_tx_ready_complete+0x22>
   123f2:	2000      	movs	r0, #0
   123f4:	e7f7      	b.n	123e6 <uarte_nrfx_irq_tx_ready_complete+0x22>

000123f6 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   123f6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   123f8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   123fa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   123fe:	3800      	subs	r0, #0
   12400:	bf18      	it	ne
   12402:	2001      	movne	r0, #1
   12404:	4770      	bx	lr

00012406 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   12406:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12408:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1240a:	2210      	movs	r2, #16
   1240c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12410:	4770      	bx	lr

00012412 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   12412:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12414:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12416:	2210      	movs	r2, #16
   12418:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1241c:	4770      	bx	lr

0001241e <uarte_nrfx_irq_err_enable>:
	return dev->config;
   1241e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12420:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12422:	f44f 7200 	mov.w	r2, #512	; 0x200
   12426:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1242a:	4770      	bx	lr

0001242c <uarte_nrfx_irq_err_disable>:
	return dev->config;
   1242c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1242e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12430:	f44f 7200 	mov.w	r2, #512	; 0x200
   12434:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12438:	4770      	bx	lr

0001243a <uarte_nrfx_irq_is_pending>:
{
   1243a:	b538      	push	{r3, r4, r5, lr}
   1243c:	4604      	mov	r4, r0
	return dev->config;
   1243e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12440:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   12442:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   12446:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   1244a:	d106      	bne.n	1245a <uarte_nrfx_irq_is_pending+0x20>
   1244c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   12450:	f013 0f10 	tst.w	r3, #16
   12454:	d107      	bne.n	12466 <uarte_nrfx_irq_is_pending+0x2c>
   12456:	2000      	movs	r0, #0
}
   12458:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1245a:	f7ff ffb3 	bl	123c4 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1245e:	2800      	cmp	r0, #0
   12460:	d0f4      	beq.n	1244c <uarte_nrfx_irq_is_pending+0x12>
		||
   12462:	2001      	movs	r0, #1
   12464:	e7f8      	b.n	12458 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   12466:	4620      	mov	r0, r4
   12468:	f7ff ffc5 	bl	123f6 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1246c:	2800      	cmp	r0, #0
   1246e:	d0f3      	beq.n	12458 <uarte_nrfx_irq_is_pending+0x1e>
		||
   12470:	2001      	movs	r0, #1
   12472:	e7f1      	b.n	12458 <uarte_nrfx_irq_is_pending+0x1e>

00012474 <uarte_nrfx_irq_update>:
}
   12474:	2001      	movs	r0, #1
   12476:	4770      	bx	lr

00012478 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   12478:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   1247a:	68d8      	ldr	r0, [r3, #12]
   1247c:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   1247e:	68db      	ldr	r3, [r3, #12]
   12480:	605a      	str	r2, [r3, #4]
}
   12482:	4770      	bx	lr

00012484 <wait_tx_ready>:
{
   12484:	b570      	push	{r4, r5, r6, lr}
   12486:	4606      	mov	r6, r0
   12488:	e014      	b.n	124b4 <wait_tx_ready+0x30>
		if (res) {
   1248a:	b17d      	cbz	r5, 124ac <wait_tx_ready+0x28>
	__asm__ volatile(
   1248c:	f04f 0320 	mov.w	r3, #32
   12490:	f3ef 8411 	mrs	r4, BASEPRI
   12494:	f383 8812 	msr	BASEPRI_MAX, r3
   12498:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1249c:	4630      	mov	r0, r6
   1249e:	f7ff fed0 	bl	12242 <is_tx_ready>
   124a2:	b9a0      	cbnz	r0, 124ce <wait_tx_ready+0x4a>
	__asm__ volatile(
   124a4:	f384 8811 	msr	BASEPRI, r4
   124a8:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   124ac:	2021      	movs	r0, #33	; 0x21
   124ae:	2100      	movs	r1, #0
   124b0:	f7fc fc92 	bl	edd8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   124b4:	2464      	movs	r4, #100	; 0x64
   124b6:	4630      	mov	r0, r6
   124b8:	f7ff fec3 	bl	12242 <is_tx_ready>
   124bc:	4605      	mov	r5, r0
   124be:	2800      	cmp	r0, #0
   124c0:	d1e3      	bne.n	1248a <wait_tx_ready+0x6>
   124c2:	2001      	movs	r0, #1
   124c4:	f000 f8a0 	bl	12608 <nrfx_busy_wait>
   124c8:	3c01      	subs	r4, #1
   124ca:	d1f4      	bne.n	124b6 <wait_tx_ready+0x32>
   124cc:	e7dd      	b.n	1248a <wait_tx_ready+0x6>
}
   124ce:	4620      	mov	r0, r4
   124d0:	bd70      	pop	{r4, r5, r6, pc}

000124d2 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   124d2:	b510      	push	{r4, lr}
   124d4:	4604      	mov	r4, r0
   124d6:	2200      	movs	r2, #0
   124d8:	2101      	movs	r1, #1
   124da:	2002      	movs	r0, #2
   124dc:	f7f1 ff3a 	bl	4354 <z_arm_irq_priority_set>
   124e0:	2002      	movs	r0, #2
   124e2:	f7f1 ff05 	bl	42f0 <arch_irq_enable>
   124e6:	2101      	movs	r1, #1
   124e8:	4620      	mov	r0, r4
   124ea:	f7f5 ff07 	bl	82fc <uarte_instance_init>
   124ee:	bd10      	pop	{r4, pc}

000124f0 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   124f0:	4770      	bx	lr

000124f2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   124f2:	4770      	bx	lr

000124f4 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   124f4:	1a40      	subs	r0, r0, r1
}
   124f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   124fa:	4770      	bx	lr

000124fc <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   124fc:	f100 0350 	add.w	r3, r0, #80	; 0x50
   12500:	009b      	lsls	r3, r3, #2
   12502:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12508:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1250c:	2200      	movs	r2, #0
   1250e:	601a      	str	r2, [r3, #0]
   12510:	681b      	ldr	r3, [r3, #0]
}
   12512:	4770      	bx	lr

00012514 <absolute_time_to_cc>:
}
   12514:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12518:	4770      	bx	lr

0001251a <full_int_lock>:
	__asm__ volatile(
   1251a:	f04f 0320 	mov.w	r3, #32
   1251e:	f3ef 8011 	mrs	r0, BASEPRI
   12522:	f383 8812 	msr	BASEPRI_MAX, r3
   12526:	f3bf 8f6f 	isb	sy
}
   1252a:	4770      	bx	lr

0001252c <full_int_unlock>:
	__asm__ volatile(
   1252c:	f380 8811 	msr	BASEPRI, r0
   12530:	f3bf 8f6f 	isb	sy
}
   12534:	4770      	bx	lr

00012536 <set_absolute_alarm>:
{
   12536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12538:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1253a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1253e:	f7f5 ffa3 	bl	8488 <get_comparator>
   12542:	4607      	mov	r7, r0
   12544:	e019      	b.n	1257a <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   12546:	2013      	movs	r0, #19
   12548:	f001 feaf 	bl	142aa <z_impl_k_busy_wait>
}
   1254c:	e022      	b.n	12594 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1254e:	4630      	mov	r0, r6
   12550:	f7ff ffd4 	bl	124fc <event_clear>
		event_enable(chan);
   12554:	4630      	mov	r0, r6
   12556:	f7f5 ff9f 	bl	8498 <event_enable>
		set_comparator(chan, cc_val);
   1255a:	4629      	mov	r1, r5
   1255c:	4630      	mov	r0, r6
   1255e:	f7f5 ff89 	bl	8474 <set_comparator>
		now2 = counter();
   12562:	f7f5 ffad 	bl	84c0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   12566:	4284      	cmp	r4, r0
   12568:	d01e      	beq.n	125a8 <set_absolute_alarm+0x72>
   1256a:	1c81      	adds	r1, r0, #2
   1256c:	4628      	mov	r0, r5
   1256e:	f7ff ffc1 	bl	124f4 <counter_sub>
	} while ((now2 != now) &&
   12572:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12576:	d917      	bls.n	125a8 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   12578:	462f      	mov	r7, r5
		now = counter();
   1257a:	f7f5 ffa1 	bl	84c0 <counter>
   1257e:	4604      	mov	r4, r0
		set_comparator(chan, now);
   12580:	4601      	mov	r1, r0
   12582:	4630      	mov	r0, r6
   12584:	f7f5 ff76 	bl	8474 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   12588:	4621      	mov	r1, r4
   1258a:	4638      	mov	r0, r7
   1258c:	f7ff ffb2 	bl	124f4 <counter_sub>
   12590:	2801      	cmp	r0, #1
   12592:	d0d8      	beq.n	12546 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   12594:	1ca7      	adds	r7, r4, #2
   12596:	4639      	mov	r1, r7
   12598:	4628      	mov	r0, r5
   1259a:	f7ff ffab 	bl	124f4 <counter_sub>
   1259e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   125a2:	d9d4      	bls.n	1254e <set_absolute_alarm+0x18>
			cc_val = now + 2;
   125a4:	463d      	mov	r5, r7
   125a6:	e7d2      	b.n	1254e <set_absolute_alarm+0x18>
}
   125a8:	4628      	mov	r0, r5
   125aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000125ac <compare_set>:
{
   125ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   125ae:	b083      	sub	sp, #12
   125b0:	4604      	mov	r4, r0
   125b2:	4617      	mov	r7, r2
   125b4:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   125b6:	f7f5 ff89 	bl	84cc <compare_int_lock>
   125ba:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   125bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   125be:	9301      	str	r3, [sp, #4]
   125c0:	9b08      	ldr	r3, [sp, #32]
   125c2:	9300      	str	r3, [sp, #0]
   125c4:	463a      	mov	r2, r7
   125c6:	462b      	mov	r3, r5
   125c8:	4620      	mov	r0, r4
   125ca:	f7f6 f86d 	bl	86a8 <compare_set_nolocks>
   125ce:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   125d0:	4631      	mov	r1, r6
   125d2:	4620      	mov	r0, r4
   125d4:	f7f5 ffde 	bl	8594 <compare_int_unlock>
}
   125d8:	4628      	mov	r0, r5
   125da:	b003      	add	sp, #12
   125dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000125de <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   125de:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   125e0:	f7f6 f842 	bl	8668 <z_nrf_rtc_timer_read>
}
   125e4:	bd08      	pop	{r3, pc}

000125e6 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   125e6:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   125e8:	f7fc feea 	bl	f3c0 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   125ec:	bd08      	pop	{r3, pc}

000125ee <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   125ee:	b510      	push	{r4, lr}
   125f0:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   125f2:	f7f1 fd3f 	bl	4074 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   125f6:	f7f1 fdfb 	bl	41f0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   125fa:	4620      	mov	r0, r4
   125fc:	f7ff fff3 	bl	125e6 <hw_cc3xx_init_internal>
	return res;
}
   12600:	bd10      	pop	{r4, pc}

00012602 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   12602:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   12604:	4780      	blx	r0
}
   12606:	bd08      	pop	{r3, pc}

00012608 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   12608:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1260a:	f001 fe4e 	bl	142aa <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1260e:	bd08      	pop	{r3, pc}

00012610 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   12610:	2301      	movs	r3, #1
   12612:	4083      	lsls	r3, r0
   12614:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   12618:	bf14      	ite	ne
   1261a:	2001      	movne	r0, #1
   1261c:	2000      	moveq	r0, #0
   1261e:	4770      	bx	lr

00012620 <flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   12620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12624:	6918      	ldr	r0, [r3, #16]
}
   12626:	4770      	bx	lr

00012628 <flash_page_count_get>:
    return p_reg->CODESIZE;
   12628:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1262c:	6958      	ldr	r0, [r3, #20]
}
   1262e:	4770      	bx	lr

00012630 <flash_total_size_get>:
{
   12630:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   12632:	f7ff fff5 	bl	12620 <flash_page_size_get>
   12636:	4604      	mov	r4, r0
   12638:	f7ff fff6 	bl	12628 <flash_page_count_get>
}
   1263c:	fb00 f004 	mul.w	r0, r0, r4
   12640:	bd10      	pop	{r4, pc}

00012642 <is_page_aligned_check>:
{
   12642:	b510      	push	{r4, lr}
   12644:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   12646:	f7ff ffeb 	bl	12620 <flash_page_size_get>
   1264a:	fbb4 f3f0 	udiv	r3, r4, r0
   1264e:	fb00 4013 	mls	r0, r0, r3, r4
}
   12652:	fab0 f080 	clz	r0, r0
   12656:	0940      	lsrs	r0, r0, #5
   12658:	bd10      	pop	{r4, pc}

0001265a <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1265a:	b538      	push	{r3, r4, r5, lr}
   1265c:	4604      	mov	r4, r0
   1265e:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   12660:	f7f6 fc6e 	bl	8f40 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   12664:	4629      	mov	r1, r5
   12666:	4620      	mov	r0, r4
   12668:	f7f6 fc7a 	bl	8f60 <nvmc_word_write>

    nvmc_readonly_mode_set();
   1266c:	f7f6 fc60 	bl	8f30 <nvmc_readonly_mode_set>
}
   12670:	bd38      	pop	{r3, r4, r5, pc}

00012672 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   12672:	b508      	push	{r3, lr}
    return flash_total_size_get();
   12674:	f7ff ffdc 	bl	12630 <flash_total_size_get>
}
   12678:	bd08      	pop	{r3, pc}

0001267a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   1267a:	b508      	push	{r3, lr}
    return flash_page_size_get();
   1267c:	f7ff ffd0 	bl	12620 <flash_page_size_get>
}
   12680:	bd08      	pop	{r3, pc}

00012682 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   12682:	b508      	push	{r3, lr}
    return flash_page_count_get();
   12684:	f7ff ffd0 	bl	12628 <flash_page_count_get>
}
   12688:	bd08      	pop	{r3, pc}

0001268a <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   1268a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1268e:	f44f 7260 	mov.w	r2, #896	; 0x380
   12692:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12696:	4770      	bx	lr

00012698 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   12698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1269c:	f44f 7260 	mov.w	r2, #896	; 0x380
   126a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   126a4:	4770      	bx	lr

000126a6 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   126a6:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   126a8:	f7f6 fce4 	bl	9074 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
   126ac:	f7f6 fb8c 	bl	8dc8 <nrfx_clock_irq_handler>
}
   126b0:	bd08      	pop	{r3, pc}

000126b2 <nrf52_errata_223>:
}
   126b2:	2000      	movs	r0, #0
   126b4:	4770      	bx	lr

000126b6 <nrfx_usbd_consumer>:
{
   126b6:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
   126b8:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   126ba:	42a3      	cmp	r3, r4
   126bc:	d908      	bls.n	126d0 <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
   126be:	2500      	movs	r5, #0
   126c0:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   126c2:	6809      	ldr	r1, [r1, #0]
   126c4:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   126c6:	429a      	cmp	r2, r3
   126c8:	d00b      	beq.n	126e2 <nrfx_usbd_consumer+0x2c>
   126ca:	2000      	movs	r0, #0
}
   126cc:	bc30      	pop	{r4, r5}
   126ce:	4770      	bx	lr
        p_next->size = data_size;
   126d0:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   126d2:	680d      	ldr	r5, [r1, #0]
   126d4:	6005      	str	r5, [r0, #0]
        size -= data_size;
   126d6:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
   126d8:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   126da:	6808      	ldr	r0, [r1, #0]
   126dc:	4418      	add	r0, r3
   126de:	6008      	str	r0, [r1, #0]
   126e0:	e7f1      	b.n	126c6 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   126e2:	b90c      	cbnz	r4, 126e8 <nrfx_usbd_consumer+0x32>
   126e4:	2000      	movs	r0, #0
   126e6:	e7f1      	b.n	126cc <nrfx_usbd_consumer+0x16>
   126e8:	2001      	movs	r0, #1
   126ea:	e7ef      	b.n	126cc <nrfx_usbd_consumer+0x16>

000126ec <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   126ec:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   126ee:	4293      	cmp	r3, r2
   126f0:	d800      	bhi.n	126f4 <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
   126f2:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
   126f4:	680b      	ldr	r3, [r1, #0]
   126f6:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   126f8:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   126fa:	6848      	ldr	r0, [r1, #4]
   126fc:	1a80      	subs	r0, r0, r2
   126fe:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   12700:	680b      	ldr	r3, [r1, #0]
   12702:	441a      	add	r2, r3
   12704:	600a      	str	r2, [r1, #0]
}
   12706:	3800      	subs	r0, #0
   12708:	bf18      	it	ne
   1270a:	2001      	movne	r0, #1
   1270c:	4770      	bx	lr

0001270e <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
   1270e:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   12710:	4293      	cmp	r3, r2
   12712:	d800      	bhi.n	12716 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
   12714:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   12716:	b162      	cbz	r2, 12732 <nrfx_usbd_feeder_ram_zlp+0x24>
   12718:	680b      	ldr	r3, [r1, #0]
   1271a:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   1271c:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   1271e:	684b      	ldr	r3, [r1, #4]
   12720:	1a9b      	subs	r3, r3, r2
   12722:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   12724:	680b      	ldr	r3, [r1, #0]
   12726:	4413      	add	r3, r2
   12728:	600b      	str	r3, [r1, #0]
}
   1272a:	1e10      	subs	r0, r2, #0
   1272c:	bf18      	it	ne
   1272e:	2001      	movne	r0, #1
   12730:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   12732:	2300      	movs	r3, #0
   12734:	e7f1      	b.n	1271a <nrfx_usbd_feeder_ram_zlp+0xc>

00012736 <ev_started_handler>:
}
   12736:	4770      	bx	lr

00012738 <usbd_dma_scheduler_algorithm>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   12738:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
   1273c:	b110      	cbz	r0, 12744 <usbd_dma_scheduler_algorithm+0xc>
  return __builtin_clz(value);
   1273e:	fab0 f080 	clz	r0, r0
   12742:	4770      	bx	lr
    return 32U;
   12744:	2020      	movs	r0, #32
}
   12746:	4770      	bx	lr

00012748 <nrfx_usbd_feeder_flash>:
{
   12748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1274c:	4606      	mov	r6, r0
   1274e:	460c      	mov	r4, r1
   12750:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
   12752:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   12756:	f7f7 fba3 	bl	9ea0 <nrfx_usbd_feeder_buffer_get>
   1275a:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   1275c:	45a8      	cmp	r8, r5
   1275e:	d800      	bhi.n	12762 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
   12760:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   12762:	462a      	mov	r2, r5
   12764:	6821      	ldr	r1, [r4, #0]
   12766:	4638      	mov	r0, r7
   12768:	f7fe fef8 	bl	1155c <memcpy>
    p_next->p_data.tx = p_buffer;
   1276c:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   1276e:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
   12770:	6860      	ldr	r0, [r4, #4]
   12772:	1b40      	subs	r0, r0, r5
   12774:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   12776:	6822      	ldr	r2, [r4, #0]
   12778:	442a      	add	r2, r5
   1277a:	6022      	str	r2, [r4, #0]
}
   1277c:	3800      	subs	r0, #0
   1277e:	bf18      	it	ne
   12780:	2001      	movne	r0, #1
   12782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012786 <nrfx_usbd_feeder_flash_zlp>:
{
   12786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1278a:	4606      	mov	r6, r0
   1278c:	460d      	mov	r5, r1
   1278e:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
   12790:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   12794:	f7f7 fb84 	bl	9ea0 <nrfx_usbd_feeder_buffer_get>
   12798:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   1279a:	45a0      	cmp	r8, r4
   1279c:	d800      	bhi.n	127a0 <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
   1279e:	4644      	mov	r4, r8
    if (tx_size != 0)
   127a0:	b96c      	cbnz	r4, 127be <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
   127a2:	2300      	movs	r3, #0
   127a4:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
   127a6:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   127a8:	686b      	ldr	r3, [r5, #4]
   127aa:	1b1b      	subs	r3, r3, r4
   127ac:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   127ae:	682b      	ldr	r3, [r5, #0]
   127b0:	4423      	add	r3, r4
   127b2:	602b      	str	r3, [r5, #0]
}
   127b4:	1e20      	subs	r0, r4, #0
   127b6:	bf18      	it	ne
   127b8:	2001      	movne	r0, #1
   127ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   127be:	4622      	mov	r2, r4
   127c0:	6829      	ldr	r1, [r5, #0]
   127c2:	4638      	mov	r0, r7
   127c4:	f7fe feca 	bl	1155c <memcpy>
        p_next->p_data.tx = p_buffer;
   127c8:	6037      	str	r7, [r6, #0]
   127ca:	e7ec      	b.n	127a6 <nrfx_usbd_feeder_flash_zlp+0x20>

000127cc <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   127cc:	b508      	push	{r3, lr}
    int err = lfs->cfg->erase(lfs->cfg, block);
   127ce:	6e80      	ldr	r0, [r0, #104]	; 0x68
   127d0:	68c3      	ldr	r3, [r0, #12]
   127d2:	4798      	blx	r3
}
   127d4:	bd08      	pop	{r3, pc}

000127d6 <lfs_alloc_lookahead>:
    lfs_block_t off = ((block - lfs->free.off)
   127d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
   127d8:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   127da:	6e83      	ldr	r3, [r0, #104]	; 0x68
   127dc:	6a1a      	ldr	r2, [r3, #32]
   127de:	4411      	add	r1, r2
    lfs_block_t off = ((block - lfs->free.off)
   127e0:	fbb1 f3f2 	udiv	r3, r1, r2
   127e4:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   127e8:	6d83      	ldr	r3, [r0, #88]	; 0x58
   127ea:	428b      	cmp	r3, r1
   127ec:	d90b      	bls.n	12806 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   127ee:	6e42      	ldr	r2, [r0, #100]	; 0x64
   127f0:	0948      	lsrs	r0, r1, #5
   127f2:	f001 011f 	and.w	r1, r1, #31
   127f6:	2301      	movs	r3, #1
   127f8:	fa03 f101 	lsl.w	r1, r3, r1
   127fc:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   12800:	430b      	orrs	r3, r1
   12802:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   12806:	2000      	movs	r0, #0
   12808:	4770      	bx	lr

0001280a <lfs_alloc_ack>:
    lfs->free.ack = lfs->cfg->block_count;
   1280a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1280c:	6a1b      	ldr	r3, [r3, #32]
   1280e:	6603      	str	r3, [r0, #96]	; 0x60
}
   12810:	4770      	bx	lr

00012812 <lfs_alloc_reset>:
static void lfs_alloc_reset(lfs_t *lfs) {
   12812:	b510      	push	{r4, lr}
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   12814:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   12816:	6e82      	ldr	r2, [r0, #104]	; 0x68
   12818:	69d1      	ldr	r1, [r2, #28]
   1281a:	fbb4 f2f1 	udiv	r2, r4, r1
   1281e:	fb01 4212 	mls	r2, r1, r2, r4
   12822:	6542      	str	r2, [r0, #84]	; 0x54
    lfs->free.size = 0;
   12824:	2200      	movs	r2, #0
   12826:	6582      	str	r2, [r0, #88]	; 0x58
    lfs->free.i = 0;
   12828:	65c2      	str	r2, [r0, #92]	; 0x5c
    lfs_alloc_ack(lfs);
   1282a:	f7ff ffee 	bl	1280a <lfs_alloc_ack>
}
   1282e:	bd10      	pop	{r4, pc}

00012830 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   12830:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   12834:	f1b3 3fff 	cmp.w	r3, #4294967295
   12838:	bf08      	it	eq
   1283a:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
   1283c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   12840:	3104      	adds	r1, #4
    *size += lfs_tag_dsize(tag);
   12842:	6803      	ldr	r3, [r0, #0]
   12844:	4419      	add	r1, r3
   12846:	6001      	str	r1, [r0, #0]
}
   12848:	2000      	movs	r0, #0
   1284a:	4770      	bx	lr

0001284c <lfs_fs_preporphans>:
    lfs->gstate.tag += orphans;
   1284c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1284e:	4419      	add	r1, r3
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   12850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    return tag & 0x000003ff;
   12854:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
   12858:	3900      	subs	r1, #0
   1285a:	bf18      	it	ne
   1285c:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   1285e:	ea43 71c1 	orr.w	r1, r3, r1, lsl #31
   12862:	6301      	str	r1, [r0, #48]	; 0x30
}
   12864:	4770      	bx	lr

00012866 <lfs_fs_size_count>:
    *size += 1;
   12866:	6803      	ldr	r3, [r0, #0]
   12868:	3301      	adds	r3, #1
   1286a:	6003      	str	r3, [r0, #0]
}
   1286c:	2000      	movs	r0, #0
   1286e:	4770      	bx	lr

00012870 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   12870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12874:	b087      	sub	sp, #28
   12876:	4615      	mov	r5, r2
   12878:	469a      	mov	sl, r3
   1287a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1287c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1287e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   12882:	6e82      	ldr	r2, [r0, #104]	; 0x68
   12884:	6a13      	ldr	r3, [r2, #32]
   12886:	42b3      	cmp	r3, r6
   12888:	f240 80b8 	bls.w	129fc <lfs_bd_read+0x18c>
   1288c:	4689      	mov	r9, r1
            off+size > lfs->cfg->block_size) {
   1288e:	eb04 030b 	add.w	r3, r4, fp
   12892:	69d2      	ldr	r2, [r2, #28]
    if (block >= lfs->cfg->block_count ||
   12894:	4293      	cmp	r3, r2
   12896:	f200 80b4 	bhi.w	12a02 <lfs_bd_read+0x192>
   1289a:	9003      	str	r0, [sp, #12]
   1289c:	e07a      	b.n	12994 <lfs_bd_read+0x124>
                off < pcache->off + pcache->size) {
   1289e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   128a2:	f8d9 2008 	ldr.w	r2, [r9, #8]
   128a6:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
   128a8:	42a1      	cmp	r1, r4
   128aa:	d91e      	bls.n	128ea <lfs_bd_read+0x7a>
            if (off >= pcache->off) {
   128ac:	42a3      	cmp	r3, r4
   128ae:	d905      	bls.n	128bc <lfs_bd_read+0x4c>
            diff = lfs_min(diff, pcache->off-off);
   128b0:	1b1b      	subs	r3, r3, r4
   128b2:	455b      	cmp	r3, fp
   128b4:	bf28      	it	cs
   128b6:	465b      	movcs	r3, fp
   128b8:	4698      	mov	r8, r3
   128ba:	e077      	b.n	129ac <lfs_bd_read+0x13c>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   128bc:	eba3 0804 	sub.w	r8, r3, r4
   128c0:	4490      	add	r8, r2
   128c2:	45d8      	cmp	r8, fp
   128c4:	bf28      	it	cs
   128c6:	46d8      	movcs	r8, fp
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   128c8:	f8d9 100c 	ldr.w	r1, [r9, #12]
   128cc:	1ae3      	subs	r3, r4, r3
   128ce:	4642      	mov	r2, r8
   128d0:	4419      	add	r1, r3
   128d2:	9812      	ldr	r0, [sp, #72]	; 0x48
   128d4:	f7fe fe42 	bl	1155c <memcpy>
                data += diff;
   128d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   128da:	4443      	add	r3, r8
   128dc:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   128de:	4444      	add	r4, r8
                size -= diff;
   128e0:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   128e4:	e056      	b.n	12994 <lfs_bd_read+0x124>
        lfs_size_t diff = size;
   128e6:	46d8      	mov	r8, fp
   128e8:	e060      	b.n	129ac <lfs_bd_read+0x13c>
   128ea:	46d8      	mov	r8, fp
   128ec:	e05e      	b.n	129ac <lfs_bd_read+0x13c>
                off < rcache->off + rcache->size) {
   128ee:	686b      	ldr	r3, [r5, #4]
   128f0:	68aa      	ldr	r2, [r5, #8]
   128f2:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
   128f4:	42a1      	cmp	r1, r4
   128f6:	d95c      	bls.n	129b2 <lfs_bd_read+0x142>
            if (off >= rcache->off) {
   128f8:	42a3      	cmp	r3, r4
   128fa:	d904      	bls.n	12906 <lfs_bd_read+0x96>
            diff = lfs_min(diff, rcache->off-off);
   128fc:	1b1b      	subs	r3, r3, r4
   128fe:	4598      	cmp	r8, r3
   12900:	bf28      	it	cs
   12902:	4698      	movcs	r8, r3
   12904:	e055      	b.n	129b2 <lfs_bd_read+0x142>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   12906:	1b19      	subs	r1, r3, r4
   12908:	440a      	add	r2, r1
   1290a:	4590      	cmp	r8, r2
   1290c:	bf28      	it	cs
   1290e:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   12910:	68e9      	ldr	r1, [r5, #12]
   12912:	1ae3      	subs	r3, r4, r3
   12914:	4642      	mov	r2, r8
   12916:	4419      	add	r1, r3
   12918:	9812      	ldr	r0, [sp, #72]	; 0x48
   1291a:	f7fe fe1f 	bl	1155c <memcpy>
                data += diff;
   1291e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12920:	4443      	add	r3, r8
   12922:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   12924:	4444      	add	r4, r8
                size -= diff;
   12926:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   1292a:	e033      	b.n	12994 <lfs_bd_read+0x124>
            data += diff;
   1292c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1292e:	9b04      	ldr	r3, [sp, #16]
   12930:	4419      	add	r1, r3
   12932:	9112      	str	r1, [sp, #72]	; 0x48
            off += diff;
   12934:	441c      	add	r4, r3
            size -= diff;
   12936:	9a05      	ldr	r2, [sp, #20]
   12938:	eba2 0308 	sub.w	r3, r2, r8
   1293c:	449b      	add	fp, r3
            continue;
   1293e:	e029      	b.n	12994 <lfs_bd_read+0x124>
        rcache->block = block;
   12940:	602e      	str	r6, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   12942:	9f03      	ldr	r7, [sp, #12]
   12944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12946:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   12948:	fbb4 f2f3 	udiv	r2, r4, r3
   1294c:	fb03 4212 	mls	r2, r3, r2, r4
   12950:	1aa2      	subs	r2, r4, r2
   12952:	606a      	str	r2, [r5, #4]
                lfs_min(
   12954:	eb04 030a 	add.w	r3, r4, sl
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   12958:	6eb9      	ldr	r1, [r7, #104]	; 0x68
                lfs_min(
   1295a:	6948      	ldr	r0, [r1, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   1295c:	4403      	add	r3, r0
   1295e:	3b01      	subs	r3, #1
    return a - (a % alignment);
   12960:	fbb3 fcf0 	udiv	ip, r3, r0
   12964:	fb00 301c 	mls	r0, r0, ip, r3
   12968:	1a1b      	subs	r3, r3, r0
   1296a:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(
   1296c:	4298      	cmp	r0, r3
   1296e:	bf94      	ite	ls
   12970:	ebc2 0300 	rsbls	r3, r2, r0
   12974:	ebc2 0303 	rsbhi	r3, r2, r3
   12978:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
   1297a:	428b      	cmp	r3, r1
   1297c:	bf28      	it	cs
   1297e:	460b      	movcs	r3, r1
   12980:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   12982:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   12984:	f8d0 8004 	ldr.w	r8, [r0, #4]
   12988:	9300      	str	r3, [sp, #0]
   1298a:	68eb      	ldr	r3, [r5, #12]
   1298c:	4631      	mov	r1, r6
   1298e:	47c0      	blx	r8
        if (err) {
   12990:	4603      	mov	r3, r0
   12992:	bb68      	cbnz	r0, 129f0 <lfs_bd_read+0x180>
    while (size > 0) {
   12994:	f1bb 0f00 	cmp.w	fp, #0
   12998:	d02e      	beq.n	129f8 <lfs_bd_read+0x188>
        if (pcache && block == pcache->block &&
   1299a:	f1b9 0f00 	cmp.w	r9, #0
   1299e:	d0a2      	beq.n	128e6 <lfs_bd_read+0x76>
   129a0:	f8d9 3000 	ldr.w	r3, [r9]
   129a4:	42b3      	cmp	r3, r6
   129a6:	f43f af7a 	beq.w	1289e <lfs_bd_read+0x2e>
        lfs_size_t diff = size;
   129aa:	46d8      	mov	r8, fp
        if (block == rcache->block &&
   129ac:	682b      	ldr	r3, [r5, #0]
   129ae:	42b3      	cmp	r3, r6
   129b0:	d09d      	beq.n	128ee <lfs_bd_read+0x7e>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   129b2:	45d3      	cmp	fp, sl
   129b4:	d3c4      	bcc.n	12940 <lfs_bd_read+0xd0>
   129b6:	9b03      	ldr	r3, [sp, #12]
   129b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
   129ba:	6942      	ldr	r2, [r0, #20]
   129bc:	fbb4 f3f2 	udiv	r3, r4, r2
   129c0:	fb02 4313 	mls	r3, r2, r3, r4
   129c4:	2b00      	cmp	r3, #0
   129c6:	d1bb      	bne.n	12940 <lfs_bd_read+0xd0>
   129c8:	455a      	cmp	r2, fp
   129ca:	d8b9      	bhi.n	12940 <lfs_bd_read+0xd0>
    return a - (a % alignment);
   129cc:	fbb8 f3f2 	udiv	r3, r8, r2
   129d0:	fb02 8313 	mls	r3, r2, r3, r8
   129d4:	9305      	str	r3, [sp, #20]
   129d6:	eba8 0303 	sub.w	r3, r8, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   129da:	6841      	ldr	r1, [r0, #4]
   129dc:	460f      	mov	r7, r1
   129de:	9304      	str	r3, [sp, #16]
   129e0:	9300      	str	r3, [sp, #0]
   129e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   129e4:	4622      	mov	r2, r4
   129e6:	4631      	mov	r1, r6
   129e8:	47b8      	blx	r7
            if (err) {
   129ea:	4603      	mov	r3, r0
   129ec:	2800      	cmp	r0, #0
   129ee:	d09d      	beq.n	1292c <lfs_bd_read+0xbc>
}
   129f0:	4618      	mov	r0, r3
   129f2:	b007      	add	sp, #28
   129f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   129f8:	2300      	movs	r3, #0
   129fa:	e7f9      	b.n	129f0 <lfs_bd_read+0x180>
        return LFS_ERR_CORRUPT;
   129fc:	f06f 0353 	mvn.w	r3, #83	; 0x53
   12a00:	e7f6      	b.n	129f0 <lfs_bd_read+0x180>
   12a02:	f06f 0353 	mvn.w	r3, #83	; 0x53
   12a06:	e7f3      	b.n	129f0 <lfs_bd_read+0x180>

00012a08 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   12a08:	b530      	push	{r4, r5, lr}
   12a0a:	b087      	sub	sp, #28
   12a0c:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   12a0e:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   12a10:	6e83      	ldr	r3, [r0, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   12a12:	69db      	ldr	r3, [r3, #28]
   12a14:	2108      	movs	r1, #8
   12a16:	9103      	str	r1, [sp, #12]
   12a18:	a904      	add	r1, sp, #16
   12a1a:	9102      	str	r1, [sp, #8]
   12a1c:	6851      	ldr	r1, [r2, #4]
   12a1e:	9101      	str	r1, [sp, #4]
   12a20:	6812      	ldr	r2, [r2, #0]
   12a22:	9200      	str	r2, [sp, #0]
   12a24:	4602      	mov	r2, r0
   12a26:	f100 0110 	add.w	r1, r0, #16
   12a2a:	f7ff ff21 	bl	12870 <lfs_bd_read>
    if (err) {
   12a2e:	4603      	mov	r3, r0
   12a30:	b978      	cbnz	r0, 12a52 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   12a32:	9a04      	ldr	r2, [sp, #16]
   12a34:	6861      	ldr	r1, [r4, #4]
   12a36:	4291      	cmp	r1, r2
   12a38:	d008      	beq.n	12a4c <lfs_fs_parent_match+0x44>
   12a3a:	9d05      	ldr	r5, [sp, #20]
   12a3c:	68a0      	ldr	r0, [r4, #8]
   12a3e:	4285      	cmp	r5, r0
   12a40:	d004      	beq.n	12a4c <lfs_fs_parent_match+0x44>
   12a42:	4282      	cmp	r2, r0
   12a44:	d002      	beq.n	12a4c <lfs_fs_parent_match+0x44>
   12a46:	42a9      	cmp	r1, r5
   12a48:	d000      	beq.n	12a4c <lfs_fs_parent_match+0x44>
   12a4a:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   12a4c:	3b00      	subs	r3, #0
   12a4e:	bf18      	it	ne
   12a50:	2301      	movne	r3, #1
}
   12a52:	4618      	mov	r0, r3
   12a54:	b007      	add	sp, #28
   12a56:	bd30      	pop	{r4, r5, pc}

00012a58 <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
   12a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a5c:	b087      	sub	sp, #28
   12a5e:	4607      	mov	r7, r0
   12a60:	460e      	mov	r6, r1
   12a62:	4692      	mov	sl, r2
   12a64:	461d      	mov	r5, r3
   12a66:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   12a6a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   12a6e:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    for (lfs_off_t i = 0; i < size; i++) {
   12a72:	2400      	movs	r4, #0
   12a74:	e002      	b.n	12a7c <lfs_bd_cmp+0x24>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   12a76:	2302      	movs	r3, #2
   12a78:	e01e      	b.n	12ab8 <lfs_bd_cmp+0x60>
    for (lfs_off_t i = 0; i < size; i++) {
   12a7a:	3401      	adds	r4, #1
   12a7c:	4544      	cmp	r4, r8
   12a7e:	d21a      	bcs.n	12ab6 <lfs_bd_cmp+0x5e>
        int err = lfs_bd_read(lfs,
   12a80:	2301      	movs	r3, #1
   12a82:	9303      	str	r3, [sp, #12]
   12a84:	f10d 0317 	add.w	r3, sp, #23
   12a88:	9302      	str	r3, [sp, #8]
   12a8a:	eb04 0309 	add.w	r3, r4, r9
   12a8e:	9301      	str	r3, [sp, #4]
   12a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12a92:	9300      	str	r3, [sp, #0]
   12a94:	1b2b      	subs	r3, r5, r4
   12a96:	4652      	mov	r2, sl
   12a98:	4631      	mov	r1, r6
   12a9a:	4638      	mov	r0, r7
   12a9c:	f7ff fee8 	bl	12870 <lfs_bd_read>
        if (err) {
   12aa0:	4603      	mov	r3, r0
   12aa2:	b948      	cbnz	r0, 12ab8 <lfs_bd_cmp+0x60>
        if (dat != data[i]) {
   12aa4:	f81b 2004 	ldrb.w	r2, [fp, r4]
   12aa8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12aac:	429a      	cmp	r2, r3
   12aae:	d0e4      	beq.n	12a7a <lfs_bd_cmp+0x22>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   12ab0:	d9e1      	bls.n	12a76 <lfs_bd_cmp+0x1e>
   12ab2:	2301      	movs	r3, #1
   12ab4:	e000      	b.n	12ab8 <lfs_bd_cmp+0x60>
    return LFS_CMP_EQ;
   12ab6:	2300      	movs	r3, #0
}
   12ab8:	4618      	mov	r0, r3
   12aba:	b007      	add	sp, #28
   12abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012ac0 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   12ac0:	b570      	push	{r4, r5, r6, lr}
   12ac2:	b084      	sub	sp, #16
   12ac4:	4604      	mov	r4, r0
   12ac6:	4615      	mov	r5, r2
    lfs_t *lfs = name->lfs;
   12ac8:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
   12aca:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
   12acc:	f3c1 0609 	ubfx	r6, r1, #0, #10
    return (a < b) ? a : b;
   12ad0:	42b3      	cmp	r3, r6
   12ad2:	bf28      	it	cs
   12ad4:	4633      	movcs	r3, r6
    int res = lfs_bd_cmp(lfs,
   12ad6:	9303      	str	r3, [sp, #12]
   12ad8:	6862      	ldr	r2, [r4, #4]
   12ada:	9202      	str	r2, [sp, #8]
   12adc:	686a      	ldr	r2, [r5, #4]
   12ade:	9201      	str	r2, [sp, #4]
   12ae0:	682a      	ldr	r2, [r5, #0]
   12ae2:	9200      	str	r2, [sp, #0]
   12ae4:	4602      	mov	r2, r0
   12ae6:	2100      	movs	r1, #0
   12ae8:	f7ff ffb6 	bl	12a58 <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
   12aec:	b920      	cbnz	r0, 12af8 <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
   12aee:	68a3      	ldr	r3, [r4, #8]
   12af0:	42b3      	cmp	r3, r6
   12af2:	d001      	beq.n	12af8 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   12af4:	d202      	bcs.n	12afc <lfs_dir_find_match+0x3c>
   12af6:	2001      	movs	r0, #1
}
   12af8:	b004      	add	sp, #16
   12afa:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   12afc:	2002      	movs	r0, #2
   12afe:	e7fb      	b.n	12af8 <lfs_dir_find_match+0x38>

00012b00 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   12b00:	b500      	push	{lr}
   12b02:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   12b04:	2300      	movs	r3, #0
   12b06:	9303      	str	r3, [sp, #12]
   12b08:	9302      	str	r3, [sp, #8]
   12b0a:	9301      	str	r3, [sp, #4]
   12b0c:	f04f 33ff 	mov.w	r3, #4294967295
   12b10:	9300      	str	r3, [sp, #0]
   12b12:	f7f8 fa87 	bl	b024 <lfs_dir_fetchmatch>
}
   12b16:	b005      	add	sp, #20
   12b18:	f85d fb04 	ldr.w	pc, [sp], #4

00012b1c <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   12b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b1e:	4607      	mov	r7, r0
   12b20:	460e      	mov	r6, r1
   12b22:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
   12b24:	2500      	movs	r5, #0
   12b26:	6195      	str	r5, [r2, #24]
    pdir->tail[1] = 1;
   12b28:	2301      	movs	r3, #1
   12b2a:	61d3      	str	r3, [r2, #28]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   12b2c:	69a3      	ldr	r3, [r4, #24]
   12b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
   12b32:	d021      	beq.n	12b78 <lfs_fs_pred+0x5c>
   12b34:	69e2      	ldr	r2, [r4, #28]
   12b36:	f1b2 3fff 	cmp.w	r2, #4294967295
   12b3a:	d01b      	beq.n	12b74 <lfs_fs_pred+0x58>
   12b3c:	2200      	movs	r2, #0
    while (!lfs_pair_isnull(pdir->tail)) {
   12b3e:	b9ea      	cbnz	r2, 12b7c <lfs_fs_pred+0x60>
        if (cycle >= lfs->cfg->block_count/2) {
   12b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
   12b42:	6a12      	ldr	r2, [r2, #32]
   12b44:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
   12b48:	d21b      	bcs.n	12b82 <lfs_fs_pred+0x66>
        cycle += 1;
   12b4a:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   12b4c:	6832      	ldr	r2, [r6, #0]
   12b4e:	429a      	cmp	r2, r3
   12b50:	d01a      	beq.n	12b88 <lfs_fs_pred+0x6c>
   12b52:	69e0      	ldr	r0, [r4, #28]
   12b54:	6871      	ldr	r1, [r6, #4]
   12b56:	4288      	cmp	r0, r1
   12b58:	d018      	beq.n	12b8c <lfs_fs_pred+0x70>
   12b5a:	4299      	cmp	r1, r3
   12b5c:	d018      	beq.n	12b90 <lfs_fs_pred+0x74>
   12b5e:	4282      	cmp	r2, r0
   12b60:	d018      	beq.n	12b94 <lfs_fs_pred+0x78>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   12b62:	f104 0218 	add.w	r2, r4, #24
   12b66:	4621      	mov	r1, r4
   12b68:	4638      	mov	r0, r7
   12b6a:	f7ff ffc9 	bl	12b00 <lfs_dir_fetch>
        if (err) {
   12b6e:	2800      	cmp	r0, #0
   12b70:	d0dc      	beq.n	12b2c <lfs_fs_pred+0x10>
   12b72:	e00a      	b.n	12b8a <lfs_fs_pred+0x6e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   12b74:	2201      	movs	r2, #1
   12b76:	e7e2      	b.n	12b3e <lfs_fs_pred+0x22>
   12b78:	2201      	movs	r2, #1
   12b7a:	e7e0      	b.n	12b3e <lfs_fs_pred+0x22>
    return LFS_ERR_NOENT;
   12b7c:	f06f 0001 	mvn.w	r0, #1
   12b80:	e003      	b.n	12b8a <lfs_fs_pred+0x6e>
            return LFS_ERR_CORRUPT;
   12b82:	f06f 0053 	mvn.w	r0, #83	; 0x53
   12b86:	e000      	b.n	12b8a <lfs_fs_pred+0x6e>
            return 0;
   12b88:	2000      	movs	r0, #0
}
   12b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 0;
   12b8c:	2000      	movs	r0, #0
   12b8e:	e7fc      	b.n	12b8a <lfs_fs_pred+0x6e>
   12b90:	2000      	movs	r0, #0
   12b92:	e7fa      	b.n	12b8a <lfs_fs_pred+0x6e>
   12b94:	2000      	movs	r0, #0
   12b96:	e7f8      	b.n	12b8a <lfs_fs_pred+0x6e>

00012b98 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   12b98:	b510      	push	{r4, lr}
   12b9a:	b084      	sub	sp, #16
    return tag & 0x000003ff;
   12b9c:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   12ba0:	9402      	str	r4, [sp, #8]
   12ba2:	9c06      	ldr	r4, [sp, #24]
   12ba4:	9401      	str	r4, [sp, #4]
   12ba6:	2400      	movs	r4, #0
   12ba8:	9400      	str	r4, [sp, #0]
   12baa:	f7f8 fe19 	bl	b7e0 <lfs_dir_getslice>
}
   12bae:	b004      	add	sp, #16
   12bb0:	bd10      	pop	{r4, pc}

00012bb2 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
   12bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bb6:	b085      	sub	sp, #20
   12bb8:	4606      	mov	r6, r0
   12bba:	468a      	mov	sl, r1
   12bbc:	4617      	mov	r7, r2
   12bbe:	461c      	mov	r4, r3
   12bc0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   12bc4:	9d11      	ldr	r5, [sp, #68]	; 0x44
   12bc6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
   12bca:	eb05 0208 	add.w	r2, r5, r8
   12bce:	6e83      	ldr	r3, [r0, #104]	; 0x68
   12bd0:	69db      	ldr	r3, [r3, #28]
   12bd2:	429a      	cmp	r2, r3
   12bd4:	d94e      	bls.n	12c74 <lfs_dir_getread+0xc2>
        return LFS_ERR_CORRUPT;
   12bd6:	f06f 0053 	mvn.w	r0, #83	; 0x53
   12bda:	e075      	b.n	12cc8 <lfs_dir_getread+0x116>
                off < pcache->off + pcache->size) {
   12bdc:	6879      	ldr	r1, [r7, #4]
   12bde:	68bb      	ldr	r3, [r7, #8]
   12be0:	18ca      	adds	r2, r1, r3
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   12be2:	42aa      	cmp	r2, r5
   12be4:	d91c      	bls.n	12c20 <lfs_dir_getread+0x6e>
            if (off >= pcache->off) {
   12be6:	42a9      	cmp	r1, r5
   12be8:	d904      	bls.n	12bf4 <lfs_dir_getread+0x42>
            diff = lfs_min(diff, pcache->off-off);
   12bea:	1b49      	subs	r1, r1, r5
   12bec:	4541      	cmp	r1, r8
   12bee:	bf28      	it	cs
   12bf0:	4641      	movcs	r1, r8
   12bf2:	e049      	b.n	12c88 <lfs_dir_getread+0xd6>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   12bf4:	eba1 0905 	sub.w	r9, r1, r5
   12bf8:	4499      	add	r9, r3
   12bfa:	45c1      	cmp	r9, r8
   12bfc:	bf28      	it	cs
   12bfe:	46c1      	movcs	r9, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   12c00:	68fb      	ldr	r3, [r7, #12]
   12c02:	1a69      	subs	r1, r5, r1
   12c04:	464a      	mov	r2, r9
   12c06:	4419      	add	r1, r3
   12c08:	9812      	ldr	r0, [sp, #72]	; 0x48
   12c0a:	f7fe fca7 	bl	1155c <memcpy>
                data += diff;
   12c0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12c10:	444b      	add	r3, r9
   12c12:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   12c14:	444d      	add	r5, r9
                size -= diff;
   12c16:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   12c1a:	e02b      	b.n	12c74 <lfs_dir_getread+0xc2>
        lfs_size_t diff = size;
   12c1c:	4641      	mov	r1, r8
   12c1e:	e033      	b.n	12c88 <lfs_dir_getread+0xd6>
   12c20:	4641      	mov	r1, r8
   12c22:	e031      	b.n	12c88 <lfs_dir_getread+0xd6>
        rcache->block = LFS_BLOCK_INLINE;
   12c24:	f06f 0301 	mvn.w	r3, #1
   12c28:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   12c2a:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   12c2c:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   12c2e:	fbb5 f2f3 	udiv	r2, r5, r3
   12c32:	fb03 5212 	mls	r2, r3, r2, r5
   12c36:	1aaa      	subs	r2, r5, r2
   12c38:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   12c3a:	eb05 030b 	add.w	r3, r5, fp
   12c3e:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   12c40:	f8d0 c014 	ldr.w	ip, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   12c44:	4463      	add	r3, ip
   12c46:	3b01      	subs	r3, #1
    return a - (a % alignment);
   12c48:	fbb3 f1fc 	udiv	r1, r3, ip
   12c4c:	fb0c 3111 	mls	r1, ip, r1, r3
   12c50:	1a5b      	subs	r3, r3, r1
   12c52:	6a81      	ldr	r1, [r0, #40]	; 0x28
    return (a < b) ? a : b;
   12c54:	428b      	cmp	r3, r1
   12c56:	bf28      	it	cs
   12c58:	460b      	movcs	r3, r1
   12c5a:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
   12c5c:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   12c5e:	9302      	str	r3, [sp, #8]
   12c60:	9101      	str	r1, [sp, #4]
   12c62:	9200      	str	r2, [sp, #0]
   12c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12c68:	4651      	mov	r1, sl
   12c6a:	4630      	mov	r0, r6
   12c6c:	f7f8 fdb8 	bl	b7e0 <lfs_dir_getslice>
        if (err < 0) {
   12c70:	2800      	cmp	r0, #0
   12c72:	db29      	blt.n	12cc8 <lfs_dir_getread+0x116>
    while (size > 0) {
   12c74:	f1b8 0f00 	cmp.w	r8, #0
   12c78:	d025      	beq.n	12cc6 <lfs_dir_getread+0x114>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   12c7a:	2f00      	cmp	r7, #0
   12c7c:	d0ce      	beq.n	12c1c <lfs_dir_getread+0x6a>
   12c7e:	683b      	ldr	r3, [r7, #0]
   12c80:	f113 0f02 	cmn.w	r3, #2
   12c84:	d0aa      	beq.n	12bdc <lfs_dir_getread+0x2a>
        lfs_size_t diff = size;
   12c86:	4641      	mov	r1, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
   12c88:	6823      	ldr	r3, [r4, #0]
   12c8a:	f113 0f02 	cmn.w	r3, #2
   12c8e:	d1c9      	bne.n	12c24 <lfs_dir_getread+0x72>
                off < rcache->off + rcache->size) {
   12c90:	6863      	ldr	r3, [r4, #4]
   12c92:	68a2      	ldr	r2, [r4, #8]
   12c94:	1898      	adds	r0, r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
   12c96:	42a8      	cmp	r0, r5
   12c98:	d9c4      	bls.n	12c24 <lfs_dir_getread+0x72>
            if (off >= rcache->off) {
   12c9a:	42ab      	cmp	r3, r5
   12c9c:	d8c2      	bhi.n	12c24 <lfs_dir_getread+0x72>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   12c9e:	eba3 0905 	sub.w	r9, r3, r5
   12ca2:	4491      	add	r9, r2
   12ca4:	4589      	cmp	r9, r1
   12ca6:	bf28      	it	cs
   12ca8:	4689      	movcs	r9, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   12caa:	68e1      	ldr	r1, [r4, #12]
   12cac:	1aeb      	subs	r3, r5, r3
   12cae:	464a      	mov	r2, r9
   12cb0:	4419      	add	r1, r3
   12cb2:	9812      	ldr	r0, [sp, #72]	; 0x48
   12cb4:	f7fe fc52 	bl	1155c <memcpy>
                data += diff;
   12cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12cba:	444b      	add	r3, r9
   12cbc:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   12cbe:	444d      	add	r5, r9
                size -= diff;
   12cc0:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   12cc4:	e7d6      	b.n	12c74 <lfs_dir_getread+0xc2>
    return 0;
   12cc6:	2000      	movs	r0, #0
}
   12cc8:	b005      	add	sp, #20
   12cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012cce <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   12cce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12cd2:	b085      	sub	sp, #20
   12cd4:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   12cd6:	6809      	ldr	r1, [r1, #0]
   12cd8:	f111 0f03 	cmn.w	r1, #3
   12cdc:	d834      	bhi.n	12d48 <lfs_bd_flush+0x7a>
   12cde:	4606      	mov	r6, r0
   12ce0:	4617      	mov	r7, r2
   12ce2:	4698      	mov	r8, r3
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   12ce4:	68a5      	ldr	r5, [r4, #8]
   12ce6:	6e80      	ldr	r0, [r0, #104]	; 0x68
   12ce8:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   12cea:	4415      	add	r5, r2
   12cec:	3d01      	subs	r5, #1
    return a - (a % alignment);
   12cee:	fbb5 f3f2 	udiv	r3, r5, r2
   12cf2:	fb02 5313 	mls	r3, r2, r3, r5
   12cf6:	1aed      	subs	r5, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   12cf8:	f8d0 9008 	ldr.w	r9, [r0, #8]
   12cfc:	9500      	str	r5, [sp, #0]
   12cfe:	68e3      	ldr	r3, [r4, #12]
   12d00:	6862      	ldr	r2, [r4, #4]
   12d02:	47c8      	blx	r9
        if (err) {
   12d04:	4681      	mov	r9, r0
   12d06:	bb08      	cbnz	r0, 12d4c <lfs_bd_flush+0x7e>
        if (validate) {
   12d08:	f1b8 0f00 	cmp.w	r8, #0
   12d0c:	d012      	beq.n	12d34 <lfs_bd_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
   12d0e:	f04f 33ff 	mov.w	r3, #4294967295
   12d12:	603b      	str	r3, [r7, #0]
                    pcache->block, pcache->off, pcache->buffer, diff);
   12d14:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
   12d16:	9503      	str	r5, [sp, #12]
   12d18:	9302      	str	r3, [sp, #8]
   12d1a:	6863      	ldr	r3, [r4, #4]
   12d1c:	9301      	str	r3, [sp, #4]
   12d1e:	6823      	ldr	r3, [r4, #0]
   12d20:	9300      	str	r3, [sp, #0]
   12d22:	462b      	mov	r3, r5
   12d24:	463a      	mov	r2, r7
   12d26:	2100      	movs	r1, #0
   12d28:	4630      	mov	r0, r6
   12d2a:	f7ff fe95 	bl	12a58 <lfs_bd_cmp>
            if (res < 0) {
   12d2e:	2800      	cmp	r0, #0
   12d30:	db10      	blt.n	12d54 <lfs_bd_flush+0x86>
            if (res != LFS_CMP_EQ) {
   12d32:	b988      	cbnz	r0, 12d58 <lfs_bd_flush+0x8a>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   12d34:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   12d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12d38:	21ff      	movs	r1, #255	; 0xff
   12d3a:	68e0      	ldr	r0, [r4, #12]
   12d3c:	f7fe fc32 	bl	115a4 <memset>
    pcache->block = LFS_BLOCK_NULL;
   12d40:	f04f 33ff 	mov.w	r3, #4294967295
   12d44:	6023      	str	r3, [r4, #0]
}
   12d46:	e001      	b.n	12d4c <lfs_bd_flush+0x7e>
    return 0;
   12d48:	f04f 0900 	mov.w	r9, #0
}
   12d4c:	4648      	mov	r0, r9
   12d4e:	b005      	add	sp, #20
   12d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
   12d54:	4681      	mov	r9, r0
   12d56:	e7f9      	b.n	12d4c <lfs_bd_flush+0x7e>
                return LFS_ERR_CORRUPT;
   12d58:	f06f 0953 	mvn.w	r9, #83	; 0x53
   12d5c:	e7f6      	b.n	12d4c <lfs_bd_flush+0x7e>

00012d5e <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   12d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d62:	b083      	sub	sp, #12
   12d64:	4607      	mov	r7, r0
   12d66:	460c      	mov	r4, r1
   12d68:	4693      	mov	fp, r2
   12d6a:	9301      	str	r3, [sp, #4]
   12d6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   12d6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   12d70:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   12d74:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    while (size > 0) {
   12d78:	e00a      	b.n	12d90 <lfs_bd_prog+0x32>
        pcache->block = block;
   12d7a:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   12d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12d7e:	699a      	ldr	r2, [r3, #24]
   12d80:	fbb5 f3f2 	udiv	r3, r5, r2
   12d84:	fb02 5313 	mls	r3, r2, r3, r5
   12d88:	1aeb      	subs	r3, r5, r3
   12d8a:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
   12d8c:	2300      	movs	r3, #0
   12d8e:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
   12d90:	f1b8 0f00 	cmp.w	r8, #0
   12d94:	d02e      	beq.n	12df4 <lfs_bd_prog+0x96>
        if (block == pcache->block &&
   12d96:	6823      	ldr	r3, [r4, #0]
   12d98:	42b3      	cmp	r3, r6
   12d9a:	d1ee      	bne.n	12d7a <lfs_bd_prog+0x1c>
                off >= pcache->off &&
   12d9c:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   12d9e:	42a8      	cmp	r0, r5
   12da0:	d8eb      	bhi.n	12d7a <lfs_bd_prog+0x1c>
                off < pcache->off + lfs->cfg->cache_size) {
   12da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   12da4:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12da6:	1881      	adds	r1, r0, r2
                off >= pcache->off &&
   12da8:	42a9      	cmp	r1, r5
   12daa:	d9e6      	bls.n	12d7a <lfs_bd_prog+0x1c>
                    lfs->cfg->cache_size - (off-pcache->off));
   12dac:	eba0 0905 	sub.w	r9, r0, r5
            lfs_size_t diff = lfs_min(size,
   12db0:	4491      	add	r9, r2
    return (a < b) ? a : b;
   12db2:	45c1      	cmp	r9, r8
   12db4:	bf28      	it	cs
   12db6:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   12db8:	1a28      	subs	r0, r5, r0
   12dba:	464a      	mov	r2, r9
   12dbc:	4651      	mov	r1, sl
   12dbe:	68e3      	ldr	r3, [r4, #12]
   12dc0:	4418      	add	r0, r3
   12dc2:	f7fe fbcb 	bl	1155c <memcpy>
            data += diff;
   12dc6:	44ca      	add	sl, r9
            off += diff;
   12dc8:	444d      	add	r5, r9
            size -= diff;
   12dca:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   12dce:	68a3      	ldr	r3, [r4, #8]
   12dd0:	6862      	ldr	r2, [r4, #4]
   12dd2:	1aaa      	subs	r2, r5, r2
    return (a > b) ? a : b;
   12dd4:	4293      	cmp	r3, r2
   12dd6:	bf38      	it	cc
   12dd8:	4613      	movcc	r3, r2
   12dda:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   12ddc:	6eba      	ldr	r2, [r7, #104]	; 0x68
   12dde:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12de0:	429a      	cmp	r2, r3
   12de2:	d1d5      	bne.n	12d90 <lfs_bd_prog+0x32>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   12de4:	9b01      	ldr	r3, [sp, #4]
   12de6:	465a      	mov	r2, fp
   12de8:	4621      	mov	r1, r4
   12dea:	4638      	mov	r0, r7
   12dec:	f7ff ff6f 	bl	12cce <lfs_bd_flush>
                if (err) {
   12df0:	b908      	cbnz	r0, 12df6 <lfs_bd_prog+0x98>
   12df2:	e7cd      	b.n	12d90 <lfs_bd_prog+0x32>
    return 0;
   12df4:	2000      	movs	r0, #0
}
   12df6:	b003      	add	sp, #12
   12df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012dfc <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   12dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dfe:	b085      	sub	sp, #20
   12e00:	460c      	mov	r4, r1
   12e02:	4617      	mov	r7, r2
   12e04:	461e      	mov	r6, r3
    int err = lfs_bd_prog(lfs,
   12e06:	9303      	str	r3, [sp, #12]
   12e08:	9202      	str	r2, [sp, #8]
   12e0a:	684b      	ldr	r3, [r1, #4]
   12e0c:	9301      	str	r3, [sp, #4]
   12e0e:	680b      	ldr	r3, [r1, #0]
   12e10:	9300      	str	r3, [sp, #0]
   12e12:	2300      	movs	r3, #0
   12e14:	4602      	mov	r2, r0
   12e16:	f100 0110 	add.w	r1, r0, #16
   12e1a:	f7ff ffa0 	bl	12d5e <lfs_bd_prog>
    if (err) {
   12e1e:	4605      	mov	r5, r0
   12e20:	b110      	cbz	r0, 12e28 <lfs_dir_commitprog+0x2c>
}
   12e22:	4628      	mov	r0, r5
   12e24:	b005      	add	sp, #20
   12e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
   12e28:	4632      	mov	r2, r6
   12e2a:	4639      	mov	r1, r7
   12e2c:	68e0      	ldr	r0, [r4, #12]
   12e2e:	f7fa fd4f 	bl	d8d0 <lfs_crc>
   12e32:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   12e34:	6863      	ldr	r3, [r4, #4]
   12e36:	4433      	add	r3, r6
   12e38:	6063      	str	r3, [r4, #4]
    return 0;
   12e3a:	e7f2      	b.n	12e22 <lfs_dir_commitprog+0x26>

00012e3c <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   12e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e40:	b087      	sub	sp, #28
   12e42:	4614      	mov	r4, r2
   12e44:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
   12e46:	f342 0809 	sbfx	r8, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   12e4a:	f1b8 3fff 	cmp.w	r8, #4294967295
   12e4e:	bf14      	ite	ne
   12e50:	4690      	movne	r8, r2
   12e52:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
   12e56:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   12e5a:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
   12e5e:	684b      	ldr	r3, [r1, #4]
   12e60:	444b      	add	r3, r9
   12e62:	694a      	ldr	r2, [r1, #20]
   12e64:	4293      	cmp	r3, r2
   12e66:	d842      	bhi.n	12eee <lfs_dir_commitattr+0xb2>
   12e68:	4605      	mov	r5, r0
   12e6a:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   12e6c:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
   12e70:	688b      	ldr	r3, [r1, #8]
   12e72:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
   12e76:	ba1b      	rev	r3, r3
   12e78:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   12e7a:	2304      	movs	r3, #4
   12e7c:	aa05      	add	r2, sp, #20
   12e7e:	f7ff ffbd 	bl	12dfc <lfs_dir_commitprog>
    if (err) {
   12e82:	4682      	mov	sl, r0
   12e84:	b960      	cbnz	r0, 12ea0 <lfs_dir_commitattr+0x64>
    if (!(tag & 0x80000000)) {
   12e86:	2c00      	cmp	r4, #0
   12e88:	da01      	bge.n	12e8e <lfs_dir_commitattr+0x52>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   12e8a:	2400      	movs	r4, #0
   12e8c:	e00d      	b.n	12eaa <lfs_dir_commitattr+0x6e>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   12e8e:	4643      	mov	r3, r8
   12e90:	463a      	mov	r2, r7
   12e92:	4631      	mov	r1, r6
   12e94:	4628      	mov	r0, r5
   12e96:	f7ff ffb1 	bl	12dfc <lfs_dir_commitprog>
        if (err) {
   12e9a:	bb58      	cbnz	r0, 12ef4 <lfs_dir_commitattr+0xb8>
    commit->ptag = tag & 0x7fffffff;
   12e9c:	f8c6 b008 	str.w	fp, [r6, #8]
}
   12ea0:	4650      	mov	r0, sl
   12ea2:	b007      	add	sp, #28
   12ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   12ea8:	3401      	adds	r4, #1
   12eaa:	4544      	cmp	r4, r8
   12eac:	d2f6      	bcs.n	12e9c <lfs_dir_commitattr+0x60>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
   12eae:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
   12eb2:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
   12eb4:	2101      	movs	r1, #1
   12eb6:	9103      	str	r1, [sp, #12]
   12eb8:	f10d 0113 	add.w	r1, sp, #19
   12ebc:	9102      	str	r1, [sp, #8]
   12ebe:	4422      	add	r2, r4
   12ec0:	9201      	str	r2, [sp, #4]
   12ec2:	683a      	ldr	r2, [r7, #0]
   12ec4:	9200      	str	r2, [sp, #0]
   12ec6:	3b04      	subs	r3, #4
   12ec8:	462a      	mov	r2, r5
   12eca:	2100      	movs	r1, #0
   12ecc:	4628      	mov	r0, r5
   12ece:	f7ff fccf 	bl	12870 <lfs_bd_read>
            if (err) {
   12ed2:	4603      	mov	r3, r0
   12ed4:	b948      	cbnz	r0, 12eea <lfs_dir_commitattr+0xae>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   12ed6:	2301      	movs	r3, #1
   12ed8:	f10d 0213 	add.w	r2, sp, #19
   12edc:	4631      	mov	r1, r6
   12ede:	4628      	mov	r0, r5
   12ee0:	f7ff ff8c 	bl	12dfc <lfs_dir_commitprog>
            if (err) {
   12ee4:	4603      	mov	r3, r0
   12ee6:	2800      	cmp	r0, #0
   12ee8:	d0de      	beq.n	12ea8 <lfs_dir_commitattr+0x6c>
                return err;
   12eea:	469a      	mov	sl, r3
   12eec:	e7d8      	b.n	12ea0 <lfs_dir_commitattr+0x64>
        return LFS_ERR_NOSPC;
   12eee:	f06f 0a1b 	mvn.w	sl, #27
   12ef2:	e7d5      	b.n	12ea0 <lfs_dir_commitattr+0x64>
            return err;
   12ef4:	4682      	mov	sl, r0
   12ef6:	e7d3      	b.n	12ea0 <lfs_dir_commitattr+0x64>

00012ef8 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   12ef8:	b508      	push	{r3, lr}
   12efa:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   12efc:	460a      	mov	r2, r1
   12efe:	6841      	ldr	r1, [r0, #4]
   12f00:	6800      	ldr	r0, [r0, #0]
   12f02:	f7ff ff9b 	bl	12e3c <lfs_dir_commitattr>
}
   12f06:	bd08      	pop	{r3, pc}

00012f08 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   12f08:	b538      	push	{r3, r4, r5, lr}
   12f0a:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
   12f0c:	f04f 35ff 	mov.w	r5, #4294967295
   12f10:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   12f12:	f7ff fedc 	bl	12cce <lfs_bd_flush>
    if (err) {
   12f16:	b910      	cbnz	r0, 12f1e <lfs_bd_sync+0x16>
    err = lfs->cfg->sync(lfs->cfg);
   12f18:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   12f1a:	6903      	ldr	r3, [r0, #16]
   12f1c:	4798      	blx	r3
}
   12f1e:	bd38      	pop	{r3, r4, r5, pc}

00012f20 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   12f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f24:	b08b      	sub	sp, #44	; 0x2c
   12f26:	4605      	mov	r5, r0
   12f28:	460c      	mov	r4, r1
    const lfs_off_t off1 = commit->off;
   12f2a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    const uint32_t crc1 = commit->crc;
   12f2e:	68cb      	ldr	r3, [r1, #12]
   12f30:	9304      	str	r3, [sp, #16]
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   12f32:	f10b 0608 	add.w	r6, fp, #8
            lfs->cfg->prog_size);
   12f36:	6e83      	ldr	r3, [r0, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   12f38:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   12f3a:	4416      	add	r6, r2
   12f3c:	3e01      	subs	r6, #1
    return a - (a % alignment);
   12f3e:	fbb6 f3f2 	udiv	r3, r6, r2
   12f42:	fb02 6313 	mls	r3, r2, r3, r6
   12f46:	1af6      	subs	r6, r6, r3
    while (commit->off < end) {
   12f48:	e04d      	b.n	12fe6 <lfs_dir_commitcrc+0xc6>
        lfs_tag_t tag = 0xffffffff;
   12f4a:	f04f 33ff 	mov.w	r3, #4294967295
   12f4e:	9307      	str	r3, [sp, #28]
        int err = lfs_bd_read(lfs,
   12f50:	2304      	movs	r3, #4
   12f52:	9303      	str	r3, [sp, #12]
   12f54:	aa07      	add	r2, sp, #28
   12f56:	9202      	str	r2, [sp, #8]
   12f58:	9701      	str	r7, [sp, #4]
   12f5a:	6822      	ldr	r2, [r4, #0]
   12f5c:	9200      	str	r2, [sp, #0]
   12f5e:	462a      	mov	r2, r5
   12f60:	2100      	movs	r1, #0
   12f62:	4628      	mov	r0, r5
   12f64:	f7ff fc84 	bl	12870 <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   12f68:	b118      	cbz	r0, 12f72 <lfs_dir_commitcrc+0x52>
   12f6a:	f110 0f54 	cmn.w	r0, #84	; 0x54
   12f6e:	f040 80aa 	bne.w	130c6 <lfs_dir_commitcrc+0x1a6>
        bool reset = ~lfs_frombe32(tag) >> 31;
   12f72:	9b07      	ldr	r3, [sp, #28]
    return __builtin_bswap32(a);
   12f74:	ba1b      	rev	r3, r3
   12f76:	ea6f 0803 	mvn.w	r8, r3
   12f7a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   12f7e:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
   12f82:	eba7 0709 	sub.w	r7, r7, r9
   12f86:	ea47 5703 	orr.w	r7, r7, r3, lsl #20
   12f8a:	f447 277f 	orr.w	r7, r7, #1044480	; 0xff000
   12f8e:	f447 6740 	orr.w	r7, r7, #3072	; 0xc00
   12f92:	9707      	str	r7, [sp, #28]
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   12f94:	68a3      	ldr	r3, [r4, #8]
   12f96:	405f      	eors	r7, r3
   12f98:	ba3f      	rev	r7, r7
   12f9a:	9708      	str	r7, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   12f9c:	af08      	add	r7, sp, #32
   12f9e:	2204      	movs	r2, #4
   12fa0:	4639      	mov	r1, r7
   12fa2:	68e0      	ldr	r0, [r4, #12]
   12fa4:	f7fa fc94 	bl	d8d0 <lfs_crc>
   12fa8:	60e0      	str	r0, [r4, #12]
        footer[1] = lfs_tole32(commit->crc);
   12faa:	9009      	str	r0, [sp, #36]	; 0x24
        err = lfs_bd_prog(lfs,
   12fac:	2308      	movs	r3, #8
   12fae:	9303      	str	r3, [sp, #12]
   12fb0:	9702      	str	r7, [sp, #8]
   12fb2:	6863      	ldr	r3, [r4, #4]
   12fb4:	9301      	str	r3, [sp, #4]
   12fb6:	6823      	ldr	r3, [r4, #0]
   12fb8:	9300      	str	r3, [sp, #0]
   12fba:	2300      	movs	r3, #0
   12fbc:	462a      	mov	r2, r5
   12fbe:	f105 0110 	add.w	r1, r5, #16
   12fc2:	4628      	mov	r0, r5
   12fc4:	f7ff fecb 	bl	12d5e <lfs_bd_prog>
        if (err) {
   12fc8:	2800      	cmp	r0, #0
   12fca:	d17e      	bne.n	130ca <lfs_dir_commitcrc+0x1aa>
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   12fcc:	9b07      	ldr	r3, [sp, #28]
    return tag & 0x000003ff;
   12fce:	f3c3 0209 	ubfx	r2, r3, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   12fd2:	1d11      	adds	r1, r2, #4
   12fd4:	6862      	ldr	r2, [r4, #4]
   12fd6:	440a      	add	r2, r1
   12fd8:	6062      	str	r2, [r4, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   12fda:	ea83 73c8 	eor.w	r3, r3, r8, lsl #31
   12fde:	60a3      	str	r3, [r4, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   12fe0:	f04f 33ff 	mov.w	r3, #4294967295
   12fe4:	60e3      	str	r3, [r4, #12]
    while (commit->off < end) {
   12fe6:	6867      	ldr	r7, [r4, #4]
   12fe8:	42b7      	cmp	r7, r6
   12fea:	d212      	bcs.n	13012 <lfs_dir_commitcrc+0xf2>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   12fec:	f107 0904 	add.w	r9, r7, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   12ff0:	eba6 0709 	sub.w	r7, r6, r9
   12ff4:	f240 33fe 	movw	r3, #1022	; 0x3fe
   12ff8:	429f      	cmp	r7, r3
   12ffa:	bf94      	ite	ls
   12ffc:	444f      	addls	r7, r9
   12ffe:	eb09 0703 	addhi.w	r7, r9, r3
        if (noff < end) {
   13002:	42b7      	cmp	r7, r6
   13004:	d2a1      	bcs.n	12f4a <lfs_dir_commitcrc+0x2a>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   13006:	f1a6 0308 	sub.w	r3, r6, #8
    return (a < b) ? a : b;
   1300a:	429f      	cmp	r7, r3
   1300c:	bf28      	it	cs
   1300e:	461f      	movcs	r7, r3
   13010:	e79b      	b.n	12f4a <lfs_dir_commitcrc+0x2a>
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
   13012:	9505      	str	r5, [sp, #20]
   13014:	2300      	movs	r3, #0
   13016:	462a      	mov	r2, r5
   13018:	f105 0110 	add.w	r1, r5, #16
   1301c:	4628      	mov	r0, r5
   1301e:	f7ff ff73 	bl	12f08 <lfs_bd_sync>
    if (err) {
   13022:	4607      	mov	r7, r0
   13024:	2800      	cmp	r0, #0
   13026:	d151      	bne.n	130cc <lfs_dir_commitcrc+0x1ac>
    lfs_off_t off = commit->begin;
   13028:	f8d4 8010 	ldr.w	r8, [r4, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
   1302c:	f10b 0a04 	add.w	sl, fp, #4
    while (off < end) {
   13030:	f8dd 9010 	ldr.w	r9, [sp, #16]
   13034:	9604      	str	r6, [sp, #16]
   13036:	4646      	mov	r6, r8
   13038:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1303c:	9005      	str	r0, [sp, #20]
   1303e:	9b04      	ldr	r3, [sp, #16]
   13040:	429e      	cmp	r6, r3
   13042:	d23b      	bcs.n	130bc <lfs_dir_commitcrc+0x19c>
        uint32_t crc = 0xffffffff;
   13044:	f04f 37ff 	mov.w	r7, #4294967295
   13048:	e017      	b.n	1307a <lfs_dir_commitcrc+0x15a>
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
   1304a:	ebaa 0306 	sub.w	r3, sl, r6
            err = lfs_bd_read(lfs,
   1304e:	2201      	movs	r2, #1
   13050:	9203      	str	r2, [sp, #12]
   13052:	aa08      	add	r2, sp, #32
   13054:	9202      	str	r2, [sp, #8]
   13056:	9601      	str	r6, [sp, #4]
   13058:	6822      	ldr	r2, [r4, #0]
   1305a:	9200      	str	r2, [sp, #0]
   1305c:	3304      	adds	r3, #4
   1305e:	4642      	mov	r2, r8
   13060:	2100      	movs	r1, #0
   13062:	4628      	mov	r0, r5
   13064:	f7ff fc04 	bl	12870 <lfs_bd_read>
            if (err) {
   13068:	4603      	mov	r3, r0
   1306a:	b980      	cbnz	r0, 1308e <lfs_dir_commitcrc+0x16e>
            crc = lfs_crc(crc, &dat, 1);
   1306c:	2201      	movs	r2, #1
   1306e:	a908      	add	r1, sp, #32
   13070:	4638      	mov	r0, r7
   13072:	f7fa fc2d 	bl	d8d0 <lfs_crc>
   13076:	4607      	mov	r7, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   13078:	3601      	adds	r6, #1
   1307a:	f10a 0304 	add.w	r3, sl, #4
   1307e:	42b3      	cmp	r3, r6
   13080:	d907      	bls.n	13092 <lfs_dir_commitcrc+0x172>
            if (i == off1 && crc != crc1) {
   13082:	455e      	cmp	r6, fp
   13084:	d1e1      	bne.n	1304a <lfs_dir_commitcrc+0x12a>
   13086:	454f      	cmp	r7, r9
   13088:	d0df      	beq.n	1304a <lfs_dir_commitcrc+0x12a>
                return LFS_ERR_CORRUPT;
   1308a:	f06f 0353 	mvn.w	r3, #83	; 0x53
   1308e:	461f      	mov	r7, r3
   13090:	e01c      	b.n	130cc <lfs_dir_commitcrc+0x1ac>
        if (crc != 0) {
   13092:	b9af      	cbnz	r7, 130c0 <lfs_dir_commitcrc+0x1a0>
        off = lfs_min(end - noff, 0x3fe) + noff;
   13094:	9a04      	ldr	r2, [sp, #16]
   13096:	eba2 060a 	sub.w	r6, r2, sl
   1309a:	f240 33fe 	movw	r3, #1022	; 0x3fe
   1309e:	429e      	cmp	r6, r3
   130a0:	bf94      	ite	ls
   130a2:	4456      	addls	r6, sl
   130a4:	eb0a 0603 	addhi.w	r6, sl, r3
        if (off < end) {
   130a8:	4296      	cmp	r6, r2
   130aa:	d204      	bcs.n	130b6 <lfs_dir_commitcrc+0x196>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   130ac:	f1a2 0308 	sub.w	r3, r2, #8
   130b0:	429e      	cmp	r6, r3
   130b2:	bf28      	it	cs
   130b4:	461e      	movcs	r6, r3
        noff = off + sizeof(uint32_t);
   130b6:	f106 0a04 	add.w	sl, r6, #4
   130ba:	e7c0      	b.n	1303e <lfs_dir_commitcrc+0x11e>
   130bc:	9f05      	ldr	r7, [sp, #20]
   130be:	e005      	b.n	130cc <lfs_dir_commitcrc+0x1ac>
            return LFS_ERR_CORRUPT;
   130c0:	f06f 0753 	mvn.w	r7, #83	; 0x53
   130c4:	e002      	b.n	130cc <lfs_dir_commitcrc+0x1ac>
   130c6:	4607      	mov	r7, r0
   130c8:	e000      	b.n	130cc <lfs_dir_commitcrc+0x1ac>
   130ca:	4607      	mov	r7, r0
}
   130cc:	4638      	mov	r0, r7
   130ce:	b00b      	add	sp, #44	; 0x2c
   130d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000130d4 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
   130d4:	b510      	push	{r4, lr}
   130d6:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   130d8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   130da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   130dc:	b13b      	cbz	r3, 130ee <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
   130de:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   130e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   130e2:	b143      	cbz	r3, 130f6 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
   130e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   130e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   130e8:	b14b      	cbz	r3, 130fe <lfs_deinit+0x2a>
}
   130ea:	2000      	movs	r0, #0
   130ec:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
   130ee:	68c0      	ldr	r0, [r0, #12]
   130f0:	f7fe f9b6 	bl	11460 <free>
#else
    (void)p;
#endif
}
   130f4:	e7f3      	b.n	130de <lfs_deinit+0xa>
    free(p);
   130f6:	69e0      	ldr	r0, [r4, #28]
   130f8:	f7fe f9b2 	bl	11460 <free>
}
   130fc:	e7f2      	b.n	130e4 <lfs_deinit+0x10>
    free(p);
   130fe:	6e60      	ldr	r0, [r4, #100]	; 0x64
   13100:	f7fe f9ae 	bl	11460 <free>
}
   13104:	e7f1      	b.n	130ea <lfs_deinit+0x16>

00013106 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   13106:	b538      	push	{r3, r4, r5, lr}
   13108:	4604      	mov	r4, r0
    lfs->cfg = cfg;
   1310a:	6681      	str	r1, [r0, #104]	; 0x68
    if (lfs->cfg->read_buffer) {
   1310c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1310e:	2b00      	cmp	r3, #0
   13110:	d03d      	beq.n	1318e <lfs_init+0x88>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   13112:	60c3      	str	r3, [r0, #12]
    if (lfs->cfg->prog_buffer) {
   13114:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   13116:	6b53      	ldr	r3, [r2, #52]	; 0x34
   13118:	2b00      	cmp	r3, #0
   1311a:	d044      	beq.n	131a6 <lfs_init+0xa0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   1311c:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   1311e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   13120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13122:	21ff      	movs	r1, #255	; 0xff
   13124:	68e0      	ldr	r0, [r4, #12]
   13126:	f7fe fa3d 	bl	115a4 <memset>
    pcache->block = LFS_BLOCK_NULL;
   1312a:	f04f 35ff 	mov.w	r5, #4294967295
   1312e:	6025      	str	r5, [r4, #0]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   13130:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   13132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13134:	21ff      	movs	r1, #255	; 0xff
   13136:	69e0      	ldr	r0, [r4, #28]
   13138:	f7fe fa34 	bl	115a4 <memset>
    pcache->block = LFS_BLOCK_NULL;
   1313c:	6125      	str	r5, [r4, #16]
    if (lfs->cfg->lookahead_buffer) {
   1313e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   13140:	6b93      	ldr	r3, [r2, #56]	; 0x38
   13142:	2b00      	cmp	r3, #0
   13144:	d036      	beq.n	131b4 <lfs_init+0xae>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   13146:	6663      	str	r3, [r4, #100]	; 0x64
    lfs->name_max = lfs->cfg->name_max;
   13148:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1314a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1314c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
   1314e:	b90a      	cbnz	r2, 13154 <lfs_init+0x4e>
        lfs->name_max = LFS_NAME_MAX;
   13150:	22ff      	movs	r2, #255	; 0xff
   13152:	66e2      	str	r2, [r4, #108]	; 0x6c
    lfs->file_max = lfs->cfg->file_max;
   13154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   13156:	6722      	str	r2, [r4, #112]	; 0x70
    if (!lfs->file_max) {
   13158:	b912      	cbnz	r2, 13160 <lfs_init+0x5a>
        lfs->file_max = LFS_FILE_MAX;
   1315a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1315e:	6722      	str	r2, [r4, #112]	; 0x70
    lfs->attr_max = lfs->cfg->attr_max;
   13160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13162:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
   13164:	b913      	cbnz	r3, 1316c <lfs_init+0x66>
        lfs->attr_max = LFS_ATTR_MAX;
   13166:	f240 33fe 	movw	r3, #1022	; 0x3fe
   1316a:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = LFS_BLOCK_NULL;
   1316c:	f04f 33ff 	mov.w	r3, #4294967295
   13170:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
   13172:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
   13174:	2000      	movs	r0, #0
   13176:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
   13178:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
   1317a:	63e0      	str	r0, [r4, #60]	; 0x3c
   1317c:	6420      	str	r0, [r4, #64]	; 0x40
   1317e:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   13180:	6320      	str	r0, [r4, #48]	; 0x30
   13182:	6360      	str	r0, [r4, #52]	; 0x34
   13184:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   13186:	64a0      	str	r0, [r4, #72]	; 0x48
   13188:	64e0      	str	r0, [r4, #76]	; 0x4c
   1318a:	6520      	str	r0, [r4, #80]	; 0x50
}
   1318c:	bd38      	pop	{r3, r4, r5, pc}
    return malloc(size);
   1318e:	6a88      	ldr	r0, [r1, #40]	; 0x28
   13190:	f7f1 ff42 	bl	5018 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   13194:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   13196:	2800      	cmp	r0, #0
   13198:	d1bc      	bne.n	13114 <lfs_init+0xe>
    lfs_deinit(lfs);
   1319a:	4620      	mov	r0, r4
   1319c:	f7ff ff9a 	bl	130d4 <lfs_deinit>
    return err;
   131a0:	f06f 000b 	mvn.w	r0, #11
   131a4:	e7f2      	b.n	1318c <lfs_init+0x86>
   131a6:	6a90      	ldr	r0, [r2, #40]	; 0x28
   131a8:	f7f1 ff36 	bl	5018 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   131ac:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   131ae:	2800      	cmp	r0, #0
   131b0:	d1b5      	bne.n	1311e <lfs_init+0x18>
   131b2:	e7f2      	b.n	1319a <lfs_init+0x94>
   131b4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   131b6:	f7f1 ff2f 	bl	5018 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   131ba:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   131bc:	2800      	cmp	r0, #0
   131be:	d1c3      	bne.n	13148 <lfs_init+0x42>
   131c0:	e7eb      	b.n	1319a <lfs_init+0x94>

000131c2 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   131c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
   131c4:	680f      	ldr	r7, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   131c6:	6e83      	ldr	r3, [r0, #104]	; 0x68
   131c8:	69dc      	ldr	r4, [r3, #28]
   131ca:	3c08      	subs	r4, #8
    lfs_off_t i = size / b;
   131cc:	fbb7 f0f4 	udiv	r0, r7, r4
    if (i == 0) {
   131d0:	42a7      	cmp	r7, r4
   131d2:	d312      	bcc.n	131fa <lfs_ctz_index+0x38>
   131d4:	460e      	mov	r6, r1
    return __builtin_popcount(a);
   131d6:	3801      	subs	r0, #1
   131d8:	f7ed f8de 	bl	398 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   131dc:	1c85      	adds	r5, r0, #2
   131de:	eba7 0585 	sub.w	r5, r7, r5, lsl #2
   131e2:	fbb5 f5f4 	udiv	r5, r5, r4
    *off = size - b*i - 4*lfs_popc(i);
   131e6:	fb05 7414 	mls	r4, r5, r4, r7
   131ea:	4628      	mov	r0, r5
   131ec:	f7ed f8d4 	bl	398 <__popcountsi2>
   131f0:	eba4 0480 	sub.w	r4, r4, r0, lsl #2
   131f4:	6034      	str	r4, [r6, #0]
    return i;
   131f6:	4628      	mov	r0, r5
}
   131f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   131fa:	2000      	movs	r0, #0
   131fc:	e7fc      	b.n	131f8 <lfs_ctz_index+0x36>

000131fe <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   131fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13202:	b08b      	sub	sp, #44	; 0x2c
   13204:	9105      	str	r1, [sp, #20]
   13206:	461c      	mov	r4, r3
   13208:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1320a:	9e15      	ldr	r6, [sp, #84]	; 0x54
   1320c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if (size == 0) {
   1320e:	b923      	cbnz	r3, 1321a <lfs_ctz_traverse+0x1c>
        return 0;
   13210:	2300      	movs	r3, #0
}
   13212:	4618      	mov	r0, r3
   13214:	b00b      	add	sp, #44	; 0x2c
   13216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1321a:	4680      	mov	r8, r0
   1321c:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   1321e:	3b01      	subs	r3, #1
   13220:	9309      	str	r3, [sp, #36]	; 0x24
   13222:	a909      	add	r1, sp, #36	; 0x24
   13224:	f7ff ffcd 	bl	131c2 <lfs_ctz_index>
   13228:	4681      	mov	r9, r0
        int err = cb(data, head);
   1322a:	4621      	mov	r1, r4
   1322c:	4638      	mov	r0, r7
   1322e:	47b0      	blx	r6
        if (err) {
   13230:	4603      	mov	r3, r0
   13232:	2800      	cmp	r0, #0
   13234:	d1ed      	bne.n	13212 <lfs_ctz_traverse+0x14>
        if (index == 0) {
   13236:	f1b9 0f00 	cmp.w	r9, #0
   1323a:	d0ea      	beq.n	13212 <lfs_ctz_traverse+0x14>
        int count = 2 - (index & 1);
   1323c:	f009 0b01 	and.w	fp, r9, #1
   13240:	f1cb 0502 	rsb	r5, fp, #2
        err = lfs_bd_read(lfs,
   13244:	00ab      	lsls	r3, r5, #2
   13246:	9303      	str	r3, [sp, #12]
   13248:	aa07      	add	r2, sp, #28
   1324a:	9202      	str	r2, [sp, #8]
   1324c:	2200      	movs	r2, #0
   1324e:	9201      	str	r2, [sp, #4]
   13250:	9400      	str	r4, [sp, #0]
   13252:	4652      	mov	r2, sl
   13254:	9905      	ldr	r1, [sp, #20]
   13256:	4640      	mov	r0, r8
   13258:	f7ff fb0a 	bl	12870 <lfs_bd_read>
        if (err) {
   1325c:	4604      	mov	r4, r0
   1325e:	b110      	cbz	r0, 13266 <lfs_ctz_traverse+0x68>
            return err;
   13260:	4603      	mov	r3, r0
   13262:	e7d6      	b.n	13212 <lfs_ctz_traverse+0x14>
        for (int i = 0; i < count-1; i++) {
   13264:	3401      	adds	r4, #1
   13266:	1e6b      	subs	r3, r5, #1
   13268:	42a3      	cmp	r3, r4
   1326a:	dd0a      	ble.n	13282 <lfs_ctz_traverse+0x84>
            err = cb(data, heads[i]);
   1326c:	ab0a      	add	r3, sp, #40	; 0x28
   1326e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   13272:	f853 1c0c 	ldr.w	r1, [r3, #-12]
   13276:	4638      	mov	r0, r7
   13278:	47b0      	blx	r6
            if (err) {
   1327a:	4603      	mov	r3, r0
   1327c:	2800      	cmp	r0, #0
   1327e:	d0f1      	beq.n	13264 <lfs_ctz_traverse+0x66>
   13280:	e7c7      	b.n	13212 <lfs_ctz_traverse+0x14>
        head = heads[count-1];
   13282:	aa0a      	add	r2, sp, #40	; 0x28
   13284:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13288:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
   1328c:	f1ab 0b02 	sub.w	fp, fp, #2
   13290:	44d9      	add	r9, fp
    while (true) {
   13292:	e7ca      	b.n	1322a <lfs_ctz_traverse+0x2c>

00013294 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
   13294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13298:	b089      	sub	sp, #36	; 0x24
   1329a:	9305      	str	r3, [sp, #20]
   1329c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
   1329e:	b953      	cbnz	r3, 132b6 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
   132a0:	f04f 33ff 	mov.w	r3, #4294967295
   132a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   132a6:	6013      	str	r3, [r2, #0]
        *off = 0;
   132a8:	2300      	movs	r3, #0
   132aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   132ac:	6013      	str	r3, [r2, #0]
}
   132ae:	4618      	mov	r0, r3
   132b0:	b009      	add	sp, #36	; 0x24
   132b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   132b6:	4607      	mov	r7, r0
   132b8:	4688      	mov	r8, r1
   132ba:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   132bc:	3b01      	subs	r3, #1
   132be:	9307      	str	r3, [sp, #28]
   132c0:	a907      	add	r1, sp, #28
   132c2:	f7ff ff7e 	bl	131c2 <lfs_ctz_index>
   132c6:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   132c8:	a911      	add	r1, sp, #68	; 0x44
   132ca:	4638      	mov	r0, r7
   132cc:	f7ff ff79 	bl	131c2 <lfs_ctz_index>
   132d0:	4606      	mov	r6, r0
    while (current > target) {
   132d2:	e003      	b.n	132dc <lfs_ctz_find+0x48>
        current -= 1 << skip;
   132d4:	2301      	movs	r3, #1
   132d6:	fa03 f404 	lsl.w	r4, r3, r4
   132da:	1b2d      	subs	r5, r5, r4
    while (current > target) {
   132dc:	42b5      	cmp	r5, r6
   132de:	d91c      	bls.n	1331a <lfs_ctz_find+0x86>
                lfs_npw2(current-target+1) - 1,
   132e0:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
   132e2:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
   132e6:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
   132ea:	fa95 f3a5 	rbit	r3, r5
   132ee:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
   132f2:	429c      	cmp	r4, r3
   132f4:	bf28      	it	cs
   132f6:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   132f8:	2304      	movs	r3, #4
   132fa:	9303      	str	r3, [sp, #12]
   132fc:	aa05      	add	r2, sp, #20
   132fe:	9202      	str	r2, [sp, #8]
   13300:	00a2      	lsls	r2, r4, #2
   13302:	9201      	str	r2, [sp, #4]
   13304:	9a05      	ldr	r2, [sp, #20]
   13306:	9200      	str	r2, [sp, #0]
   13308:	464a      	mov	r2, r9
   1330a:	4641      	mov	r1, r8
   1330c:	4638      	mov	r0, r7
   1330e:	f7ff faaf 	bl	12870 <lfs_bd_read>
        if (err) {
   13312:	4603      	mov	r3, r0
   13314:	2800      	cmp	r0, #0
   13316:	d0dd      	beq.n	132d4 <lfs_ctz_find+0x40>
   13318:	e7c9      	b.n	132ae <lfs_ctz_find+0x1a>
    *block = head;
   1331a:	9b05      	ldr	r3, [sp, #20]
   1331c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1331e:	6013      	str	r3, [r2, #0]
    *off = pos;
   13320:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13322:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13324:	6013      	str	r3, [r2, #0]
    return 0;
   13326:	2300      	movs	r3, #0
   13328:	e7c1      	b.n	132ae <lfs_ctz_find+0x1a>

0001332a <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1332a:	3028      	adds	r0, #40	; 0x28
   1332c:	6803      	ldr	r3, [r0, #0]
   1332e:	b12b      	cbz	r3, 1333c <lfs_dir_close+0x12>
        if (*p == (struct lfs_mlist*)dir) {
   13330:	428b      	cmp	r3, r1
   13332:	d001      	beq.n	13338 <lfs_dir_close+0xe>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   13334:	4618      	mov	r0, r3
   13336:	e7f9      	b.n	1332c <lfs_dir_close+0x2>
            *p = (*p)->next;
   13338:	681b      	ldr	r3, [r3, #0]
   1333a:	6003      	str	r3, [r0, #0]
}
   1333c:	2000      	movs	r0, #0
   1333e:	4770      	bx	lr

00013340 <lfs_file_tell>:
}
   13340:	6b48      	ldr	r0, [r1, #52]	; 0x34
   13342:	4770      	bx	lr

00013344 <lfs_file_size>:
    if (file->flags & LFS_F_WRITING) {
   13344:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   13346:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1334a:	d005      	beq.n	13358 <lfs_file_size+0x14>
        return lfs_max(file->pos, file->ctz.size);
   1334c:	6b48      	ldr	r0, [r1, #52]	; 0x34
   1334e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13350:	4298      	cmp	r0, r3
   13352:	bf38      	it	cc
   13354:	4618      	movcc	r0, r3
   13356:	4770      	bx	lr
        return file->ctz.size;
   13358:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
}
   1335a:	4770      	bx	lr

0001335c <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   1335c:	b530      	push	{r4, r5, lr}
   1335e:	b08b      	sub	sp, #44	; 0x2c
   13360:	4604      	mov	r4, r0
   13362:	9101      	str	r1, [sp, #4]
   13364:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   13366:	2300      	movs	r3, #0
   13368:	aa01      	add	r2, sp, #4
   1336a:	a902      	add	r1, sp, #8
   1336c:	f7f8 fb26 	bl	b9bc <lfs_dir_find>
    if (tag < 0) {
   13370:	2800      	cmp	r0, #0
   13372:	db06      	blt.n	13382 <lfs_stat+0x26>
    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   13374:	462b      	mov	r3, r5
   13376:	f3c0 2289 	ubfx	r2, r0, #10, #10
   1337a:	a902      	add	r1, sp, #8
   1337c:	4620      	mov	r0, r4
   1337e:	f7f8 fbe1 	bl	bb44 <lfs_dir_getinfo>
}
   13382:	b00b      	add	sp, #44	; 0x2c
   13384:	bd30      	pop	{r4, r5, pc}

00013386 <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
   13386:	b508      	push	{r3, lr}
    int err = lfs_deinit(lfs);
   13388:	f7ff fea4 	bl	130d4 <lfs_deinit>
}
   1338c:	bd08      	pop	{r3, pc}

0001338e <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   1338e:	b570      	push	{r4, r5, r6, lr}
   13390:	b084      	sub	sp, #16
   13392:	4606      	mov	r6, r0
   13394:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
   13396:	2500      	movs	r5, #0
   13398:	2d01      	cmp	r5, #1
   1339a:	dc0d      	bgt.n	133b8 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   1339c:	3501      	adds	r5, #1
   1339e:	f005 0101 	and.w	r1, r5, #1
   133a2:	bf48      	it	mi
   133a4:	4249      	negmi	r1, r1
   133a6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   133aa:	4630      	mov	r0, r6
   133ac:	f7f8 feb2 	bl	c114 <lfs_alloc>
        if (err) {
   133b0:	4603      	mov	r3, r0
   133b2:	2800      	cmp	r0, #0
   133b4:	d0f0      	beq.n	13398 <lfs_dir_alloc+0xa>
   133b6:	e022      	b.n	133fe <lfs_dir_alloc+0x70>
    dir->rev = 0;
   133b8:	2100      	movs	r1, #0
   133ba:	4622      	mov	r2, r4
   133bc:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
   133c0:	2304      	movs	r3, #4
   133c2:	9303      	str	r3, [sp, #12]
   133c4:	9202      	str	r2, [sp, #8]
   133c6:	9101      	str	r1, [sp, #4]
   133c8:	6822      	ldr	r2, [r4, #0]
   133ca:	9200      	str	r2, [sp, #0]
   133cc:	4632      	mov	r2, r6
   133ce:	4630      	mov	r0, r6
   133d0:	f7ff fa4e 	bl	12870 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
   133d4:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
   133d6:	4603      	mov	r3, r0
   133d8:	b110      	cbz	r0, 133e0 <lfs_dir_alloc+0x52>
   133da:	f110 0f54 	cmn.w	r0, #84	; 0x54
   133de:	d10e      	bne.n	133fe <lfs_dir_alloc+0x70>
    dir->rev += dir->rev & 1;
   133e0:	3201      	adds	r2, #1
   133e2:	f022 0201 	bic.w	r2, r2, #1
   133e6:	60a2      	str	r2, [r4, #8]
    dir->off = sizeof(dir->rev);
   133e8:	2304      	movs	r3, #4
   133ea:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
   133ec:	f04f 32ff 	mov.w	r2, #4294967295
   133f0:	6122      	str	r2, [r4, #16]
    dir->count = 0;
   133f2:	2300      	movs	r3, #0
   133f4:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
   133f6:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
   133f8:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
   133fa:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
   133fc:	75e3      	strb	r3, [r4, #23]
}
   133fe:	4618      	mov	r0, r3
   13400:	b004      	add	sp, #16
   13402:	bd70      	pop	{r4, r5, r6, pc}

00013404 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
   13404:	b538      	push	{r3, r4, r5, lr}
   13406:	4605      	mov	r5, r0
   13408:	460c      	mov	r4, r1
    file->off = file->pos;
   1340a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1340c:	63cb      	str	r3, [r1, #60]	; 0x3c
    lfs_alloc_ack(lfs);
   1340e:	f7ff f9fc 	bl	1280a <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
   13412:	4621      	mov	r1, r4
   13414:	4628      	mov	r0, r5
   13416:	f7f8 feff 	bl	c218 <lfs_file_relocate>
    if (err) {
   1341a:	b918      	cbnz	r0, 13424 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
   1341c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1341e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   13422:	6323      	str	r3, [r4, #48]	; 0x30
}
   13424:	bd38      	pop	{r3, r4, r5, pc}

00013426 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
   13426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1342a:	b08b      	sub	sp, #44	; 0x2c
   1342c:	4604      	mov	r4, r0
   1342e:	460f      	mov	r7, r1
   13430:	4615      	mov	r5, r2
   13432:	4699      	mov	r9, r3
   13434:	e043      	b.n	134be <lfs_ctz_extend+0x98>
            if (size == 0) {
   13436:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13438:	b18b      	cbz	r3, 1345e <lfs_ctz_extend+0x38>
            lfs_size_t noff = size - 1;
   1343a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1343c:	3b01      	subs	r3, #1
   1343e:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   13440:	a908      	add	r1, sp, #32
   13442:	4620      	mov	r0, r4
   13444:	f7ff febd 	bl	131c2 <lfs_ctz_index>
            noff = noff + 1;
   13448:	9b08      	ldr	r3, [sp, #32]
   1344a:	3301      	adds	r3, #1
   1344c:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
   1344e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   13450:	69d2      	ldr	r2, [r2, #28]
   13452:	4293      	cmp	r3, r2
   13454:	d050      	beq.n	134f8 <lfs_ctz_extend+0xd2>
                for (lfs_off_t i = 0; i < noff; i++) {
   13456:	2600      	movs	r6, #0
   13458:	46b8      	mov	r8, r7
   1345a:	464f      	mov	r7, r9
   1345c:	e007      	b.n	1346e <lfs_ctz_extend+0x48>
                *block = nblock;
   1345e:	9b07      	ldr	r3, [sp, #28]
   13460:	9a15      	ldr	r2, [sp, #84]	; 0x54
   13462:	6013      	str	r3, [r2, #0]
                *off = 0;
   13464:	2300      	movs	r3, #0
   13466:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13468:	6013      	str	r3, [r2, #0]
                return 0;
   1346a:	e041      	b.n	134f0 <lfs_ctz_extend+0xca>
                for (lfs_off_t i = 0; i < noff; i++) {
   1346c:	3601      	adds	r6, #1
   1346e:	9b08      	ldr	r3, [sp, #32]
   13470:	42b3      	cmp	r3, r6
   13472:	d937      	bls.n	134e4 <lfs_ctz_extend+0xbe>
                    err = lfs_bd_read(lfs,
   13474:	2201      	movs	r2, #1
   13476:	9203      	str	r2, [sp, #12]
   13478:	aa09      	add	r2, sp, #36	; 0x24
   1347a:	9202      	str	r2, [sp, #8]
   1347c:	9601      	str	r6, [sp, #4]
   1347e:	9700      	str	r7, [sp, #0]
   13480:	1b9b      	subs	r3, r3, r6
   13482:	462a      	mov	r2, r5
   13484:	2100      	movs	r1, #0
   13486:	4620      	mov	r0, r4
   13488:	f7ff f9f2 	bl	12870 <lfs_bd_read>
                    if (err) {
   1348c:	4603      	mov	r3, r0
   1348e:	bb38      	cbnz	r0, 134e0 <lfs_ctz_extend+0xba>
                    err = lfs_bd_prog(lfs,
   13490:	2301      	movs	r3, #1
   13492:	9303      	str	r3, [sp, #12]
   13494:	aa09      	add	r2, sp, #36	; 0x24
   13496:	9202      	str	r2, [sp, #8]
   13498:	9601      	str	r6, [sp, #4]
   1349a:	9a07      	ldr	r2, [sp, #28]
   1349c:	9200      	str	r2, [sp, #0]
   1349e:	462a      	mov	r2, r5
   134a0:	4641      	mov	r1, r8
   134a2:	4620      	mov	r0, r4
   134a4:	f7ff fc5b 	bl	12d5e <lfs_bd_prog>
                    if (err) {
   134a8:	4603      	mov	r3, r0
   134aa:	2800      	cmp	r0, #0
   134ac:	d0de      	beq.n	1346c <lfs_ctz_extend+0x46>
   134ae:	46b9      	mov	r9, r7
   134b0:	4647      	mov	r7, r8
                        if (err == LFS_ERR_CORRUPT) {
   134b2:	f110 0f54 	cmn.w	r0, #84	; 0x54
   134b6:	d113      	bne.n	134e0 <lfs_ctz_extend+0xba>
    rcache->block = LFS_BLOCK_NULL;
   134b8:	f04f 33ff 	mov.w	r3, #4294967295
   134bc:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
   134be:	a907      	add	r1, sp, #28
   134c0:	4620      	mov	r0, r4
   134c2:	f7f8 fe27 	bl	c114 <lfs_alloc>
        if (err) {
   134c6:	9005      	str	r0, [sp, #20]
   134c8:	b990      	cbnz	r0, 134f0 <lfs_ctz_extend+0xca>
            err = lfs_bd_erase(lfs, nblock);
   134ca:	9907      	ldr	r1, [sp, #28]
   134cc:	4620      	mov	r0, r4
   134ce:	f7ff f97d 	bl	127cc <lfs_bd_erase>
            if (err) {
   134d2:	9005      	str	r0, [sp, #20]
   134d4:	2800      	cmp	r0, #0
   134d6:	d0ae      	beq.n	13436 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
   134d8:	f110 0f54 	cmn.w	r0, #84	; 0x54
   134dc:	d0ec      	beq.n	134b8 <lfs_ctz_extend+0x92>
   134de:	e007      	b.n	134f0 <lfs_ctz_extend+0xca>
                        return err;
   134e0:	9305      	str	r3, [sp, #20]
   134e2:	e005      	b.n	134f0 <lfs_ctz_extend+0xca>
                *block = nblock;
   134e4:	9b07      	ldr	r3, [sp, #28]
   134e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   134e8:	6013      	str	r3, [r2, #0]
                *off = noff;
   134ea:	9b08      	ldr	r3, [sp, #32]
   134ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
   134ee:	6013      	str	r3, [r2, #0]
}
   134f0:	9805      	ldr	r0, [sp, #20]
   134f2:	b00b      	add	sp, #44	; 0x2c
   134f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
   134f8:	3001      	adds	r0, #1
    return __builtin_ctz(a);
   134fa:	fa90 faa0 	rbit	sl, r0
   134fe:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
   13502:	f10a 0b01 	add.w	fp, sl, #1
            lfs_block_t nhead = head;
   13506:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
   1350a:	2600      	movs	r6, #0
   1350c:	46a0      	mov	r8, r4
   1350e:	e006      	b.n	1351e <lfs_ctz_extend+0xf8>
   13510:	4644      	mov	r4, r8
                    if (err == LFS_ERR_CORRUPT) {
   13512:	f110 0f54 	cmn.w	r0, #84	; 0x54
   13516:	d0cf      	beq.n	134b8 <lfs_ctz_extend+0x92>
                    return err;
   13518:	9005      	str	r0, [sp, #20]
   1351a:	e7e9      	b.n	134f0 <lfs_ctz_extend+0xca>
            for (lfs_off_t i = 0; i < skips; i++) {
   1351c:	3601      	adds	r6, #1
   1351e:	45b3      	cmp	fp, r6
   13520:	d921      	bls.n	13566 <lfs_ctz_extend+0x140>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   13522:	00b4      	lsls	r4, r6, #2
   13524:	2304      	movs	r3, #4
   13526:	9303      	str	r3, [sp, #12]
   13528:	ab09      	add	r3, sp, #36	; 0x24
   1352a:	9302      	str	r3, [sp, #8]
   1352c:	9401      	str	r4, [sp, #4]
   1352e:	9b07      	ldr	r3, [sp, #28]
   13530:	9300      	str	r3, [sp, #0]
   13532:	2301      	movs	r3, #1
   13534:	462a      	mov	r2, r5
   13536:	4639      	mov	r1, r7
   13538:	4640      	mov	r0, r8
   1353a:	f7ff fc10 	bl	12d5e <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   1353e:	9a09      	ldr	r2, [sp, #36]	; 0x24
                if (err) {
   13540:	2800      	cmp	r0, #0
   13542:	d1e5      	bne.n	13510 <lfs_ctz_extend+0xea>
                if (i != skips-1) {
   13544:	45b2      	cmp	sl, r6
   13546:	d0e9      	beq.n	1351c <lfs_ctz_extend+0xf6>
                    err = lfs_bd_read(lfs,
   13548:	2304      	movs	r3, #4
   1354a:	9303      	str	r3, [sp, #12]
   1354c:	a909      	add	r1, sp, #36	; 0x24
   1354e:	9102      	str	r1, [sp, #8]
   13550:	9401      	str	r4, [sp, #4]
   13552:	9200      	str	r2, [sp, #0]
   13554:	462a      	mov	r2, r5
   13556:	2100      	movs	r1, #0
   13558:	4640      	mov	r0, r8
   1355a:	f7ff f989 	bl	12870 <lfs_bd_read>
                    if (err) {
   1355e:	2800      	cmp	r0, #0
   13560:	d0dc      	beq.n	1351c <lfs_ctz_extend+0xf6>
                        return err;
   13562:	9005      	str	r0, [sp, #20]
   13564:	e7c4      	b.n	134f0 <lfs_ctz_extend+0xca>
            *block = nblock;
   13566:	9b07      	ldr	r3, [sp, #28]
   13568:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1356a:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
   1356c:	ea4f 038b 	mov.w	r3, fp, lsl #2
   13570:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13572:	6013      	str	r3, [r2, #0]
            return 0;
   13574:	e7bc      	b.n	134f0 <lfs_ctz_extend+0xca>

00013576 <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
   13576:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1357a:	b087      	sub	sp, #28
   1357c:	4605      	mov	r5, r0
   1357e:	460c      	mov	r4, r1
   13580:	4617      	mov	r7, r2
   13582:	4698      	mov	r8, r3
    if (file->flags & LFS_F_READING) {
   13584:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   13586:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1358a:	d126      	bne.n	135da <lfs_file_write+0x64>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   1358c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1358e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   13592:	d004      	beq.n	1359e <lfs_file_write+0x28>
   13594:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13596:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13598:	4291      	cmp	r1, r2
   1359a:	d200      	bcs.n	1359e <lfs_file_write+0x28>
        file->pos = file->ctz.size;
   1359c:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
   1359e:	6b66      	ldr	r6, [r4, #52]	; 0x34
   135a0:	eb06 0108 	add.w	r1, r6, r8
   135a4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
   135a6:	4291      	cmp	r1, r2
   135a8:	f200 80db 	bhi.w	13762 <lfs_file_write+0x1ec>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   135ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   135b0:	d119      	bne.n	135e6 <lfs_file_write+0x70>
   135b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   135b4:	429e      	cmp	r6, r3
   135b6:	d916      	bls.n	135e6 <lfs_file_write+0x70>
        file->pos = file->ctz.size;
   135b8:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   135ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   135bc:	429e      	cmp	r6, r3
   135be:	d912      	bls.n	135e6 <lfs_file_write+0x70>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   135c0:	2300      	movs	r3, #0
   135c2:	f88d 3017 	strb.w	r3, [sp, #23]
   135c6:	2301      	movs	r3, #1
   135c8:	f10d 0217 	add.w	r2, sp, #23
   135cc:	4621      	mov	r1, r4
   135ce:	4628      	mov	r0, r5
   135d0:	f7ff ffd1 	bl	13576 <lfs_file_write>
            if (res < 0) {
   135d4:	1e01      	subs	r1, r0, #0
   135d6:	daf0      	bge.n	135ba <lfs_file_write+0x44>
   135d8:	e0ac      	b.n	13734 <lfs_file_write+0x1be>
        int err = lfs_file_flush(lfs, file);
   135da:	f7f8 fea3 	bl	c324 <lfs_file_flush>
        if (err) {
   135de:	4601      	mov	r1, r0
   135e0:	2800      	cmp	r0, #0
   135e2:	d0d3      	beq.n	1358c <lfs_file_write+0x16>
   135e4:	e0a6      	b.n	13734 <lfs_file_write+0x1be>
    if ((file->flags & LFS_F_INLINE) &&
   135e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   135e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   135ec:	d014      	beq.n	13618 <lfs_file_write+0xa2>
            lfs_max(file->pos+nsize, file->ctz.size) >
   135ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
   135f0:	eb03 0208 	add.w	r2, r3, r8
   135f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
   135f6:	429a      	cmp	r2, r3
   135f8:	bf38      	it	cc
   135fa:	461a      	movcc	r2, r3
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   135fc:	6ea9      	ldr	r1, [r5, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
   135fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   13600:	69c9      	ldr	r1, [r1, #28]
            lfs_min(0x3fe, lfs_min(
   13602:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
   13604:	428b      	cmp	r3, r1
   13606:	bf28      	it	cs
   13608:	460b      	movcs	r3, r1
   1360a:	f240 31fe 	movw	r1, #1022	; 0x3fe
   1360e:	428b      	cmp	r3, r1
   13610:	bf28      	it	cs
   13612:	460b      	movcs	r3, r1
    if ((file->flags & LFS_F_INLINE) &&
   13614:	429a      	cmp	r2, r3
   13616:	d82d      	bhi.n	13674 <lfs_file_write+0xfe>
        const void *buffer, lfs_size_t size) {
   13618:	46c1      	mov	r9, r8
    while (nsize > 0) {
   1361a:	f1b9 0f00 	cmp.w	r9, #0
   1361e:	f000 809a 	beq.w	13756 <lfs_file_write+0x1e0>
        if (!(file->flags & LFS_F_WRITING) ||
   13622:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13624:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
   13628:	d004      	beq.n	13634 <lfs_file_write+0xbe>
                file->off == lfs->cfg->block_size) {
   1362a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1362c:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   1362e:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
   13630:	4288      	cmp	r0, r1
   13632:	d156      	bne.n	136e2 <lfs_file_write+0x16c>
            if (!(file->flags & LFS_F_INLINE)) {
   13634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   13638:	d14a      	bne.n	136d0 <lfs_file_write+0x15a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   1363a:	b90a      	cbnz	r2, 13640 <lfs_file_write+0xca>
   1363c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1363e:	bb2b      	cbnz	r3, 1368c <lfs_file_write+0x116>
                lfs_alloc_ack(lfs);
   13640:	4628      	mov	r0, r5
   13642:	f7ff f8e2 	bl	1280a <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   13646:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   1364a:	9302      	str	r3, [sp, #8]
   1364c:	f104 0338 	add.w	r3, r4, #56	; 0x38
   13650:	9301      	str	r3, [sp, #4]
   13652:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13654:	9300      	str	r3, [sp, #0]
   13656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13658:	462a      	mov	r2, r5
   1365a:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1365e:	4628      	mov	r0, r5
   13660:	f7ff fee1 	bl	13426 <lfs_ctz_extend>
                if (err) {
   13664:	4601      	mov	r1, r0
   13666:	2800      	cmp	r0, #0
   13668:	d037      	beq.n	136da <lfs_file_write+0x164>
                    file->flags |= LFS_F_ERRED;
   1366a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1366c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13670:	6323      	str	r3, [r4, #48]	; 0x30
                    return err;
   13672:	e05f      	b.n	13734 <lfs_file_write+0x1be>
        int err = lfs_file_outline(lfs, file);
   13674:	4621      	mov	r1, r4
   13676:	4628      	mov	r0, r5
   13678:	f7ff fec4 	bl	13404 <lfs_file_outline>
        if (err) {
   1367c:	4601      	mov	r1, r0
   1367e:	2800      	cmp	r0, #0
   13680:	d0ca      	beq.n	13618 <lfs_file_write+0xa2>
            file->flags |= LFS_F_ERRED;
   13682:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13688:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   1368a:	e053      	b.n	13734 <lfs_file_write+0x1be>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   1368c:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   13690:	9203      	str	r2, [sp, #12]
   13692:	f104 0238 	add.w	r2, r4, #56	; 0x38
   13696:	9202      	str	r2, [sp, #8]
   13698:	3b01      	subs	r3, #1
   1369a:	9301      	str	r3, [sp, #4]
   1369c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1369e:	9300      	str	r3, [sp, #0]
   136a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   136a2:	f104 0240 	add.w	r2, r4, #64	; 0x40
   136a6:	2100      	movs	r1, #0
   136a8:	4628      	mov	r0, r5
   136aa:	f7ff fdf3 	bl	13294 <lfs_ctz_find>
                    if (err) {
   136ae:	4601      	mov	r1, r0
   136b0:	b948      	cbnz	r0, 136c6 <lfs_file_write+0x150>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   136b2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   136b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   136b6:	21ff      	movs	r1, #255	; 0xff
   136b8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   136ba:	f7fd ff73 	bl	115a4 <memset>
    pcache->block = LFS_BLOCK_NULL;
   136be:	f04f 33ff 	mov.w	r3, #4294967295
   136c2:	6423      	str	r3, [r4, #64]	; 0x40
}
   136c4:	e7bc      	b.n	13640 <lfs_file_write+0xca>
                        file->flags |= LFS_F_ERRED;
   136c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   136c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   136cc:	6323      	str	r3, [r4, #48]	; 0x30
                        return err;
   136ce:	e031      	b.n	13734 <lfs_file_write+0x1be>
                file->block = LFS_BLOCK_INLINE;
   136d0:	f06f 0301 	mvn.w	r3, #1
   136d4:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
   136d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   136d8:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
   136da:	6b23      	ldr	r3, [r4, #48]	; 0x30
   136dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   136e0:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   136e2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   136e4:	69de      	ldr	r6, [r3, #28]
   136e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   136e8:	1af6      	subs	r6, r6, r3
   136ea:	454e      	cmp	r6, r9
   136ec:	bf28      	it	cs
   136ee:	464e      	movcs	r6, r9
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   136f0:	9603      	str	r6, [sp, #12]
   136f2:	9702      	str	r7, [sp, #8]
   136f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   136f6:	9301      	str	r3, [sp, #4]
   136f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   136fa:	9300      	str	r3, [sp, #0]
   136fc:	2301      	movs	r3, #1
   136fe:	462a      	mov	r2, r5
   13700:	f104 0140 	add.w	r1, r4, #64	; 0x40
   13704:	4628      	mov	r0, r5
   13706:	f7ff fb2a 	bl	12d5e <lfs_bd_prog>
            if (err) {
   1370a:	4601      	mov	r1, r0
   1370c:	b1b0      	cbz	r0, 1373c <lfs_file_write+0x1c6>
                if (err == LFS_ERR_CORRUPT) {
   1370e:	f110 0f54 	cmn.w	r0, #84	; 0x54
   13712:	d10b      	bne.n	1372c <lfs_file_write+0x1b6>
            err = lfs_file_relocate(lfs, file);
   13714:	4621      	mov	r1, r4
   13716:	4628      	mov	r0, r5
   13718:	f7f8 fd7e 	bl	c218 <lfs_file_relocate>
            if (err) {
   1371c:	4601      	mov	r1, r0
   1371e:	2800      	cmp	r0, #0
   13720:	d0e6      	beq.n	136f0 <lfs_file_write+0x17a>
                file->flags |= LFS_F_ERRED;
   13722:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13728:	6323      	str	r3, [r4, #48]	; 0x30
                return err;
   1372a:	e003      	b.n	13734 <lfs_file_write+0x1be>
                file->flags |= LFS_F_ERRED;
   1372c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1372e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13732:	6323      	str	r3, [r4, #48]	; 0x30
}
   13734:	4608      	mov	r0, r1
   13736:	b007      	add	sp, #28
   13738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
   1373c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1373e:	4433      	add	r3, r6
   13740:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   13742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13744:	4433      	add	r3, r6
   13746:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
   13748:	4437      	add	r7, r6
        nsize -= diff;
   1374a:	eba9 0906 	sub.w	r9, r9, r6
        lfs_alloc_ack(lfs);
   1374e:	4628      	mov	r0, r5
   13750:	f7ff f85b 	bl	1280a <lfs_alloc_ack>
   13754:	e761      	b.n	1361a <lfs_file_write+0xa4>
    file->flags &= ~LFS_F_ERRED;
   13756:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13758:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   1375c:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
   1375e:	4641      	mov	r1, r8
   13760:	e7e8      	b.n	13734 <lfs_file_write+0x1be>
        return LFS_ERR_FBIG;
   13762:	f06f 011a 	mvn.w	r1, #26
   13766:	e7e5      	b.n	13734 <lfs_file_write+0x1be>

00013768 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
   13768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1376a:	4606      	mov	r6, r0
   1376c:	460c      	mov	r4, r1
   1376e:	4617      	mov	r7, r2
   13770:	461d      	mov	r5, r3
    int err = lfs_file_flush(lfs, file);
   13772:	f7f8 fdd7 	bl	c324 <lfs_file_flush>
    if (err) {
   13776:	b930      	cbnz	r0, 13786 <lfs_file_seek+0x1e>
    lfs_off_t npos = file->pos;
   13778:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   1377a:	b92d      	cbnz	r5, 13788 <lfs_file_seek+0x20>
        npos = off;
   1377c:	4638      	mov	r0, r7
    if (npos > lfs->file_max) {
   1377e:	6f33      	ldr	r3, [r6, #112]	; 0x70
   13780:	4283      	cmp	r3, r0
   13782:	d30a      	bcc.n	1379a <lfs_file_seek+0x32>
    file->pos = npos;
   13784:	6360      	str	r0, [r4, #52]	; 0x34
}
   13786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
   13788:	2d01      	cmp	r5, #1
   1378a:	d004      	beq.n	13796 <lfs_file_seek+0x2e>
    } else if (whence == LFS_SEEK_END) {
   1378c:	2d02      	cmp	r5, #2
   1378e:	d1f6      	bne.n	1377e <lfs_file_seek+0x16>
        npos = file->ctz.size + off;
   13790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13792:	19d8      	adds	r0, r3, r7
   13794:	e7f3      	b.n	1377e <lfs_file_seek+0x16>
        npos = file->pos + off;
   13796:	4438      	add	r0, r7
   13798:	e7f1      	b.n	1377e <lfs_file_seek+0x16>
        return LFS_ERR_INVAL;
   1379a:	f06f 0015 	mvn.w	r0, #21
   1379e:	e7f2      	b.n	13786 <lfs_file_seek+0x1e>

000137a0 <lfs_file_truncate>:
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   137a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   137a2:	b087      	sub	sp, #28
    if (size > LFS_FILE_MAX) {
   137a4:	1e15      	subs	r5, r2, #0
   137a6:	db4b      	blt.n	13840 <lfs_file_truncate+0xa0>
   137a8:	4606      	mov	r6, r0
   137aa:	460c      	mov	r4, r1
    lfs_off_t pos = file->pos;
   137ac:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    lfs_off_t oldsize = lfs_file_size(lfs, file);
   137ae:	f7ff fdc9 	bl	13344 <lfs_file_size>
    if (size < oldsize) {
   137b2:	4285      	cmp	r5, r0
   137b4:	d313      	bcc.n	137de <lfs_file_truncate+0x3e>
    } else if (size > oldsize) {
   137b6:	4285      	cmp	r5, r0
   137b8:	d92e      	bls.n	13818 <lfs_file_truncate+0x78>
        if (file->pos != oldsize) {
   137ba:	4287      	cmp	r7, r0
   137bc:	d137      	bne.n	1382e <lfs_file_truncate+0x8e>
        while (file->pos < size) {
   137be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   137c0:	42ab      	cmp	r3, r5
   137c2:	d229      	bcs.n	13818 <lfs_file_truncate+0x78>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   137c4:	2300      	movs	r3, #0
   137c6:	f88d 3017 	strb.w	r3, [sp, #23]
   137ca:	2301      	movs	r3, #1
   137cc:	f10d 0217 	add.w	r2, sp, #23
   137d0:	4621      	mov	r1, r4
   137d2:	4630      	mov	r0, r6
   137d4:	f7ff fecf 	bl	13576 <lfs_file_write>
            if (res < 0) {
   137d8:	2800      	cmp	r0, #0
   137da:	daf0      	bge.n	137be <lfs_file_truncate+0x1e>
   137dc:	e025      	b.n	1382a <lfs_file_truncate+0x8a>
        int err = lfs_file_flush(lfs, file);
   137de:	4621      	mov	r1, r4
   137e0:	4630      	mov	r0, r6
   137e2:	f7f8 fd9f 	bl	c324 <lfs_file_flush>
        if (err) {
   137e6:	bb00      	cbnz	r0, 1382a <lfs_file_truncate+0x8a>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   137e8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   137ec:	9303      	str	r3, [sp, #12]
   137ee:	f104 0338 	add.w	r3, r4, #56	; 0x38
   137f2:	9302      	str	r3, [sp, #8]
   137f4:	9501      	str	r5, [sp, #4]
   137f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   137f8:	9300      	str	r3, [sp, #0]
   137fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   137fc:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13800:	2100      	movs	r1, #0
   13802:	4630      	mov	r0, r6
   13804:	f7ff fd46 	bl	13294 <lfs_ctz_find>
        if (err) {
   13808:	b978      	cbnz	r0, 1382a <lfs_file_truncate+0x8a>
        file->ctz.head = file->block;
   1380a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1380c:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = size;
   1380e:	62e5      	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   13810:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13812:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   13816:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_seek(lfs, file, pos, LFS_SEEK_SET);
   13818:	2300      	movs	r3, #0
   1381a:	463a      	mov	r2, r7
   1381c:	4621      	mov	r1, r4
   1381e:	4630      	mov	r0, r6
   13820:	f7ff ffa2 	bl	13768 <lfs_file_seek>
    if (res < 0) {
   13824:	2800      	cmp	r0, #0
   13826:	db00      	blt.n	1382a <lfs_file_truncate+0x8a>
    return 0;
   13828:	2000      	movs	r0, #0
}
   1382a:	b007      	add	sp, #28
   1382c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_END);
   1382e:	2302      	movs	r3, #2
   13830:	2200      	movs	r2, #0
   13832:	4621      	mov	r1, r4
   13834:	4630      	mov	r0, r6
   13836:	f7ff ff97 	bl	13768 <lfs_file_seek>
            if (res < 0) {
   1383a:	2800      	cmp	r0, #0
   1383c:	dabf      	bge.n	137be <lfs_file_truncate+0x1e>
   1383e:	e7f4      	b.n	1382a <lfs_file_truncate+0x8a>
        return LFS_ERR_INVAL;
   13840:	f06f 0015 	mvn.w	r0, #21
   13844:	e7f1      	b.n	1382a <lfs_file_truncate+0x8a>

00013846 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
   13846:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
   13848:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   1384a:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   1384e:	d101      	bne.n	13854 <lfs_fs_demove+0xe>
        return 0;
   13850:	2000      	movs	r0, #0
}
   13852:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
   13854:	b530      	push	{r4, r5, lr}
   13856:	b08b      	sub	sp, #44	; 0x2c
   13858:	4604      	mov	r4, r0
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   1385a:	f100 0240 	add.w	r2, r0, #64	; 0x40
   1385e:	4669      	mov	r1, sp
   13860:	f7ff f94e 	bl	12b00 <lfs_dir_fetch>
    if (err) {
   13864:	b108      	cbz	r0, 1386a <lfs_fs_demove+0x24>
}
   13866:	b00b      	add	sp, #44	; 0x2c
   13868:	bd30      	pop	{r4, r5, pc}
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
   1386a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    return (tag & 0x000ffc00) >> 10;
   1386c:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
   13870:	2200      	movs	r2, #0
   13872:	f240 31ff 	movw	r1, #1023	; 0x3ff
   13876:	4620      	mov	r0, r4
   13878:	f7f7 fbae 	bl	afd8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   1387c:	2300      	movs	r3, #0
   1387e:	9309      	str	r3, [sp, #36]	; 0x24
   13880:	02ab      	lsls	r3, r5, #10
   13882:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   13886:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   1388a:	9308      	str	r3, [sp, #32]
   1388c:	2301      	movs	r3, #1
   1388e:	aa08      	add	r2, sp, #32
   13890:	4669      	mov	r1, sp
   13892:	4620      	mov	r0, r4
   13894:	f7f9 f858 	bl	c948 <lfs_dir_commit>
    if (err) {
   13898:	e7e5      	b.n	13866 <lfs_fs_demove+0x20>

0001389a <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   1389a:	b510      	push	{r4, lr}
   1389c:	4604      	mov	r4, r0
    int err = lfs_fs_demove(lfs);
   1389e:	f7ff ffd2 	bl	13846 <lfs_fs_demove>
    if (err) {
   138a2:	b100      	cbz	r0, 138a6 <lfs_fs_forceconsistency+0xc>
}
   138a4:	bd10      	pop	{r4, pc}
    err = lfs_fs_deorphan(lfs);
   138a6:	4620      	mov	r0, r4
   138a8:	f7f9 fa8c 	bl	cdc4 <lfs_fs_deorphan>
    if (err) {
   138ac:	e7fa      	b.n	138a4 <lfs_fs_forceconsistency+0xa>

000138ae <lfs_file_sync>:
    if (file->flags & LFS_F_ERRED) {
   138ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   138b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   138b4:	d001      	beq.n	138ba <lfs_file_sync+0xc>
        return 0;
   138b6:	2000      	movs	r0, #0
}
   138b8:	4770      	bx	lr
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   138ba:	b530      	push	{r4, r5, lr}
   138bc:	b087      	sub	sp, #28
   138be:	4605      	mov	r5, r0
   138c0:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
   138c2:	f7f8 fd2f 	bl	c324 <lfs_file_flush>
    if (err) {
   138c6:	2800      	cmp	r0, #0
   138c8:	d132      	bne.n	13930 <lfs_file_sync+0x82>
    if ((file->flags & LFS_F_DIRTY) &&
   138ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   138cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   138d0:	d032      	beq.n	13938 <lfs_file_sync+0x8a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   138d2:	68a2      	ldr	r2, [r4, #8]
   138d4:	f1b2 3fff 	cmp.w	r2, #4294967295
   138d8:	d032      	beq.n	13940 <lfs_file_sync+0x92>
   138da:	68e2      	ldr	r2, [r4, #12]
   138dc:	f1b2 3fff 	cmp.w	r2, #4294967295
   138e0:	d02c      	beq.n	1393c <lfs_file_sync+0x8e>
   138e2:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
   138e4:	f012 0f01 	tst.w	r2, #1
   138e8:	d126      	bne.n	13938 <lfs_file_sync+0x8a>
        if (file->flags & LFS_F_INLINE) {
   138ea:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   138ee:	d029      	beq.n	13944 <lfs_file_sync+0x96>
            buffer = file->cache.buffer;
   138f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
            size = file->ctz.size;
   138f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
   138f4:	f240 2201 	movw	r2, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   138f8:	88a3      	ldrh	r3, [r4, #4]
   138fa:	029b      	lsls	r3, r3, #10
   138fc:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
   13900:	4302      	orrs	r2, r0
   13902:	9202      	str	r2, [sp, #8]
   13904:	9103      	str	r1, [sp, #12]
   13906:	6d22      	ldr	r2, [r4, #80]	; 0x50
   13908:	6891      	ldr	r1, [r2, #8]
   1390a:	430b      	orrs	r3, r1
   1390c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   13910:	9304      	str	r3, [sp, #16]
   13912:	6853      	ldr	r3, [r2, #4]
   13914:	9305      	str	r3, [sp, #20]
   13916:	2302      	movs	r3, #2
   13918:	aa02      	add	r2, sp, #8
   1391a:	f104 0108 	add.w	r1, r4, #8
   1391e:	4628      	mov	r0, r5
   13920:	f7f9 f812 	bl	c948 <lfs_dir_commit>
        if (err) {
   13924:	b9c0      	cbnz	r0, 13958 <lfs_file_sync+0xaa>
        file->flags &= ~LFS_F_DIRTY;
   13926:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1392c:	6323      	str	r3, [r4, #48]	; 0x30
   1392e:	e003      	b.n	13938 <lfs_file_sync+0x8a>
        file->flags |= LFS_F_ERRED;
   13930:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13936:	6323      	str	r3, [r4, #48]	; 0x30
}
   13938:	b007      	add	sp, #28
   1393a:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   1393c:	2201      	movs	r2, #1
   1393e:	e7d1      	b.n	138e4 <lfs_file_sync+0x36>
   13940:	2201      	movs	r2, #1
   13942:	e7cf      	b.n	138e4 <lfs_file_sync+0x36>
            ctz = file->ctz;
   13944:	466b      	mov	r3, sp
   13946:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   13948:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1394a:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
   1394e:	2008      	movs	r0, #8
            buffer = &ctz;
   13950:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
   13952:	f240 2202 	movw	r2, #514	; 0x202
   13956:	e7cf      	b.n	138f8 <lfs_file_sync+0x4a>
            file->flags |= LFS_F_ERRED;
   13958:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1395a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1395e:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   13960:	e7ea      	b.n	13938 <lfs_file_sync+0x8a>

00013962 <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   13962:	b570      	push	{r4, r5, r6, lr}
   13964:	4604      	mov	r4, r0
   13966:	460d      	mov	r5, r1
    int err = lfs_file_sync(lfs, file);
   13968:	f7ff ffa1 	bl	138ae <lfs_file_sync>
   1396c:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1396e:	f104 0228 	add.w	r2, r4, #40	; 0x28
   13972:	6813      	ldr	r3, [r2, #0]
   13974:	b12b      	cbz	r3, 13982 <lfs_file_close+0x20>
        if (*p == (struct lfs_mlist*)file) {
   13976:	42ab      	cmp	r3, r5
   13978:	d001      	beq.n	1397e <lfs_file_close+0x1c>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1397a:	461a      	mov	r2, r3
   1397c:	e7f9      	b.n	13972 <lfs_file_close+0x10>
            *p = (*p)->next;
   1397e:	681b      	ldr	r3, [r3, #0]
   13980:	6013      	str	r3, [r2, #0]
    if (!file->cfg->buffer) {
   13982:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   13984:	681b      	ldr	r3, [r3, #0]
   13986:	b12b      	cbz	r3, 13994 <lfs_file_close+0x32>
    file->flags &= ~LFS_F_OPENED;
   13988:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1398a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1398e:	632b      	str	r3, [r5, #48]	; 0x30
}
   13990:	4630      	mov	r0, r6
   13992:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
   13994:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   13996:	f7fd fd63 	bl	11460 <free>
}
   1399a:	e7f5      	b.n	13988 <lfs_file_close+0x26>

0001399c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   1399c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139a0:	b08c      	sub	sp, #48	; 0x30
   139a2:	4605      	mov	r5, r0
   139a4:	460c      	mov	r4, r1
   139a6:	4617      	mov	r7, r2
   139a8:	461e      	mov	r6, r3
   139aa:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
    lfs_alloc_ack(lfs);
   139ae:	f7fe ff2c 	bl	1280a <lfs_alloc_ack>
    int err = lfs_dir_alloc(lfs, &tail);
   139b2:	a904      	add	r1, sp, #16
   139b4:	4628      	mov	r0, r5
   139b6:	f7ff fcea 	bl	1338e <lfs_dir_alloc>
    if (err) {
   139ba:	b110      	cbz	r0, 139c2 <lfs_dir_split+0x26>
}
   139bc:	b00c      	add	sp, #48	; 0x30
   139be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tail.split = dir->split;
   139c2:	7de3      	ldrb	r3, [r4, #23]
   139c4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   139c8:	69a3      	ldr	r3, [r4, #24]
   139ca:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   139cc:	69e3      	ldr	r3, [r4, #28]
   139ce:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   139d0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   139d4:	9302      	str	r3, [sp, #8]
   139d6:	f8cd 8004 	str.w	r8, [sp, #4]
   139da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   139dc:	9300      	str	r3, [sp, #0]
   139de:	4633      	mov	r3, r6
   139e0:	463a      	mov	r2, r7
   139e2:	a904      	add	r1, sp, #16
   139e4:	4628      	mov	r0, r5
   139e6:	f7f8 fdb5 	bl	c554 <lfs_dir_compact>
    if (err) {
   139ea:	2800      	cmp	r0, #0
   139ec:	d1e6      	bne.n	139bc <lfs_dir_split+0x20>
    dir->tail[0] = tail.pair[0];
   139ee:	9904      	ldr	r1, [sp, #16]
   139f0:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
   139f2:	9a05      	ldr	r2, [sp, #20]
   139f4:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   139f6:	2301      	movs	r3, #1
   139f8:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   139fa:	6823      	ldr	r3, [r4, #0]
   139fc:	6a2e      	ldr	r6, [r5, #32]
   139fe:	42b3      	cmp	r3, r6
   13a00:	d007      	beq.n	13a12 <lfs_dir_split+0x76>
   13a02:	6867      	ldr	r7, [r4, #4]
   13a04:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   13a06:	42a7      	cmp	r7, r4
   13a08:	d003      	beq.n	13a12 <lfs_dir_split+0x76>
   13a0a:	42a3      	cmp	r3, r4
   13a0c:	d001      	beq.n	13a12 <lfs_dir_split+0x76>
   13a0e:	42be      	cmp	r6, r7
   13a10:	d1d4      	bne.n	139bc <lfs_dir_split+0x20>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   13a12:	f1b8 0f00 	cmp.w	r8, #0
   13a16:	d1d1      	bne.n	139bc <lfs_dir_split+0x20>
        lfs->root[0] = tail.pair[0];
   13a18:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
   13a1a:	626a      	str	r2, [r5, #36]	; 0x24
   13a1c:	e7ce      	b.n	139bc <lfs_dir_split+0x20>

00013a1e <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   13a1e:	b508      	push	{r3, lr}
  _DoInit();
   13a20:	f7f9 ff72 	bl	d908 <_DoInit>
}
   13a24:	bd08      	pop	{r3, pc}

00013a26 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   13a26:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   13a28:	f7ff fff9 	bl	13a1e <SEGGER_RTT_Init>

	return 0;
}
   13a2c:	2000      	movs	r0, #0
   13a2e:	bd08      	pop	{r3, pc}

00013a30 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   13a30:	b148      	cbz	r0, 13a46 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   13a32:	68c3      	ldr	r3, [r0, #12]
   13a34:	8818      	ldrh	r0, [r3, #0]
   13a36:	f3c0 0008 	ubfx	r0, r0, #0, #9
   13a3a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   13a3e:	bf14      	ite	ne
   13a40:	2000      	movne	r0, #0
   13a42:	2001      	moveq	r0, #1
   13a44:	4770      	bx	lr
		return false;
   13a46:	2000      	movs	r0, #0
}
   13a48:	4770      	bx	lr

00013a4a <arch_system_halt>:
	__asm__ volatile(
   13a4a:	f04f 0220 	mov.w	r2, #32
   13a4e:	f3ef 8311 	mrs	r3, BASEPRI
   13a52:	f382 8812 	msr	BASEPRI_MAX, r2
   13a56:	f3bf 8f6f 	isb	sy
	for (;;) {
   13a5a:	e7fe      	b.n	13a5a <arch_system_halt+0x10>

00013a5c <k_heap_init>:
{
   13a5c:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   13a5e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   13a62:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   13a64:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   13a66:	f7fc fbc1 	bl	101ec <sys_heap_init>
}
   13a6a:	bd10      	pop	{r4, pc}

00013a6c <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   13a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a70:	b087      	sub	sp, #28
   13a72:	4680      	mov	r8, r0
   13a74:	9103      	str	r1, [sp, #12]
   13a76:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   13a78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   13a7c:	f000 fc1b 	bl	142b6 <sys_clock_timeout_end_calc>
   13a80:	4681      	mov	r9, r0
   13a82:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   13a84:	f108 0314 	add.w	r3, r8, #20
   13a88:	9305      	str	r3, [sp, #20]
   13a8a:	f04f 0320 	mov.w	r3, #32
   13a8e:	f3ef 8511 	mrs	r5, BASEPRI
   13a92:	f383 8812 	msr	BASEPRI_MAX, r3
   13a96:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   13a9a:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   13a9e:	4654      	mov	r4, sl

	while (ret == NULL) {
   13aa0:	e00f      	b.n	13ac2 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   13aa2:	e9cd 6700 	strd	r6, r7, [sp]
   13aa6:	f108 020c 	add.w	r2, r8, #12
   13aaa:	4629      	mov	r1, r5
   13aac:	9805      	ldr	r0, [sp, #20]
   13aae:	f7fa ffc7 	bl	ea40 <z_pend_curr>
   13ab2:	f04f 0320 	mov.w	r3, #32
   13ab6:	f3ef 8511 	mrs	r5, BASEPRI
   13aba:	f383 8812 	msr	BASEPRI_MAX, r3
   13abe:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   13ac2:	b9b4      	cbnz	r4, 13af2 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   13ac4:	9a04      	ldr	r2, [sp, #16]
   13ac6:	9903      	ldr	r1, [sp, #12]
   13ac8:	4640      	mov	r0, r8
   13aca:	f7fc fb01 	bl	100d0 <sys_heap_aligned_alloc>
   13ace:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   13ad0:	f7fb fb6c 	bl	f1ac <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   13ad4:	b96c      	cbnz	r4, 13af2 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   13ad6:	ebb9 0600 	subs.w	r6, r9, r0
   13ada:	eb6b 0701 	sbc.w	r7, fp, r1
   13ade:	2e01      	cmp	r6, #1
   13ae0:	f177 0300 	sbcs.w	r3, r7, #0
   13ae4:	db05      	blt.n	13af2 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   13ae6:	f1ba 0f00 	cmp.w	sl, #0
   13aea:	d1da      	bne.n	13aa2 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   13aec:	f04f 0a01 	mov.w	sl, #1
   13af0:	e7d7      	b.n	13aa2 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   13af2:	f385 8811 	msr	BASEPRI, r5
   13af6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   13afa:	4620      	mov	r0, r4
   13afc:	b007      	add	sp, #28
   13afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013b02 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   13b02:	b500      	push	{lr}
   13b04:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   13b06:	e9cd 2300 	strd	r2, r3, [sp]
   13b0a:	460a      	mov	r2, r1
   13b0c:	2104      	movs	r1, #4
   13b0e:	f7ff ffad 	bl	13a6c <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   13b12:	b003      	add	sp, #12
   13b14:	f85d fb04 	ldr.w	pc, [sp], #4

00013b18 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   13b18:	b570      	push	{r4, r5, r6, lr}
   13b1a:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   13b1c:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   13b20:	f04f 0320 	mov.w	r3, #32
   13b24:	f3ef 8511 	mrs	r5, BASEPRI
   13b28:	f383 8812 	msr	BASEPRI_MAX, r3
   13b2c:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   13b30:	f7fc fa6c 	bl	1000c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   13b34:	f104 000c 	add.w	r0, r4, #12
   13b38:	f000 faf5 	bl	14126 <z_unpend_all>
   13b3c:	b920      	cbnz	r0, 13b48 <k_heap_free+0x30>
	__asm__ volatile(
   13b3e:	f385 8811 	msr	BASEPRI, r5
   13b42:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   13b46:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   13b48:	4629      	mov	r1, r5
   13b4a:	4630      	mov	r0, r6
   13b4c:	f7fa fe14 	bl	e778 <z_reschedule>
   13b50:	e7f9      	b.n	13b46 <k_heap_free+0x2e>

00013b52 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13b52:	68c2      	ldr	r2, [r0, #12]
   13b54:	6903      	ldr	r3, [r0, #16]
   13b56:	431a      	orrs	r2, r3
   13b58:	f012 0203 	ands.w	r2, r2, #3
   13b5c:	d10d      	bne.n	13b7a <create_free_list+0x28>
	slab->free_list = NULL;
   13b5e:	2100      	movs	r1, #0
   13b60:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13b62:	e005      	b.n	13b70 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   13b64:	6941      	ldr	r1, [r0, #20]
   13b66:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   13b68:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   13b6a:	68c1      	ldr	r1, [r0, #12]
   13b6c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   13b6e:	3201      	adds	r2, #1
   13b70:	6881      	ldr	r1, [r0, #8]
   13b72:	4291      	cmp	r1, r2
   13b74:	d8f6      	bhi.n	13b64 <create_free_list+0x12>
	return 0;
   13b76:	2000      	movs	r0, #0
   13b78:	4770      	bx	lr
		return -EINVAL;
   13b7a:	f06f 0015 	mvn.w	r0, #21
}
   13b7e:	4770      	bx	lr

00013b80 <k_mem_slab_init>:
{
   13b80:	b510      	push	{r4, lr}
   13b82:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   13b84:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   13b86:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   13b88:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   13b8a:	2300      	movs	r3, #0
   13b8c:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   13b8e:	f7ff ffe0 	bl	13b52 <create_free_list>
	if (rc < 0) {
   13b92:	2800      	cmp	r0, #0
   13b94:	db01      	blt.n	13b9a <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   13b96:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   13b98:	6064      	str	r4, [r4, #4]
}
   13b9a:	bd10      	pop	{r4, pc}

00013b9c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   13b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b9e:	4604      	mov	r4, r0
   13ba0:	460d      	mov	r5, r1
	__asm__ volatile(
   13ba2:	f04f 0320 	mov.w	r3, #32
   13ba6:	f3ef 8611 	mrs	r6, BASEPRI
   13baa:	f383 8812 	msr	BASEPRI_MAX, r3
   13bae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   13bb2:	6943      	ldr	r3, [r0, #20]
   13bb4:	b163      	cbz	r3, 13bd0 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   13bb6:	682b      	ldr	r3, [r5, #0]
   13bb8:	6962      	ldr	r2, [r4, #20]
   13bba:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   13bbc:	682b      	ldr	r3, [r5, #0]
   13bbe:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   13bc0:	69a3      	ldr	r3, [r4, #24]
   13bc2:	3b01      	subs	r3, #1
   13bc4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   13bc6:	f386 8811 	msr	BASEPRI, r6
   13bca:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   13bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13bd0:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   13bd4:	f000 fa7c 	bl	140d0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   13bd8:	2800      	cmp	r0, #0
   13bda:	d0ec      	beq.n	13bb6 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   13bdc:	682a      	ldr	r2, [r5, #0]
   13bde:	2100      	movs	r1, #0
   13be0:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   13be4:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   13be6:	f000 f9b1 	bl	13f4c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   13bea:	4631      	mov	r1, r6
   13bec:	4638      	mov	r0, r7
   13bee:	f7fa fdc3 	bl	e778 <z_reschedule>
			return;
   13bf2:	e7ec      	b.n	13bce <k_mem_slab_free+0x32>

00013bf4 <setup_thread_stack>:
{
   13bf4:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13bf6:	3207      	adds	r2, #7
   13bf8:	f022 0207 	bic.w	r2, r2, #7
   13bfc:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   13c00:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   13c04:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   13c08:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   13c0c:	2200      	movs	r2, #0
   13c0e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   13c12:	18c8      	adds	r0, r1, r3
   13c14:	bc10      	pop	{r4}
   13c16:	4770      	bx	lr

00013c18 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13c18:	f3ef 8005 	mrs	r0, IPSR
}
   13c1c:	3800      	subs	r0, #0
   13c1e:	bf18      	it	ne
   13c20:	2001      	movne	r0, #1
   13c22:	4770      	bx	lr

00013c24 <k_thread_name_get>:
}
   13c24:	3074      	adds	r0, #116	; 0x74
   13c26:	4770      	bx	lr

00013c28 <z_impl_k_thread_start>:
{
   13c28:	b508      	push	{r3, lr}
	z_sched_start(thread);
   13c2a:	f7fa fecf 	bl	e9cc <z_sched_start>
}
   13c2e:	bd08      	pop	{r3, pc}

00013c30 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   13c30:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   13c32:	2400      	movs	r4, #0
   13c34:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   13c36:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   13c38:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   13c3a:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   13c3c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   13c3e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   13c40:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   13c42:	bc10      	pop	{r4}
   13c44:	4770      	bx	lr

00013c46 <z_impl_k_thread_create>:
{
   13c46:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c48:	b087      	sub	sp, #28
   13c4a:	4604      	mov	r4, r0
   13c4c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13c50:	2500      	movs	r5, #0
   13c52:	9505      	str	r5, [sp, #20]
   13c54:	9d10      	ldr	r5, [sp, #64]	; 0x40
   13c56:	9504      	str	r5, [sp, #16]
   13c58:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   13c5a:	9503      	str	r5, [sp, #12]
   13c5c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   13c5e:	9502      	str	r5, [sp, #8]
   13c60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   13c62:	9501      	str	r5, [sp, #4]
   13c64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13c66:	9500      	str	r5, [sp, #0]
   13c68:	f7fa f9ae 	bl	dfc8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   13c6c:	f1b7 3fff 	cmp.w	r7, #4294967295
   13c70:	bf08      	it	eq
   13c72:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   13c76:	d102      	bne.n	13c7e <z_impl_k_thread_create+0x38>
}
   13c78:	4620      	mov	r0, r4
   13c7a:	b007      	add	sp, #28
   13c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   13c7e:	4632      	mov	r2, r6
   13c80:	463b      	mov	r3, r7
   13c82:	4620      	mov	r0, r4
   13c84:	f7fa f98e 	bl	dfa4 <schedule_new_thread>
   13c88:	e7f6      	b.n	13c78 <z_impl_k_thread_create+0x32>

00013c8a <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   13c8a:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   13c8c:	f7f0 f94e 	bl	3f2c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   13c90:	f7fe fc2f 	bl	124f2 <sys_clock_idle_exit>
}
   13c94:	bd08      	pop	{r3, pc}

00013c96 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   13c96:	b508      	push	{r3, lr}
	__asm__ volatile(
   13c98:	f04f 0220 	mov.w	r2, #32
   13c9c:	f3ef 8311 	mrs	r3, BASEPRI
   13ca0:	f382 8812 	msr	BASEPRI_MAX, r2
   13ca4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   13ca8:	f7fa fa40 	bl	e12c <pm_save_idle>
   13cac:	e7f4      	b.n	13c98 <idle+0x2>

00013cae <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   13cae:	4288      	cmp	r0, r1
   13cb0:	da00      	bge.n	13cb4 <new_prio_for_inheritance+0x6>
   13cb2:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   13cb4:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   13cb8:	db01      	blt.n	13cbe <new_prio_for_inheritance+0x10>
   13cba:	4608      	mov	r0, r1
   13cbc:	4770      	bx	lr
   13cbe:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   13cc2:	4770      	bx	lr

00013cc4 <adjust_owner_prio>:
{
   13cc4:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   13cc6:	6880      	ldr	r0, [r0, #8]
   13cc8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   13ccc:	428b      	cmp	r3, r1
   13cce:	d101      	bne.n	13cd4 <adjust_owner_prio+0x10>
	return false;
   13cd0:	2000      	movs	r0, #0
}
   13cd2:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   13cd4:	f7fa fec8 	bl	ea68 <z_set_prio>
   13cd8:	e7fb      	b.n	13cd2 <adjust_owner_prio+0xe>

00013cda <z_impl_k_mutex_init>:
{
   13cda:	4603      	mov	r3, r0
	mutex->owner = NULL;
   13cdc:	2000      	movs	r0, #0
   13cde:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   13ce0:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   13ce2:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   13ce4:	605b      	str	r3, [r3, #4]
}
   13ce6:	4770      	bx	lr

00013ce8 <prepare_thread_to_run>:
{
   13ce8:	b508      	push	{r3, lr}
   13cea:	2200      	movs	r2, #0
   13cec:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   13cf0:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   13cf2:	f000 f92b 	bl	13f4c <z_ready_thread>
}
   13cf6:	bd08      	pop	{r3, pc}

00013cf8 <queue_insert>:
{
   13cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13cfc:	4605      	mov	r5, r0
   13cfe:	460e      	mov	r6, r1
   13d00:	4614      	mov	r4, r2
   13d02:	461f      	mov	r7, r3
   13d04:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   13d08:	f100 0808 	add.w	r8, r0, #8
   13d0c:	f04f 0320 	mov.w	r3, #32
   13d10:	f3ef 8911 	mrs	r9, BASEPRI
   13d14:	f383 8812 	msr	BASEPRI_MAX, r3
   13d18:	f3bf 8f6f 	isb	sy
	if (is_append) {
   13d1c:	b102      	cbz	r2, 13d20 <queue_insert+0x28>
	return list->tail;
   13d1e:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   13d20:	4640      	mov	r0, r8
   13d22:	f000 f9d5 	bl	140d0 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   13d26:	b9a0      	cbnz	r0, 13d52 <queue_insert+0x5a>
	if (alloc) {
   13d28:	b9e7      	cbnz	r7, 13d64 <queue_insert+0x6c>
	node->next_and_flags = flags;
   13d2a:	2300      	movs	r3, #0
   13d2c:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   13d2e:	b356      	cbz	r6, 13d86 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   13d30:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   13d32:	f033 0303 	bics.w	r3, r3, #3
   13d36:	d134      	bne.n	13da2 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13d38:	6823      	ldr	r3, [r4, #0]
   13d3a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13d3e:	6023      	str	r3, [r4, #0]
	return list->tail;
   13d40:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   13d42:	b35a      	cbz	r2, 13d9c <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13d44:	6813      	ldr	r3, [r2, #0]
   13d46:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13d4a:	4323      	orrs	r3, r4
   13d4c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13d4e:	606c      	str	r4, [r5, #4]
}
   13d50:	e031      	b.n	13db6 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   13d52:	4621      	mov	r1, r4
   13d54:	f7ff ffc8 	bl	13ce8 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   13d58:	4649      	mov	r1, r9
   13d5a:	4640      	mov	r0, r8
   13d5c:	f7fa fd0c 	bl	e778 <z_reschedule>
		return 0;
   13d60:	2000      	movs	r0, #0
   13d62:	e02d      	b.n	13dc0 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   13d64:	2108      	movs	r1, #8
   13d66:	2000      	movs	r0, #0
   13d68:	f7fb faec 	bl	f344 <z_thread_aligned_alloc>
		if (anode == NULL) {
   13d6c:	b120      	cbz	r0, 13d78 <queue_insert+0x80>
		anode->data = data;
   13d6e:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   13d70:	2201      	movs	r2, #1
   13d72:	6002      	str	r2, [r0, #0]
		data = anode;
   13d74:	4604      	mov	r4, r0
   13d76:	e7da      	b.n	13d2e <queue_insert+0x36>
	__asm__ volatile(
   13d78:	f389 8811 	msr	BASEPRI, r9
   13d7c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   13d80:	f06f 000b 	mvn.w	r0, #11
   13d84:	e01c      	b.n	13dc0 <queue_insert+0xc8>
	return list->head;
   13d86:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13d88:	6823      	ldr	r3, [r4, #0]
   13d8a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13d8e:	4313      	orrs	r3, r2
   13d90:	6023      	str	r3, [r4, #0]
	list->head = node;
   13d92:	602c      	str	r4, [r5, #0]
	return list->tail;
   13d94:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   13d96:	b973      	cbnz	r3, 13db6 <queue_insert+0xbe>
	list->tail = node;
   13d98:	606c      	str	r4, [r5, #4]
}
   13d9a:	e00c      	b.n	13db6 <queue_insert+0xbe>
	list->tail = node;
   13d9c:	606c      	str	r4, [r5, #4]
	list->head = node;
   13d9e:	602c      	str	r4, [r5, #0]
}
   13da0:	e009      	b.n	13db6 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13da2:	6822      	ldr	r2, [r4, #0]
   13da4:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13da8:	4313      	orrs	r3, r2
   13daa:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13dac:	6833      	ldr	r3, [r6, #0]
   13dae:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13db2:	431c      	orrs	r4, r3
   13db4:	6034      	str	r4, [r6, #0]
	z_reschedule(&queue->lock, key);
   13db6:	4649      	mov	r1, r9
   13db8:	4640      	mov	r0, r8
   13dba:	f7fa fcdd 	bl	e778 <z_reschedule>
	return 0;
   13dbe:	2000      	movs	r0, #0
}
   13dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013dc4 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   13dc4:	b160      	cbz	r0, 13de0 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13dc6:	6803      	ldr	r3, [r0, #0]
   13dc8:	f013 0f03 	tst.w	r3, #3
   13dcc:	d008      	beq.n	13de0 <z_queue_node_peek+0x1c>
{
   13dce:	b510      	push	{r4, lr}
		ret = anode->data;
   13dd0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   13dd2:	b909      	cbnz	r1, 13dd8 <z_queue_node_peek+0x14>
		ret = anode->data;
   13dd4:	4620      	mov	r0, r4
}
   13dd6:	bd10      	pop	{r4, pc}
			k_free(anode);
   13dd8:	f000 fade 	bl	14398 <k_free>
		ret = anode->data;
   13ddc:	4620      	mov	r0, r4
   13dde:	e7fa      	b.n	13dd6 <z_queue_node_peek+0x12>
}
   13de0:	4770      	bx	lr

00013de2 <k_queue_append>:
{
   13de2:	b500      	push	{lr}
   13de4:	b083      	sub	sp, #12
   13de6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   13de8:	2301      	movs	r3, #1
   13dea:	9300      	str	r3, [sp, #0]
   13dec:	2300      	movs	r3, #0
   13dee:	4619      	mov	r1, r3
   13df0:	f7ff ff82 	bl	13cf8 <queue_insert>
}
   13df4:	b003      	add	sp, #12
   13df6:	f85d fb04 	ldr.w	pc, [sp], #4

00013dfa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   13dfa:	b13a      	cbz	r2, 13e0c <z_impl_k_sem_init+0x12>
   13dfc:	428a      	cmp	r2, r1
   13dfe:	d308      	bcc.n	13e12 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   13e00:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   13e02:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   13e04:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13e06:	6040      	str	r0, [r0, #4]
	return 0;
   13e08:	2000      	movs	r0, #0
   13e0a:	4770      	bx	lr
		return -EINVAL;
   13e0c:	f06f 0015 	mvn.w	r0, #21
   13e10:	4770      	bx	lr
   13e12:	f06f 0015 	mvn.w	r0, #21
}
   13e16:	4770      	bx	lr

00013e18 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   13e18:	2300      	movs	r3, #0
   13e1a:	6003      	str	r3, [r0, #0]
   13e1c:	6083      	str	r3, [r0, #8]
   13e1e:	60c3      	str	r3, [r0, #12]
   13e20:	6041      	str	r1, [r0, #4]
}
   13e22:	4770      	bx	lr

00013e24 <k_work_submit_to_queue>:
{
   13e24:	b530      	push	{r4, r5, lr}
   13e26:	b083      	sub	sp, #12
   13e28:	9001      	str	r0, [sp, #4]
   13e2a:	4608      	mov	r0, r1
	__asm__ volatile(
   13e2c:	f04f 0320 	mov.w	r3, #32
   13e30:	f3ef 8511 	mrs	r5, BASEPRI
   13e34:	f383 8812 	msr	BASEPRI_MAX, r3
   13e38:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   13e3c:	a901      	add	r1, sp, #4
   13e3e:	f7fa fadb 	bl	e3f8 <submit_to_queue_locked>
   13e42:	4604      	mov	r4, r0
	__asm__ volatile(
   13e44:	f385 8811 	msr	BASEPRI, r5
   13e48:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   13e4c:	2800      	cmp	r0, #0
   13e4e:	dc02      	bgt.n	13e56 <k_work_submit_to_queue+0x32>
}
   13e50:	4620      	mov	r0, r4
   13e52:	b003      	add	sp, #12
   13e54:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   13e56:	f7fa fff1 	bl	ee3c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   13e5a:	2800      	cmp	r0, #0
   13e5c:	d0f8      	beq.n	13e50 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   13e5e:	f7fa ff27 	bl	ecb0 <z_impl_k_yield>
	return ret;
   13e62:	e7f5      	b.n	13e50 <k_work_submit_to_queue+0x2c>

00013e64 <thread_active_elsewhere>:
}
   13e64:	2000      	movs	r0, #0
   13e66:	4770      	bx	lr

00013e68 <pended_on_thread>:
}
   13e68:	6880      	ldr	r0, [r0, #8]
   13e6a:	4770      	bx	lr

00013e6c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   13e6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   13e70:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   13e74:	4283      	cmp	r3, r0
   13e76:	d001      	beq.n	13e7c <z_sched_prio_cmp+0x10>
		return b2 - b1;
   13e78:	1ac0      	subs	r0, r0, r3
   13e7a:	4770      	bx	lr
	return 0;
   13e7c:	2000      	movs	r0, #0
}
   13e7e:	4770      	bx	lr

00013e80 <z_unpend_thread_no_timeout>:
{
   13e80:	b538      	push	{r3, r4, r5, lr}
   13e82:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   13e84:	2300      	movs	r3, #0
	__asm__ volatile(
   13e86:	f04f 0220 	mov.w	r2, #32
   13e8a:	f3ef 8511 	mrs	r5, BASEPRI
   13e8e:	f382 8812 	msr	BASEPRI_MAX, r2
   13e92:	f3bf 8f6f 	isb	sy
   13e96:	b98b      	cbnz	r3, 13ebc <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13e98:	4620      	mov	r0, r4
   13e9a:	f7ff ffe5 	bl	13e68 <pended_on_thread>
   13e9e:	4621      	mov	r1, r4
   13ea0:	f000 f822 	bl	13ee8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13ea4:	7b63      	ldrb	r3, [r4, #13]
   13ea6:	f023 0302 	bic.w	r3, r3, #2
   13eaa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   13eac:	2300      	movs	r3, #0
   13eae:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   13eb0:	f385 8811 	msr	BASEPRI, r5
   13eb4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13eb8:	2301      	movs	r3, #1
   13eba:	e7ec      	b.n	13e96 <z_unpend_thread_no_timeout+0x16>
}
   13ebc:	bd38      	pop	{r3, r4, r5, pc}

00013ebe <z_reschedule_irqlock>:
{
   13ebe:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13ec0:	4603      	mov	r3, r0
   13ec2:	b920      	cbnz	r0, 13ece <z_reschedule_irqlock+0x10>
   13ec4:	f3ef 8205 	mrs	r2, IPSR
   13ec8:	b942      	cbnz	r2, 13edc <z_reschedule_irqlock+0x1e>
   13eca:	2201      	movs	r2, #1
   13ecc:	e000      	b.n	13ed0 <z_reschedule_irqlock+0x12>
   13ece:	2200      	movs	r2, #0
	if (resched(key)) {
   13ed0:	b932      	cbnz	r2, 13ee0 <z_reschedule_irqlock+0x22>
   13ed2:	f383 8811 	msr	BASEPRI, r3
   13ed6:	f3bf 8f6f 	isb	sy
}
   13eda:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13edc:	2200      	movs	r2, #0
   13ede:	e7f7      	b.n	13ed0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   13ee0:	4618      	mov	r0, r3
   13ee2:	f7f0 fa6d 	bl	43c0 <arch_swap>
	return ret;
   13ee6:	e7f8      	b.n	13eda <z_reschedule_irqlock+0x1c>

00013ee8 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   13ee8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   13eea:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   13eec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   13eee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13ef0:	2300      	movs	r3, #0
   13ef2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   13ef4:	604b      	str	r3, [r1, #4]
}
   13ef6:	4770      	bx	lr

00013ef8 <z_unpend_thread>:
{
   13ef8:	b538      	push	{r3, r4, r5, lr}
   13efa:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   13efc:	2300      	movs	r3, #0
	__asm__ volatile(
   13efe:	f04f 0220 	mov.w	r2, #32
   13f02:	f3ef 8511 	mrs	r5, BASEPRI
   13f06:	f382 8812 	msr	BASEPRI_MAX, r2
   13f0a:	f3bf 8f6f 	isb	sy
   13f0e:	b98b      	cbnz	r3, 13f34 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13f10:	4620      	mov	r0, r4
   13f12:	f7ff ffa9 	bl	13e68 <pended_on_thread>
   13f16:	4621      	mov	r1, r4
   13f18:	f7ff ffe6 	bl	13ee8 <z_priq_dumb_remove>
   13f1c:	7b63      	ldrb	r3, [r4, #13]
   13f1e:	f023 0302 	bic.w	r3, r3, #2
   13f22:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   13f24:	2300      	movs	r3, #0
   13f26:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   13f28:	f385 8811 	msr	BASEPRI, r5
   13f2c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13f30:	2301      	movs	r3, #1
   13f32:	e7ec      	b.n	13f0e <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   13f34:	f104 0018 	add.w	r0, r4, #24
   13f38:	f000 f954 	bl	141e4 <z_abort_timeout>
}
   13f3c:	bd38      	pop	{r3, r4, r5, pc}

00013f3e <z_priq_dumb_best>:
{
   13f3e:	4603      	mov	r3, r0
	return list->head == list;
   13f40:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f42:	4283      	cmp	r3, r0
   13f44:	d000      	beq.n	13f48 <z_priq_dumb_best+0xa>
}
   13f46:	4770      	bx	lr
	struct k_thread *thread = NULL;
   13f48:	2000      	movs	r0, #0
	return thread;
   13f4a:	e7fc      	b.n	13f46 <z_priq_dumb_best+0x8>

00013f4c <z_ready_thread>:
{
   13f4c:	b538      	push	{r3, r4, r5, lr}
   13f4e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   13f50:	2300      	movs	r3, #0
	__asm__ volatile(
   13f52:	f04f 0220 	mov.w	r2, #32
   13f56:	f3ef 8511 	mrs	r5, BASEPRI
   13f5a:	f382 8812 	msr	BASEPRI_MAX, r2
   13f5e:	f3bf 8f6f 	isb	sy
   13f62:	e007      	b.n	13f74 <z_ready_thread+0x28>
			ready_thread(thread);
   13f64:	4620      	mov	r0, r4
   13f66:	f7fa fcf1 	bl	e94c <ready_thread>
	__asm__ volatile(
   13f6a:	f385 8811 	msr	BASEPRI, r5
   13f6e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13f72:	2301      	movs	r3, #1
   13f74:	b92b      	cbnz	r3, 13f82 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   13f76:	4620      	mov	r0, r4
   13f78:	f7ff ff74 	bl	13e64 <thread_active_elsewhere>
   13f7c:	2800      	cmp	r0, #0
   13f7e:	d1f4      	bne.n	13f6a <z_ready_thread+0x1e>
   13f80:	e7f0      	b.n	13f64 <z_ready_thread+0x18>
}
   13f82:	bd38      	pop	{r3, r4, r5, pc}

00013f84 <z_thread_timeout>:
{
   13f84:	b570      	push	{r4, r5, r6, lr}
   13f86:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   13f88:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   13f8c:	2300      	movs	r3, #0
	__asm__ volatile(
   13f8e:	f04f 0220 	mov.w	r2, #32
   13f92:	f3ef 8611 	mrs	r6, BASEPRI
   13f96:	f382 8812 	msr	BASEPRI_MAX, r2
   13f9a:	f3bf 8f6f 	isb	sy
   13f9e:	e019      	b.n	13fd4 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13fa0:	4628      	mov	r0, r5
   13fa2:	f7ff ff61 	bl	13e68 <pended_on_thread>
   13fa6:	4629      	mov	r1, r5
   13fa8:	f7ff ff9e 	bl	13ee8 <z_priq_dumb_remove>
   13fac:	7b6b      	ldrb	r3, [r5, #13]
   13fae:	f023 0302 	bic.w	r3, r3, #2
   13fb2:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   13fb4:	2300      	movs	r3, #0
   13fb6:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13fb8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   13fbc:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   13fc0:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   13fc4:	4628      	mov	r0, r5
   13fc6:	f7fa fcc1 	bl	e94c <ready_thread>
	__asm__ volatile(
   13fca:	f386 8811 	msr	BASEPRI, r6
   13fce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13fd2:	2301      	movs	r3, #1
   13fd4:	b94b      	cbnz	r3, 13fea <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   13fd6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   13fda:	f013 0f28 	tst.w	r3, #40	; 0x28
   13fde:	d1f4      	bne.n	13fca <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   13fe0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13fe4:	2b00      	cmp	r3, #0
   13fe6:	d1db      	bne.n	13fa0 <z_thread_timeout+0x1c>
   13fe8:	e7e6      	b.n	13fb8 <z_thread_timeout+0x34>
}
   13fea:	bd70      	pop	{r4, r5, r6, pc}

00013fec <add_to_waitq_locked>:
{
   13fec:	b570      	push	{r4, r5, r6, lr}
   13fee:	4605      	mov	r5, r0
   13ff0:	460e      	mov	r6, r1
	unready_thread(thread);
   13ff2:	f7fa fd09 	bl	ea08 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   13ff6:	7b6b      	ldrb	r3, [r5, #13]
   13ff8:	f043 0302 	orr.w	r3, r3, #2
   13ffc:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   13ffe:	b1b6      	cbz	r6, 1402e <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   14000:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   14002:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14004:	42a6      	cmp	r6, r4
   14006:	d019      	beq.n	1403c <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14008:	b164      	cbz	r4, 14024 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1400a:	4621      	mov	r1, r4
   1400c:	4628      	mov	r0, r5
   1400e:	f7ff ff2d 	bl	13e6c <z_sched_prio_cmp>
   14012:	2800      	cmp	r0, #0
   14014:	dc0c      	bgt.n	14030 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14016:	b12c      	cbz	r4, 14024 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   14018:	6873      	ldr	r3, [r6, #4]
   1401a:	429c      	cmp	r4, r3
   1401c:	d002      	beq.n	14024 <add_to_waitq_locked+0x38>
   1401e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14020:	2c00      	cmp	r4, #0
   14022:	d1f1      	bne.n	14008 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   14024:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   14026:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   14028:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1402a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1402c:	6075      	str	r5, [r6, #4]
}
   1402e:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   14030:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   14032:	606b      	str	r3, [r5, #4]
	node->next = successor;
   14034:	602c      	str	r4, [r5, #0]
	prev->next = node;
   14036:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   14038:	6065      	str	r5, [r4, #4]
}
   1403a:	e7f8      	b.n	1402e <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1403c:	2400      	movs	r4, #0
   1403e:	e7e3      	b.n	14008 <add_to_waitq_locked+0x1c>

00014040 <pend>:
{
   14040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14044:	4605      	mov	r5, r0
   14046:	460f      	mov	r7, r1
   14048:	4691      	mov	r9, r2
   1404a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   1404c:	2400      	movs	r4, #0
	__asm__ volatile(
   1404e:	f04f 0320 	mov.w	r3, #32
   14052:	f3ef 8611 	mrs	r6, BASEPRI
   14056:	f383 8812 	msr	BASEPRI_MAX, r3
   1405a:	f3bf 8f6f 	isb	sy
   1405e:	b94c      	cbnz	r4, 14074 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   14060:	4639      	mov	r1, r7
   14062:	4628      	mov	r0, r5
   14064:	f7ff ffc2 	bl	13fec <add_to_waitq_locked>
	__asm__ volatile(
   14068:	f386 8811 	msr	BASEPRI, r6
   1406c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14070:	2401      	movs	r4, #1
   14072:	e7f4      	b.n	1405e <pend+0x1e>
	add_thread_timeout(thread, timeout);
   14074:	464a      	mov	r2, r9
   14076:	4643      	mov	r3, r8
   14078:	4628      	mov	r0, r5
   1407a:	f7fa fb1b 	bl	e6b4 <add_thread_timeout>
}
   1407e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014082 <z_unpend1_no_timeout>:
{
   14082:	b570      	push	{r4, r5, r6, lr}
   14084:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   14086:	2300      	movs	r3, #0
	__asm__ volatile(
   14088:	f04f 0220 	mov.w	r2, #32
   1408c:	f3ef 8511 	mrs	r5, BASEPRI
   14090:	f382 8812 	msr	BASEPRI_MAX, r2
   14094:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   14098:	461c      	mov	r4, r3
   1409a:	e00f      	b.n	140bc <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1409c:	f7ff fee4 	bl	13e68 <pended_on_thread>
   140a0:	4621      	mov	r1, r4
   140a2:	f7ff ff21 	bl	13ee8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   140a6:	7b63      	ldrb	r3, [r4, #13]
   140a8:	f023 0302 	bic.w	r3, r3, #2
   140ac:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   140ae:	2300      	movs	r3, #0
   140b0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   140b2:	f385 8811 	msr	BASEPRI, r5
   140b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   140ba:	2301      	movs	r3, #1
   140bc:	b933      	cbnz	r3, 140cc <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   140be:	4630      	mov	r0, r6
   140c0:	f7ff ff3d 	bl	13f3e <z_priq_dumb_best>
		if (thread != NULL) {
   140c4:	4604      	mov	r4, r0
   140c6:	2800      	cmp	r0, #0
   140c8:	d1e8      	bne.n	1409c <z_unpend1_no_timeout+0x1a>
   140ca:	e7f2      	b.n	140b2 <z_unpend1_no_timeout+0x30>
}
   140cc:	4620      	mov	r0, r4
   140ce:	bd70      	pop	{r4, r5, r6, pc}

000140d0 <z_unpend_first_thread>:
{
   140d0:	b570      	push	{r4, r5, r6, lr}
   140d2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   140d4:	2300      	movs	r3, #0
	__asm__ volatile(
   140d6:	f04f 0220 	mov.w	r2, #32
   140da:	f3ef 8511 	mrs	r5, BASEPRI
   140de:	f382 8812 	msr	BASEPRI_MAX, r2
   140e2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   140e6:	461c      	mov	r4, r3
   140e8:	e013      	b.n	14112 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   140ea:	f7ff febd 	bl	13e68 <pended_on_thread>
   140ee:	4621      	mov	r1, r4
   140f0:	f7ff fefa 	bl	13ee8 <z_priq_dumb_remove>
   140f4:	7b63      	ldrb	r3, [r4, #13]
   140f6:	f023 0302 	bic.w	r3, r3, #2
   140fa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   140fc:	2300      	movs	r3, #0
   140fe:	60a3      	str	r3, [r4, #8]
   14100:	f104 0018 	add.w	r0, r4, #24
   14104:	f000 f86e 	bl	141e4 <z_abort_timeout>
	__asm__ volatile(
   14108:	f385 8811 	msr	BASEPRI, r5
   1410c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14110:	2301      	movs	r3, #1
   14112:	b933      	cbnz	r3, 14122 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   14114:	4630      	mov	r0, r6
   14116:	f7ff ff12 	bl	13f3e <z_priq_dumb_best>
		if (thread != NULL) {
   1411a:	4604      	mov	r4, r0
   1411c:	2800      	cmp	r0, #0
   1411e:	d1e4      	bne.n	140ea <z_unpend_first_thread+0x1a>
   14120:	e7f2      	b.n	14108 <z_unpend_first_thread+0x38>
}
   14122:	4620      	mov	r0, r4
   14124:	bd70      	pop	{r4, r5, r6, pc}

00014126 <z_unpend_all>:
{
   14126:	b538      	push	{r3, r4, r5, lr}
   14128:	4605      	mov	r5, r0
	int need_sched = 0;
   1412a:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1412c:	e006      	b.n	1413c <z_unpend_all+0x16>
		z_unpend_thread(thread);
   1412e:	4620      	mov	r0, r4
   14130:	f7ff fee2 	bl	13ef8 <z_unpend_thread>
		z_ready_thread(thread);
   14134:	4620      	mov	r0, r4
   14136:	f7ff ff09 	bl	13f4c <z_ready_thread>
		need_sched = 1;
   1413a:	2001      	movs	r0, #1
	return list->head == list;
   1413c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1413e:	42a5      	cmp	r5, r4
   14140:	d001      	beq.n	14146 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   14142:	2c00      	cmp	r4, #0
   14144:	d1f3      	bne.n	1412e <z_unpend_all+0x8>
}
   14146:	bd38      	pop	{r3, r4, r5, pc}

00014148 <z_sched_wake>:
{
   14148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1414c:	4606      	mov	r6, r0
   1414e:	4688      	mov	r8, r1
   14150:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   14152:	2300      	movs	r3, #0
	__asm__ volatile(
   14154:	f04f 0220 	mov.w	r2, #32
   14158:	f3ef 8511 	mrs	r5, BASEPRI
   1415c:	f382 8812 	msr	BASEPRI_MAX, r2
   14160:	f3bf 8f6f 	isb	sy
	bool ret = false;
   14164:	4699      	mov	r9, r3
   14166:	e01b      	b.n	141a0 <z_sched_wake+0x58>
   14168:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
   1416c:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1416e:	f7ff fe7b 	bl	13e68 <pended_on_thread>
   14172:	4621      	mov	r1, r4
   14174:	f7ff feb8 	bl	13ee8 <z_priq_dumb_remove>
   14178:	7b63      	ldrb	r3, [r4, #13]
   1417a:	f023 0302 	bic.w	r3, r3, #2
   1417e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   14180:	2300      	movs	r3, #0
   14182:	60a3      	str	r3, [r4, #8]
   14184:	f104 0018 	add.w	r0, r4, #24
   14188:	f000 f82c 	bl	141e4 <z_abort_timeout>
			ready_thread(thread);
   1418c:	4620      	mov	r0, r4
   1418e:	f7fa fbdd 	bl	e94c <ready_thread>
			ret = true;
   14192:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   14196:	f385 8811 	msr	BASEPRI, r5
   1419a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1419e:	2301      	movs	r3, #1
   141a0:	b933      	cbnz	r3, 141b0 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   141a2:	4630      	mov	r0, r6
   141a4:	f7ff fecb 	bl	13f3e <z_priq_dumb_best>
		if (thread != NULL) {
   141a8:	4604      	mov	r4, r0
   141aa:	2800      	cmp	r0, #0
   141ac:	d1dc      	bne.n	14168 <z_sched_wake+0x20>
   141ae:	e7f2      	b.n	14196 <z_sched_wake+0x4e>
}
   141b0:	4648      	mov	r0, r9
   141b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000141b6 <remove_timeout>:
{
   141b6:	b538      	push	{r3, r4, r5, lr}
   141b8:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   141ba:	f7fa fead 	bl	ef18 <next>
   141be:	b148      	cbz	r0, 141d4 <remove_timeout+0x1e>
   141c0:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   141c2:	6920      	ldr	r0, [r4, #16]
   141c4:	6965      	ldr	r5, [r4, #20]
   141c6:	6913      	ldr	r3, [r2, #16]
   141c8:	6951      	ldr	r1, [r2, #20]
   141ca:	181b      	adds	r3, r3, r0
   141cc:	eb45 0101 	adc.w	r1, r5, r1
   141d0:	6113      	str	r3, [r2, #16]
   141d2:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   141d4:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   141d6:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   141d8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   141da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   141dc:	2300      	movs	r3, #0
   141de:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   141e0:	6063      	str	r3, [r4, #4]
}
   141e2:	bd38      	pop	{r3, r4, r5, pc}

000141e4 <z_abort_timeout>:
{
   141e4:	b570      	push	{r4, r5, r6, lr}
   141e6:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   141e8:	2300      	movs	r3, #0
	__asm__ volatile(
   141ea:	f04f 0220 	mov.w	r2, #32
   141ee:	f3ef 8611 	mrs	r6, BASEPRI
   141f2:	f382 8812 	msr	BASEPRI_MAX, r2
   141f6:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   141fa:	f06f 0015 	mvn.w	r0, #21
   141fe:	e008      	b.n	14212 <z_abort_timeout+0x2e>
			remove_timeout(to);
   14200:	4620      	mov	r0, r4
   14202:	f7ff ffd8 	bl	141b6 <remove_timeout>
			ret = 0;
   14206:	4628      	mov	r0, r5
	__asm__ volatile(
   14208:	f386 8811 	msr	BASEPRI, r6
   1420c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   14210:	2301      	movs	r3, #1
   14212:	461d      	mov	r5, r3
   14214:	b91b      	cbnz	r3, 1421e <z_abort_timeout+0x3a>
	return node->next != NULL;
   14216:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   14218:	2b00      	cmp	r3, #0
   1421a:	d1f1      	bne.n	14200 <z_abort_timeout+0x1c>
   1421c:	e7f4      	b.n	14208 <z_abort_timeout+0x24>
}
   1421e:	bd70      	pop	{r4, r5, r6, pc}

00014220 <z_get_next_timeout_expiry>:
{
   14220:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   14222:	2300      	movs	r3, #0
	__asm__ volatile(
   14224:	f04f 0220 	mov.w	r2, #32
   14228:	f3ef 8411 	mrs	r4, BASEPRI
   1422c:	f382 8812 	msr	BASEPRI_MAX, r2
   14230:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   14234:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   14238:	b93b      	cbnz	r3, 1424a <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   1423a:	f7fa fe85 	bl	ef48 <next_timeout>
	__asm__ volatile(
   1423e:	f384 8811 	msr	BASEPRI, r4
   14242:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   14246:	2301      	movs	r3, #1
   14248:	e7f6      	b.n	14238 <z_get_next_timeout_expiry+0x18>
}
   1424a:	bd10      	pop	{r4, pc}

0001424c <z_set_timeout_expiry>:
{
   1424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1424e:	4606      	mov	r6, r0
   14250:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   14252:	2300      	movs	r3, #0
	__asm__ volatile(
   14254:	f04f 0220 	mov.w	r2, #32
   14258:	f3ef 8511 	mrs	r5, BASEPRI
   1425c:	f382 8812 	msr	BASEPRI_MAX, r2
   14260:	f3bf 8f6f 	isb	sy
   14264:	e00a      	b.n	1427c <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   14266:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   14268:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1426c:	2801      	cmp	r0, #1
   1426e:	dd00      	ble.n	14272 <z_set_timeout_expiry+0x26>
   14270:	b97c      	cbnz	r4, 14292 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   14272:	f385 8811 	msr	BASEPRI, r5
   14276:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1427a:	2301      	movs	r3, #1
   1427c:	461c      	mov	r4, r3
   1427e:	b97b      	cbnz	r3, 142a0 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   14280:	f7fa fe62 	bl	ef48 <next_timeout>
			      || (ticks <= next_to);
   14284:	f1b0 3fff 	cmp.w	r0, #4294967295
   14288:	d0ed      	beq.n	14266 <z_set_timeout_expiry+0x1a>
   1428a:	42b0      	cmp	r0, r6
   1428c:	dbec      	blt.n	14268 <z_set_timeout_expiry+0x1c>
   1428e:	2401      	movs	r4, #1
   14290:	e7ea      	b.n	14268 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   14292:	4639      	mov	r1, r7
   14294:	42b0      	cmp	r0, r6
   14296:	bfa8      	it	ge
   14298:	4630      	movge	r0, r6
   1429a:	f7f4 fb03 	bl	88a4 <sys_clock_set_timeout>
   1429e:	e7e8      	b.n	14272 <z_set_timeout_expiry+0x26>
}
   142a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000142a2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   142a2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   142a4:	f7fa ff82 	bl	f1ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   142a8:	bd08      	pop	{r3, pc}

000142aa <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   142aa:	b900      	cbnz	r0, 142ae <z_impl_k_busy_wait+0x4>
   142ac:	4770      	bx	lr
{
   142ae:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   142b0:	f7f0 ff08 	bl	50c4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   142b4:	bd08      	pop	{r3, pc}

000142b6 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   142b6:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   142b8:	f1b1 3fff 	cmp.w	r1, #4294967295
   142bc:	bf08      	it	eq
   142be:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   142c2:	d024      	beq.n	1430e <sys_clock_timeout_end_calc+0x58>
   142c4:	4604      	mov	r4, r0
   142c6:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   142c8:	ea54 0105 	orrs.w	r1, r4, r5
   142cc:	d00d      	beq.n	142ea <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   142ce:	f06f 0101 	mvn.w	r1, #1
   142d2:	1a0a      	subs	r2, r1, r0
   142d4:	f04f 31ff 	mov.w	r1, #4294967295
   142d8:	eb61 0305 	sbc.w	r3, r1, r5
   142dc:	2a00      	cmp	r2, #0
   142de:	f173 0100 	sbcs.w	r1, r3, #0
   142e2:	db05      	blt.n	142f0 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   142e4:	4610      	mov	r0, r2
   142e6:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   142e8:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   142ea:	f7fa ff5f 	bl	f1ac <sys_clock_tick_get>
   142ee:	e7fb      	b.n	142e8 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   142f0:	f7fa ff5c 	bl	f1ac <sys_clock_tick_get>
   142f4:	4623      	mov	r3, r4
   142f6:	462a      	mov	r2, r5
   142f8:	2c01      	cmp	r4, #1
   142fa:	f175 0400 	sbcs.w	r4, r5, #0
   142fe:	db03      	blt.n	14308 <sys_clock_timeout_end_calc+0x52>
   14300:	18c0      	adds	r0, r0, r3
   14302:	eb42 0101 	adc.w	r1, r2, r1
   14306:	e7ef      	b.n	142e8 <sys_clock_timeout_end_calc+0x32>
   14308:	2301      	movs	r3, #1
   1430a:	2200      	movs	r2, #0
   1430c:	e7f8      	b.n	14300 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   1430e:	f04f 30ff 	mov.w	r0, #4294967295
   14312:	4601      	mov	r1, r0
   14314:	e7e8      	b.n	142e8 <sys_clock_timeout_end_calc+0x32>

00014316 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   14316:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   14318:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   1431a:	2300      	movs	r3, #0
   1431c:	6303      	str	r3, [r0, #48]	; 0x30
   1431e:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   14322:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   14324:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   14326:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   14328:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   1432a:	6343      	str	r3, [r0, #52]	; 0x34
}
   1432c:	4770      	bx	lr

0001432e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1432e:	b510      	push	{r4, lr}
   14330:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   14332:	f7ff ff57 	bl	141e4 <z_abort_timeout>

	if (inactive) {
   14336:	b9a0      	cbnz	r0, 14362 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   14338:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1433a:	b10b      	cbz	r3, 14340 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1433c:	4620      	mov	r0, r4
   1433e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   14340:	f104 0018 	add.w	r0, r4, #24
   14344:	f7ff fe9d 	bl	14082 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   14348:	b158      	cbz	r0, 14362 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   1434a:	f7ff fdff 	bl	13f4c <z_ready_thread>
	__asm__ volatile(
   1434e:	f04f 0320 	mov.w	r3, #32
   14352:	f3ef 8011 	mrs	r0, BASEPRI
   14356:	f383 8812 	msr	BASEPRI_MAX, r3
   1435a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1435e:	f7ff fdae 	bl	13ebe <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   14362:	bd10      	pop	{r4, pc}

00014364 <z_heap_aligned_alloc>:
{
   14364:	b5d0      	push	{r4, r6, r7, lr}
   14366:	b082      	sub	sp, #8
   14368:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1436a:	2000      	movs	r0, #0
   1436c:	2304      	movs	r3, #4
   1436e:	18d2      	adds	r2, r2, r3
   14370:	d20e      	bcs.n	14390 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   14372:	b978      	cbnz	r0, 14394 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   14374:	2600      	movs	r6, #0
   14376:	2700      	movs	r7, #0
   14378:	e9cd 6700 	strd	r6, r7, [sp]
   1437c:	f041 0104 	orr.w	r1, r1, #4
   14380:	4620      	mov	r0, r4
   14382:	f7ff fb73 	bl	13a6c <k_heap_aligned_alloc>
	if (mem == NULL) {
   14386:	b108      	cbz	r0, 1438c <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   14388:	f840 4b04 	str.w	r4, [r0], #4
}
   1438c:	b002      	add	sp, #8
   1438e:	bdd0      	pop	{r4, r6, r7, pc}
   14390:	2001      	movs	r0, #1
   14392:	e7ee      	b.n	14372 <z_heap_aligned_alloc+0xe>
		return NULL;
   14394:	2000      	movs	r0, #0
   14396:	e7f9      	b.n	1438c <z_heap_aligned_alloc+0x28>

00014398 <k_free>:
	if (ptr != NULL) {
   14398:	b130      	cbz	r0, 143a8 <k_free+0x10>
{
   1439a:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   1439c:	1f01      	subs	r1, r0, #4
   1439e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   143a2:	f7ff fbb9 	bl	13b18 <k_heap_free>
}
   143a6:	bd08      	pop	{r3, pc}
   143a8:	4770      	bx	lr

000143aa <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   143aa:	4770      	bx	lr

000143ac <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   143ac:	f7f4 bb52 	b.w	8a54 <SystemInit>
